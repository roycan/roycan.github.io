{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my site I am Roy Vincent Luna Canseco and this is where I document my different learning projects. site specs This is a test site hosted on Github Pages . For full documentation visit mkdocs.org .","title":"Home"},{"location":"#welcome-to-my-site","text":"I am Roy Vincent Luna Canseco and this is where I document my different learning projects.","title":"Welcome to my site"},{"location":"#site-specs","text":"This is a test site hosted on Github Pages . For full documentation visit mkdocs.org .","title":"site specs"},{"location":"%28Interim%29%20Campus%20IT%20Manager/","text":"(Interim) Campus IT Manager requesting name to be Interim Campus IT Manager reason is because it's ideally a full-time position for a campus as big as main reason is because it's ideally done by someone with more training/ certifications Software for the lab NetBeans IntelliJ Community Edition Code Blocks Scope requesting scope to include presence to meetings directly impacting campus IT to include liason duties to convey management needs and MIS constraints for working out solutions to include documentation of single page processes for important or repeated activities to do consultative management in light of the interim nature of the requested appointment Support for MIS/ IT Unit requesting support for basic IT certification for all IT/ MIS personnel (internationally recognized, online training and certification) requesting a PD be organized for faculty/and admin staff regarding Basic IT Troubleshooting once a year slated for the 1st sem reason is to allow interested faculty to help out in maintaining our IT infrastructure requesting a PD be organized for faculty regarding Maximizing IT Services once a year slated for the 2nd sem reason is to boost awareness regarding IT services available to the faculty setup an official group chat for IT friends where people can post IT concerns and updates support for advanced training as recommended by IQA OFI's or as projected to proactively answer IT-related risks Support for the (Interim) IT Manager requesting 9 units requesting to be released from IQA auditing duties requesting to be maintained as BAC-TWG for IT-related matters requesting support for conducting an IT audit requesting support for determining and maintaining an inventory may I request to be able to consult people in UP Diliman every so often to pull in best practices? Clarifications where in the org chart does a Campus IT Manager sit? who shall I answer to? who answers to me? what shall I be accountable/ responsible for? are there any specific deliverables at this time? i'll deliver standard IT documentary deliverables eitherway. :) are there specific people to consult or inform? can i request a table and chair in the MIS room? can i request for a small petty cash fund for urgent IT consumables is it possible to have another person for the MIS for the first purpose of IT audit and inventory. secretarial skills would work.","title":"(Interim) Campus IT Manager"},{"location":"%28Interim%29%20Campus%20IT%20Manager/#interim-campus-it-manager","text":"requesting name to be Interim Campus IT Manager reason is because it's ideally a full-time position for a campus as big as main reason is because it's ideally done by someone with more training/ certifications","title":"(Interim) Campus IT Manager"},{"location":"%28Interim%29%20Campus%20IT%20Manager/#software-for-the-lab","text":"NetBeans IntelliJ Community Edition Code Blocks","title":"Software for the lab"},{"location":"%28Interim%29%20Campus%20IT%20Manager/#scope","text":"requesting scope to include presence to meetings directly impacting campus IT to include liason duties to convey management needs and MIS constraints for working out solutions to include documentation of single page processes for important or repeated activities to do consultative management in light of the interim nature of the requested appointment","title":"Scope"},{"location":"%28Interim%29%20Campus%20IT%20Manager/#support-for-mis-it-unit","text":"requesting support for basic IT certification for all IT/ MIS personnel (internationally recognized, online training and certification) requesting a PD be organized for faculty/and admin staff regarding Basic IT Troubleshooting once a year slated for the 1st sem reason is to allow interested faculty to help out in maintaining our IT infrastructure requesting a PD be organized for faculty regarding Maximizing IT Services once a year slated for the 2nd sem reason is to boost awareness regarding IT services available to the faculty setup an official group chat for IT friends where people can post IT concerns and updates support for advanced training as recommended by IQA OFI's or as projected to proactively answer IT-related risks","title":"Support for MIS/ IT Unit"},{"location":"%28Interim%29%20Campus%20IT%20Manager/#support-for-the-interim-it-manager","text":"requesting 9 units requesting to be released from IQA auditing duties requesting to be maintained as BAC-TWG for IT-related matters requesting support for conducting an IT audit requesting support for determining and maintaining an inventory may I request to be able to consult people in UP Diliman every so often to pull in best practices?","title":"Support for the (Interim) IT Manager"},{"location":"%28Interim%29%20Campus%20IT%20Manager/#clarifications","text":"where in the org chart does a Campus IT Manager sit? who shall I answer to? who answers to me? what shall I be accountable/ responsible for? are there any specific deliverables at this time? i'll deliver standard IT documentary deliverables eitherway. :) are there specific people to consult or inform? can i request a table and chair in the MIS room? can i request for a small petty cash fund for urgent IT consumables is it possible to have another person for the MIS for the first purpose of IT audit and inventory. secretarial skills would work.","title":"Clarifications"},{"location":"2014-01-15-maple-review/","text":"maple review quick reminders for relearning maple commands. do simple arithmetic (pemdas) visit help for a quick run through ctrl space to produce special char (e.g. pi, integral sign...) right button to get out of ^ a video that helps : http://www.maplesoft.com/support/training/videos/quickstart/MapleQuickStart.aspx use ctrl-L to refer back to previous results print and go over this: http://www.phys.unsw.edu.au/2nd_and_3rd_syllabi/mapleprimer.pdf","title":" Quickly relearning Maple "},{"location":"2014-01-15-maple-review/#maple-review","text":"quick reminders for relearning maple commands. do simple arithmetic (pemdas) visit help for a quick run through ctrl space to produce special char (e.g. pi, integral sign...) right button to get out of ^ a video that helps : http://www.maplesoft.com/support/training/videos/quickstart/MapleQuickStart.aspx use ctrl-L to refer back to previous results print and go over this: http://www.phys.unsw.edu.au/2nd_and_3rd_syllabi/mapleprimer.pdf","title":"maple review"},{"location":"2014-03-03-joomla-backup/","text":"MAKING A BACKUP/ TEST SITE FOR (e.g. JOBSANNEX.COM) Objectives: make a production site out of the finalized development site. Turn the development site into a testing site make the old website into an archived website steps: Copy the joomla files into the production folder using the host's (e.g. fatcow) filemanager Try opening the website from the new folder to see if the files work Create a new database using the name of the new folder Export the contents of the old database and download as a zip file and unzip Import the contents as an sql file Update db detials in the configuration.php file in the joomla root directory of the production site Check the websites if they work Create a subdomain for the old website Redirect the URL to the new production site folder afterwards: check that the old version 1.7 still works. the website is viewable and navigatable the control dashboard login works changes made are saved check that the production site works the website is viewable and navigatable the control dashboard login works changes made are saved check that the new testing site works the website is viewable and navigatable the control dashboard login works changes made are saved make sure that the changes in the test site does not affect the production site create and replace the old zip archive files in the fatcow host remove unused subdomains.","title":"Backing up a Joomla Site"},{"location":"2014-03-03-joomla-backup/#objectives","text":"make a production site out of the finalized development site. Turn the development site into a testing site make the old website into an archived website","title":"Objectives:"},{"location":"2014-03-03-joomla-backup/#steps","text":"Copy the joomla files into the production folder using the host's (e.g. fatcow) filemanager Try opening the website from the new folder to see if the files work Create a new database using the name of the new folder Export the contents of the old database and download as a zip file and unzip Import the contents as an sql file Update db detials in the configuration.php file in the joomla root directory of the production site Check the websites if they work Create a subdomain for the old website Redirect the URL to the new production site folder","title":"steps:"},{"location":"2014-03-03-joomla-backup/#afterwards","text":"check that the old version 1.7 still works. the website is viewable and navigatable the control dashboard login works changes made are saved check that the production site works the website is viewable and navigatable the control dashboard login works changes made are saved check that the new testing site works the website is viewable and navigatable the control dashboard login works changes made are saved make sure that the changes in the test site does not affect the production site create and replace the old zip archive files in the fatcow host remove unused subdomains.","title":"afterwards:"},{"location":"2018-01-IPSE-syllabus/","text":"Course Syllabus : IPSE v2 - roy.canseco@ieee.org CS 173-IPSE 2nd Semester 2017-18 Course Description This is an elective course for discussing and experiencing Industrial Practices in Software Engineering (IPSE). There is emphasis on working on existing software code bases in a team context. A secondary emphasis is given to automated testing and continuous integration. Prerequisite: 3rd year standing or Consent of Instructor (COI) Credits: 3 units Meeting Type: Lecture Course Objectives At the end of the course, the student should be able to: Differentiate between the programming practices and emphases of Industry against those of Academic Institutions and discuss the conditions that promote such differences. Cite at least three important reasons for having systematic code testing strategies in place, explain why Industry is partial to automated testing methods, and discuss possible reasons why Academe leans against requiring automated tests in school programming projects. Experience being in a team that uses Test Driven Development (TDD) and sets up Continuous Integration (CI) for a software project and be able to outline steps in setting up CI and using TDD. Course Requirements Topic Skill Assessment Percentage Project Base Code (code review) Git repo submission 10 % Feature Improvements (team software development) Feature Demonstration 10% Test Cases (analysis and design) Midsem Presentation 20% Automated Testing (test environment setup) Red to Green Demonstration 30% Continuous Integration (deployment and build pipeline) FInal Presentation 30% Expanded Course Outline Project Code Base Students obtain existing code bases from other courses to use as the existing code base Nominated code bases are evaluated for possible use in the course according to a criteria 1. non-familiarity: most if not all of the students of the team should not have been a part of the creation of the code base 2. complexity: the code base should be complex enough to warrant a team (3-8) members. Improvements A list of New Features for the code base is brain stormed The Prof. chooses several to make the degree of difficulty more or less fair among the teams Tests Unit tests are formulated for all computing functions. Integration tests are formulated for all core features. Test Automation A testing framework is chosen UI testing is explored Continuous Integration A test suite of 30-100 tests is selected to be run at every build Development is continued with CI and the project health is reported along with CI metrics at every meeting after until Final project presentation. References Kent Beck, 2002, Test-Driven Development by Example, Three Rivers Institute John Ferguson Smart, 2011, Jenkins the Definitive Guide - Continuous Integration for the Masses, O'Reilly Media, CA","title":"2018 01 IPSE syllabus"},{"location":"2018-01-IPSE-syllabus/#cs-173-ipse-2nd-semester-2017-18","text":"","title":"CS 173-IPSE  2nd Semester 2017-18"},{"location":"2018-01-IPSE-syllabus/#course-description","text":"This is an elective course for discussing and experiencing Industrial Practices in Software Engineering (IPSE). There is emphasis on working on existing software code bases in a team context. A secondary emphasis is given to automated testing and continuous integration.","title":"Course Description"},{"location":"2018-01-IPSE-syllabus/#prerequisite-3rd-year-standing-or-consent-of-instructor-coi","text":"","title":"Prerequisite:  3rd year standing or Consent of Instructor (COI)"},{"location":"2018-01-IPSE-syllabus/#credits-3-units","text":"","title":"Credits: 3 units"},{"location":"2018-01-IPSE-syllabus/#meeting-type-lecture","text":"","title":"Meeting Type: Lecture"},{"location":"2018-01-IPSE-syllabus/#course-objectives","text":"At the end of the course, the student should be able to: Differentiate between the programming practices and emphases of Industry against those of Academic Institutions and discuss the conditions that promote such differences. Cite at least three important reasons for having systematic code testing strategies in place, explain why Industry is partial to automated testing methods, and discuss possible reasons why Academe leans against requiring automated tests in school programming projects. Experience being in a team that uses Test Driven Development (TDD) and sets up Continuous Integration (CI) for a software project and be able to outline steps in setting up CI and using TDD.","title":"Course Objectives"},{"location":"2018-01-IPSE-syllabus/#course-requirements","text":"Topic Skill Assessment Percentage Project Base Code (code review) Git repo submission 10 % Feature Improvements (team software development) Feature Demonstration 10% Test Cases (analysis and design) Midsem Presentation 20% Automated Testing (test environment setup) Red to Green Demonstration 30% Continuous Integration (deployment and build pipeline) FInal Presentation 30%","title":"Course Requirements"},{"location":"2018-01-IPSE-syllabus/#expanded-course-outline","text":"Project Code Base Students obtain existing code bases from other courses to use as the existing code base Nominated code bases are evaluated for possible use in the course according to a criteria 1. non-familiarity: most if not all of the students of the team should not have been a part of the creation of the code base 2. complexity: the code base should be complex enough to warrant a team (3-8) members. Improvements A list of New Features for the code base is brain stormed The Prof. chooses several to make the degree of difficulty more or less fair among the teams Tests Unit tests are formulated for all computing functions. Integration tests are formulated for all core features. Test Automation A testing framework is chosen UI testing is explored Continuous Integration A test suite of 30-100 tests is selected to be run at every build Development is continued with CI and the project health is reported along with CI metrics at every meeting after until Final project presentation.","title":"Expanded Course Outline"},{"location":"2018-01-IPSE-syllabus/#references","text":"Kent Beck, 2002, Test-Driven Development by Example, Three Rivers Institute John Ferguson Smart, 2011, Jenkins the Definitive Guide - Continuous Integration for the Masses, O'Reilly Media, CA","title":"References"},{"location":"2018-07-07-phd-hunt/","text":"I'm looking for my PhD abroad. I now am confident in what I can offer and do. More importantly, I think I get how much I don't know and can't yet do. I believe in the Lord and I know he has plans for me. I feel it's scary leaving the only life I've known for at least a couple of years. Pero kaya namin ni Lord 'to. I am learning new skills too. My decision to go Software Engineering has tuned my senses to the various ways that I am to manage software development. I know I'm learning important things from being with everyone here at UP. I want to make those count. There's not so many things that I find important in life, but in those things, I'll fight to make each day count. That said, by preparing some things from my end, I'll be able to take the most advantage of the opportunities before me. Also, by taking care of my body, I'll be able to perform at my peak. I've seen the faculty at the Hong Kong University of Science and Technology. They look fit. It is possible. It is possible for me too. Right now, I'm doing a meeting with the Lord. Ako na sa minutes... hehehe. We're looking for the Universities and Professors to get in touch with. filter universities rank universities send informal inquiries send formal application packup and go To this end, I plan to populate a gdoc that I can share to family and friends as I go through this journey. This ends day 1 of the search. There's hope and some sort of a plan. :)","title":"To PhD Abroad I Go"},{"location":"2018-07-08-EUSE-seminar/","text":"February 18 \u2013 23 , 2007, Dagstuhl Seminar 07081 Organizers: Margaret M. Burnett (Oregon State University, US) Gregor Engels (Universit\u00e4t Paderborn, DE) Brad A. Myers (Carnegie Mellon University, US) Gregg Rothermel (University of Nebraska \u2013 Lincoln, US) Quoted Content: The number of end users creating software is far larger than the number of professional programmers. These end users are using various languages and programming systems to create software in forms such as: spreadsheets, dynamic web applications, and scientific simulations. This software needs to be sufficiently dependable, but substantial evidence suggests that it is not . Solving these problems involves not just software engineering issues, but also several challenges related to the users that the end user software engineering intends to benefit. End users have very different training and background, and face different motivations and work constraints, than professional programmers. They are not likely to know about such things as: formal development processes, system models, language design characteristics, quality control mechanisms, or test adequacy criteria. These challenges require collaborations by teams of researchers from various computer science subfields, including specialists in: end-user-programming (EUP) and end-user development (EUD), researchers expert in software engineering methodologies and programming language design, human-computer interaction experts focusing on end-user programming, and empiricists who can evaluate emerging results and help understand fundamental issues in supporting end-user problem solving. Summary In summary, here are my take-aways from the seminar Classification Sw-engineering Programming Languages Human-computer Interaction Empirical Studies Keywords End-user software engineering End-user programming","title":"End-User Software Engineering"},{"location":"2018-07-08-EUSE-seminar/#organizers","text":"Margaret M. Burnett (Oregon State University, US) Gregor Engels (Universit\u00e4t Paderborn, DE) Brad A. Myers (Carnegie Mellon University, US) Gregg Rothermel (University of Nebraska \u2013 Lincoln, US)","title":"Organizers:"},{"location":"2018-07-08-EUSE-seminar/#quoted-content","text":"The number of end users creating software is far larger than the number of professional programmers. These end users are using various languages and programming systems to create software in forms such as: spreadsheets, dynamic web applications, and scientific simulations. This software needs to be sufficiently dependable, but substantial evidence suggests that it is not . Solving these problems involves not just software engineering issues, but also several challenges related to the users that the end user software engineering intends to benefit. End users have very different training and background, and face different motivations and work constraints, than professional programmers. They are not likely to know about such things as: formal development processes, system models, language design characteristics, quality control mechanisms, or test adequacy criteria. These challenges require collaborations by teams of researchers from various computer science subfields, including specialists in: end-user-programming (EUP) and end-user development (EUD), researchers expert in software engineering methodologies and programming language design, human-computer interaction experts focusing on end-user programming, and empiricists who can evaluate emerging results and help understand fundamental issues in supporting end-user problem solving.","title":"Quoted Content:"},{"location":"2018-07-08-EUSE-seminar/#summary","text":"In summary, here are my take-aways from the seminar","title":"Summary"},{"location":"2018-07-08-EUSE-seminar/#classification","text":"Sw-engineering Programming Languages Human-computer Interaction Empirical Studies","title":"Classification"},{"location":"2018-07-08-EUSE-seminar/#keywords","text":"End-user software engineering End-user programming","title":"Keywords"},{"location":"2018-07-08-phd-hunt/","text":"I think I'm done looking at the aggregated PhD scholarships for Computer Science. Only 1 seriously popped up for me. University of Technology Sidney (UTS). What do I need to send an email? * updated CV * key questions * international applications * funding eligibility * *plan of research Note on the plan of research. This is going for what I want. Then I will go through my weak-ties and see where that brings me. Of course I will be nice and courteous and helpful to others when I can. :) Plan A would be to apply somewhere with a grind schedule and just stick with the program. Applying myself to what the boss or supervisor says. I rejected it because it didn't have the growth environment that I wanted. Plan B was to stick to UP. That is now out of the question, due to the choices I made to pursue things that were more important to me and the environment of confusion that I was in with regard to publishing papers in a topic that I didn't feel for. I like the technique. But there weren't support for that in the scale that I needed. I loved the environment though. Plan C, for Canseco.... :D Plan is going for what I really want. I might not know how to get there right now. That's fine. I know what I want, what I love, what I feel passionate about. The Lord is giving me ideas for heaven as to what I could do about it. At every corner, I am being questioned if I really want it. I do really want it. I am it. I resonate purpose with it. I live more strongly doing it. Plan C is End-User Development (EUD) Classification of EUD Sw-engineering Programming Languages Human-computer Interaction Empirical Studies EUD related Keywords End-user software engineering End-user programming There are two basic reasons why EUD has become popular. 1. One is because organizations are facing delays on projects and using EUD can effectively cut the time of completion on a project. 2. The second reason is that software tools are more powerful and easier to use now more than ever. Lessons learned from EUD solutions can significantly influence * the software life cycles for commercial software products, * in-house intranet/extranet developments and * enterprise application deployments. London PhD Opportunity There's an opportunity for a PhD in Machine Learning for Automated Software Engineering in London, Queen Mary University of London , School of Electronic Engineering and Computer Science. I think I can do this. But it's a B goal, not a C goal. I don't see how mastering it helps my country after. It's cool, but I don't feel passion for it. There's a better place in London: University of Cambridge . The Department of Computer Science and Technology there is part of the EUSES Consortium. Target advisers: Margaret Burnett Christopher Scaffidi However they are from the US and I am trying to avoid the US at the moment. I have been looking at other possible advisers. The weakness is that their Universities are actually lower in rank than UP. However, I am quite confident that their software engineering lab is stronger than UPD's currently. hehehe Summary In summary, I am currently find the following Universities very interesting: University of Technology Sidney (UTS) Queen Mary University of London University of Cambridge Oregon State Univtersity","title":"My PhD Hunt  (day 2)"},{"location":"2018-07-08-phd-hunt/#classification-of-eud","text":"Sw-engineering Programming Languages Human-computer Interaction Empirical Studies","title":"Classification of EUD"},{"location":"2018-07-08-phd-hunt/#eud-related-keywords","text":"End-user software engineering End-user programming There are two basic reasons why EUD has become popular. 1. One is because organizations are facing delays on projects and using EUD can effectively cut the time of completion on a project. 2. The second reason is that software tools are more powerful and easier to use now more than ever. Lessons learned from EUD solutions can significantly influence * the software life cycles for commercial software products, * in-house intranet/extranet developments and * enterprise application deployments.","title":"EUD related Keywords"},{"location":"2018-07-08-phd-hunt/#london-phd-opportunity","text":"There's an opportunity for a PhD in Machine Learning for Automated Software Engineering in London, Queen Mary University of London , School of Electronic Engineering and Computer Science. I think I can do this. But it's a B goal, not a C goal. I don't see how mastering it helps my country after. It's cool, but I don't feel passion for it. There's a better place in London: University of Cambridge . The Department of Computer Science and Technology there is part of the EUSES Consortium.","title":"London PhD Opportunity"},{"location":"2018-07-08-phd-hunt/#target-advisers","text":"Margaret Burnett Christopher Scaffidi However they are from the US and I am trying to avoid the US at the moment. I have been looking at other possible advisers. The weakness is that their Universities are actually lower in rank than UP. However, I am quite confident that their software engineering lab is stronger than UPD's currently. hehehe","title":"Target advisers:"},{"location":"2018-07-08-phd-hunt/#summary","text":"In summary, I am currently find the following Universities very interesting: University of Technology Sidney (UTS) Queen Mary University of London University of Cambridge Oregon State Univtersity","title":"Summary"},{"location":"2018-07-09-phd-hunt/","text":"day 3 Queensland University of Technology This is a prime candidate! https://www.topuniversities.com/universities/queensland-university-technology-qut https://www.qut.edu.au/science-engineering/our-schools/school-of-information-systems/service-science https://www.qut.edu.au/science-engineering/our-schools/school-of-information-systems/information-science https://www.qut.edu.au/science-engineering/our-schools/school-of-electrical-engineering-and-computer-science/computer-human-interaction Western Sydney University I have another prime target! https://www.westernsydney.edu.au/scem/school_of_computing_engineering_and_mathematics/research This is super prime because I found a paper that I actually want to extend and expand to include our local context. https://link-springer-com.ezproxy.engglib.upd.edu.ph/content/pdf/10.1007%2F11531371_62.pdf Example Project overview and Proposal I definitely need to write about what I want to do. This is a very good template that will help me quickly draft my proposal executive summary. http://www.cs.cmu.edu/~NatProg/papers/projectoverviewTR.pdf Universiti Kebangsaan Malaysia This is a powerful place for the software engineering I like to do. I didn't see UED, but I had spent little time looking W: it's in Malaysia S: it has agile and soft dev research that I understand Summary I found the Western Sydney University as my current top pick. :) My second pick is the Queensland University of Technology I think I better create a project proposal for this research project. I got a template! :)","title":"My PhD Hunt  (day 3)"},{"location":"2018-07-09-phd-hunt/#day-3","text":"","title":"day 3"},{"location":"2018-07-09-phd-hunt/#queensland-university-of-technology","text":"This is a prime candidate! https://www.topuniversities.com/universities/queensland-university-technology-qut https://www.qut.edu.au/science-engineering/our-schools/school-of-information-systems/service-science https://www.qut.edu.au/science-engineering/our-schools/school-of-information-systems/information-science https://www.qut.edu.au/science-engineering/our-schools/school-of-electrical-engineering-and-computer-science/computer-human-interaction","title":"Queensland University of Technology"},{"location":"2018-07-09-phd-hunt/#western-sydney-university","text":"I have another prime target! https://www.westernsydney.edu.au/scem/school_of_computing_engineering_and_mathematics/research This is super prime because I found a paper that I actually want to extend and expand to include our local context. https://link-springer-com.ezproxy.engglib.upd.edu.ph/content/pdf/10.1007%2F11531371_62.pdf","title":"Western Sydney University"},{"location":"2018-07-09-phd-hunt/#example-project-overview-and-proposal","text":"I definitely need to write about what I want to do. This is a very good template that will help me quickly draft my proposal executive summary. http://www.cs.cmu.edu/~NatProg/papers/projectoverviewTR.pdf","title":"Example Project overview and Proposal"},{"location":"2018-07-09-phd-hunt/#universiti-kebangsaan-malaysia","text":"This is a powerful place for the software engineering I like to do. I didn't see UED, but I had spent little time looking W: it's in Malaysia S: it has agile and soft dev research that I understand","title":"Universiti Kebangsaan Malaysia"},{"location":"2018-07-09-phd-hunt/#summary","text":"I found the Western Sydney University as my current top pick. :) My second pick is the Queensland University of Technology I think I better create a project proposal for this research project. I got a template! :)","title":"Summary"},{"location":"2018-07-10-phd-thoughts/","text":"There was a delay in me writing this, but that's fine. I had a good drive with Sir Gil and we were able to imagine my work as some way of getting the information from the user in almost natural language and having the machine convert it to some useful code. Later that evening, I was talking with Monette about it and I saw the possibility of having machine learning in rails to inform the system of the priority parts for automation improvement. In the next morning I talked with Dad and we put things together to see that the system will be working on three things: * data entry * DB data viewing * calculators with values coming from and being saved in the database All these would be forming small and useful programs for the End User.","title":"My PhD Hunt  (day 4)"},{"location":"2018-07-11-phd-australia/","text":"(day 5) The list of good CS Universities in Australia are as follows: 1. University of New South Wales- Sydney (UNSW) 2. University of Newcastle 3. University of Sydney 4. RMIT University 5. ~~Edith Cowan University~~ 6. The University of Queensland 7. University of Western Australia 8. University of Technology Sydney 9. Curtin University 10. Queensland University of Technolgy 11. Deakin University 12. University of South Australia 13. University of Wollongong 14. Australian National University 15. Western Sydney University 16. University of Canberra 17. Murdoch University 18. Central Queensland University 19. The University of Melbourne 20. Monash University 21. University of Tasmania 22. Swinburne University of Technology 23. La Trobe University 24. Victoria University 25. University of New England Australia 26. Carnegie Mellon University Australia 27. Australian Catholic University 28. Federation University, Australia","title":"Australian Uni's w/ good CS PhD Programs "},{"location":"2018-07-11-phd-australia/#day-5","text":"The list of good CS Universities in Australia are as follows: 1. University of New South Wales- Sydney (UNSW) 2. University of Newcastle 3. University of Sydney 4. RMIT University 5. ~~Edith Cowan University~~ 6. The University of Queensland 7. University of Western Australia 8. University of Technology Sydney 9. Curtin University 10. Queensland University of Technolgy 11. Deakin University 12. University of South Australia 13. University of Wollongong 14. Australian National University 15. Western Sydney University 16. University of Canberra 17. Murdoch University 18. Central Queensland University 19. The University of Melbourne 20. Monash University 21. University of Tasmania 22. Swinburne University of Technology 23. La Trobe University 24. Victoria University 25. University of New England Australia 26. Carnegie Mellon University Australia 27. Australian Catholic University 28. Federation University, Australia","title":"(day 5)"},{"location":"2018-07-12-phd-hunt/","text":"(day 6) University of Newcastle Degree Lab: http://i3lab.newcastle.edu.au/index.html# Prof: https://www.newcastle.edu.au/profile/shamus-smith University of Sydney https://sydney.edu.au/courses/courses/pr/doctor-of-philosophy-engineering-and-it.html Personalised systems with user control... There is a huge amount of personalisation in existing software, especially in web-based systems. Generally, these give rather poor support for users to control the personalisation, more... Supervisor(s): Kay, Judy (Professor) RMIT University PhD human-computer interaction PhD Software Engineering Assoc Professor Peter Bertok madaming interested in ABM dito... hehehe (past research life)","title":"Deeper look Australian Uni's - part 1"},{"location":"2018-07-12-phd-hunt/#day-6","text":"","title":"(day 6)"},{"location":"2018-07-12-phd-hunt/#university-of-newcastle","text":"Degree Lab: http://i3lab.newcastle.edu.au/index.html# Prof: https://www.newcastle.edu.au/profile/shamus-smith","title":"University of Newcastle"},{"location":"2018-07-12-phd-hunt/#university-of-sydney","text":"https://sydney.edu.au/courses/courses/pr/doctor-of-philosophy-engineering-and-it.html Personalised systems with user control... There is a huge amount of personalisation in existing software, especially in web-based systems. Generally, these give rather poor support for users to control the personalisation, more... Supervisor(s): Kay, Judy (Professor)","title":"University of Sydney"},{"location":"2018-07-12-phd-hunt/#rmit-university","text":"PhD human-computer interaction PhD Software Engineering Assoc Professor Peter Bertok madaming interested in ABM dito... hehehe (past research life)","title":"RMIT University"},{"location":"2018-07-13-aws-jasperreports/","text":"I was supposed to take a mock exam for AWS CPE today with Edgar. He asked to have it move to next week. That's fine with me because I'm still listening to the Udemy videos anyway and I expect to finish that part by this weekend. Anyway, I want to get my feet wet with Amazon Web Services, so I've decided to go get Jasper Reports running on it. Let's see this adventure play out. Step 1: Register With Amazon Web Services (AWS) By all means, this should be the official UP email. I would have thought of using dcs email, but that's probably not a good idea. I have gmail, but that's personal-technical. My yahoo is personal-relational. rlcanseco rcaw8 roycan AWS Market Place for JasperReports I went cheap and took the t2.small ec2 instance. This is expected to bill at Php500/mo if I leave it on. I'm not sure how fast it will be. The recommended infrastructure costs 3 times that. Let's try it out like this first. vpc-92ca23ea subnet-80acebf9 (172.31.16.0/20) created a key pair: jasperkey.pem placed in SAFS-AWS Hehehe... it didn't work out in the end. The free tier is not enough to support a Jasper Server Instance. And I'm hesitant to do $50/mo deal with AWS at this point. I think I'll try other cloud providers now. I'm sure I'll find analogs to the lessons I learned through the AWS cloud. Quote of the day If you want to be happy, set a goal that commands your thoughts, liberates your energy and inspires your hopes. Andrew Carnegie - 1835-1919, American Industrialist, Philanthropist","title":"Jasper Server on AWS Attempt"},{"location":"2018-07-13-aws-jasperreports/#step-1-register-with-amazon-web-services-aws","text":"By all means, this should be the official UP email. I would have thought of using dcs email, but that's probably not a good idea. I have gmail, but that's personal-technical. My yahoo is personal-relational. rlcanseco rcaw8 roycan","title":"Step 1: Register With Amazon Web Services (AWS)"},{"location":"2018-07-13-aws-jasperreports/#aws-market-place-for-jasperreports","text":"I went cheap and took the t2.small ec2 instance. This is expected to bill at Php500/mo if I leave it on. I'm not sure how fast it will be. The recommended infrastructure costs 3 times that. Let's try it out like this first. vpc-92ca23ea subnet-80acebf9 (172.31.16.0/20) created a key pair: jasperkey.pem placed in SAFS-AWS Hehehe... it didn't work out in the end. The free tier is not enough to support a Jasper Server Instance. And I'm hesitant to do $50/mo deal with AWS at this point. I think I'll try other cloud providers now. I'm sure I'll find analogs to the lessons I learned through the AWS cloud.","title":"AWS Market Place for JasperReports"},{"location":"2018-07-13-aws-jasperreports/#quote-of-the-day","text":"If you want to be happy, set a goal that commands your thoughts, liberates your energy and inspires your hopes. Andrew Carnegie - 1835-1919, American Industrialist, Philanthropist","title":"Quote of the day"},{"location":"2018-07-13-phd-hunt/","text":"day 7 I'm still in the process of reading about different Australian University PhD offerings related to End-User Development. Feeling a bit tired, but then again, it's Friday and I did stay up late last night slowly doing a report I just passed for the Cash Office project. I'm grateful. I feel the guidance. At the same time I feel the weaknesses. I feel the power of habit and the energy the some how feeds to the attainment of the comfort provided by the exercise of habits. Nasanay na kung baga. It's like an analog to my gastronomic love for rice. When I feel weak, I'd like to have good habits to tide me through. I think the way to do that is to exercise good habits as much as I can... such as sitting down and doing something for research in the morning. :D Ok, so lets have the loop for this OZ PhD search: 1. go to the school's website 2. look for a PhD program on EUD, SE, IS or HCL 3. look for a prof working on what you want to work on. University of Technology Sydney Open Scholarshipt Opportunity Risk: I might forever lose the dream of Inclusive Programming for Information Systems depending on the ideas of the research supervisor Opportunity: There's a scholarship offering here that does initial software creation for bacterial outbreaks. Advantages: Sydney familiarity. Close to family. Disadvantages: The project's topic isn't exactly what I want, though what I want to do may be useful for the funded research project. Project Heads: https://www.uts.edu.au/staff/aaron.darling https://www.uts.edu.au/staff/mathieu.fourment Professors I'd like to learn from : https://www.uts.edu.au/staff/mao.huang https://www.uts.edu.au/staff/eng.chew I like the professors here! :D Curtin University Possible PhD in 2 years! :) Supervisors: https://research.curtin.edu.au/supervisor/dr-eleanor-sandry-2/ https://research.curtin.edu.au/supervisor/dr-shirlee-ann-knight/ https://research.curtin.edu.au/supervisor/dr-torsten-reiners/ Queensland University of Technology I think this is a great place too :) details: https://www.qut.edu.au/study/courses/doctor-of-philosophy/doctor-of-philosophy-science-engineering Disciplines Service science Information science Profs http://staff.qut.edu.au/staff/breretom/ http://staff.qut.edu.au/staff/johnsodm/ http://staff.qut.edu.au/staff/roe/ http://staff.qut.edu.au/staff/wyethp/ University of South Australia http://study.unisa.edu.au/degrees/doctor-of-philosophy-lphd/int allows for a Collaborative PhD!! We have collaborative PhD programs with high quality Australian and international universities in a range of disciplines, including (but not limited to) marketing, public health, engineering and sociology. Prof of choice http://people.unisa.edu.au/Mark.Billinghurst University of Wollongong Very interesting! Higher degree research by distance learning! Laboratory: centre for IT-enabled transformation Research Themes Professors: Shen, Jun Associate Professor Lau, S K. Dr. Cui, Tingru Dr","title":"Deeper look Australian Uni's - part 2"},{"location":"2018-07-13-phd-hunt/#day-7","text":"I'm still in the process of reading about different Australian University PhD offerings related to End-User Development. Feeling a bit tired, but then again, it's Friday and I did stay up late last night slowly doing a report I just passed for the Cash Office project. I'm grateful. I feel the guidance. At the same time I feel the weaknesses. I feel the power of habit and the energy the some how feeds to the attainment of the comfort provided by the exercise of habits. Nasanay na kung baga. It's like an analog to my gastronomic love for rice. When I feel weak, I'd like to have good habits to tide me through. I think the way to do that is to exercise good habits as much as I can... such as sitting down and doing something for research in the morning. :D Ok, so lets have the loop for this OZ PhD search: 1. go to the school's website 2. look for a PhD program on EUD, SE, IS or HCL 3. look for a prof working on what you want to work on.","title":"day 7"},{"location":"2018-07-13-phd-hunt/#university-of-technology-sydney","text":"","title":"University of Technology Sydney"},{"location":"2018-07-13-phd-hunt/#open-scholarshipt-opportunity","text":"Risk: I might forever lose the dream of Inclusive Programming for Information Systems depending on the ideas of the research supervisor Opportunity: There's a scholarship offering here that does initial software creation for bacterial outbreaks. Advantages: Sydney familiarity. Close to family. Disadvantages: The project's topic isn't exactly what I want, though what I want to do may be useful for the funded research project. Project Heads: https://www.uts.edu.au/staff/aaron.darling https://www.uts.edu.au/staff/mathieu.fourment","title":"Open Scholarshipt Opportunity"},{"location":"2018-07-13-phd-hunt/#professors-id-like-to-learn-from","text":"https://www.uts.edu.au/staff/mao.huang https://www.uts.edu.au/staff/eng.chew I like the professors here! :D","title":"Professors I'd like to learn from :"},{"location":"2018-07-13-phd-hunt/#curtin-university","text":"Possible PhD in 2 years! :)","title":"Curtin University"},{"location":"2018-07-13-phd-hunt/#supervisors","text":"https://research.curtin.edu.au/supervisor/dr-eleanor-sandry-2/ https://research.curtin.edu.au/supervisor/dr-shirlee-ann-knight/ https://research.curtin.edu.au/supervisor/dr-torsten-reiners/","title":"Supervisors:"},{"location":"2018-07-13-phd-hunt/#queensland-university-of-technology","text":"I think this is a great place too :) details: https://www.qut.edu.au/study/courses/doctor-of-philosophy/doctor-of-philosophy-science-engineering","title":"Queensland University of Technology"},{"location":"2018-07-13-phd-hunt/#disciplines","text":"Service science Information science","title":"Disciplines"},{"location":"2018-07-13-phd-hunt/#profs","text":"http://staff.qut.edu.au/staff/breretom/ http://staff.qut.edu.au/staff/johnsodm/ http://staff.qut.edu.au/staff/roe/ http://staff.qut.edu.au/staff/wyethp/","title":"Profs"},{"location":"2018-07-13-phd-hunt/#university-of-south-australia","text":"http://study.unisa.edu.au/degrees/doctor-of-philosophy-lphd/int allows for a Collaborative PhD!! We have collaborative PhD programs with high quality Australian and international universities in a range of disciplines, including (but not limited to) marketing, public health, engineering and sociology.","title":"University of South Australia"},{"location":"2018-07-13-phd-hunt/#prof-of-choice","text":"http://people.unisa.edu.au/Mark.Billinghurst","title":"Prof of choice"},{"location":"2018-07-13-phd-hunt/#university-of-wollongong","text":"Very interesting! Higher degree research by distance learning! Laboratory: centre for IT-enabled transformation Research Themes Professors: Shen, Jun Associate Professor Lau, S K. Dr. Cui, Tingru Dr","title":"University of Wollongong"},{"location":"2018-07-15-phd-hunt/","text":"day 8 I finally got around scanning the good universities of Australia for a Computer Science PhD program. These are the last of my notes for the first pass. I think any one of them will be great to get into. Next will be to rank them in terms of happy life priority and then start applying. Australian National University This looks like a fun university based on the website. General PhD Program ComSci Program Professors: :) Cool Prof! Prof with ready related project Prof with the Skill I want The University of Melbourne Is the top-ranked university in Australia Offers generous scholarship programs Offers a comprehensive support network Research in Engg and IT http://www.eng.unimelb.edu.au/research/graduate-research Prof Assoc Prof Reeva Lederman Email reeva.lederman@unimelb.edu.au Telephone: +61 3 8344 1535 La Trobe University https://www.latrobe.edu.au/courses/doctor-of-philosophy2 Prof: https://www.latrobe.edu.au/business/about/staff/profile?uname=RKhosla","title":"Deeper look Australian Uni's - part 3 (last)"},{"location":"2018-07-15-phd-hunt/#day-8","text":"I finally got around scanning the good universities of Australia for a Computer Science PhD program. These are the last of my notes for the first pass. I think any one of them will be great to get into. Next will be to rank them in terms of happy life priority and then start applying.","title":"day 8"},{"location":"2018-07-15-phd-hunt/#australian-national-university","text":"This looks like a fun university based on the website. General PhD Program ComSci Program","title":"Australian National University"},{"location":"2018-07-15-phd-hunt/#professors","text":":) Cool Prof! Prof with ready related project Prof with the Skill I want","title":"Professors:"},{"location":"2018-07-15-phd-hunt/#the-university-of-melbourne","text":"Is the top-ranked university in Australia Offers generous scholarship programs Offers a comprehensive support network","title":"The University of Melbourne"},{"location":"2018-07-15-phd-hunt/#research-in-engg-and-it","text":"http://www.eng.unimelb.edu.au/research/graduate-research","title":"Research in Engg and IT"},{"location":"2018-07-15-phd-hunt/#prof","text":"Assoc Prof Reeva Lederman Email reeva.lederman@unimelb.edu.au Telephone: +61 3 8344 1535","title":"Prof"},{"location":"2018-07-15-phd-hunt/#la-trobe-university","text":"https://www.latrobe.edu.au/courses/doctor-of-philosophy2 Prof: https://www.latrobe.edu.au/business/about/staff/profile?uname=RKhosla","title":"La Trobe University"},{"location":"2018-07-19-phd-hunt/","text":"day 9 Monette helped me out by choosing the 6 out of 11 schools in Australia where she'd like to stay close to. From there I was able to come up with my top 3 places for this PhD to happen. Here it is in order of preference: 1. University of Melbourne 2. Newcastle University (Sydney) 3. University of Wollongong (Sydney) Next would be to go deeper in their offerings and actually start emailing perspective advisers. I'm excited!","title":"PhD Top 3"},{"location":"2018-07-19-phd-hunt/#day-9","text":"Monette helped me out by choosing the 6 out of 11 schools in Australia where she'd like to stay close to. From there I was able to come up with my top 3 places for this PhD to happen. Here it is in order of preference: 1. University of Melbourne 2. Newcastle University (Sydney) 3. University of Wollongong (Sydney) Next would be to go deeper in their offerings and actually start emailing perspective advisers. I'm excited!","title":"day 9"},{"location":"2018-07-20-phd-hunt/","text":"day 10 I was able to talk to Lyn at the faculty lounge during lunch. She asked me how I was and I told her I submitted my resignation letter and am currently prof-finding. I told her about the research area I want and about Univ of Melbourne and Dr. Laderman. She got me to realize that it was only a half fit and I ought to look for a professor that fits the research I want to do better. So now I'm doing an exhaustive search for better-fitting profs in the univ of melbourne. And after going through everyone there, I think I found the one who fits with the end goal of eventually bring enterprise-grade information system to government and other institutions in the Philippines. I think I can contribute by developing a process that increases project success rate and long term adaption of information systems in the Philippines. I found you Dr. Kurnia, I hope you respond very positively.","title":"Melbourne for PhD"},{"location":"2018-07-20-phd-hunt/#day-10","text":"I was able to talk to Lyn at the faculty lounge during lunch. She asked me how I was and I told her I submitted my resignation letter and am currently prof-finding. I told her about the research area I want and about Univ of Melbourne and Dr. Laderman. She got me to realize that it was only a half fit and I ought to look for a professor that fits the research I want to do better. So now I'm doing an exhaustive search for better-fitting profs in the univ of melbourne. And after going through everyone there, I think I found the one who fits with the end goal of eventually bring enterprise-grade information system to government and other institutions in the Philippines. I think I can contribute by developing a process that increases project success rate and long term adaption of information systems in the Philippines. I found you Dr. Kurnia, I hope you respond very positively.","title":"day 10"},{"location":"2018-08-10-laravel/","text":"Laravel Programming Motivation I am studying a bit of Laravel for a Proof of Concept (PoC) project for UPD ComSci and the Insurance Commission. I want to have the web artisan experience and see how that can feed into the development for other government offices who are currently heavily doing PHP development. Outcomes I seek to finish a complete project while understanding the concepts and workflow for Laravel development. Characteristics I want to explore Laravel. I want to imagine our simple PoC sofware being implemented in it. I want an idea on how to move forward using it just in case. Context This is in the context of me studying in the Software Engineering Field. I want to learn useful and economically valuable skills that I can use to bless others. Steps Laravel Installation Google a tutorial for install laravel to a specific OS version you are using and install. Try to stay away from XAMPP-based installations, as deployment with that may be problematic. Homestead seems like a non-trivial but recommended solution. Straight LAMPP install seems easiest. Trying a Udemy Project sudo composer create-project --prefer-dist laravel/laravel cms2 \"5.2.*\" sudo chown -R www-data:www-data /var/www/html/myproject Add the following in the right part of the Vagrantfile. Customize paths as necessary. config.vm.synced_folder \"C:/Users/roycan/laravel-apps\", \"/home/vagrant/code\", type: \"rsync\" then vagrant reload","title":"PHP Laravel"},{"location":"2018-08-10-laravel/#laravel-programming","text":"","title":"Laravel Programming"},{"location":"2018-08-10-laravel/#motivation","text":"I am studying a bit of Laravel for a Proof of Concept (PoC) project for UPD ComSci and the Insurance Commission. I want to have the web artisan experience and see how that can feed into the development for other government offices who are currently heavily doing PHP development.","title":"Motivation"},{"location":"2018-08-10-laravel/#outcomes","text":"I seek to finish a complete project while understanding the concepts and workflow for Laravel development.","title":"Outcomes"},{"location":"2018-08-10-laravel/#characteristics","text":"I want to explore Laravel. I want to imagine our simple PoC sofware being implemented in it. I want an idea on how to move forward using it just in case.","title":"Characteristics"},{"location":"2018-08-10-laravel/#context","text":"This is in the context of me studying in the Software Engineering Field. I want to learn useful and economically valuable skills that I can use to bless others.","title":"Context"},{"location":"2018-08-10-laravel/#steps","text":"","title":"Steps"},{"location":"2018-08-10-laravel/#laravel-installation","text":"Google a tutorial for install laravel to a specific OS version you are using and install. Try to stay away from XAMPP-based installations, as deployment with that may be problematic. Homestead seems like a non-trivial but recommended solution. Straight LAMPP install seems easiest.","title":"Laravel Installation"},{"location":"2018-08-10-laravel/#trying-a-udemy-project","text":"sudo composer create-project --prefer-dist laravel/laravel cms2 \"5.2.*\" sudo chown -R www-data:www-data /var/www/html/myproject Add the following in the right part of the Vagrantfile. Customize paths as necessary. config.vm.synced_folder \"C:/Users/roycan/laravel-apps\", \"/home/vagrant/code\", type: \"rsync\" then vagrant reload","title":"Trying a Udemy Project"},{"location":"2018-08-27-self-made/","text":"From the medium article, I'm seeing humanity's self-made Billionaires seem to treat themselves to Clarity and Discipline through Simplifying Purpose and Plans for whatever they're working on Limiting what they Tolerate in things, others and especially themselves. Self-made Billionaires seem to treat others in a special way too. They really depend on people, but at the same time they are very dedicated to them too. They choose to proactively with their wishes when they communicate. They do this through Being dependent on and dedicated to People Being Proactively Transparent with their intensions Self-made Billionaires seem to be efficient and focused when dealing with the world around them. They do this through Relying on Communication Systems with Push Communications for making sure that messages are clear among parties and information gets to them in a timely manner. Being intentional with what I consume , whether it's TV, radio, print and conversation. Deciding based on Data and Narrative I can take lessons from this and etch it in my body. Whenever I undertake something, I make sure to be simple and clear as to what I want from it. I make plans that are easy to communicate, remember and used. I make clear on what results are acceptable too. I will use user stories and definitions of done. Whenever I communicate with others, I appreciate what they do for me and make sure they understand that I am interested in them and their success as much as I appreciate them. I iterate and reiterate my intentions and principles in a manner much like that of tending a garden I love. When I interact with the world, I choose to take in what helps. Same with my body. I setup communication systems so that information flows with minimal friction. I open push communications so that important news come in as fast as possible too. When I decide, it will be on the basis the hard numbers and the stories that back it up. When both are reconciled, then a decision is to be made fast. Reference: The 10 Principles of Self-Made Billionaires digraph G{ rankdir = \"LR\" \"purpose and plans\" -> simple; \"expectations\" -> clear; consumption -> intentional; decision -> data [label=\"based on\"]; decision -> narrative [label=\"based on\"]; communication -> \"systemized\"; communication -> \"pushed\"; communication -> \"proactively transparent\"; people -> \"loved\"; people -> \"depended on\"; } From Bryan Treacy's book (thank you Rap), I see that Leaders have Priorities and most of the time can be found executing on their priorities. They have no excuses.","title":" Billionaire's Habits "},{"location":"2018-09-14-gslides/","text":"I'm in CBTL with Monette and she shows me an awesome thing. Her Prof has powerpoint slides that read the notes automatically. I was thinking, how do I achieve this with Google Slides. record audio. I think this can be done on a per slide basis. convert audio to video. Use audacity or ffmpeg. Google slides can embed video, not audio. upload to google drive. youtube will work too, but you'll have ads. share the video as a presentation. well, the video has got to be shared. embed the video to the right slide. manage the size and drag past the slide borders so that it doesn't show. set to autoplay. you can fix up the timing also. test that everything works This can be for the instructional materials that I'll be authoring. Any updates can be done piecemeal.","title":"Google slides with Audio"},{"location":"2018-09-16-info_sys/","text":"The end goal is to have the client institution in an upward spiral of technical savvyness with very stable and strong foundations. This state has a web application with proper tests and is setup for continuous integration. It uses up to date security through a stable web framework. Enhancing functionality can then be added to core functionality safely through a efficient design generation process. Development is conducted through an engaging atmosphere of mutual development. As a developer, I do not want to hold the prerequisite knowledge of the intricacies of the system that I am developing, chances are, I may not be able to grasp it within an acceptable amount of time anyway. I'll have end-users (EU) and subject area experts (SME) for that. My job then is to 1. roll out the design generation process 1. bring the development process up to a stage that I am certain 2. teach EU/SME enough programming to communicate clearly the processes that they are certain 3. merge the Dev and EU output in visual manner 4. use and refine 5. teach maintenance and move on","title":"My Information System Development Philosophy"},{"location":"2018-09-25-IS_prog-js_dates/","text":"var d = new Date(); // Tue Sep 25 2018 15:01:46 GMT+0800 (Philippine Standard Time) ways to create a new date object new Date() new Date(YYYY, <0-11> , <1-31> , <0-23> , <0-59> , <0-59> , <0-99> ) new Date(milliseconds) new Date(date string) using date strings Variations of the following should work: var d = new Date(\"October 13, 2014 11:13:00\"); JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated). ways to display a date object d = new Date(); document.getElementById(\"demo\").innerHTML = d; document.getElementById(\"demo\").innerHTML = d.toDateString(); document.getElementById(\"demo\").innerHTML = d.toUTCString(); js date inputs Type Example ISO Date \"2015-03-25\" (The International Standard) Short Date \"03/25/2015\" Long Date \"Mar 25 2015\" or \"25 Mar 2015\" var d = new Date(\"2015-03-25\"); var d = new Date(\"2015-03\"); var d = new Date(\"2015\"); var d = new Date(\"2015-03-25T12:00:00Z\"); var d = new Date(\"2015-03-25T12:00:00-06:30\"); var d = new Date(\"03/25/2015\"); var d = new Date(\"Mar 25 2015\"); var d = new Date(\"25 Mar 2015\"); var d = new Date(\"January 25 2015\"); var d = new Date(\"JANUARY, 25, 2015\"); You can have the date in millisecond form too var msec = Date.parse(\"March 21, 2012\"); document.getElementById(\"demo\").innerHTML = msec; getting parts of a date These methods can be used for getting information from a date object: Method Description getFullYear() Get the year as a four digit number (yyyy) getMonth() Get the month as a number (0-11) getDate() Get the day as a number (1-31) getHours() Get the hour (0-23) getMinutes() Get the minute (0-59) getSeconds() Get the second (0-59) getMilliseconds() Get the millisecond (0-999) getTime() Get the time (milliseconds since January 1, 1970) getDay() Get the weekday as a number (0-6) Date.now() Get the time. ECMAScript 5. for UTC, just add UTC in the command getUTCDate() Same as getDate(), but returns the UTC date Set date methods Method Description setDate() Set the day as a number (1-31) setFullYear() Set the year (optionally month and day) setHours() Set the hour (0-23) setMilliseconds() Set the milliseconds (0-999) setMinutes() Set the minutes (0-59) setMonth() Set the month (0-11) setSeconds() Set the seconds (0-59) setTime() Set the time (milliseconds since January 1, 1970) The setFullYear() method sets the year of a date object. In this example to 2020: <script> var d = new Date(); d.setFullYear(2020); document.getElementById(\"demo\").innerHTML = d; </script> The setFullYear() method can optionally set month and day: d.setFullYear(2020, 11, 3); The setDate() method can also be used to add days to a date: <script> var d = new Date(); d.setDate(d.getDate() + 50); document.getElementById(\"demo\").innerHTML = d; </script>","title":"Javascript Date Object"},{"location":"2018-09-25-IS_prog-js_dates/#ways-to-create-a-new-date-object","text":"new Date() new Date(YYYY, <0-11> , <1-31> , <0-23> , <0-59> , <0-59> , <0-99> ) new Date(milliseconds) new Date(date string)","title":"ways to create a new date object"},{"location":"2018-09-25-IS_prog-js_dates/#using-date-strings","text":"Variations of the following should work: var d = new Date(\"October 13, 2014 11:13:00\"); JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated).","title":"using date strings"},{"location":"2018-09-25-IS_prog-js_dates/#ways-to-display-a-date-object","text":"d = new Date(); document.getElementById(\"demo\").innerHTML = d; document.getElementById(\"demo\").innerHTML = d.toDateString(); document.getElementById(\"demo\").innerHTML = d.toUTCString();","title":"ways to display a date object"},{"location":"2018-09-25-IS_prog-js_dates/#js-date-inputs","text":"Type Example ISO Date \"2015-03-25\" (The International Standard) Short Date \"03/25/2015\" Long Date \"Mar 25 2015\" or \"25 Mar 2015\" var d = new Date(\"2015-03-25\"); var d = new Date(\"2015-03\"); var d = new Date(\"2015\"); var d = new Date(\"2015-03-25T12:00:00Z\"); var d = new Date(\"2015-03-25T12:00:00-06:30\"); var d = new Date(\"03/25/2015\"); var d = new Date(\"Mar 25 2015\"); var d = new Date(\"25 Mar 2015\"); var d = new Date(\"January 25 2015\"); var d = new Date(\"JANUARY, 25, 2015\"); You can have the date in millisecond form too var msec = Date.parse(\"March 21, 2012\"); document.getElementById(\"demo\").innerHTML = msec;","title":"js date inputs"},{"location":"2018-09-25-IS_prog-js_dates/#getting-parts-of-a-date","text":"These methods can be used for getting information from a date object: Method Description getFullYear() Get the year as a four digit number (yyyy) getMonth() Get the month as a number (0-11) getDate() Get the day as a number (1-31) getHours() Get the hour (0-23) getMinutes() Get the minute (0-59) getSeconds() Get the second (0-59) getMilliseconds() Get the millisecond (0-999) getTime() Get the time (milliseconds since January 1, 1970) getDay() Get the weekday as a number (0-6) Date.now() Get the time. ECMAScript 5. for UTC, just add UTC in the command getUTCDate() Same as getDate(), but returns the UTC date","title":"getting parts of a date"},{"location":"2018-09-25-IS_prog-js_dates/#set-date-methods","text":"Method Description setDate() Set the day as a number (1-31) setFullYear() Set the year (optionally month and day) setHours() Set the hour (0-23) setMilliseconds() Set the milliseconds (0-999) setMinutes() Set the minutes (0-59) setMonth() Set the month (0-11) setSeconds() Set the seconds (0-59) setTime() Set the time (milliseconds since January 1, 1970) The setFullYear() method sets the year of a date object. In this example to 2020: <script> var d = new Date(); d.setFullYear(2020); document.getElementById(\"demo\").innerHTML = d; </script> The setFullYear() method can optionally set month and day: d.setFullYear(2020, 11, 3); The setDate() method can also be used to add days to a date: <script> var d = new Date(); d.setDate(d.getDate() + 50); document.getElementById(\"demo\").innerHTML = d; </script>","title":"Set date methods"},{"location":"2018-09-25-js_loops/","text":"The While Loop while (condition) { code block to be executed } while (i < 10) { text += \"The number is \" + i; i++; } var cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"]; var i = 0; var text = \"\"; while (cars[i]) { text += cars[i] + \"<br>\"; i++; } The Do/While Loop do { code block to be executed } while (condition); do { text += \"The number is \" + i; i++; } while (i < 10); The For Loop for (statement 1; statement 2; statement 3) { code block to be executed } for (i = 0; i < 5; i++) { text += \"The number is \" + i + \"<br>\"; } The For/In Loop var person = {fname:\"John\", lname:\"Doe\", age:25}; var text = \"\"; var x; for (x in person) { text += person[x]; }","title":"Javascript loops"},{"location":"2018-09-25-js_loops/#the-while-loop","text":"while (condition) { code block to be executed } while (i < 10) { text += \"The number is \" + i; i++; } var cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"]; var i = 0; var text = \"\"; while (cars[i]) { text += cars[i] + \"<br>\"; i++; }","title":"The While Loop"},{"location":"2018-09-25-js_loops/#the-dowhile-loop","text":"do { code block to be executed } while (condition); do { text += \"The number is \" + i; i++; } while (i < 10);","title":"The Do/While Loop"},{"location":"2018-09-25-js_loops/#the-for-loop","text":"for (statement 1; statement 2; statement 3) { code block to be executed } for (i = 0; i < 5; i++) { text += \"The number is \" + i + \"<br>\"; }","title":"The For Loop"},{"location":"2018-09-25-js_loops/#the-forin-loop","text":"var person = {fname:\"John\", lname:\"Doe\", age:25}; var text = \"\"; var x; for (x in person) { text += person[x]; }","title":"The For/In Loop"},{"location":"2018-09-26-mysql_datatypes/","text":"Numeric Data Integers Required Storage and Range for Integer Types Supported by MySQL Type Storage (Bytes) Minimum Value Signed Minimum Value Unsigned Maximum Value Signed Maximum Value Unsigned TINYINT 1 -128 0 127 255 SMALLINT 2 -32768 0 32767 65535 MEDIUMINT 3 -8388608 0 8388607 16777215 INT 4 -2147483648 0 2147483647 4294967295 BIGINT 8 -2 63 0 2 63 -1 2 64 -1 Decimals (money) salary DECIMAL(5,2) This means the the salary field has a maximum of 5 numbers with a maximum of 2 numbers after the decimal point. So values that can be stored in the salary column range from -999.99 to 999.99. Floats/ Doubles (scientific) float uses 4 bytes double uses 8 bytes these approximate numbers carefule when doing approximations Date types The following are the form that the date datatype would look like. Data Type \u201cZero\u201d Value DATE '0000-00-00' TIME '00:00:00' DATETIME '0000-00-00 00:00:00' TIMESTAMP '0000-00-00 00:00:00' YEAR 0000 String types varchar(N) text tinytext text mediumtext longtext blob tinyblob blob mediumblob longblob","title":"MySQL datatypes"},{"location":"2018-09-26-mysql_datatypes/#numeric-data","text":"","title":"Numeric Data"},{"location":"2018-09-26-mysql_datatypes/#integers","text":"Required Storage and Range for Integer Types Supported by MySQL Type Storage (Bytes) Minimum Value Signed Minimum Value Unsigned Maximum Value Signed Maximum Value Unsigned TINYINT 1 -128 0 127 255 SMALLINT 2 -32768 0 32767 65535 MEDIUMINT 3 -8388608 0 8388607 16777215 INT 4 -2147483648 0 2147483647 4294967295 BIGINT 8 -2 63 0 2 63 -1 2 64 -1","title":"Integers"},{"location":"2018-09-26-mysql_datatypes/#decimals-money","text":"salary DECIMAL(5,2) This means the the salary field has a maximum of 5 numbers with a maximum of 2 numbers after the decimal point. So values that can be stored in the salary column range from -999.99 to 999.99.","title":"Decimals (money)"},{"location":"2018-09-26-mysql_datatypes/#floats-doubles-scientific","text":"float uses 4 bytes double uses 8 bytes these approximate numbers carefule when doing approximations","title":"Floats/ Doubles  (scientific)"},{"location":"2018-09-26-mysql_datatypes/#date-types","text":"The following are the form that the date datatype would look like. Data Type \u201cZero\u201d Value DATE '0000-00-00' TIME '00:00:00' DATETIME '0000-00-00 00:00:00' TIMESTAMP '0000-00-00 00:00:00' YEAR 0000","title":"Date types"},{"location":"2018-09-26-mysql_datatypes/#string-types","text":"varchar(N) text tinytext text mediumtext longtext blob tinyblob blob mediumblob longblob","title":"String types"},{"location":"2018-10-01-WAPP-setup/","text":"We want to setup Windows for PHP and PostgreSQL development with an Apache Server and phppgadmin. Install WAPP stack from Bitnami Login to phppgadmin username is postgres password is the what you put during install place an alias in your user's .bashrc alias wapp=\"cd C:/Bitnami/wappstack-7.1.22-0/apache2/htdocs\" edit php.ini (C:\\Bitnami\\wappstack-7.1.22-0\\php) search for display_errors you should find 2 or 3 instances turn display_errors ON use the function versions of the connection code OO are problematic here e.g. use pg_close($conn); instead of $conn->close(); opcache error This is when you updated the code but the effect just doesn't reflect as fast as expected \"To get started with Bitnami LAMP Stack we suggest the following:\" (Jun '15 pheelixx) Caching is enabled on this LAMP / LAPP / Ruby Stack using the following two methods: 1) Google PageSpeed Module is enabled by these lines in {$INSTALL_DIR}/apache2/conf/httpd.conf: Include conf/pagespeed.conf Include conf/pagespeed_libraries.conf Comment those lines out to disable this module. 2) PHP has Op Cache enabled by these lines in {$INSTALL_DIR}/php/etc/php.ini: opcache.enable=1 opcache.enable_cli=1 Disable those by making them = 0 instead. Important: You will need to disable both caches to remove caching I did the opcache fix and for my case that was enough. :) things to download bluefish xampp wapp rails for windows","title":"WAPP Setup"},{"location":"2018-10-01-WAPP-setup/#opcache-error","text":"This is when you updated the code but the effect just doesn't reflect as fast as expected \"To get started with Bitnami LAMP Stack we suggest the following:\" (Jun '15 pheelixx) Caching is enabled on this LAMP / LAPP / Ruby Stack using the following two methods: 1) Google PageSpeed Module is enabled by these lines in {$INSTALL_DIR}/apache2/conf/httpd.conf: Include conf/pagespeed.conf Include conf/pagespeed_libraries.conf Comment those lines out to disable this module. 2) PHP has Op Cache enabled by these lines in {$INSTALL_DIR}/php/etc/php.ini: opcache.enable=1 opcache.enable_cli=1 Disable those by making them = 0 instead. Important: You will need to disable both caches to remove caching I did the opcache fix and for my case that was enough. :)","title":"opcache error"},{"location":"2018-10-01-WAPP-setup/#things-to-download","text":"bluefish xampp wapp rails for windows","title":"things to download"},{"location":"2018-10-14-BA186_syllabus/","text":"BA186 SYSTEMS ANALYSIS AND DESIGN c/o Roy Canseco Consultation : TBA Room : TBA Schedule : Tuesdays Thursdays 2:30-4pm COURSE DETAILS BA186 SYSTEMS ANALYSIS AND DESIGN Principles and methods for analyzing, designing and developing different types of business and management systems. Course Description BA 186: Systems Analysis and Design teaches methods for analyzing, designing, and developing different types of business and management systems. This course offers basic knowledge and skills related to computer-based business information systems and systems development practices. The course gives business students an understanding of the impact of information systems in organizations as well as a better grasp of the limits and constraints under which system analysts, programmers, technicians, and other information technology professionals work within organizations. Course Objectives At the end of this course, students must be able to: Learn and understand the processes, methodologies and tools involved in systems development. Recognize which tool and which technique to use in a given phase of the systems development process. Be exposed to the actual work environment that will provide them the opportunity to apply the concepts and principles of systems analysis and design. Understand the impact of SA&D activities to support the business objectives of organizations Course Methodology This course shall employ a variety of methods such as but not limited to, lecture-presentation, discussions, teamwork, video presentations, Q&A. Individual assignments shall be given and case studies shall be assigned so as to ascertain the level of understanding of students. The use of a Learning Management System (LMS) shall be observed all throughout the course duration. Specifically, e-Learning shall be employed to acquaint the students of this mode of learning. Submission of outputs shall be carried out through the LMS. Class interaction is encouraged using the discussion/chat facilities of the course LMS. Course Learning Management System (LMS) and Official Class Directory We will use google classroom. Details will be given on the first day of class. You will not receive any email notices if you will not register in both the LMS and class directory sites. The LMS will provide you access to course materials, assignments and other information relevant to our course. COURSE OUTLINE Meeting Topics Month 1 mtg 1 Preliminaries and Creation of Project Teams mtg 2 Chapter 1: The Systems Development Environment mtg 3 Chapter 2: The Origins of Software mtg 4 Presentation of Project Topics by Team Leaders/Introduction of Team Members mtg 5 Chapter 3: Managing the Information Systems Project mtg 6 Chapter 4: Identifying and Selecting Systems Development Projects mtg 7 Chapter 5: Initiating and Planning Systems Development Projects Month 2 mtg 8-9 Chapter 6: Determining System Requirements Fieldwork/Team Work/Lab Work mtg 10 Midterm Examination mtg 11-12 Chapter 7: Structuring System Process Requirements Fieldwork/Team Work/Lab Work mtg 13-14 Chapter 8: Structuring System Data Requirements Fieldwork/Team Work/Lab Work Month 3 mtg 15-16 Chapter 9: Designing Databases Fieldwork/Team Work/Lab Work mtg 17-18 Chapter 10: Designing Forms and Reports Fieldwork/Team Work/Lab Work mtg 19-20 Chapter 11: Designing Interfaces and Dialogues Fieldwork/Team Work/Lab Work mtg 21 Chapter 12: Designing Distributed and Internet Systems Month 4 mtg 22 Pre-Final Examination mtg 23 Team Presentation mtg 24 Team Presentation mtg 25 Team Presentation mtg 26 Team Presentation mtg 27 Submission of Final Deliverables and Peer Review Month 5 mtg 28 Final Examination* mtg 29 Course Wrap-up mtg 30 Grade Consultation Note: Based on actual circumstances and assessing the progress of the class, the Instructor reserves the right to change/ collapse/interchange any of the topics as listed above. COURSE REQUIREMENTS The class shall observe the following course deliverables: Written Exams (Midterm and Pre-Final) Final Exam (for those who will not meet the average score of 60%, midterm and pre-final exams) Quizzes (shall be given at the discretion of the Instructor) Team Presentations and Deliverables At the end of the semester, each student shall be evaluated based on the following items: Requirement Weight INDIVIDUAL COMPONENT Class Participation/Attendance/Individual Assignments 10% Midterm Exam and Pre-Final Exam 30% GROUP COMPONENT Group Tasks/Assignments 10% SA&D Deliverables 40% Team Presentation 10% Total 100% GRADE EQUIVALENTS The scores of the students shall be matched using this grading scale: SCORE FINAL GRADE 92 \u2013 100 1.0 88 - below 92 1.25 85 - below 88 1.5 82 - below 85 1.75 78 - below 82 2.0 74 - below 78 2.25 70 - below 74 2.5 65 - below 70 2.75 60 - below 65 3.0 below 60 5.0 COURSE POLICIES Project Teams The class will be grouped into teams. Each team will have at most five (5) members. These teams will work on the SA&D deliverables, group assignments and in completing all the other requirements of the course. Attendance The class shall observe the University rules on attendance. This applies to sessions where physical presence is required. Four (4) absences (excused/unexcused) are allowed all throughout the duration of the course. A student who exceeds this maximum allowable absences shall be dropped from the class roll. The Instructor shall check the attendance from time to time and this shall be done on a random basis. Submission of Requirements Students are expected to demonstrate utmost diligence in the submission of course requirements. For every day of delay (includes weekends and holidays), five (5) points may be deducted from the overall score awarded to any work/task. Time management should be observed by students so as to ensure prompt and quality submission of the course requirements. Presentation guide The whole member of the group is expected to present. A member who did not contribute anything should get a grade of zero. For the first 10 minutes, you are to present the key learning and concept from the chapter. The next 20 minutes, please explain quickly the background of the case & present your solutions. The last 5 to 10 minutes will be for Q&A NOTE: During Q&A, the next presenting group can already start setting up Documentation guide You are to submit a hard copy print-out of the slides before you start the presentation. Minimum of 1 slide and maximum of 2 slides per page. Print one sided only. Code of Ethics The highest level of ethical standards must be observed by each and every class member. Being admitted into the program is an accomplishment that should not be tarnished with any pigment of fraud, deceit and distrust. The course will be delivered under the clear cloud of mutual trust and respect. Peer Evaluation Each member of the team will accomplish an online evaluation form at the end of the course. This evaluation form will capture each member\u2019s assessment of the performance of his/her team members. Points will be given to you to distribute among your team members and yourself. The average of which will be your peer evaluation score. Details of the mechanics will be given in class. Group Tasks/Assignments The course will require groups/teams to work on various tasks and assignments. These group tasks/assignments shall be assigned to the teams at a particular time and submission deadlines shall be specified by the Instructor for each of the tasks/assignments. Papers related to the this team work must be uploaded into the LMS. The evaluation of papers will follow these metrics: RUBRIC % Organization and Logic 30% Depth of Analysis 40% Presentation/Delivery of Ideas 20% Overall Impact of Paper 10% Other Policies Complaints regarding exam results shall be entertained only within a period of one week after the examination papers are returned. No complaints shall be entertained after this period. Students must use a pen or ballpen when taking any examination, otherwise, no complaints whatsoever regarding the examination shall be accepted. The specific guidelines that shall govern the other course requirements (team presentations and deliverables) shall be announced in class prior to the implementation of said course requirements. Each day of delay (including Saturdays and Sundays) shall be penalized by deducting 5 points from whatever score earned by a student/team for a specific requirement. We shall drop the lowest of our 3 exams. Those who will take the Completion and Final Exam must expect a set of more difficult questions. Teams are expected to submit ALL deliverables. If one item is missing, all team members shall automatically receive a grade of zero (0) for the missing requirements. If there is a need for consultations, please inform your professor beforehand so as to maximize the time needed for such. Punctuality is highly encouraged in this course. Late submission of assigned work may not be accepted. Likewise, tardiness is discouraged. If for some valid reason you are going to be absent or late for class, please inform your professor as soon as possible directly or through one of your classmates. Classes will start approximately five minutes after the designated time and will end approximately ten minutes before the designated time. Participation is also highly encouraged in this course. This course should as much as possible be an interactive discussion. As such, you are encouraged to read the lesson for the day beforehand. Also, please feel free to ask your questions or offer your comments anytime during the discussion. Furthermore, unannounced short quizzes may be administered from time to time to ensure that you keep yourself updated with the lessons. It is also highly encouraged that you check and review your work before submitting it to the professor. Any errors found in the final output (grammar, spelling, tense, inconsistencies) may be penalized. It is advised that all mobile devices should be kept in silent mode. If there is a need to answer a call or a message, please do so discreetly. If any mobile device rings or beeps during class, a short quiz will be automatically administered. The use of Internet-capable mobile devices such as laptops and tablets are allowed in class if and only if it helps the student participate in the discussion and/or understand the topic being discussed for the session. There may be times that the professor will ask the students to go online during the session to search for relevant reference materials. Otherwise, please keep your mobile devices switched off. For any concerns and issues regarding the course and its requirements, you can reach your professor at 03rvlc+ba186@gmail.com or shoot me an FB message. Just make sure you leave your name in the correspondence so that your professor can address the issue properly. Please tag your message with \u201c[BA186]\u201d so that your professor can promptly see it. COURSE REFERENCES Valacich, J. S., George, J. F., & Hoffer, J. A. (2008). Modern System Analysis & Design 5th Edition. Pearson Education. Shelly, Rosenblatt (2012). System Analysis & Design 9th Edition. Cengage Learning. Dennis, Wixom, Roth (2012). System Analysis & Design 5th Edition. John Wiley & Sons Inc. Tilley, Rosenblatt (2017). System Analysis & Design 11th Edition. Cengage Learning. Kendall, Kendall (2014) System Analysis & Design 9th Edition. Pearson Education.","title":"BA186 SYSTEMS ANALYSIS AND DESIGN"},{"location":"2018-10-14-BA186_syllabus/#ba186-systems-analysis-and-design","text":"c/o Roy Canseco Consultation : TBA Room : TBA Schedule : Tuesdays Thursdays 2:30-4pm","title":"BA186 SYSTEMS ANALYSIS AND DESIGN"},{"location":"2018-10-14-BA186_syllabus/#course-details","text":"BA186 SYSTEMS ANALYSIS AND DESIGN Principles and methods for analyzing, designing and developing different types of business and management systems.","title":"COURSE DETAILS"},{"location":"2018-10-14-BA186_syllabus/#course-description","text":"BA 186: Systems Analysis and Design teaches methods for analyzing, designing, and developing different types of business and management systems. This course offers basic knowledge and skills related to computer-based business information systems and systems development practices. The course gives business students an understanding of the impact of information systems in organizations as well as a better grasp of the limits and constraints under which system analysts, programmers, technicians, and other information technology professionals work within organizations.","title":"Course Description"},{"location":"2018-10-14-BA186_syllabus/#course-objectives","text":"At the end of this course, students must be able to: Learn and understand the processes, methodologies and tools involved in systems development. Recognize which tool and which technique to use in a given phase of the systems development process. Be exposed to the actual work environment that will provide them the opportunity to apply the concepts and principles of systems analysis and design. Understand the impact of SA&D activities to support the business objectives of organizations","title":"Course Objectives"},{"location":"2018-10-14-BA186_syllabus/#course-methodology","text":"This course shall employ a variety of methods such as but not limited to, lecture-presentation, discussions, teamwork, video presentations, Q&A. Individual assignments shall be given and case studies shall be assigned so as to ascertain the level of understanding of students. The use of a Learning Management System (LMS) shall be observed all throughout the course duration. Specifically, e-Learning shall be employed to acquaint the students of this mode of learning. Submission of outputs shall be carried out through the LMS. Class interaction is encouraged using the discussion/chat facilities of the course LMS.","title":"Course Methodology"},{"location":"2018-10-14-BA186_syllabus/#course-learning-management-system-lms-and-official-class-directory","text":"We will use google classroom. Details will be given on the first day of class. You will not receive any email notices if you will not register in both the LMS and class directory sites. The LMS will provide you access to course materials, assignments and other information relevant to our course.","title":"Course Learning Management System (LMS) and Official Class Directory"},{"location":"2018-10-14-BA186_syllabus/#course-outline","text":"Meeting Topics Month 1 mtg 1 Preliminaries and Creation of Project Teams mtg 2 Chapter 1: The Systems Development Environment mtg 3 Chapter 2: The Origins of Software mtg 4 Presentation of Project Topics by Team Leaders/Introduction of Team Members mtg 5 Chapter 3: Managing the Information Systems Project mtg 6 Chapter 4: Identifying and Selecting Systems Development Projects mtg 7 Chapter 5: Initiating and Planning Systems Development Projects Month 2 mtg 8-9 Chapter 6: Determining System Requirements Fieldwork/Team Work/Lab Work mtg 10 Midterm Examination mtg 11-12 Chapter 7: Structuring System Process Requirements Fieldwork/Team Work/Lab Work mtg 13-14 Chapter 8: Structuring System Data Requirements Fieldwork/Team Work/Lab Work Month 3 mtg 15-16 Chapter 9: Designing Databases Fieldwork/Team Work/Lab Work mtg 17-18 Chapter 10: Designing Forms and Reports Fieldwork/Team Work/Lab Work mtg 19-20 Chapter 11: Designing Interfaces and Dialogues Fieldwork/Team Work/Lab Work mtg 21 Chapter 12: Designing Distributed and Internet Systems Month 4 mtg 22 Pre-Final Examination mtg 23 Team Presentation mtg 24 Team Presentation mtg 25 Team Presentation mtg 26 Team Presentation mtg 27 Submission of Final Deliverables and Peer Review Month 5 mtg 28 Final Examination* mtg 29 Course Wrap-up mtg 30 Grade Consultation Note: Based on actual circumstances and assessing the progress of the class, the Instructor reserves the right to change/ collapse/interchange any of the topics as listed above.","title":"COURSE OUTLINE"},{"location":"2018-10-14-BA186_syllabus/#course-requirements","text":"The class shall observe the following course deliverables: Written Exams (Midterm and Pre-Final) Final Exam (for those who will not meet the average score of 60%, midterm and pre-final exams) Quizzes (shall be given at the discretion of the Instructor) Team Presentations and Deliverables At the end of the semester, each student shall be evaluated based on the following items: Requirement Weight INDIVIDUAL COMPONENT Class Participation/Attendance/Individual Assignments 10% Midterm Exam and Pre-Final Exam 30% GROUP COMPONENT Group Tasks/Assignments 10% SA&D Deliverables 40% Team Presentation 10% Total 100%","title":"COURSE REQUIREMENTS"},{"location":"2018-10-14-BA186_syllabus/#grade-equivalents","text":"The scores of the students shall be matched using this grading scale: SCORE FINAL GRADE 92 \u2013 100 1.0 88 - below 92 1.25 85 - below 88 1.5 82 - below 85 1.75 78 - below 82 2.0 74 - below 78 2.25 70 - below 74 2.5 65 - below 70 2.75 60 - below 65 3.0 below 60 5.0","title":"GRADE EQUIVALENTS"},{"location":"2018-10-14-BA186_syllabus/#course-policies","text":"","title":"COURSE POLICIES"},{"location":"2018-10-14-BA186_syllabus/#project-teams","text":"The class will be grouped into teams. Each team will have at most five (5) members. These teams will work on the SA&D deliverables, group assignments and in completing all the other requirements of the course.","title":"Project Teams"},{"location":"2018-10-14-BA186_syllabus/#attendance","text":"The class shall observe the University rules on attendance. This applies to sessions where physical presence is required. Four (4) absences (excused/unexcused) are allowed all throughout the duration of the course. A student who exceeds this maximum allowable absences shall be dropped from the class roll. The Instructor shall check the attendance from time to time and this shall be done on a random basis.","title":"Attendance"},{"location":"2018-10-14-BA186_syllabus/#submission-of-requirements","text":"Students are expected to demonstrate utmost diligence in the submission of course requirements. For every day of delay (includes weekends and holidays), five (5) points may be deducted from the overall score awarded to any work/task. Time management should be observed by students so as to ensure prompt and quality submission of the course requirements.","title":"Submission of Requirements"},{"location":"2018-10-14-BA186_syllabus/#presentation-guide","text":"The whole member of the group is expected to present. A member who did not contribute anything should get a grade of zero. For the first 10 minutes, you are to present the key learning and concept from the chapter. The next 20 minutes, please explain quickly the background of the case & present your solutions. The last 5 to 10 minutes will be for Q&A NOTE: During Q&A, the next presenting group can already start setting up","title":"Presentation guide"},{"location":"2018-10-14-BA186_syllabus/#documentation-guide","text":"You are to submit a hard copy print-out of the slides before you start the presentation. Minimum of 1 slide and maximum of 2 slides per page. Print one sided only.","title":"Documentation guide"},{"location":"2018-10-14-BA186_syllabus/#code-of-ethics","text":"The highest level of ethical standards must be observed by each and every class member. Being admitted into the program is an accomplishment that should not be tarnished with any pigment of fraud, deceit and distrust. The course will be delivered under the clear cloud of mutual trust and respect.","title":"Code of Ethics"},{"location":"2018-10-14-BA186_syllabus/#peer-evaluation","text":"Each member of the team will accomplish an online evaluation form at the end of the course. This evaluation form will capture each member\u2019s assessment of the performance of his/her team members. Points will be given to you to distribute among your team members and yourself. The average of which will be your peer evaluation score. Details of the mechanics will be given in class.","title":"Peer Evaluation"},{"location":"2018-10-14-BA186_syllabus/#group-tasksassignments","text":"The course will require groups/teams to work on various tasks and assignments. These group tasks/assignments shall be assigned to the teams at a particular time and submission deadlines shall be specified by the Instructor for each of the tasks/assignments. Papers related to the this team work must be uploaded into the LMS. The evaluation of papers will follow these metrics: RUBRIC % Organization and Logic 30% Depth of Analysis 40% Presentation/Delivery of Ideas 20% Overall Impact of Paper 10%","title":"Group Tasks/Assignments"},{"location":"2018-10-14-BA186_syllabus/#other-policies","text":"Complaints regarding exam results shall be entertained only within a period of one week after the examination papers are returned. No complaints shall be entertained after this period. Students must use a pen or ballpen when taking any examination, otherwise, no complaints whatsoever regarding the examination shall be accepted. The specific guidelines that shall govern the other course requirements (team presentations and deliverables) shall be announced in class prior to the implementation of said course requirements. Each day of delay (including Saturdays and Sundays) shall be penalized by deducting 5 points from whatever score earned by a student/team for a specific requirement. We shall drop the lowest of our 3 exams. Those who will take the Completion and Final Exam must expect a set of more difficult questions. Teams are expected to submit ALL deliverables. If one item is missing, all team members shall automatically receive a grade of zero (0) for the missing requirements. If there is a need for consultations, please inform your professor beforehand so as to maximize the time needed for such. Punctuality is highly encouraged in this course. Late submission of assigned work may not be accepted. Likewise, tardiness is discouraged. If for some valid reason you are going to be absent or late for class, please inform your professor as soon as possible directly or through one of your classmates. Classes will start approximately five minutes after the designated time and will end approximately ten minutes before the designated time. Participation is also highly encouraged in this course. This course should as much as possible be an interactive discussion. As such, you are encouraged to read the lesson for the day beforehand. Also, please feel free to ask your questions or offer your comments anytime during the discussion. Furthermore, unannounced short quizzes may be administered from time to time to ensure that you keep yourself updated with the lessons. It is also highly encouraged that you check and review your work before submitting it to the professor. Any errors found in the final output (grammar, spelling, tense, inconsistencies) may be penalized. It is advised that all mobile devices should be kept in silent mode. If there is a need to answer a call or a message, please do so discreetly. If any mobile device rings or beeps during class, a short quiz will be automatically administered. The use of Internet-capable mobile devices such as laptops and tablets are allowed in class if and only if it helps the student participate in the discussion and/or understand the topic being discussed for the session. There may be times that the professor will ask the students to go online during the session to search for relevant reference materials. Otherwise, please keep your mobile devices switched off. For any concerns and issues regarding the course and its requirements, you can reach your professor at 03rvlc+ba186@gmail.com or shoot me an FB message. Just make sure you leave your name in the correspondence so that your professor can address the issue properly. Please tag your message with \u201c[BA186]\u201d so that your professor can promptly see it.","title":"Other Policies"},{"location":"2018-10-14-BA186_syllabus/#course-references","text":"Valacich, J. S., George, J. F., & Hoffer, J. A. (2008). Modern System Analysis & Design 5th Edition. Pearson Education. Shelly, Rosenblatt (2012). System Analysis & Design 9th Edition. Cengage Learning. Dennis, Wixom, Roth (2012). System Analysis & Design 5th Edition. John Wiley & Sons Inc. Tilley, Rosenblatt (2017). System Analysis & Design 11th Edition. Cengage Learning. Kendall, Kendall (2014) System Analysis & Design 9th Edition. Pearson Education.","title":"COURSE REFERENCES"},{"location":"2018-10-19-block_rosary/","text":"ON THE ARRIVAL OF THE IMAGE O Lady of Fatima, sovereign Queen of Heaven and Empress of all creatures, we joyfully welcome you on your visit to the home of your humble servants and devoted children. Take, O glorious Lady, possession of not only our humble home, but also of ourselves. So most pure Virgin, the only owner and mistress of this house and inmates, who promised to be your loyal and devoted children. Shower on us your holy blessings and with it the treasure of goodness, health and mercy, which escapes from your most pure hands. We promise to render you devoted homage of love while you live in our midst, AMEN. (3x) Hail Mary, full of grace, the Lord is with you, blessed are you among women and blessed is the fruit of your womb, Jesus. Holy Mary, Mother of God, pray for us sinners, now and at the hour of our death, AMEN. Our Lady of Fatima, pray for us. INTENTIONS FOR EACH NIGHT (To be read before reciting the rosary) FIRST NIGHT: In honor of God, the Holy Spirit, the third person of the Blessed Trinity, in honor of the Most Sacred Heart of Jesus and in honor of the Immaculate Heart of Mary. SECOND NIGHT: For the protection of the Holy Catholic Church, for the Holy Father, for the Catholic religious and faithful, particularly those who are prosecuted. THIRD NIGHT: For peace in every Christian family and for the members of the family, both living and dead, where the Image of Our Lady is venerated. FOURTH NIGHT: For the spiritual and temporal needs of the Rosarians, for the spiritual welfare of children of all nations, for hte increase of priests and religious in the Philippines, for the propagation of Catholic faith in the world. FIFTH NIGHT: For the Armed Forces fighting for peace, for a clean and honest government in the Philippines. SIXTH NIGHT: For the conversion of sinners and Non-Catholics. SEVENTH NIGHT: For the conversion and preservation of faith in the Philippines, in honor of Our Lady of Fatima and most of all for universal peace. THE ROSARY In the name of the Father and of the Son and of the Holy Spirit, AMEN. THE APOSTLES CREED I believe in God, the Father Almighty, creator of heaven and earth. I believe in Jesus Christ, His only Son, Our Lord, who was conceived by the power of the Holy Spirit, born of the Virgin Mary, suffered under Pontius Pilate, was crucified, died and was buried; He decended into the dead; on the third day, He rose again, He ascended into heaven and seated at the right hand of the Father Almighty. He will come again to judge the living and the dead. I believe in the Holy Spirit, the Holy Catholic Church, the Communion of Saints, the forgiveness of sins, the resurrection of the body and life everlasting, AMEN. LORD, GIVE US MORE FAITH, HOPE AND CHARITY (1x) Our Father in heaven, holy by your name, your kingdom, your will be done, on earth as in heaven. Give us this day our daily bread and forgive us our sins, as we forgive those who sinned against us; do not bring us to the test, but deliver us from evil, AMEN. (3x) Hail Mary, full of grace, the Lord is with you, blessed are you among women and blessed is the fruit of your womb, Jesus. Holy Mary, Mother of God, pray for us sinners, now and at the hour of our death, AMEN. (1x) Glory be to the Father, to the Son and to the Holy Spirit. As it was in the beginning, is now ever shall be world without end, AMEN. DECADES OF THE HOLY ROSARY THE JOYFUL MYSTERIES (MONDAYS AND SATURDAYS) 1. The Annunciation 2. The Visitation 3. The Birth of our Lord 4. The Presentation of the Child Jesus in the Temple 5. The Finding of the Child Jesus in the Temple THE SORROWFUL MYSTERIES (TUESDAYS AND FRIDAYS) 1. The Agony in the Garden 2. The Scourging at the Pillar 3. The Crowning with Thorns 4. The Carrying of the Cross 5. The Cruxifiction and Death of our Lord Jesus Christ THE GLORIOUS MYSTERIES (WEDNESDAYS AND SUNDAYS) 1. The Resurrection of Our Lord 2. The Ascension of Our Lord into Heaven 3. The Descent of the Holy Spirit upon the Apostles and the Blessed Virgin Mary 4. The Assumption of the Blessed Virgin 5. The Coronation of the Blessed Virgin Mary as Queen of Heaven and Earth THE LUMINOUS MYSTERIES (THURSDAYS) 1. The Baptism of Our Lord 2. The Wedding at Cana 3. The Proclamation of the Good News and Call to Conversion 4. The Transfiguration 5. The Institution of the Holy Eucharist After reciting Glory be of each decade, say... O my Jesus, forgive us our sins, save us from the fires of hell and bring all souls into heaven especially those who most need of your mercy. HAIL HOLY QUEEN Hail Holy Queen, Mother of Mercy, hail our life, our sweetness and our hope. To you do we cry, poor banished children of Eve, to you do we send up our sighs, mourning and weeping in this valley of tears. Turn then, most gracious advocate, your eyes of mercy towards us; and after this our exile, show unto us the blessed fruit of your womb, Jesus. O clement, o loving, o sweet Virgin Mary. V. Pray for us, O Holy Mother of God R. That we may be made worthy of the promises of Christ. LET US PRAY: O God, whose only begotten Son, by His life, death and resurrection, has purchased for us the rewards of eternal life. Grant, we beseech you, that meditating upon these mysteries of the most Holy Rosary of the Blessed Virgin Mary, we may imitate what they contain and obtain what they promised, through Christ, our Lord, AMEN. ANTIPHON We fly to your patronage, o Holy Mother of God, despise not our petitions in our necessities, but deliver us from all dangers, o glorious and blessed Virgin Mary. THE LITANY OF THE IMMACULATE HEART OF MARY (to be recited on Saturday) V. Lord, have mercy on us. R. Lord, have mercy on us. V. Christ, have mercy on us. R. Christ, have mercy on us. V. Lord, have mercy on us. R. Lord, have mercy on us. V. Christ, hear us. R. Christ, hear us. V. Christ, graciously hear us. R. Christ, graciously hear us. V. God the Father in heaven R. Have mercy on us. V. God the Holy Spirit R. Have mercy on us. Litany response Heart of Mary, Pray for us Heart of Mary, united to the heart of Jesus, Pray for us Heart of Mary, Orgen of the Holy Spirit, Pray for us Heart of Mary, Sanctuary of Divine Trinity, Pray for us Heart of Mary, Tabernacle of God Incarnate, Pray for us Heart of Mary, imaculate from your creation, Pray for us Heart of Mary, full of grace, Pray for us Heart of Mary, blessed among all hearts, Pray for us Heart of Mary, Throne of Glory, Pray for us Heart of Mary, holy cause of Divine Love, Pray for us Heart of Mary, fastened to the cross with Jesus Crucified, Pray for us Heart of Mary, comforter of the afflicted, Pray for us Heart of Mary, refuge of sinners, Pray for us Heart of Mary, hope of the agonizing, Pray for us Heart of Mary, seat of mercy, Pray for us V. Lamb of God, who takes away the sins of the world, R. Spare us O Lord V. Lamb of God, who takes away the sins of the world, R. Graciously hear us O Lord V. Lamb of God, who takes away the sins of the world, R. Have mercy on us V. Christ hear us R. Christ, graciously hear us V. Immaculate Mary, meek and humble of heart, R. Make our hearts according to the heart of Jesus V. Pray for us, O Holy Mother of God R. That we may be made worthy of the promises of Christ IN MEMORARE (to be recited everyday) Remember, O most gracious Virgin Mary, that never was it known that anyone, who fled to your protection, implored your help and sought your intercession, was left unaided. Inspired with this confidence, I fly unto you, O Virgin of Virgins, my Mother, to you I come, before you I stand, sinful and sorrowful. O Mother of the Word Incarnate, despise not my petitions, but in your mercy, hear and answer me, AMEN. ACT OF CONSECRATION TO THE IMMACULATE HEART OF MARY (to be recited on Saturday) O Mary, powerful Virgin and Mother of Mercy, Queen of Heaven and Refuge of Sinners, we consecrate ourselves to your Immaculate Heart. To you, we consecrate all the we have and all that we are. To you, we entrust our home, our family and our country. We wish that everything be yours and may share in the benefits of your motherly protection. Therefore we solemnly renew our baptismal vows. We renounce the devil, his works and his attractions. We pledge loyalty to the guidance and leadership of the Holy Father, the Pope and the Bishops. We promise to obey the commandments of God and our Holy Mother, the Church, and in particular, to sanctify the Lord's day, Sunday. We promise to say our daily prayers, to recite the rosary in our family and to make frequent use of the sacraments of Confession and Holy Communion. Finally, O glorious Mother of God and merciful Mother of Mankind, we humbly pray that this wholehearted consecration to your Immaculate Heart, may obtain the conversion of pagans and of sinners, that it may hasten the triumph of the Sacred Heart of Jesus, your Divine Son, all over the world, AMEN. PEACE PRAYER TO OUR LADY OF FATIMA (to be recited on Saturday) Queen of the Most Holy Rosary, refuge of the human race, we are confident in obtaining peace, mercy, grace and help in the present calamity, through the goodness of your maternal heart. FOR PEACE IN THE PHILIPPINES Three (3) Hail Marys... Our Lady of Fatima, Pray for us FOR THE INTENTIONS OF THE SPONSORS One (1) Our Father One (1) Hail Mary One (1) Glory be Our Lady of Fatima, Pray for us FOR THE POOR SOULS IN PURGATORY One (1) Our Father One (1) Hail Mary One (1) Glory be Our Lady of Fatima, Pray for us V. Eternal rest give unto them, O Lord R. And let your perpetual light shine upon them V. May the rest in peace R. AMEN. V. Most Sacred Heart of Jesus (3x) R. Have mercy on us (3x) V. Immaculate Heart of Mary R. Pray for us KEEP SILENT AND ASK WHATEVER FAVOR YOU WISH FROM OUR BLESSED MOTHER. FAREWELL TO OUR LADY (to be recited on the last day of visit) Our Lady of Fatima and Immaculate Mother of God, before leaving our humble dwelling, we desire to express the pain and sorrow that fill our souls at seeing you depart from our midst. Thanks O Mother, for having remained among us, your humble and devoted children. Thank you for the benefits, with which no merit on our partyou have granted on us. Do not forget that in this house, there are hearts that love you and are eager for the moment of receiving you anew in our midst. Forgive and excusee us, Most Merciful Mother, if we did not know how to honor you as due and for not having profited enough from the visit through our frailty and ignorance. Mother, never forget us in time or in eternity and we hope from your unlimited bounty that in the same way as we willingly have opened our doors to welcome you in our home, you may also one day open for us the gates of heaven, AMEN. OUR LADY OF FATIMA, PRAY FOR US Legion of Mary Christ the King Parish 050803","title":"Block Rosary"},{"location":"2018-10-19-block_rosary/#on-the-arrival-of-the-image","text":"O Lady of Fatima, sovereign Queen of Heaven and Empress of all creatures, we joyfully welcome you on your visit to the home of your humble servants and devoted children. Take, O glorious Lady, possession of not only our humble home, but also of ourselves. So most pure Virgin, the only owner and mistress of this house and inmates, who promised to be your loyal and devoted children. Shower on us your holy blessings and with it the treasure of goodness, health and mercy, which escapes from your most pure hands. We promise to render you devoted homage of love while you live in our midst, AMEN. (3x) Hail Mary, full of grace, the Lord is with you, blessed are you among women and blessed is the fruit of your womb, Jesus. Holy Mary, Mother of God, pray for us sinners, now and at the hour of our death, AMEN. Our Lady of Fatima, pray for us.","title":"ON THE ARRIVAL OF THE IMAGE"},{"location":"2018-10-19-block_rosary/#intentions-for-each-night","text":"(To be read before reciting the rosary)","title":"INTENTIONS FOR EACH NIGHT"},{"location":"2018-10-19-block_rosary/#first-night","text":"In honor of God, the Holy Spirit, the third person of the Blessed Trinity, in honor of the Most Sacred Heart of Jesus and in honor of the Immaculate Heart of Mary.","title":"FIRST NIGHT:"},{"location":"2018-10-19-block_rosary/#second-night","text":"For the protection of the Holy Catholic Church, for the Holy Father, for the Catholic religious and faithful, particularly those who are prosecuted.","title":"SECOND NIGHT:"},{"location":"2018-10-19-block_rosary/#third-night","text":"For peace in every Christian family and for the members of the family, both living and dead, where the Image of Our Lady is venerated.","title":"THIRD NIGHT:"},{"location":"2018-10-19-block_rosary/#fourth-night","text":"For the spiritual and temporal needs of the Rosarians, for the spiritual welfare of children of all nations, for hte increase of priests and religious in the Philippines, for the propagation of Catholic faith in the world.","title":"FOURTH NIGHT:"},{"location":"2018-10-19-block_rosary/#fifth-night","text":"For the Armed Forces fighting for peace, for a clean and honest government in the Philippines.","title":"FIFTH NIGHT:"},{"location":"2018-10-19-block_rosary/#sixth-night","text":"For the conversion of sinners and Non-Catholics.","title":"SIXTH NIGHT:"},{"location":"2018-10-19-block_rosary/#seventh-night","text":"For the conversion and preservation of faith in the Philippines, in honor of Our Lady of Fatima and most of all for universal peace.","title":"SEVENTH NIGHT:"},{"location":"2018-10-19-block_rosary/#the-rosary","text":"In the name of the Father and of the Son and of the Holy Spirit, AMEN.","title":"THE ROSARY"},{"location":"2018-10-19-block_rosary/#the-apostles-creed","text":"I believe in God, the Father Almighty, creator of heaven and earth. I believe in Jesus Christ, His only Son, Our Lord, who was conceived by the power of the Holy Spirit, born of the Virgin Mary, suffered under Pontius Pilate, was crucified, died and was buried; He decended into the dead; on the third day, He rose again, He ascended into heaven and seated at the right hand of the Father Almighty. He will come again to judge the living and the dead. I believe in the Holy Spirit, the Holy Catholic Church, the Communion of Saints, the forgiveness of sins, the resurrection of the body and life everlasting, AMEN. LORD, GIVE US MORE FAITH, HOPE AND CHARITY (1x) Our Father in heaven, holy by your name, your kingdom, your will be done, on earth as in heaven. Give us this day our daily bread and forgive us our sins, as we forgive those who sinned against us; do not bring us to the test, but deliver us from evil, AMEN. (3x) Hail Mary, full of grace, the Lord is with you, blessed are you among women and blessed is the fruit of your womb, Jesus. Holy Mary, Mother of God, pray for us sinners, now and at the hour of our death, AMEN. (1x) Glory be to the Father, to the Son and to the Holy Spirit. As it was in the beginning, is now ever shall be world without end, AMEN.","title":"THE APOSTLES CREED"},{"location":"2018-10-19-block_rosary/#decades-of-the-holy-rosary","text":"","title":"DECADES OF THE HOLY ROSARY"},{"location":"2018-10-19-block_rosary/#the-joyful-mysteries-mondays-and-saturdays","text":"1. The Annunciation 2. The Visitation 3. The Birth of our Lord 4. The Presentation of the Child Jesus in the Temple 5. The Finding of the Child Jesus in the Temple","title":"THE JOYFUL MYSTERIES (MONDAYS AND SATURDAYS)"},{"location":"2018-10-19-block_rosary/#the-sorrowful-mysteries-tuesdays-and-fridays","text":"1. The Agony in the Garden 2. The Scourging at the Pillar 3. The Crowning with Thorns 4. The Carrying of the Cross 5. The Cruxifiction and Death of our Lord Jesus Christ","title":"THE SORROWFUL MYSTERIES (TUESDAYS AND FRIDAYS)"},{"location":"2018-10-19-block_rosary/#the-glorious-mysteries-wednesdays-and-sundays","text":"1. The Resurrection of Our Lord 2. The Ascension of Our Lord into Heaven 3. The Descent of the Holy Spirit upon the Apostles and the Blessed Virgin Mary 4. The Assumption of the Blessed Virgin 5. The Coronation of the Blessed Virgin Mary as Queen of Heaven and Earth","title":"THE GLORIOUS MYSTERIES (WEDNESDAYS AND SUNDAYS)"},{"location":"2018-10-19-block_rosary/#the-luminous-mysteries-thursdays","text":"1. The Baptism of Our Lord 2. The Wedding at Cana 3. The Proclamation of the Good News and Call to Conversion 4. The Transfiguration 5. The Institution of the Holy Eucharist After reciting Glory be of each decade, say... O my Jesus, forgive us our sins, save us from the fires of hell and bring all souls into heaven especially those who most need of your mercy.","title":"THE LUMINOUS MYSTERIES (THURSDAYS)"},{"location":"2018-10-19-block_rosary/#hail-holy-queen","text":"Hail Holy Queen, Mother of Mercy, hail our life, our sweetness and our hope. To you do we cry, poor banished children of Eve, to you do we send up our sighs, mourning and weeping in this valley of tears. Turn then, most gracious advocate, your eyes of mercy towards us; and after this our exile, show unto us the blessed fruit of your womb, Jesus. O clement, o loving, o sweet Virgin Mary. V. Pray for us, O Holy Mother of God R. That we may be made worthy of the promises of Christ. LET US PRAY: O God, whose only begotten Son, by His life, death and resurrection, has purchased for us the rewards of eternal life. Grant, we beseech you, that meditating upon these mysteries of the most Holy Rosary of the Blessed Virgin Mary, we may imitate what they contain and obtain what they promised, through Christ, our Lord, AMEN.","title":"HAIL HOLY QUEEN"},{"location":"2018-10-19-block_rosary/#antiphon","text":"We fly to your patronage, o Holy Mother of God, despise not our petitions in our necessities, but deliver us from all dangers, o glorious and blessed Virgin Mary.","title":"ANTIPHON"},{"location":"2018-10-19-block_rosary/#the-litany-of-the-immaculate-heart-of-mary","text":"","title":"THE LITANY OF THE IMMACULATE HEART OF MARY"},{"location":"2018-10-19-block_rosary/#to-be-recited-on-saturday","text":"V. Lord, have mercy on us. R. Lord, have mercy on us. V. Christ, have mercy on us. R. Christ, have mercy on us. V. Lord, have mercy on us. R. Lord, have mercy on us. V. Christ, hear us. R. Christ, hear us. V. Christ, graciously hear us. R. Christ, graciously hear us. V. God the Father in heaven R. Have mercy on us. V. God the Holy Spirit R. Have mercy on us. Litany response Heart of Mary, Pray for us Heart of Mary, united to the heart of Jesus, Pray for us Heart of Mary, Orgen of the Holy Spirit, Pray for us Heart of Mary, Sanctuary of Divine Trinity, Pray for us Heart of Mary, Tabernacle of God Incarnate, Pray for us Heart of Mary, imaculate from your creation, Pray for us Heart of Mary, full of grace, Pray for us Heart of Mary, blessed among all hearts, Pray for us Heart of Mary, Throne of Glory, Pray for us Heart of Mary, holy cause of Divine Love, Pray for us Heart of Mary, fastened to the cross with Jesus Crucified, Pray for us Heart of Mary, comforter of the afflicted, Pray for us Heart of Mary, refuge of sinners, Pray for us Heart of Mary, hope of the agonizing, Pray for us Heart of Mary, seat of mercy, Pray for us V. Lamb of God, who takes away the sins of the world, R. Spare us O Lord V. Lamb of God, who takes away the sins of the world, R. Graciously hear us O Lord V. Lamb of God, who takes away the sins of the world, R. Have mercy on us V. Christ hear us R. Christ, graciously hear us V. Immaculate Mary, meek and humble of heart, R. Make our hearts according to the heart of Jesus V. Pray for us, O Holy Mother of God R. That we may be made worthy of the promises of Christ","title":"(to be recited on Saturday)"},{"location":"2018-10-19-block_rosary/#in-memorare","text":"","title":"IN MEMORARE"},{"location":"2018-10-19-block_rosary/#to-be-recited-everyday","text":"Remember, O most gracious Virgin Mary, that never was it known that anyone, who fled to your protection, implored your help and sought your intercession, was left unaided. Inspired with this confidence, I fly unto you, O Virgin of Virgins, my Mother, to you I come, before you I stand, sinful and sorrowful. O Mother of the Word Incarnate, despise not my petitions, but in your mercy, hear and answer me, AMEN.","title":"(to be recited everyday)"},{"location":"2018-10-19-block_rosary/#act-of-consecration-to-the-immaculate-heart-of-mary","text":"","title":"ACT OF CONSECRATION TO THE IMMACULATE HEART OF MARY"},{"location":"2018-10-19-block_rosary/#to-be-recited-on-saturday_1","text":"O Mary, powerful Virgin and Mother of Mercy, Queen of Heaven and Refuge of Sinners, we consecrate ourselves to your Immaculate Heart. To you, we consecrate all the we have and all that we are. To you, we entrust our home, our family and our country. We wish that everything be yours and may share in the benefits of your motherly protection. Therefore we solemnly renew our baptismal vows. We renounce the devil, his works and his attractions. We pledge loyalty to the guidance and leadership of the Holy Father, the Pope and the Bishops. We promise to obey the commandments of God and our Holy Mother, the Church, and in particular, to sanctify the Lord's day, Sunday. We promise to say our daily prayers, to recite the rosary in our family and to make frequent use of the sacraments of Confession and Holy Communion. Finally, O glorious Mother of God and merciful Mother of Mankind, we humbly pray that this wholehearted consecration to your Immaculate Heart, may obtain the conversion of pagans and of sinners, that it may hasten the triumph of the Sacred Heart of Jesus, your Divine Son, all over the world, AMEN.","title":"(to be recited on Saturday)"},{"location":"2018-10-19-block_rosary/#peace-prayer-to-our-lady-of-fatima","text":"","title":"PEACE PRAYER TO OUR LADY OF FATIMA"},{"location":"2018-10-19-block_rosary/#to-be-recited-on-saturday_2","text":"Queen of the Most Holy Rosary, refuge of the human race, we are confident in obtaining peace, mercy, grace and help in the present calamity, through the goodness of your maternal heart. FOR PEACE IN THE PHILIPPINES Three (3) Hail Marys... Our Lady of Fatima, Pray for us FOR THE INTENTIONS OF THE SPONSORS One (1) Our Father One (1) Hail Mary One (1) Glory be Our Lady of Fatima, Pray for us FOR THE POOR SOULS IN PURGATORY One (1) Our Father One (1) Hail Mary One (1) Glory be Our Lady of Fatima, Pray for us V. Eternal rest give unto them, O Lord R. And let your perpetual light shine upon them V. May the rest in peace R. AMEN. V. Most Sacred Heart of Jesus (3x) R. Have mercy on us (3x) V. Immaculate Heart of Mary R. Pray for us KEEP SILENT AND ASK WHATEVER FAVOR YOU WISH FROM OUR BLESSED MOTHER.","title":"(to be recited on Saturday)"},{"location":"2018-10-19-block_rosary/#farewell-to-our-lady","text":"","title":"FAREWELL TO OUR LADY"},{"location":"2018-10-19-block_rosary/#to-be-recited-on-the-last-day-of-visit","text":"Our Lady of Fatima and Immaculate Mother of God, before leaving our humble dwelling, we desire to express the pain and sorrow that fill our souls at seeing you depart from our midst. Thanks O Mother, for having remained among us, your humble and devoted children. Thank you for the benefits, with which no merit on our partyou have granted on us. Do not forget that in this house, there are hearts that love you and are eager for the moment of receiving you anew in our midst. Forgive and excusee us, Most Merciful Mother, if we did not know how to honor you as due and for not having profited enough from the visit through our frailty and ignorance. Mother, never forget us in time or in eternity and we hope from your unlimited bounty that in the same way as we willingly have opened our doors to welcome you in our home, you may also one day open for us the gates of heaven, AMEN. OUR LADY OF FATIMA, PRAY FOR US Legion of Mary Christ the King Parish 050803","title":"(to be recited on the last day of visit)"},{"location":"2018-10-19-configure_git/","text":"have a Github account, make sure to register . download and install git for windows git config --global color.ui true git config --global user.name \"YOUR NAME\" git config --global user.email \"YOUR@EMAIL.com\" ssh-keygen -t rsa -b 4096 -C \"YOUR@EMAIL.com\" leave the file path as is leave the password empty","title":"Setup Git and Github"},{"location":"2018-10-19-install_rails/","text":"Install Ruby First install some dependencies for Ruby and Rails. Make sure you have stable internet to proceed. start by adding the Node.js and Yarn repositories sudo apt install curl sudo curl -L https://deb.nodesource.com/setup_8.x | sudo -E bash - sudo apt-get install -y nodejs ## You may also need development tools to build native addons: sudo apt-get install gcc g++ make ## To install the Yarn package manager, run: sudo curl -L https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - sudo echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update && sudo apt install -y yarn sudo apt install -y git-core zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev nodejs yarn curl Install using rbenv, which sets up a controlled version environment for ruby. cd git clone https://github.com/rbenv/rbenv.git ~/.rbenv echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc echo 'eval \"$(rbenv init -)\"' >> ~/.bashrc exec $SHELL git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build echo 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' >> ~/.bashrc exec $SHELL rbenv install 2.5.1 rbenv global 2.5.1 ruby -v install Bundler `gem install bundler` rbenv users need to run rbenv rehash after installing bundler. `rbenv rehash` `gem install rails -v 5.2.1` After the installation is complete, check the rails version. rails -v Getting Git see the article on Configuring Git Setting Up MySQL see the article on Setting Up MySQL Rails ships with sqlite3 as the default database. This is good only for simple and small databases. MySQL is much much better, especially when you're coming from a background of PHP. Use the software repo to install and take note of the password you set and update the database.yml file. Setting Up PostgreSQL see the article on Setting Up PostgreSQL PostgreSQL is even better than MySQL for normal implementations of Rails Web applications. Use the software repo to install and take note of the password you set and update the database.yml file. Inspect if everything works #### If you want to use SQLite (easiest for dev; bad for prod) rails new my_test_app #### If you want to use MySQL rails new myapp -d mysql #### If you want to use Postgres # Note that this will expect a postgres user with the same username # as your app, you may need to edit config/database.yml to match the # user you created earlier rails new myapp -d postgresql # Move into the application directory cd my_test_app bundle exec spring binstub --all bundle update # If you setup MySQL or Postgres with a username/password, modify the # config/database.yml file to contain the username/password that you specified # Create the database rails db:create rails server visit http://localhost:3000 to view your new website","title":"Install rails in Ubuntu 18.04"},{"location":"2018-10-19-install_rails/#install-ruby","text":"First install some dependencies for Ruby and Rails. Make sure you have stable internet to proceed. start by adding the Node.js and Yarn repositories sudo apt install curl sudo curl -L https://deb.nodesource.com/setup_8.x | sudo -E bash - sudo apt-get install -y nodejs ## You may also need development tools to build native addons: sudo apt-get install gcc g++ make ## To install the Yarn package manager, run: sudo curl -L https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - sudo echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update && sudo apt install -y yarn sudo apt install -y git-core zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev nodejs yarn curl Install using rbenv, which sets up a controlled version environment for ruby. cd git clone https://github.com/rbenv/rbenv.git ~/.rbenv echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc echo 'eval \"$(rbenv init -)\"' >> ~/.bashrc exec $SHELL git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build echo 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' >> ~/.bashrc exec $SHELL rbenv install 2.5.1 rbenv global 2.5.1 ruby -v install Bundler `gem install bundler` rbenv users need to run rbenv rehash after installing bundler. `rbenv rehash` `gem install rails -v 5.2.1` After the installation is complete, check the rails version. rails -v","title":"Install Ruby"},{"location":"2018-10-19-install_rails/#getting-git","text":"see the article on Configuring Git","title":"Getting Git"},{"location":"2018-10-19-install_rails/#setting-up-mysql","text":"see the article on Setting Up MySQL Rails ships with sqlite3 as the default database. This is good only for simple and small databases. MySQL is much much better, especially when you're coming from a background of PHP. Use the software repo to install and take note of the password you set and update the database.yml file.","title":"Setting Up MySQL"},{"location":"2018-10-19-install_rails/#setting-up-postgresql","text":"see the article on Setting Up PostgreSQL PostgreSQL is even better than MySQL for normal implementations of Rails Web applications. Use the software repo to install and take note of the password you set and update the database.yml file.","title":"Setting Up PostgreSQL"},{"location":"2018-10-19-install_rails/#inspect-if-everything-works","text":"#### If you want to use SQLite (easiest for dev; bad for prod) rails new my_test_app #### If you want to use MySQL rails new myapp -d mysql #### If you want to use Postgres # Note that this will expect a postgres user with the same username # as your app, you may need to edit config/database.yml to match the # user you created earlier rails new myapp -d postgresql # Move into the application directory cd my_test_app bundle exec spring binstub --all bundle update # If you setup MySQL or Postgres with a username/password, modify the # config/database.yml file to contain the username/password that you specified # Create the database rails db:create rails server visit http://localhost:3000 to view your new website","title":"Inspect if everything works"},{"location":"2018-10-19-setup_mysql/","text":"Go to the terminal sudo apt-get install mysql-server mysql-client libmysqlclient-dev libmysqlclient-dev allows you to compile useful plugins for mysql use. As there is no password set for root user, simply login with blank password sudo mysql -u root -p Enter password: (press enter as no password is set) after then can easily run query ALTER USER 'root'@'locahost' IDENTIFIED BY '<password>';","title":"Setting Up MySQL in Ubuntu 18.04"},{"location":"2018-10-19-setup_postgresql/","text":"add a new repository to easily install a recent version of Postgres sudo sh -c \"echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' > /etc/apt/sources.list.d/pgdg.list\" wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add - sudo apt-get update sudo apt-get install postgresql-common sudo apt-get install postgresql-9.5 libpq-dev You will now have a user named postgres with no password sudo -u postgres psql # enter the psql environment as the user postgres \\q # quit psql environment create a user with permission to create databases sudo -u postgres createuser roycan -s # If you would like to set a password for the user, you can do the following sudo -u postgres psql postgres=# \\password roycan","title":"Setting Up PostgreSQL in Ubuntu 18.04"},{"location":"2018-11-01-aws_upkeep/","text":"These are my 6 steps for using an AWS account for a development team. This is best after a weekend of AWS workshops/ training. Remove access rights from outsiders (non-team members) Set an agreement on naming conventions (e.g. prefix new instances with 3-letter acronyms or first 3 letters of the name) Self-name/ prefix cloud resources so we know who will terminate Terminate all un-named/ unclaimed billable cloud resources Assign someone to monitor billing on a regular basis When there are live projects, assign someone to monitor instances on a regular basis","title":"Setting up an AWS account for Team Development"},{"location":"2018-11-IC-comments/","text":"COMMENTS SECTION This section contains the collated comments from the IC personnel who reviewed the website screens. These were gathered during a series of walkthroughs and user acceptance tests conducted at the Commission. Note that major comments were immediately implemented, and are reflected in the screens shown in the previous section. Other comments will be revisited as the system is developed. FINANCIAL EXAMINATIONS GROUP Brokers Company side: Change the input format for the schedules and summary; align the design with the format of the output Create an attachment column on companies' side for supporting documents/uploading of excel Examiner\u2019s side: Create an organizational structure for quarterly submissions. See Annual Remarks column on summary HMO Company Side: Question: What if the company wasn\u2019t able to submit last quarter? Answer: It will be noted in the status how many years or quarters the company is late. Examiner Side: See compliance with Net worth, RBC, and ATR Instantly show all good companies Fix data tables Add total assets, total liabilities, net worth, share capital, adjustments, accounted and not accounted in the view action Life/MBA/Trust Company Side: Issues on composite companies 2 Annual Statement submissions 2 Quarterly Submissions Add another non-life database for composite companies Checklist for MBA Status Terms: In process For payment and Pick - up Quarterly Submission Columns (Summary) Net worth, RBC2, etc Real-time generation of report for Examinations Non-Life Company Side Annual Statement Checklist (to be discussed further) In the view history: The company should be able to see the file they have submitted (add a link for a preview (only) of submission) Status for certificate request as well as the payment amount Status Terms: In process For Payment and Pick - Up Examiner Side Certification Request Display number of companies who submitted as of the deadline (annual and quarterly) Pick up for Certificate Request (to be discussed further) Status Terms In process For Payment and Pick - Up Pick up details / Remarks / Claim Stub / Link to Cashier for Order of Payment (for discussion) Annual Statement Submission Columns: Company Name, Assets, Liabilities, Net Worth Real-time generation of the report (changes in net worth, etc) Pre-Need Division Company side: Quarterly: Trust fund has maximum of three separate Balance Sheet and Income Statement for the plans: Life/Memorial, Pension, Education Per line item, there will be a working balance sheet Collections submission: Remove the Planholders\u2019 Outstanding Balance Table Add feature for viewing of outstanding balance per unique number of plan Examiner side: Create an organizational structure for the submissions. TECHNICAL SERVICES GROUP Statistics and Research Division Company Side: No Comment Examiner Side: General Comments: Annual Statements and Quarterly Statements from FEG are not yet ok, Annual and Quarterly Statements of FEG side should be first completed before they comment on it. Industry Summary should also be shown (convert the Card List into tables with columns) Specific Comments: Selected Financial Statement Process Similar for all: Total Assets Total Liabilities Total Networth/ Fund Balance Total Investments Net Income Premiums Earned Specific to Life Business Done Number of Policies Number of Certificates Number of Insured Lives Number of Sum Assured Premiums By Type Total Premiums and Considerations New Business: First Year Total Premiums and Considerations New Business: Single Total Premiums and Considerations Renewal Total Premiums and Considerations Direct Business Total Reinsurance Premiums Assumed Total Reinsurance Premiums Ceded Total Premiums and Considerations Specific to Non-Life Business Done Number of Policies per Business Line Number of Insured Lives per Business Line Premiums Earned per Business Line Losses Incurred per Business Line Specific to MBA Business Done Basic Fund: Number of Certificates, Members and Dependents Total Amount of Insurance: Members and Dependents Optional Fund (Micro Products and Other Than Micro Products are separated): Number of Policies (Individual, Insurance Policies and Certificates) Number of Amount of Insurance Basic Member Benefits: Total Number of Claims Total Amounts Paid Optional Insurance: Total Number of Claims Total Amounts Paid Agency Hired Migrant Workers: To be emailed Rating Division Company Side: CTPL Monthly Submissions Dapat COCAF and OICP are the only groups who submit to this It depends in DOTR if the companies will submit individually or the COCAF and OICP only For discussion with the Deputy Commissioner but for now, retain current design Quarterly - Total Loss: A company can't submit a vehicle in subrogation if it is declared in nonrestorable. can't also submit if the vehicle is not in restorable Quarterly - FST: Row input per OR and place of payment Include schedule (computation for the all the OR) Examiner Side: General Comments Fix Column names and data shown Specific Comments PPAI Grand Total Vehicle Insured Grand Total Basic Premium Grand Total Incidents Grand Total Count for Death, Medical and Disability Offsite - Total Loss Current Submission # of Restorable/ Unrestorable/ Subrogation Running Total of # of Restorable/ Unrestorable/ Subrogation Want to have: screen for all submissions of company Offsite - Adjuster Current Submission # of Reported Pending/ Finished Running Total of # of Reported Pending/ Finished Want to have: screen for all submissions of company Offsite - FST Agency place where OR is paid Investment Division Company Side: Include Covering Letter Letter Request to cover how much he/she wants to invest, others Some entities such as <Financial Institutions, Banks> also request to investment Paulo\u2019s Suggestion: Edit submission requirement and attach additional instructions for companies who will submit a request to investment SPUCRI screens, data flow diagram, and database design Link of submitted files in the history for downloading View days delayed Status Terms Processing Ready for Payment For Releasing Completed Examiner Side: Filter submission by the examiner Assignment Roles Letter Reply to be print and sign by the commissioner the send back to the company Generate Tracking Number Approval of Investment: Additional Column and remove the deadline Status Terms Processing Ready for Payment For Releasing Specific bond, company, etc then total Actuarial Division Company Side: Non-expeditious upload files include supporting submission per product instead of separate supporting submissions card Request: For examiners to be able to edit/change uploadable files Unify Status and FIO Status: New | Pending | FIO | Approval Request: Add Status Column to Company Submissions where examiner can add/comment whatever supporting documents the companies need to submit Request: Upon error, display contact person/email/number Examiner Side: Add Column \"company type\" Add: Status of Submission Reinsurance Division Company Side: For Approval of Facultative Placements Abroad form, create functionality in which company can add rows for the: name of reinsurer/broker resident agent list of securities of Broker Examiner Side: Create organizational structure for the list of outputs. (i.e. can be sorted by date submitted or by name of company) LEGAL SERVICES GROUP Regulation, Enforcement, and Prosecution Division (REPD) Staff Side: Change the type of form and type of product to a drop-down Public Assistance and Mediation Division (PAMD) Staff Side: Change drop-down to a table with searching function (for company list) Edit output form columns Change Industry type to Company Type Remarks Status type: Terminated and Settled 1. If settled Status, Date of Settlement, and amount 2. If terminated Status and Date Terminated Policy number / Contract Number Licensing Division The company profile could be edited, updated and can add additional details (when permitted to do so) If a company will edit their profile, they will put the edited data but should be checked by the staff of licensing for approval Historical data (for clarification) but not included in this phase Company type Add license status - active - inactive - with pending application - under conservatorship - under receivership - under liquidation - others (add input type) - add remarks in status - add history when and who edited the status when company link is clicked in the table, it will redirect to a page that shows the company profile Conservatorship, Receivership, and Liquidation Division (CRL) No comments Claims Adjudication Division (CAD) Input If the type is chosen, add input type: - Date Due (D) - date - Date of Hearing (H) - date and time If the type drop-down is clicked, the status will be shown. Initial Status - Summons Issued Output New Tab - Summary Add column action (Update Case) - Calendar of Hearings (Date of Hearing only) Date and Time Case Number Type Complainant Respondent Hearing officer Stenographer Status Remarks - Calendar of Due (Date Due only) Case Number Type Complainant Respondent Stenographer Hearing Officer Date Days Pending Dismissed and Decided are not included in the D or H Suretyship Section No comments Microinsurance --------------------------- No comments","title":"2018 11 IC comments"},{"location":"2018-11-IC-comments/#comments-section","text":"This section contains the collated comments from the IC personnel who reviewed the website screens. These were gathered during a series of walkthroughs and user acceptance tests conducted at the Commission. Note that major comments were immediately implemented, and are reflected in the screens shown in the previous section. Other comments will be revisited as the system is developed.","title":"COMMENTS SECTION"},{"location":"2018-11-IC-comments/#financial-examinations-group","text":"","title":"FINANCIAL EXAMINATIONS GROUP"},{"location":"2018-11-IC-comments/#brokers","text":"Company side: Change the input format for the schedules and summary; align the design with the format of the output Create an attachment column on companies' side for supporting documents/uploading of excel Examiner\u2019s side: Create an organizational structure for quarterly submissions. See Annual Remarks column on summary","title":"Brokers"},{"location":"2018-11-IC-comments/#hmo","text":"","title":"\u00a0HMO"},{"location":"2018-11-IC-comments/#company-side","text":"Question: What if the company wasn\u2019t able to submit last quarter? Answer: It will be noted in the status how many years or quarters the company is late.","title":"Company Side:"},{"location":"2018-11-IC-comments/#examiner-side","text":"See compliance with Net worth, RBC, and ATR Instantly show all good companies Fix data tables Add total assets, total liabilities, net worth, share capital, adjustments, accounted and not accounted in the view action","title":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examiner Side:"},{"location":"2018-11-IC-comments/#lifembatrust","text":"Company Side: Issues on composite companies 2 Annual Statement submissions 2 Quarterly Submissions Add another non-life database for composite companies Checklist for MBA Status Terms: In process For payment and Pick - up Quarterly Submission Columns (Summary) Net worth, RBC2, etc Real-time generation of report for Examinations","title":"Life/MBA/Trust"},{"location":"2018-11-IC-comments/#non-life","text":"","title":"\u00a0Non-Life"},{"location":"2018-11-IC-comments/#company-side_1","text":"Annual Statement Checklist (to be discussed further) In the view history: The company should be able to see the file they have submitted (add a link for a preview (only) of submission) Status for certificate request as well as the payment amount Status Terms: In process For Payment and Pick - Up","title":"Company Side"},{"location":"2018-11-IC-comments/#examiner-side_1","text":"Certification Request Display number of companies who submitted as of the deadline (annual and quarterly) Pick up for Certificate Request (to be discussed further) Status Terms In process For Payment and Pick - Up Pick up details / Remarks / Claim Stub / Link to Cashier for Order of Payment (for discussion) Annual Statement Submission Columns: Company Name, Assets, Liabilities, Net Worth Real-time generation of the report (changes in net worth, etc)","title":"Examiner Side"},{"location":"2018-11-IC-comments/#pre-need-division","text":"Company side: Quarterly: Trust fund has maximum of three separate Balance Sheet and Income Statement for the plans: Life/Memorial, Pension, Education Per line item, there will be a working balance sheet Collections submission: Remove the Planholders\u2019 Outstanding Balance Table Add feature for viewing of outstanding balance per unique number of plan Examiner side: Create an organizational structure for the submissions.","title":"Pre-Need Division"},{"location":"2018-11-IC-comments/#technical-services-group","text":"","title":"TECHNICAL SERVICES GROUP"},{"location":"2018-11-IC-comments/#statistics-and-research-division","text":"","title":"Statistics and Research Division"},{"location":"2018-11-IC-comments/#company-side_2","text":"No Comment","title":"Company Side:"},{"location":"2018-11-IC-comments/#examiner-side_2","text":"General Comments: Annual Statements and Quarterly Statements from FEG are not yet ok, Annual and Quarterly Statements of FEG side should be first completed before they comment on it. Industry Summary should also be shown (convert the Card List into tables with columns) Specific Comments: Selected Financial Statement Process Similar for all: Total Assets Total Liabilities Total Networth/ Fund Balance Total Investments Net Income Premiums Earned Specific to Life Business Done Number of Policies Number of Certificates Number of Insured Lives Number of Sum Assured Premiums By Type Total Premiums and Considerations New Business: First Year Total Premiums and Considerations New Business: Single Total Premiums and Considerations Renewal Total Premiums and Considerations Direct Business Total Reinsurance Premiums Assumed Total Reinsurance Premiums Ceded Total Premiums and Considerations Specific to Non-Life Business Done Number of Policies per Business Line Number of Insured Lives per Business Line Premiums Earned per Business Line Losses Incurred per Business Line Specific to MBA Business Done Basic Fund: Number of Certificates, Members and Dependents Total Amount of Insurance: Members and Dependents Optional Fund (Micro Products and Other Than Micro Products are separated): Number of Policies (Individual, Insurance Policies and Certificates) Number of Amount of Insurance Basic Member Benefits: Total Number of Claims Total Amounts Paid Optional Insurance: Total Number of Claims Total Amounts Paid Agency Hired Migrant Workers: To be emailed","title":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examiner Side:"},{"location":"2018-11-IC-comments/#rating-division","text":"","title":"Rating Division"},{"location":"2018-11-IC-comments/#company-side_3","text":"CTPL Monthly Submissions Dapat COCAF and OICP are the only groups who submit to this It depends in DOTR if the companies will submit individually or the COCAF and OICP only For discussion with the Deputy Commissioner but for now, retain current design Quarterly - Total Loss: A company can't submit a vehicle in subrogation if it is declared in nonrestorable. can't also submit if the vehicle is not in restorable Quarterly - FST: Row input per OR and place of payment Include schedule (computation for the all the OR)","title":"Company Side:"},{"location":"2018-11-IC-comments/#examiner-side_3","text":"General Comments Fix Column names and data shown Specific Comments PPAI Grand Total Vehicle Insured Grand Total Basic Premium Grand Total Incidents Grand Total Count for Death, Medical and Disability Offsite - Total Loss Current Submission # of Restorable/ Unrestorable/ Subrogation Running Total of # of Restorable/ Unrestorable/ Subrogation Want to have: screen for all submissions of company Offsite - Adjuster Current Submission # of Reported Pending/ Finished Running Total of # of Reported Pending/ Finished Want to have: screen for all submissions of company Offsite - FST Agency place where OR is paid","title":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examiner Side:"},{"location":"2018-11-IC-comments/#_1","text":"","title":""},{"location":"2018-11-IC-comments/#investment-division","text":"","title":"Investment Division"},{"location":"2018-11-IC-comments/#company-side_4","text":"Include Covering Letter Letter Request to cover how much he/she wants to invest, others Some entities such as <Financial Institutions, Banks> also request to investment Paulo\u2019s Suggestion: Edit submission requirement and attach additional instructions for companies who will submit a request to investment SPUCRI screens, data flow diagram, and database design Link of submitted files in the history for downloading View days delayed Status Terms Processing Ready for Payment For Releasing Completed","title":"Company Side:"},{"location":"2018-11-IC-comments/#examiner-side_4","text":"Filter submission by the examiner Assignment Roles Letter Reply to be print and sign by the commissioner the send back to the company Generate Tracking Number Approval of Investment: Additional Column and remove the deadline Status Terms Processing Ready for Payment For Releasing Specific bond, company, etc then total","title":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examiner Side:"},{"location":"2018-11-IC-comments/#actuarial-division","text":"","title":"Actuarial Division"},{"location":"2018-11-IC-comments/#company-side_5","text":"Non-expeditious upload files include supporting submission per product instead of separate supporting submissions card Request: For examiners to be able to edit/change uploadable files Unify Status and FIO Status: New | Pending | FIO | Approval Request: Add Status Column to Company Submissions where examiner can add/comment whatever supporting documents the companies need to submit Request: Upon error, display contact person/email/number","title":"Company Side:"},{"location":"2018-11-IC-comments/#examiner-side_5","text":"Add Column \"company type\" Add: Status of Submission","title":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examiner Side:"},{"location":"2018-11-IC-comments/#reinsurance-division","text":"Company Side: For Approval of Facultative Placements Abroad form, create functionality in which company can add rows for the: name of reinsurer/broker resident agent list of securities of Broker Examiner Side: Create organizational structure for the list of outputs. (i.e. can be sorted by date submitted or by name of company)","title":"Reinsurance Division"},{"location":"2018-11-IC-comments/#legal-services-group","text":"","title":"LEGAL SERVICES GROUP"},{"location":"2018-11-IC-comments/#regulation-enforcement-and-prosecution-division-repd","text":"","title":"Regulation, Enforcement, and Prosecution Division (REPD)"},{"location":"2018-11-IC-comments/#staff-side","text":"Change the type of form and type of product to a drop-down","title":"Staff Side:"},{"location":"2018-11-IC-comments/#public-assistance-and-mediation-division-pamd","text":"","title":"Public Assistance and Mediation Division (PAMD)"},{"location":"2018-11-IC-comments/#staff-side_1","text":"Change drop-down to a table with searching function (for company list) Edit output form columns Change Industry type to Company Type Remarks Status type: Terminated and Settled 1. If settled Status, Date of Settlement, and amount 2. If terminated Status and Date Terminated Policy number / Contract Number","title":"Staff Side:"},{"location":"2018-11-IC-comments/#licensing-division","text":"The company profile could be edited, updated and can add additional details (when permitted to do so) If a company will edit their profile, they will put the edited data but should be checked by the staff of licensing for approval Historical data (for clarification) but not included in this phase Company type Add license status - active - inactive - with pending application - under conservatorship - under receivership - under liquidation - others (add input type) - add remarks in status - add history when and who edited the status when company link is clicked in the table, it will redirect to a page that shows the company profile","title":"Licensing Division"},{"location":"2018-11-IC-comments/#conservatorship-receivership-and-liquidation-division-crl","text":"No comments","title":"Conservatorship, Receivership, and Liquidation Division (CRL)"},{"location":"2018-11-IC-comments/#claims-adjudication-division-cad","text":"","title":"Claims Adjudication Division (CAD)"},{"location":"2018-11-IC-comments/#input","text":"If the type is chosen, add input type: - Date Due (D) - date - Date of Hearing (H) - date and time If the type drop-down is clicked, the status will be shown. Initial Status - Summons Issued","title":"Input"},{"location":"2018-11-IC-comments/#output","text":"New Tab - Summary Add column action (Update Case) - Calendar of Hearings (Date of Hearing only) Date and Time Case Number Type Complainant Respondent Hearing officer Stenographer Status Remarks - Calendar of Due (Date Due only) Case Number Type Complainant Respondent Stenographer Hearing Officer Date Days Pending Dismissed and Decided are not included in the D or H","title":"Output"},{"location":"2018-11-IC-comments/#suretyship-section","text":"No comments Microinsurance --------------------------- No comments","title":"Suretyship Section"},{"location":"2018-collated_screens/","text":"IC-FEDS WEBSITE SCREENS SCREENS SECTION This section shows the screens that were designed corresponding to the various Insurance Commission processes that were selected for Proof-of-Concept development. Note that the website will have screens for Insurance Commission examiners, and screens for the users from regulated entities (companies). This document presents both types of screens together, organized by IC Division, for greater ease of understanding. The screens presented here are updated from the preliminary designs that are included in the System Design Specification document.The updates are based on the comments of IC staff who reviewed the site during user-acceptance testing. A compilation of these comments can be found in the Comments Section of this document. FINANCIAL EXAMINATIONS GROUP Brokers Division ----------------------------------------- [Company\u2019s view] This is the Submissions Dashboard for companies under Brokers Division. [Examiner\u2019s view] This is the dashboard for examiners of Brokers Division. Annual Submission and Examination of Financial Condition/Standing [Company\u2019s view] This is the screen where the company must upload the checklist of files needed. [Examiner\u2019s view] This is the Submitted Annual Reports page. The year, together with the number of companies that submitted an Annual Report, are listed on this screen. Upon clicking the year, the user will see the list of companies that submitted that year. [Examiner\u2019s view] This is the list of companies that submitted Annual Report for the year 2017. The name of Company, Total Assets, Total Liabilities, Total Equity, Net Worth and Remarks are already flashed on the screen. When the user click the company name, the user will see the Working Balance sheet of the company. [Examiner\u2019s view] This is the Working balance sheet. When the user click the accounts (summaries), the details will be shown. [Examiner\u2019s view] This is the details of the summary. For this example, this is the Schedule of Cash and Cash Equivalents. Quarterly Submission and Monitoring of Client\u2019s Money Compliance [Company\u2019s view] The first screen for the Statement of Business Operation (SBO) Form is the Company Profile which will come straight from the Licensing\u2019s records. All forms for this process is separated using tabs. Once the user click a tab, he/she will be redirected to the form indicated at the top of the tab. [Company\u2019s view] This is the Receivable from insured tab. [Company\u2019s view] This is the Clients\u2019 Money Account tab. [Company\u2019s view] This is the Payable from Insurance Companies tab. [Examiner\u2019s view] This screen lists all the companies that submitted SBO. Once the examiner click the name of the company, the screen will show the submission details of the company. [Examiner\u2019s view] Like the company\u2019s view, each section is separated using tabs. This screen is the Company profile tab. [Examiner\u2019s view] This is the receivable from insured tab. [Examiner\u2019s view] This is the Clients\u2019 Money Account tab. [Examiner\u2019s view] This is the Payable to Insurance Company tab. [Examiner\u2019s view] Lastly, this is the Summary tab. The examiner can already view the details here - total Receivable from insured (A), total Clients\u2019 Money (B) , the sum of Receivable and Clients\u2019 Money (A+B), the total Payable to insurance company (C), the difference between the sum of Receivable and Clients\u2019 Money, and Payable to insurance company (A+B-C). Finally, the examiner can put any remarks, or comments, he/she needs to write. ============================= HMO Division ------------------------------------- [Company View] Below is the the company dashboard. Shown are the processes accessible by companies. [Examiner View] Below is the examiner dashboard. Shown are the submissions made by companies. Annual Submission and Examination of Financial Statements [Company View] Below is where companies can upload their files for the annual submission. [Company View] Below are the forms for companies to fill out which are tabbed as SFP and SCI for annual submissions. [Examiner View] Below is the submissions by companies for annual reports. Quarterly Submission and Examination of Interim Financial Statements [Company View] Below is where companies can upload their files for quarterly submission [Company View] Below are the forms for companies to fill out which are tabbed as SFP and SCI for quarterly submissions. [Examiner View] Below are the quarterly submissions by companies summarized and individual company view, respectively. ============================= Life/ MBA/ Trust Division -------------------------------------------------- Annual Submission and Examination of Financial Standing of Life Companies with Separate Presentation for Composite Insurance Companies Company View This page will appear upon logging in a company account. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the announcements/updates regarding submissions of documents. There's also the cards which are consisting of all the submissions needed by the companies. Each card consist of the Document submission header, current quarter of submission, its deadline and status of the company on submission. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Upon clicking the Annual Submission card or the Annual Statement from the sidebar, it will redirect to this page. Here, the company can upload the required documents based on the checklist provided by the insurance commission. Each file submission has specific file type allowed. Once the required documents are passed, It will be checked. The submit button is blocked out until all required documents are uploaded. The company can also save as draft to continue uploading later. Upon clicking View History on the sidebar, the user is given an option to which division submission it wants to view. In this specific web screen, It can choose to view all its submissions to Life division. The main page has tables which are divided based on the deadlines of each processes. Each tables can be sorted and filtered to be able to track if they have submitted the documents. Examiner View This page will appear upon logging in an examiner account of insurance commission. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the cards which are consisting of all the submissions needed to be done by the companies. Each card consist of the Document submission header, current quarter of submission and its deadline. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Below the page is a table of certificate requests. The examiner can view incoming requests for certification of companies through a table. The examiner can then take action on each request by viewing it. Upon clicking the Annual Submission card or the Annual Statement from the sidebar, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form. Upon clicking the view button, the examiner will be directed to the page where you can change the status of the submission, download the submitted checklist, and company files. Note: Upon clicking the view icon the computation for net worth will be shown Annual Submission and Examination of Mutual Benefit Association (MBA) Company View This page will appear upon logging in a company account. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the announcements/updates regarding submissions of documents. There's also the cards which are consisting of all the submissions needed by the companies. Each card consist of the Document submission header, current quarter of submission, its deadline and status of the company on submission. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Upon clicking the Annual Submission card or the Annual Statement from the sidebar, it will redirect to this page. Here, the company can upload the required documents based on the checklist provided by the insurance commission. Each file submission has specific file type allowed. Once the required documents are passed, It will be checked. The submit button is blocked out until all required documents are uploaded. The company can also save as draft to continue uploading later. Upon clicking View History on the sidebar, the user is given an option to which division submission it wants to view. In this specific web screen, It can choose to view all its submissions to MBA section. The main page has tables which are divided based on the deadlines of each processes. Each tables can be sorted and filtered to be able to track if they have submitted the documents. Examiner View This page will appear upon logging in an examiner account of insurance commission. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the cards which are consisting of all the submissions needed to be done by the companies. Each card consist of the Document submission header, current quarter of submission and its deadline. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Below the page is a table of certificate requests. The examiner can view incoming requests for certification of companies through a table. The examiner can then take action on each request by viewing it. Upon clicking the MBA Annual Submission card or the MBA Annual Statement from the sidebar, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form. Quarterly Submission and Examination of FRF, RBC2, and Actuarial Valuation Report Company View This page will appear upon logging in a company account. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the announcements/updates regarding submissions of documents. There's also the cards which are consisting of all the submissions needed by the companies. Each card consist of the Document submission header, current quarter of submission, its deadline and status of the company on submission. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Upon clicking the Quarterly Submission on the sidebar or the button on the Quarterly Submission card, it will redirect to this page. This page lists down further processes on quarterly submission. From each quarterly document submission, the user has the option to upload file or input forms. Upon clicking inputs forms from the quarterly submissions page for FRF, it will redirect to this page. The company can input their account here just like what they would in an excel sheet. Upon clicking upload file from the quarterly submissions page for FRF, it will redirect to this page. The user can upload the specified template for the FRF submission. It shall follow the naming convention as well as the file type specified (excel) to be able to upload. Upon clicking upload file from the quarterly submissions page for RBC2, it will redirect to this page. The user can upload the specified template for the RBC2 submission. It shall follow the naming convention as well as the file type specified (excel) to be able to upload. Upon clicking upload file from the quarterly submissions page for AVR, it will redirect to this page. The user can upload the specified template for the AVR submission. It shall follow the naming convention as well as the file type specified (excel) to be able to upload. Upon clicking View History on the sidebar, the user is given an option to which division submission it wants to view. In this specific web screen, It can choose to view all its submissions to Life division. The main page has tables which are divided based on the deadlines of each processes. Each tables can be sorted and filtered to be able to track if they have submitted the documents. Examiner View This page will appear upon logging in an examiner account of insurance commission. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the cards which are consisting of all the submissions needed to be done by the companies. Each card consist of the Document submission header, current quarter of submission and its deadline. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Below the page is a table of certificate requests. The examiner can view incoming requests for certification of companies through a table. The examiner can then take action on each request by viewing it. Upon clicking the Quarterly Submission button from the card or the Quarterly Submission from the sidebar, the examiner will be redirected to this page. This page lists down further processes on quarterly submission. From each quarterly document submission, the examiner has the option to view company submissions by clicking View submissions. Upon clicking the View Submissions from the FRF Submissions card on Quarterly Submissions page, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form. Upon clicking the View Submissions from the RBC Submissions card on Quarterly Submissions page, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form. Upon clicking the view button, it will redirect to this page where you can change the status, download submitted checklist, and company files. Note: Show the computation for RBC Upon clicking the View Submissions from the AVR Submissions card on Quarterly Submissions page, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form. ============================= Non-Life Division ------------------------------------------ Annual Submission and Examination of Financial Standing of Non-Life Companies [Company Side] Upon logging in, the designated staff will be seeing this screen, the Dashboard. There are three cards on the screen, each card represents 1 process under the Division. The first card is for the annual statement submission. The second one is for the quarterly submission and the last one is for the certification request under the Division. On the first card, once the \u2018submissions\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. [Company Side] This is the checklist for the annual submission. Each checklist should have an attachment to be considered or to have a check mark in the allotted box. Unfinished uploads could be continued if \u2018save as draft\u2019 button is clicked. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. Once all of the requirements is uploaded, press the \u2018submit\u2019 button. Once done with all of the processes, the user can log out by clicking the dropdown on the upper right corner of the page. Now, the following screens are for the Non-Life staff (examiner). [Examiner Side] Upon logging in, the designated staff will be seeing this screen, the Dashboard. There are two cards on the screen, each card represents submissions. The first card is for the annual statement submission. The second one is for the quarterly submissions. The list of certification request is already displayed and can be sorted by company, the name of the request and the date it was submitted. On the first card, once the \u2018view submissions\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. [Examiner Side] This screen displays the submitted annual reports per year, the total number of companies under the division and the number of companies who submitted. Once the year is clicked, it will redirect to this page. [Examiner Side] This page shows information about the submissions of a company. There\u2019s a \u2018view\u2019 action that once clicked, it will redirect to this page that lets the examiner download the submission checklist as well as update the status. [Examiner Side] There a link below the company name that says \u2018view working balance sheet\u2019. Once clicked, it will redirect to this page. [Examiner Side] This page shows the entire balance sheet that is plotted in the excel template. It can be exported to excel as well as update it by uploading the updated wbs excel file. Once uploaded, it will be parsed by the system and will automatically display the updated version. Quarterly Submission and Examination of FRF, RBC2, and Actuarial Valuation Report [Company Side] On the second card, once the \u2018submissions\u2019 button is clicked, the user will be redirected to this page. There are three cards inside the quarterly submissions. The frf submission, rbc2 submission, and avr submission. Once the \u2018upload files\u2019 in the first card is clicked, it will redirect to a page shown in the next picture. [Company Side] This page is where the user will upload the frf submission. It is important to follow the file format for the accurate parsing of data. Once the \u2018Input form\u2019 button is clicked in the previous page, the user will be redirected to the Input forms shown in the next picture. [Company Side] This page shows the sample template for the statement of financial position as well as the statement of comprehensive income that has been plotted in the original excel templates. [Company Side] Going back to the cards inside the process number 2, once the \u2018upload files\u2019 in the second card is clicked, it will redirect to this page that lets the user upload the desired document with the right file format. [Company Side] Once the \u2018upload files\u2019 in the last card under the 2nd process is clicked, it will redirect to this page which will also let the user upload the desired document with the right file format as well. Once done with all of the processes, the user can log out by clicking the dropdown on the upper right corner of the page. Now, the following screens are for the Non-Life staff (examiner). [Examiner Side] On the second card, once the \u2018submissions\u2019 button is clicked, the user will be redirected to this page. There are three cards inside the quarterly submissions. The frf submission, rbc2 submission, and avr submission. Once the \u2018view submissions\u2019 in the first card is clicked, it will redirect to a page shown in the next picture. [Examiner Side] This page shows the submissions and some information per company. Once the \u2018view\u2019 action is clicked, it redirects to the next page shown below. [Examiner Side] This page lets the examiner download the submission checklist as well as update the status. Issuance of Certification on Financial Condition of Insurance Companies [Company Side] Once the \u2018submissions\u2019 in the last card is clicked, it will redirect to this page which is a set of checklist of certifications that could be requested. If the desired certification is not included in the checklist, the user could add the name if \u2018add\u2019 button is clicked. For additional notes or information, it could be stated in the space below titled \u2018Reason for request\u2019. [Company Side] Below the options in the left side of the page are the history area. In this page, all of the submissions are recorded and categorized by year, document (description/title), deadline, date submitted, status and penalty. In the annual submission, once the document title is clicked, it will show a page of the document preview. ============================= Pre-Need Division ------------------------------------------ [Company\u2019s view] This is the Company\u2019s dashboard; each card representing each Division\u2019s process. [Examiner\u2019s view] This is the examiner\u2019s dashboard. The \u2018submissions\u2019 button will lead the examiner to the submissions page of each process. Annual Submission and Examination of Pre-Need Companies [Company\u2019s view] This is the uploading page for the requirements checklist of Annual Statement as well as the Annual Statement itself. [Examiner\u2019s view] In this screen, the examiner can view the list of companies that submitted Annual Statement. [Examiner\u2019s view] This is the submission details of the Company, which can be seen by the examiners. Quarterly Submission and Monitoring of Interim Financial Statements [Company\u2019s view] This is the balance sheet form for the Interim Financial Statement Submission. [Company\u2019s view] This is the income statement form for the Interim Financial Statement Submission. Monthly Submission and Monitoring of Sales Reports, Collection Reports and Deposit to Trust Fund Reports [Company\u2019s view] This screen is for the forms for Sales Report - Schedule of Plans/Contract Sold and Summary of Plans/Contracts Sold - to be filled-out by the Company. [Examiner\u2019s view] This is the Summary of Plans/Contracts Sold. [Company\u2019s view] This is the screen for all the forms of Collection Report - Schedule of Collection, Planholder\u2019s Outstanding Balance, and Trust fund Requirement. [Examiner\u2019s view] This is the summary of Collection Report for the Month. [Company\u2019s view] This is the form for the Deposit to Trust Fund Report. [Examiner\u2019s view] This is the summary for the Deposit to Trust Fund. TECHNICAL SERVICES GROUP Statistics and Research Division --------------------------------------------------------- [Company View] Below is the screen for the dashboard which includes Statistic\u2019s processes. [Examiner View] Below is the screen for the dashboard which includes Statistics\u2019s companies\u2019s submissions. [Examiner View] For Processes A through E, Statistics Division will use the Annual and Quarterly Financial Statements from the Financial Examination Group Preparation of Annual Data - Annual Report (selected sample tables) Preparation of Annual Data - Key Data Preparation of Annual Data - ASEAN Report Preparation of Annual Data - Ranking Preparation of Annual Data - Assets Information Management Report (AIMP) Quarterly Submission of Compliance to Various Reportorial Requirements - Life, Non-Life, MBA [Company View] Shown below is the screen for uploading submissions for companies. [Life] [Non Life] [MBA] [Examiner View] Shown below is the screen for viewing companies\u2019 submissions. Report on Compulsory Insurance Coverage for Agency-Hired Migrant Workers [Company View] Shown below is the screen for uploading submissions for companies. [Examiner View] Shown below is the screen for viewing companies\u2019 submissions. ============================= Rating Division ---------------------------------------- [Company View] Below is the screen for the dashboard which includes Rating\u2019s processes. [Examiner View] Below is the screen for the dashboard which includes Rating\u2019s companies\u2019s submissions. Approval of Premium Rates on Fire/ Motor Car Insurance and Surety [Company View] Shown below is the screen for uploading submissions for companies. [Examiner View] Shown below is the screen for viewing companies\u2019 submissions. Submission and Monitoring of Data from Compulsory Third Party Liability (CTPL) [Company View] Shown below is where companies can upload their files. [Examiner View] Shown below is where examiners can view a list of submissions made by companies. Submission and Monitoring of Data from Passenger Personal Accident Insurance (PPAI) [Company View] Shown below is the dashboard for PPAI\u2019s subprocesses. [Company View] Shown below is where companies can submit upload their files. [Company View] Shown below is where companies can fill out forms that are tabbed as \u201cTotal Benefits Paid\u201d and \u201cTotal Premium Paid.\u201d [Company View] Shown below is where companies can upload supporting documents for PPAI. [Examiner View] Shown below is where examiners can view submissions of companies for PPAI. Off-site Examination of Non-Life Insurance Companies [Company View] Shown below is the dashboard for Off-site\u2019s subprocesses. [Examiner View] Shown below is the dashboard for offsite\u2019s subprocesses\u2019 submissions. Motor Car Total Loss [Company View] Shown below is where companies can upload their submissions. [Company View] Shown below are forms for inputting details for vehicles that are unrestorable, restorable and subject to total loss subrogation. [Examiner View] Shown below is where examiners see the companies\u2019 submissions. Bonds [Company View] Shown below are the screens for creating and uploading new bonds for both Government Bonds and Judiciary Bonds. [Examiner View] Shown below are the list of Judiciary and Government bonds submitted by companies. Adjuster\u2019s Quarterly Report [Company View] Shown below is where companies can upload their submissions. [Examiner View] Shown below are the lists of submissions made by companies. Fire Service Tax (FST) Remittances [Company View] Shown below is where companies can upload their files. [Examiner View] Shown below is the list of submissions made by companies. ============================= Investment Division -------------------------------------------- Approval of Investments of Insurance Companies and Others (e.g. banks and investment houses) [Company View] Here\u2019s the dashboard for Investment Division that allows you to access each process. [Company View] After clicking the \u201cSubmissions\u201d for Approval of Investment, it will direct you this page where you choose the type of investment that you want. [Company View] Next is you have to upload the requirements that are needed under the type of investment you chose then click \u201cSubmit\u201d. [Examiner View] This is the examiner\u2019s dashboard where you can see the processes just like the company\u2019s side. Click the action button on the table to edit submission status or to edit the file. [Examiner View] After clicking the action button, here\u2019s the page for downloading files and editing statuses. Quarterly Submission and Monitoring of Statement of Paid Up Capital and Reserve Investment (SPUCRI) **Note: Screens are \u201cto follow\u201d because there are no data that is yet to be submitted by the Investment Division Monthly Submission and Assessment of Investments Made, Sold, and Disposed [Company View] After clicking the \u201cSubmissions\u201d for Monthly Submissions and Assessment of Investments Made, Sold and Disposed, it will direct you this page where you choose whether it is monthly or quarterly submission. [Company View] If you click \u201cUpload files\u201d under Monthly Submission, it will direct you to this page where you can upload the template and then submit it or you can save as draft. [Company View] If you click \u201cInput forms\u201d under Monthly Submission, it will direct you to this page where you can input data for the investments made and once you\u2019re done, click \u201cNext\u201d. [Company View] [Company View] After clicking the \u201cNext\u201d button, it will direct you to this page where you can input data for the investments sold and then click \u201cSubmit\u201d. [Company View] If you click \u201cUpload files\u201d under Quarterly Submission, it will direct you to this page where you can upload the template and then submit it. [Company View] If you click \u201cInput forms\u201d under Quarterly Submission, it will direct you to this page where you can input data for the investments made and once you\u2019re done, click \u201cNext\u201d. [Company View] After clicking the \u201cNext\u201d button, it will direct you to this page where you can input data for the investments sold and then click \u201cSubmit\u201d. [Examiner View] Here\u2019s the dashboard for Investment Division that allows you to access each process. Click the \u201cView Submissions\u201d for submission and assessment of investment made, sold, and disposed. [Examiner View] After clicking the \u201cView Submissions\u201d, shown below is the cards for monthly submissions and quarterly submissions. [Examiner View] For monthly submissions, the list of companies will be shown after clicking the view submissions. Click the action button to view the details for the chosen company. [Examiner View] Upon clicking the action button, shown below is the viewing for the files that have been submitted by the companies, also downloading of the file, and changing the status of the submission. [Examiner View] For quarterly submissions, the list of companies will be shown after clicking the view submissions. Click the action button to view the details for the chosen company. [Examiner View] Upon clicking the action button, shown below is the viewing for the files that have been submitted by the companies, also downloading of the file, and changing the status of the submission. ============================= Actuarial Division ------------------------------------------- [Company View] Below is the screen for the dashboard which includes Actuarial\u2019s processes. [Examiner View] Below is the screen for the dashboard which includes Actuarial\u2019s companies\u2019s submissions. Approval of Insurance Products under Expeditious Approval Process [Company View] Shown below is the screen for uploading submissions for companies. [Examiner View] Shown below is the screen for viewing companies\u2019 submissions. Submission of Insurance Products under Non-Expeditious Approval Process [Company View] Shown below is the screen for uploading submissions for companies. [Examiner View] Shown below is the screen for viewing companies\u2019 submissions. ============================= Reinsurance Division --------------------------------------------- [Company\u2019s view] This is the company\u2019s dashboard. Each card represents one process. For each process, a company may choose to either upload the excel file or manually input/encode the details to a form. [Examiner\u2019s view] This is the examiner\u2019s dashboard. Each card represents one process, like the one on the company\u2019s view. The \u2018submissions\u2019 button will lead the examiner to the submissions page of each process. .Submission and Monitoring of Facultative and Non-Facultative Placements [Company\u2019s view] This is the input form for the approval of Facultative Placements Abroad. [Examiner\u2019s view] This is the list of Approved Facultative Placements Abroad for the Month. Submission and Monitoring of Particulars of Reinsurance Treaties [Company\u2019s view] This is the input forms for the approval of Reinsurance treaties. [Examiner\u2019s view] This is the screen for viewing the list of approved Reinsurance treaties. Submission and Monitoring of Foreign Receipts and Remittances [Company\u2019s view] This is the input forms for the Statement of Foreign Exchange Receipts and Remittances. [Examiner\u2019s view] This the screen for listing the summary of all the submitted Foreign Exchange Receipts and Remittances. LEGAL SERVICES GROUP Regulation, Enforcement and Prosecution Division (REPD) -------------------------------------------------------------------------------- Registration, Monitoring, and Reporting on Administrative Complaints Filed Against Regulated Entities Upon logging in, the REPD staff will be seeing this screen, the Dashboard. There are two cards on the screen, each card represents 1 process under the Division. The first card is for the administrative cases while the one on the right is for the product approval. On the left card, once the \u2018Input form\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. This is the input form for all the administrative cases under the division. REPD staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. All the encoded accounts shall be seen on this screen. The user can easily look for records using the search function found on the upper right, or sort these based on your preference. Data Storage, Retrieval and Reporting on Approved Non-life Insurance Policies, Riders, Clauses, Warranties or Endorsements On the other hand, this is the input form for the product approval under the division. REPD staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. Same as the output in the process one, all the encoded accounts shall be seen on this screen. The user can easily look for records using the search function found on the upper right, or sort these based on your preference. ============================= Public Assistance and Mediation Division (PAMD) ------------------------------------------------------------------------ Registration, Monitoring, and Reporting on Complaints/Requests for Assistance Concerning Regulated Entities Input This page shows the input form as well as the output list of the complaints lodged with PAMD. Once \u201cInput Form\u201d button is clicked, it will redirect to this page which the staff could put the information regarding the complaints. If the fields aren\u2019t completed yet, the staff can save it as a draft and continue whenever. Cancel will redirect to the previous page. Output If the view output button is clicked, it will show the list of complaints that have been added previously categorized by industry and number of complaints. At the rightmost part of the card, once the \u201ceye\u201d icon under the action category is clicked it will redirect to a page where you can choose which company you want to view. After choosing the company, this page shows a table of summary of complaints. Licensing Division Recording and Retrieval of Basic Information of all Regulated Entities Upon logging in, the LICENSING staff will be seeing this screen, the Dashboard. There\u2019s a card on the screen that represent the process under the Division. The card is for the regulated entities information. Once the \u2018Input form\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. This is the input form for all the regulated entities. LICENSING staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. All the encoded accounts shall be seen on this screen. The user can easily look for records using the search function found on the upper right, or sort these based on your preference. When the information that is encoded is too long, it could be minimized by clicking the \u2018+\u2019 button and maximize by pressing it as well. Also, company information could be previewed when the company name is clicked. ============================= Conservatorship, Receivership, and Liquidation Division (CRL) -------------------------------------------------------------------------------------- Registration, Monitoring and Reporting of Complaints/ Requests for Assistance Concerning Companies placed under CRL Upon logging in, the CRL staff will be seeing this screen, the Dashboard. There are two cards on the screen, each card represents 1 process under the Division. The first card is for the record keeping of claims records under CRL while the one on the right is for the monitoring of companies under the Division. On the left card, once the \u2018Input form\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. This is the input form for all the claims filed under the division. CRL staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. All the encoded accounts shall be seen on this screen. Each row of information is editable and can be deleted. The user can easily look for records using the search function found on the upper right; or sort these based on the Name of Claimant, Action Requested, Name of Company Concerned, and Date Received. Data Storage, Retrieval and Reporting on Companies under CRL ============================= Claims Adjudication Division (CAD) ----------------------------------------------------------- Registration, Monitoring, and Reporting on Complaints Lodged with CAD Upon logging in, the CAD staff will be seeing this screen, the Dashboard. There\u2019s a card on the screen that represent the process under the Division. The card is for the complaints lodged with CAD. Once the \u2018Input form\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. This is the input form for all the registration, monitoring, and reporting on complaints lodged with CAD. LICENSING staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. All the encoded accounts shall be seen on this screen. The user can easily look for records using the search function found on the upper right, or sort these based on your preference. Also, there are three tabs under the output which are summary, calendar of hearing, and date of due. ============================= Suretyship Section ------------------------------------------- Registration, Monitoring, and Reporting on Requests Received and Certifications Issued This is the Dashboard screen for the Suretyship Section. Once the \u2018Add New Record\u2019 is clicked, the user will be redirected to the input screen; while the \u2018View History\u2019 will bring the user to the list of records encoded in the system. This will be the input page. The user shall encode all the details in this form then click the submit button to save. This is the History page. All records shall be seen on this screen. The user, a Suretyship Section Staff, has the power to edit or delete a record when necessary. MICROINSURANCE The Dashboard Upon logging in, the Microinsurance staff will be seeing this screen, the Dashboard. There are two cards on the screen, each card represents 1 process under the Division. The first card is for the Annual Impact Regulatory Report while the one on the right is for the Quarterly Statistical Report. Generation of Microinsurance Industry Quarterly Statistical Report This is the Microinsurance data as of the quarter ending screen. Data comparison from previous year of the Contribution/Premium Production. Data comparison from previous year of the number of insured lives. Number of persons covered by Microinsurance under MBA. Number of persons covered by Microinsurance under Life Sector. Number of persons covered by Microinsurance under Non-Life Sector. Premium production/contribution under MBA. Premium production/contribution under Life Sector. Premium production/contribution under Non-Life Sector. Generation of Annual Regulatory Impact Report Annual Regulatory Impact - Insurance coverage Annual Regulatory Impact - Microinsurance coverage Annual Regulatory Impact - Number of insured lives Annual Regulatory Impact - Net Premium (Industry) Annual Regulatory Impact - Net Premium (Microinsurance) Annual Regulatory Impact - Total assets Annual Regulatory Impact - Loss or claims ratio Annual Regulatory Impact - Number of licensed intermediaries from different sectors","title":"2018 collated screens"},{"location":"2018-collated_screens/#screens-section","text":"This section shows the screens that were designed corresponding to the various Insurance Commission processes that were selected for Proof-of-Concept development. Note that the website will have screens for Insurance Commission examiners, and screens for the users from regulated entities (companies). This document presents both types of screens together, organized by IC Division, for greater ease of understanding. The screens presented here are updated from the preliminary designs that are included in the System Design Specification document.The updates are based on the comments of IC staff who reviewed the site during user-acceptance testing. A compilation of these comments can be found in the Comments Section of this document.","title":"SCREENS SECTION"},{"location":"2018-collated_screens/#financial-examinations-group","text":"Brokers Division ----------------------------------------- [Company\u2019s view] This is the Submissions Dashboard for companies under Brokers Division. [Examiner\u2019s view] This is the dashboard for examiners of Brokers Division.","title":"FINANCIAL EXAMINATIONS GROUP"},{"location":"2018-collated_screens/#annual-submission-and-examination-of-financial-conditionstanding","text":"[Company\u2019s view] This is the screen where the company must upload the checklist of files needed. [Examiner\u2019s view] This is the Submitted Annual Reports page. The year, together with the number of companies that submitted an Annual Report, are listed on this screen. Upon clicking the year, the user will see the list of companies that submitted that year. [Examiner\u2019s view] This is the list of companies that submitted Annual Report for the year 2017. The name of Company, Total Assets, Total Liabilities, Total Equity, Net Worth and Remarks are already flashed on the screen. When the user click the company name, the user will see the Working Balance sheet of the company. [Examiner\u2019s view] This is the Working balance sheet. When the user click the accounts (summaries), the details will be shown. [Examiner\u2019s view] This is the details of the summary. For this example, this is the Schedule of Cash and Cash Equivalents.","title":"Annual Submission and Examination of Financial Condition/Standing"},{"location":"2018-collated_screens/#quarterly-submission-and-monitoring-of-clients-money-compliance","text":"[Company\u2019s view] The first screen for the Statement of Business Operation (SBO) Form is the Company Profile which will come straight from the Licensing\u2019s records. All forms for this process is separated using tabs. Once the user click a tab, he/she will be redirected to the form indicated at the top of the tab. [Company\u2019s view] This is the Receivable from insured tab. [Company\u2019s view] This is the Clients\u2019 Money Account tab. [Company\u2019s view] This is the Payable from Insurance Companies tab. [Examiner\u2019s view] This screen lists all the companies that submitted SBO. Once the examiner click the name of the company, the screen will show the submission details of the company. [Examiner\u2019s view] Like the company\u2019s view, each section is separated using tabs. This screen is the Company profile tab. [Examiner\u2019s view] This is the receivable from insured tab. [Examiner\u2019s view] This is the Clients\u2019 Money Account tab. [Examiner\u2019s view] This is the Payable to Insurance Company tab. [Examiner\u2019s view] Lastly, this is the Summary tab. The examiner can already view the details here - total Receivable from insured (A), total Clients\u2019 Money (B) , the sum of Receivable and Clients\u2019 Money (A+B), the total Payable to insurance company (C), the difference between the sum of Receivable and Clients\u2019 Money, and Payable to insurance company (A+B-C). Finally, the examiner can put any remarks, or comments, he/she needs to write. ============================= HMO Division ------------------------------------- [Company View] Below is the the company dashboard. Shown are the processes accessible by companies. [Examiner View] Below is the examiner dashboard. Shown are the submissions made by companies.","title":"Quarterly Submission and Monitoring of Client\u2019s Money Compliance"},{"location":"2018-collated_screens/#annual-submission-and-examination-of-financial-statements","text":"[Company View] Below is where companies can upload their files for the annual submission. [Company View] Below are the forms for companies to fill out which are tabbed as SFP and SCI for annual submissions. [Examiner View] Below is the submissions by companies for annual reports.","title":"Annual Submission and Examination of Financial Statements"},{"location":"2018-collated_screens/#quarterly-submission-and-examination-of-interim-financial-statements","text":"[Company View] Below is where companies can upload their files for quarterly submission [Company View] Below are the forms for companies to fill out which are tabbed as SFP and SCI for quarterly submissions. [Examiner View] Below are the quarterly submissions by companies summarized and individual company view, respectively. ============================= Life/ MBA/ Trust Division --------------------------------------------------","title":"Quarterly Submission and Examination of Interim Financial Statements"},{"location":"2018-collated_screens/#annual-submission-and-examination-of-financial-standing-of-life-companies-with-separate-presentation-for-composite-insurance-companies","text":"Company View This page will appear upon logging in a company account. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the announcements/updates regarding submissions of documents. There's also the cards which are consisting of all the submissions needed by the companies. Each card consist of the Document submission header, current quarter of submission, its deadline and status of the company on submission. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Upon clicking the Annual Submission card or the Annual Statement from the sidebar, it will redirect to this page. Here, the company can upload the required documents based on the checklist provided by the insurance commission. Each file submission has specific file type allowed. Once the required documents are passed, It will be checked. The submit button is blocked out until all required documents are uploaded. The company can also save as draft to continue uploading later. Upon clicking View History on the sidebar, the user is given an option to which division submission it wants to view. In this specific web screen, It can choose to view all its submissions to Life division. The main page has tables which are divided based on the deadlines of each processes. Each tables can be sorted and filtered to be able to track if they have submitted the documents. Examiner View This page will appear upon logging in an examiner account of insurance commission. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the cards which are consisting of all the submissions needed to be done by the companies. Each card consist of the Document submission header, current quarter of submission and its deadline. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Below the page is a table of certificate requests. The examiner can view incoming requests for certification of companies through a table. The examiner can then take action on each request by viewing it. Upon clicking the Annual Submission card or the Annual Statement from the sidebar, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form.","title":"Annual Submission and Examination of Financial Standing of Life Companies with Separate Presentation for Composite Insurance Companies"},{"location":"2018-collated_screens/#_1","text":"","title":""},{"location":"2018-collated_screens/#_2","text":"","title":""},{"location":"2018-collated_screens/#_3","text":"","title":""},{"location":"2018-collated_screens/#_4","text":"","title":""},{"location":"2018-collated_screens/#_5","text":"","title":""},{"location":"2018-collated_screens/#_6","text":"","title":""},{"location":"2018-collated_screens/#_7","text":"","title":""},{"location":"2018-collated_screens/#_8","text":"","title":""},{"location":"2018-collated_screens/#_9","text":"","title":""},{"location":"2018-collated_screens/#_10","text":"Upon clicking the view button, the examiner will be directed to the page where you can change the status of the submission, download the submitted checklist, and company files.","title":""},{"location":"2018-collated_screens/#_11","text":"Note: Upon clicking the view icon the computation for net worth will be shown","title":""},{"location":"2018-collated_screens/#annual-submission-and-examination-of-mutual-benefit-association-mba","text":"Company View This page will appear upon logging in a company account. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the announcements/updates regarding submissions of documents. There's also the cards which are consisting of all the submissions needed by the companies. Each card consist of the Document submission header, current quarter of submission, its deadline and status of the company on submission. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Upon clicking the Annual Submission card or the Annual Statement from the sidebar, it will redirect to this page. Here, the company can upload the required documents based on the checklist provided by the insurance commission. Each file submission has specific file type allowed. Once the required documents are passed, It will be checked. The submit button is blocked out until all required documents are uploaded. The company can also save as draft to continue uploading later. Upon clicking View History on the sidebar, the user is given an option to which division submission it wants to view. In this specific web screen, It can choose to view all its submissions to MBA section. The main page has tables which are divided based on the deadlines of each processes. Each tables can be sorted and filtered to be able to track if they have submitted the documents. Examiner View This page will appear upon logging in an examiner account of insurance commission. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the cards which are consisting of all the submissions needed to be done by the companies. Each card consist of the Document submission header, current quarter of submission and its deadline. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Below the page is a table of certificate requests. The examiner can view incoming requests for certification of companies through a table. The examiner can then take action on each request by viewing it. Upon clicking the MBA Annual Submission card or the MBA Annual Statement from the sidebar, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form.","title":"Annual Submission and Examination of Mutual Benefit Association (MBA)"},{"location":"2018-collated_screens/#quarterly-submission-and-examination-of-frf-rbc2-and-actuarial-valuation-report","text":"Company View This page will appear upon logging in a company account. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the announcements/updates regarding submissions of documents. There's also the cards which are consisting of all the submissions needed by the companies. Each card consist of the Document submission header, current quarter of submission, its deadline and status of the company on submission. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Upon clicking the Quarterly Submission on the sidebar or the button on the Quarterly Submission card, it will redirect to this page. This page lists down further processes on quarterly submission. From each quarterly document submission, the user has the option to upload file or input forms. Upon clicking inputs forms from the quarterly submissions page for FRF, it will redirect to this page. The company can input their account here just like what they would in an excel sheet. Upon clicking upload file from the quarterly submissions page for FRF, it will redirect to this page. The user can upload the specified template for the FRF submission. It shall follow the naming convention as well as the file type specified (excel) to be able to upload. Upon clicking upload file from the quarterly submissions page for RBC2, it will redirect to this page. The user can upload the specified template for the RBC2 submission. It shall follow the naming convention as well as the file type specified (excel) to be able to upload. Upon clicking upload file from the quarterly submissions page for AVR, it will redirect to this page. The user can upload the specified template for the AVR submission. It shall follow the naming convention as well as the file type specified (excel) to be able to upload. Upon clicking View History on the sidebar, the user is given an option to which division submission it wants to view. In this specific web screen, It can choose to view all its submissions to Life division. The main page has tables which are divided based on the deadlines of each processes. Each tables can be sorted and filtered to be able to track if they have submitted the documents. Examiner View This page will appear upon logging in an examiner account of insurance commission. The page consist of a sidebar on the left side, a navigation bar above with the insurance commission logo and a specified label, if any. On the middle, it has the dashboard which has the cards which are consisting of all the submissions needed to be done by the companies. Each card consist of the Document submission header, current quarter of submission and its deadline. Beside the document submission header is a question icon which pops up a modal when clicked that consist of requirements, guidelines and circular letters for that specific submission. Below the page is a table of certificate requests. The examiner can view incoming requests for certification of companies through a table. The examiner can then take action on each request by viewing it. Upon clicking the Quarterly Submission button from the card or the Quarterly Submission from the sidebar, the examiner will be redirected to this page. This page lists down further processes on quarterly submission. From each quarterly document submission, the examiner has the option to view company submissions by clicking View submissions. Upon clicking the View Submissions from the FRF Submissions card on Quarterly Submissions page, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form. Upon clicking the View Submissions from the RBC Submissions card on Quarterly Submissions page, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form. Upon clicking the view button, it will redirect to this page where you can change the status, download submitted checklist, and company files. Note: Show the computation for RBC Upon clicking the View Submissions from the AVR Submissions card on Quarterly Submissions page, the examiner will be redirected to the page with company list. The table with company list shows important informations needed immediately for viewing. An examiner can also take action of viewing the company submission in a much detailed form. ============================= Non-Life Division ------------------------------------------","title":"Quarterly Submission and Examination of FRF, RBC2, and Actuarial Valuation Report"},{"location":"2018-collated_screens/#annual-submission-and-examination-of-financial-standing-of-non-life-companies","text":"[Company Side] Upon logging in, the designated staff will be seeing this screen, the Dashboard. There are three cards on the screen, each card represents 1 process under the Division. The first card is for the annual statement submission. The second one is for the quarterly submission and the last one is for the certification request under the Division. On the first card, once the \u2018submissions\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. [Company Side] This is the checklist for the annual submission. Each checklist should have an attachment to be considered or to have a check mark in the allotted box. Unfinished uploads could be continued if \u2018save as draft\u2019 button is clicked. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. Once all of the requirements is uploaded, press the \u2018submit\u2019 button. Once done with all of the processes, the user can log out by clicking the dropdown on the upper right corner of the page. Now, the following screens are for the Non-Life staff (examiner). [Examiner Side] Upon logging in, the designated staff will be seeing this screen, the Dashboard. There are two cards on the screen, each card represents submissions. The first card is for the annual statement submission. The second one is for the quarterly submissions. The list of certification request is already displayed and can be sorted by company, the name of the request and the date it was submitted. On the first card, once the \u2018view submissions\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. [Examiner Side] This screen displays the submitted annual reports per year, the total number of companies under the division and the number of companies who submitted. Once the year is clicked, it will redirect to this page. [Examiner Side] This page shows information about the submissions of a company. There\u2019s a \u2018view\u2019 action that once clicked, it will redirect to this page that lets the examiner download the submission checklist as well as update the status. [Examiner Side] There a link below the company name that says \u2018view working balance sheet\u2019. Once clicked, it will redirect to this page. [Examiner Side] This page shows the entire balance sheet that is plotted in the excel template. It can be exported to excel as well as update it by uploading the updated wbs excel file. Once uploaded, it will be parsed by the system and will automatically display the updated version.","title":"Annual Submission and Examination of Financial Standing of Non-Life Companies"},{"location":"2018-collated_screens/#quarterly-submission-and-examination-of-frf-rbc2-and-actuarial-valuation-report_1","text":"[Company Side] On the second card, once the \u2018submissions\u2019 button is clicked, the user will be redirected to this page. There are three cards inside the quarterly submissions. The frf submission, rbc2 submission, and avr submission. Once the \u2018upload files\u2019 in the first card is clicked, it will redirect to a page shown in the next picture. [Company Side] This page is where the user will upload the frf submission. It is important to follow the file format for the accurate parsing of data. Once the \u2018Input form\u2019 button is clicked in the previous page, the user will be redirected to the Input forms shown in the next picture. [Company Side] This page shows the sample template for the statement of financial position as well as the statement of comprehensive income that has been plotted in the original excel templates. [Company Side] Going back to the cards inside the process number 2, once the \u2018upload files\u2019 in the second card is clicked, it will redirect to this page that lets the user upload the desired document with the right file format. [Company Side] Once the \u2018upload files\u2019 in the last card under the 2nd process is clicked, it will redirect to this page which will also let the user upload the desired document with the right file format as well. Once done with all of the processes, the user can log out by clicking the dropdown on the upper right corner of the page. Now, the following screens are for the Non-Life staff (examiner). [Examiner Side] On the second card, once the \u2018submissions\u2019 button is clicked, the user will be redirected to this page. There are three cards inside the quarterly submissions. The frf submission, rbc2 submission, and avr submission. Once the \u2018view submissions\u2019 in the first card is clicked, it will redirect to a page shown in the next picture. [Examiner Side] This page shows the submissions and some information per company. Once the \u2018view\u2019 action is clicked, it redirects to the next page shown below. [Examiner Side] This page lets the examiner download the submission checklist as well as update the status.","title":"Quarterly Submission and Examination of FRF, RBC2, and Actuarial Valuation Report"},{"location":"2018-collated_screens/#issuance-of-certification-on-financial-condition-of-insurance-companies","text":"[Company Side] Once the \u2018submissions\u2019 in the last card is clicked, it will redirect to this page which is a set of checklist of certifications that could be requested. If the desired certification is not included in the checklist, the user could add the name if \u2018add\u2019 button is clicked. For additional notes or information, it could be stated in the space below titled \u2018Reason for request\u2019. [Company Side] Below the options in the left side of the page are the history area. In this page, all of the submissions are recorded and categorized by year, document (description/title), deadline, date submitted, status and penalty. In the annual submission, once the document title is clicked, it will show a page of the document preview. ============================= Pre-Need Division ------------------------------------------ [Company\u2019s view] This is the Company\u2019s dashboard; each card representing each Division\u2019s process. [Examiner\u2019s view] This is the examiner\u2019s dashboard. The \u2018submissions\u2019 button will lead the examiner to the submissions page of each process.","title":"Issuance of Certification on Financial Condition of Insurance Companies"},{"location":"2018-collated_screens/#annual-submission-and-examination-of-pre-need-companies","text":"[Company\u2019s view] This is the uploading page for the requirements checklist of Annual Statement as well as the Annual Statement itself. [Examiner\u2019s view] In this screen, the examiner can view the list of companies that submitted Annual Statement. [Examiner\u2019s view] This is the submission details of the Company, which can be seen by the examiners.","title":"Annual Submission and Examination of Pre-Need Companies"},{"location":"2018-collated_screens/#quarterly-submission-and-monitoring-of-interim-financial-statements","text":"[Company\u2019s view] This is the balance sheet form for the Interim Financial Statement Submission. [Company\u2019s view] This is the income statement form for the Interim Financial Statement Submission.","title":"Quarterly Submission and Monitoring of Interim Financial Statements"},{"location":"2018-collated_screens/#monthly-submission-and-monitoring-of-sales-reports-collection-reports-and-deposit-to-trust-fund-reports","text":"[Company\u2019s view] This screen is for the forms for Sales Report - Schedule of Plans/Contract Sold and Summary of Plans/Contracts Sold - to be filled-out by the Company. [Examiner\u2019s view] This is the Summary of Plans/Contracts Sold. [Company\u2019s view] This is the screen for all the forms of Collection Report - Schedule of Collection, Planholder\u2019s Outstanding Balance, and Trust fund Requirement. [Examiner\u2019s view] This is the summary of Collection Report for the Month. [Company\u2019s view] This is the form for the Deposit to Trust Fund Report. [Examiner\u2019s view] This is the summary for the Deposit to Trust Fund.","title":"Monthly Submission and Monitoring of Sales Reports, Collection Reports and Deposit to Trust Fund Reports"},{"location":"2018-collated_screens/#technical-services-group","text":"Statistics and Research Division --------------------------------------------------------- [Company View] Below is the screen for the dashboard which includes Statistic\u2019s processes. [Examiner View] Below is the screen for the dashboard which includes Statistics\u2019s companies\u2019s submissions. [Examiner View] For Processes A through E, Statistics Division will use the Annual and Quarterly Financial Statements from the Financial Examination Group","title":"TECHNICAL SERVICES GROUP"},{"location":"2018-collated_screens/#preparation-of-annual-data-annual-report-selected-sample-tables","text":"","title":"Preparation of Annual Data - Annual Report (selected sample tables)"},{"location":"2018-collated_screens/#preparation-of-annual-data-key-data","text":"","title":"Preparation of Annual Data - Key Data"},{"location":"2018-collated_screens/#preparation-of-annual-data-asean-report","text":"","title":"Preparation of Annual Data - ASEAN Report"},{"location":"2018-collated_screens/#preparation-of-annual-data-ranking","text":"","title":"Preparation of Annual Data - Ranking"},{"location":"2018-collated_screens/#preparation-of-annual-data-assets-information-management-report-aimp","text":"","title":"Preparation of Annual Data - Assets Information Management Report (AIMP)"},{"location":"2018-collated_screens/#quarterly-submission-of-compliance-to-various-reportorial-requirements-life-non-life-mba","text":"[Company View] Shown below is the screen for uploading submissions for companies. [Life] [Non Life] [MBA] [Examiner View] Shown below is the screen for viewing companies\u2019 submissions.","title":"Quarterly Submission of Compliance to Various Reportorial Requirements - Life, Non-Life, MBA"},{"location":"2018-collated_screens/#report-on-compulsory-insurance-coverage-for-agency-hired-migrant-workers","text":"[Company View] Shown below is the screen for uploading submissions for companies. [Examiner View] Shown below is the screen for viewing companies\u2019 submissions. ============================= Rating Division ---------------------------------------- [Company View] Below is the screen for the dashboard which includes Rating\u2019s processes. [Examiner View] Below is the screen for the dashboard which includes Rating\u2019s companies\u2019s submissions.","title":"Report on Compulsory Insurance Coverage for Agency-Hired Migrant Workers"},{"location":"2018-collated_screens/#approval-of-premium-rates-on-fire-motor-car-insurance-and-surety","text":"[Company View] Shown below is the screen for uploading submissions for companies. [Examiner View] Shown below is the screen for viewing companies\u2019 submissions.","title":"Approval of Premium Rates on Fire/ Motor Car Insurance and Surety"},{"location":"2018-collated_screens/#submission-and-monitoring-of-data-from-compulsory-third-party-liability-ctpl","text":"[Company View] Shown below is where companies can upload their files. [Examiner View] Shown below is where examiners can view a list of submissions made by companies.","title":"Submission and Monitoring of Data from Compulsory Third Party Liability (CTPL)"},{"location":"2018-collated_screens/#submission-and-monitoring-of-data-from-passenger-personal-accident-insurance-ppai","text":"[Company View] Shown below is the dashboard for PPAI\u2019s subprocesses. [Company View] Shown below is where companies can submit upload their files. [Company View] Shown below is where companies can fill out forms that are tabbed as \u201cTotal Benefits Paid\u201d and \u201cTotal Premium Paid.\u201d [Company View] Shown below is where companies can upload supporting documents for PPAI. [Examiner View] Shown below is where examiners can view submissions of companies for PPAI.","title":"Submission and Monitoring of Data from Passenger Personal Accident Insurance (PPAI)"},{"location":"2018-collated_screens/#off-site-examination-of-non-life-insurance-companies","text":"[Company View] Shown below is the dashboard for Off-site\u2019s subprocesses. [Examiner View] Shown below is the dashboard for offsite\u2019s subprocesses\u2019 submissions.","title":"Off-site Examination of Non-Life Insurance Companies"},{"location":"2018-collated_screens/#motor-car-total-loss","text":"[Company View] Shown below is where companies can upload their submissions. [Company View] Shown below are forms for inputting details for vehicles that are unrestorable, restorable and subject to total loss subrogation. [Examiner View] Shown below is where examiners see the companies\u2019 submissions.","title":"Motor Car Total Loss"},{"location":"2018-collated_screens/#bonds","text":"[Company View] Shown below are the screens for creating and uploading new bonds for both Government Bonds and Judiciary Bonds. [Examiner View] Shown below are the list of Judiciary and Government bonds submitted by companies.","title":"Bonds"},{"location":"2018-collated_screens/#adjusters-quarterly-report","text":"[Company View] Shown below is where companies can upload their submissions. [Examiner View] Shown below are the lists of submissions made by companies.","title":"Adjuster\u2019s Quarterly Report"},{"location":"2018-collated_screens/#fire-service-tax-fst-remittances","text":"[Company View] Shown below is where companies can upload their files. [Examiner View] Shown below is the list of submissions made by companies. ============================= Investment Division --------------------------------------------","title":"Fire Service Tax (FST) Remittances"},{"location":"2018-collated_screens/#approval-of-investments-of-insurance-companies-and-others-eg-banks-and-investment-houses","text":"[Company View] Here\u2019s the dashboard for Investment Division that allows you to access each process. [Company View] After clicking the \u201cSubmissions\u201d for Approval of Investment, it will direct you this page where you choose the type of investment that you want. [Company View] Next is you have to upload the requirements that are needed under the type of investment you chose then click \u201cSubmit\u201d. [Examiner View] This is the examiner\u2019s dashboard where you can see the processes just like the company\u2019s side. Click the action button on the table to edit submission status or to edit the file. [Examiner View] After clicking the action button, here\u2019s the page for downloading files and editing statuses.","title":"Approval of Investments of Insurance Companies and Others (e.g. banks and investment houses)"},{"location":"2018-collated_screens/#quarterly-submission-and-monitoring-of-statement-of-paid-up-capital-and-reserve-investment-spucri","text":"**Note: Screens are \u201cto follow\u201d because there are no data that is yet to be submitted by the Investment Division","title":"Quarterly Submission and Monitoring of Statement of Paid Up Capital and Reserve Investment (SPUCRI)"},{"location":"2018-collated_screens/#monthly-submission-and-assessment-of-investments-made-sold-and-disposed","text":"[Company View] After clicking the \u201cSubmissions\u201d for Monthly Submissions and Assessment of Investments Made, Sold and Disposed, it will direct you this page where you choose whether it is monthly or quarterly submission. [Company View] If you click \u201cUpload files\u201d under Monthly Submission, it will direct you to this page where you can upload the template and then submit it or you can save as draft. [Company View] If you click \u201cInput forms\u201d under Monthly Submission, it will direct you to this page where you can input data for the investments made and once you\u2019re done, click \u201cNext\u201d. [Company View] [Company View] After clicking the \u201cNext\u201d button, it will direct you to this page where you can input data for the investments sold and then click \u201cSubmit\u201d. [Company View] If you click \u201cUpload files\u201d under Quarterly Submission, it will direct you to this page where you can upload the template and then submit it. [Company View] If you click \u201cInput forms\u201d under Quarterly Submission, it will direct you to this page where you can input data for the investments made and once you\u2019re done, click \u201cNext\u201d. [Company View] After clicking the \u201cNext\u201d button, it will direct you to this page where you can input data for the investments sold and then click \u201cSubmit\u201d. [Examiner View] Here\u2019s the dashboard for Investment Division that allows you to access each process. Click the \u201cView Submissions\u201d for submission and assessment of investment made, sold, and disposed. [Examiner View] After clicking the \u201cView Submissions\u201d, shown below is the cards for monthly submissions and quarterly submissions. [Examiner View] For monthly submissions, the list of companies will be shown after clicking the view submissions. Click the action button to view the details for the chosen company. [Examiner View] Upon clicking the action button, shown below is the viewing for the files that have been submitted by the companies, also downloading of the file, and changing the status of the submission. [Examiner View] For quarterly submissions, the list of companies will be shown after clicking the view submissions. Click the action button to view the details for the chosen company. [Examiner View] Upon clicking the action button, shown below is the viewing for the files that have been submitted by the companies, also downloading of the file, and changing the status of the submission. ============================= Actuarial Division ------------------------------------------- [Company View] Below is the screen for the dashboard which includes Actuarial\u2019s processes. [Examiner View] Below is the screen for the dashboard which includes Actuarial\u2019s companies\u2019s submissions.","title":"Monthly Submission and Assessment of Investments Made, Sold, and Disposed"},{"location":"2018-collated_screens/#approval-of-insurance-products-under-expeditious-approval-process","text":"[Company View] Shown below is the screen for uploading submissions for companies. [Examiner View] Shown below is the screen for viewing companies\u2019 submissions.","title":"Approval of Insurance Products under Expeditious Approval Process"},{"location":"2018-collated_screens/#submission-of-insurance-products-under-non-expeditious-approval-process","text":"[Company View] Shown below is the screen for uploading submissions for companies. [Examiner View] Shown below is the screen for viewing companies\u2019 submissions. ============================= Reinsurance Division --------------------------------------------- [Company\u2019s view] This is the company\u2019s dashboard. Each card represents one process. For each process, a company may choose to either upload the excel file or manually input/encode the details to a form. [Examiner\u2019s view] This is the examiner\u2019s dashboard. Each card represents one process, like the one on the company\u2019s view. The \u2018submissions\u2019 button will lead the examiner to the submissions page of each process.","title":"Submission of Insurance Products under Non-Expeditious Approval Process"},{"location":"2018-collated_screens/#submission-and-monitoring-of-facultative-and-non-facultative-placements","text":"[Company\u2019s view] This is the input form for the approval of Facultative Placements Abroad. [Examiner\u2019s view] This is the list of Approved Facultative Placements Abroad for the Month.","title":".Submission and Monitoring of Facultative and Non-Facultative Placements"},{"location":"2018-collated_screens/#submission-and-monitoring-of-particulars-of-reinsurance-treaties","text":"[Company\u2019s view] This is the input forms for the approval of Reinsurance treaties. [Examiner\u2019s view] This is the screen for viewing the list of approved Reinsurance treaties.","title":"Submission and Monitoring of Particulars of Reinsurance Treaties"},{"location":"2018-collated_screens/#submission-and-monitoring-of-foreign-receipts-and-remittances","text":"[Company\u2019s view] This is the input forms for the Statement of Foreign Exchange Receipts and Remittances. [Examiner\u2019s view] This the screen for listing the summary of all the submitted Foreign Exchange Receipts and Remittances.","title":"Submission and Monitoring of Foreign Receipts and Remittances"},{"location":"2018-collated_screens/#legal-services-group","text":"Regulation, Enforcement and Prosecution Division (REPD) --------------------------------------------------------------------------------","title":"LEGAL SERVICES GROUP"},{"location":"2018-collated_screens/#registration-monitoring-and-reporting-on-administrative-complaints-filed-against-regulated-entities","text":"","title":"Registration, Monitoring, and Reporting on Administrative Complaints Filed Against Regulated Entities"},{"location":"2018-collated_screens/#_12","text":"Upon logging in, the REPD staff will be seeing this screen, the Dashboard. There are two cards on the screen, each card represents 1 process under the Division. The first card is for the administrative cases while the one on the right is for the product approval. On the left card, once the \u2018Input form\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. This is the input form for all the administrative cases under the division. REPD staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. All the encoded accounts shall be seen on this screen. The user can easily look for records using the search function found on the upper right, or sort these based on your preference.","title":""},{"location":"2018-collated_screens/#data-storage-retrieval-and-reporting-on-approved-non-life-insurance-policies-riders-clauses-warranties-or-endorsements","text":"On the other hand, this is the input form for the product approval under the division. REPD staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. Same as the output in the process one, all the encoded accounts shall be seen on this screen. The user can easily look for records using the search function found on the upper right, or sort these based on your preference. ============================= Public Assistance and Mediation Division (PAMD) ------------------------------------------------------------------------","title":"Data Storage, Retrieval and Reporting on Approved Non-life Insurance Policies, Riders, Clauses, Warranties or Endorsements"},{"location":"2018-collated_screens/#registration-monitoring-and-reporting-on-complaintsrequests-for-assistance-concerning-regulated-entities","text":"Input This page shows the input form as well as the output list of the complaints lodged with PAMD. Once \u201cInput Form\u201d button is clicked, it will redirect to this page which the staff could put the information regarding the complaints. If the fields aren\u2019t completed yet, the staff can save it as a draft and continue whenever. Cancel will redirect to the previous page.","title":"Registration, Monitoring, and Reporting on Complaints/Requests for Assistance Concerning Regulated Entities"},{"location":"2018-collated_screens/#output","text":"If the view output button is clicked, it will show the list of complaints that have been added previously categorized by industry and number of complaints. At the rightmost part of the card, once the \u201ceye\u201d icon under the action category is clicked it will redirect to a page where you can choose which company you want to view. After choosing the company, this page shows a table of summary of complaints.","title":"Output"},{"location":"2018-collated_screens/#licensing-division","text":"","title":"Licensing Division"},{"location":"2018-collated_screens/#recording-and-retrieval-of-basic-information-of-all-regulated-entities","text":"Upon logging in, the LICENSING staff will be seeing this screen, the Dashboard. There\u2019s a card on the screen that represent the process under the Division. The card is for the regulated entities information. Once the \u2018Input form\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture.","title":"Recording and Retrieval of Basic Information of all Regulated Entities"},{"location":"2018-collated_screens/#_13","text":"This is the input form for all the regulated entities. LICENSING staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen.","title":""},{"location":"2018-collated_screens/#_14","text":"All the encoded accounts shall be seen on this screen. The user can easily look for records using the search function found on the upper right, or sort these based on your preference. When the information that is encoded is too long, it could be minimized by clicking the \u2018+\u2019 button and maximize by pressing it as well. Also, company information could be previewed when the company name is clicked. ============================= Conservatorship, Receivership, and Liquidation Division (CRL) --------------------------------------------------------------------------------------","title":""},{"location":"2018-collated_screens/#registration-monitoring-and-reporting-of-complaints-requests-for-assistance-concerning-companies-placed-under-crl","text":"","title":"Registration, Monitoring and Reporting of Complaints/ Requests for Assistance Concerning Companies placed under CRL"},{"location":"2018-collated_screens/#_15","text":"Upon logging in, the CRL staff will be seeing this screen, the Dashboard. There are two cards on the screen, each card represents 1 process under the Division. The first card is for the record keeping of claims records under CRL while the one on the right is for the monitoring of companies under the Division. On the left card, once the \u2018Input form\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture.","title":""},{"location":"2018-collated_screens/#_16","text":"This is the input form for all the claims filed under the division. CRL staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen. All the encoded accounts shall be seen on this screen. Each row of information is editable and can be deleted. The user can easily look for records using the search function found on the upper right; or sort these based on the Name of Claimant, Action Requested, Name of Company Concerned, and Date Received.","title":""},{"location":"2018-collated_screens/#data-storage-retrieval-and-reporting-on-companies-under-crl","text":"============================= Claims Adjudication Division (CAD) -----------------------------------------------------------","title":"Data Storage, Retrieval and Reporting on Companies under CRL"},{"location":"2018-collated_screens/#registration-monitoring-and-reporting-on-complaints-lodged-with-cad","text":"","title":"Registration, Monitoring, and Reporting on Complaints Lodged with CAD"},{"location":"2018-collated_screens/#_17","text":"Upon logging in, the CAD staff will be seeing this screen, the Dashboard. There\u2019s a card on the screen that represent the process under the Division. The card is for the complaints lodged with CAD. Once the \u2018Input form\u2019 button is clicked, the user will be redirected to the Input forms shown in the next picture. This is the input form for all the registration, monitoring, and reporting on complaints lodged with CAD. LICENSING staff should encode all the details in here then click submit for the record to be saved. In order to view all the records, the user must click the \u2018View Output\u2019 link which can be seen on the left side of the screen.","title":""},{"location":"2018-collated_screens/#_18","text":"All the encoded accounts shall be seen on this screen. The user can easily look for records using the search function found on the upper right, or sort these based on your preference. Also, there are three tabs under the output which are summary, calendar of hearing, and date of due. ============================= Suretyship Section -------------------------------------------","title":""},{"location":"2018-collated_screens/#registration-monitoring-and-reporting-on-requests-received-and-certifications-issued","text":"","title":"Registration, Monitoring, and Reporting on Requests Received and Certifications Issued"},{"location":"2018-collated_screens/#_19","text":"This is the Dashboard screen for the Suretyship Section. Once the \u2018Add New Record\u2019 is clicked, the user will be redirected to the input screen; while the \u2018View History\u2019 will bring the user to the list of records encoded in the system.","title":""},{"location":"2018-collated_screens/#_20","text":"This will be the input page. The user shall encode all the details in this form then click the submit button to save.","title":""},{"location":"2018-collated_screens/#_21","text":"This is the History page. All records shall be seen on this screen. The user, a Suretyship Section Staff, has the power to edit or delete a record when necessary.","title":""},{"location":"2018-collated_screens/#microinsurance","text":"","title":"MICROINSURANCE"},{"location":"2018-collated_screens/#the-dashboard","text":"Upon logging in, the Microinsurance staff will be seeing this screen, the Dashboard. There are two cards on the screen, each card represents 1 process under the Division. The first card is for the Annual Impact Regulatory Report while the one on the right is for the Quarterly Statistical Report.","title":"The Dashboard"},{"location":"2018-collated_screens/#generation-of-microinsurance-industry-quarterly-statistical-report","text":"This is the Microinsurance data as of the quarter ending screen. Data comparison from previous year of the Contribution/Premium Production. Data comparison from previous year of the number of insured lives. Number of persons covered by Microinsurance under MBA. Number of persons covered by Microinsurance under Life Sector. Number of persons covered by Microinsurance under Non-Life Sector. Premium production/contribution under MBA. Premium production/contribution under Life Sector. Premium production/contribution under Non-Life Sector.","title":"Generation of Microinsurance Industry Quarterly Statistical Report"},{"location":"2018-collated_screens/#generation-of-annual-regulatory-impact-report","text":"Annual Regulatory Impact - Insurance coverage Annual Regulatory Impact - Microinsurance coverage Annual Regulatory Impact - Number of insured lives Annual Regulatory Impact - Net Premium (Industry) Annual Regulatory Impact - Net Premium (Microinsurance) Annual Regulatory Impact - Total assets Annual Regulatory Impact - Loss or claims ratio Annual Regulatory Impact - Number of licensed intermediaries from different sectors","title":"Generation of Annual Regulatory Impact Report"},{"location":"2018-mobile_screens/","text":"IC-FEDS MOBILE APP SAMPLE SCREENS A. For Company These are some screenshots of the proposed mobile application for companies. The proposed mobile application should have the capability to view submissions by the company, see the status of their submission and view additional data such as penalties if they exist. The example shown above is for the Life Division, submission of Annual Statements. B. For Public These are some screenshots of the proposed mobile application open for the public. The proposed mobile application should have the capability to view information about the companies and entities regulated by the commission. As for the information to be shown, the data provided by the Licensing Division was chosen.","title":"2018 mobile screens"},{"location":"2018-mobile_screens/#sample-screens","text":"A. For Company These are some screenshots of the proposed mobile application for companies. The proposed mobile application should have the capability to view submissions by the company, see the status of their submission and view additional data such as penalties if they exist. The example shown above is for the Life Division, submission of Annual Statements. B. For Public These are some screenshots of the proposed mobile application open for the public. The proposed mobile application should have the capability to view information about the companies and entities regulated by the commission. As for the information to be shown, the data provided by the Licensing Division was chosen.","title":"SAMPLE SCREENS"},{"location":"2019-01-05-IS-proj-start/","text":"Beginning an Information System Project Key Design Decisions Backend Language Framework HTML & CSS Database Version Control Testing Deployment Sources of Software There are 6 main sources of software. Which of these would be utilized in this project and in what ways? In-house development Third-party developer COTS producer ERP provider Open Source software Cloud services","title":"Beginning an Information System Project"},{"location":"2019-01-05-IS-proj-start/#beginning-an-information-system-project","text":"","title":"Beginning an Information System Project"},{"location":"2019-01-05-IS-proj-start/#key-design-decisions","text":"Backend Language Framework HTML & CSS Database Version Control Testing Deployment","title":"Key Design Decisions"},{"location":"2019-01-05-IS-proj-start/#sources-of-software","text":"There are 6 main sources of software. Which of these would be utilized in this project and in what ways? In-house development Third-party developer COTS producer ERP provider Open Source software Cloud services","title":"Sources of Software"},{"location":"2019-01-05-pcari-site/","text":"Key Design Decisions Backend Language : PHP Framework : Wordpress CMS HTML & CSS Database : MySQL Version Control Testing Deployment : Wordpress.com Main Software Sources Third party developer Cloud services : Wordpress PAAS","title":"2019 01 05 pcari site"},{"location":"2019-01-05-pcari-site/#key-design-decisions","text":"Backend Language : PHP Framework : Wordpress CMS HTML & CSS Database : MySQL Version Control Testing Deployment : Wordpress.com","title":"Key Design Decisions"},{"location":"2019-01-05-pcari-site/#main-software-sources","text":"Third party developer Cloud services : Wordpress PAAS","title":"Main Software Sources"},{"location":"2019-01-09-digital-ads/","text":"Embedded from Digital Marketing Philippines","title":"2019 01 09 digital ads"},{"location":"2019-01-09-email-marketing/","text":"Email marketing ^1 Advantages and Disadvantages Pros Cons reach both mobile and pc spam filter blocks effective for info dissemination cheap Quick start Have a sign-up form in your website, collect emails and pilot test an email marketing campaign. Gmail and Yahoo gives ~500 free emails per day per account You can pay monthly : ^3 Or you can pay per use: ^3 If you pay, you get to easily track: ^6 Collecting Emails Have multiple subscribe CTA's (i.e. Calls to Action) Exchange something for their emails coupons convenience appeals rewards Disclose your Social Strength (e.g. number of people served, accounts, years up) Sustaining interest Have great content Encourage signing up and forwarding to friends Limit ads to around 10% Great headings (eg \"KATTSI is happy to announce a Destination...\" , \"This is perfect for...\" , \"Book now and you get ...\" , \"For a limited time only, save ....\") Invite past clients first and offer them a discount Offer early bird and regular pricing Send greeting cards Organizing the Mailing List Put everything on an Excel sheet Remove bad/ bouncing emails (~22.5% emails are deactivated yearly) Have Email Service Validation (so you're not marked as a spammer) Protect your brand by having an Opt-in Policy (6-month last touch expiry) Have Opt-out/ Unsubscribe links ^4 Email content Have subjects that are 6-10 words - source Connect with the client Segment by location (L V S) Segment by age (single, family, seniors) Interests (weekend warriors , corporate leave) Add photo/ logo to the email signature Have social media icons in the signature ^2 be CAN-SPAM compliant CAN-SPAM stands for Controlling the Assault of Non-Solicited Pornography and Marketing Act of 2003) Steps: Be Who You Say You Are Don't Lie (in the Subject Line) Tell recipients where you are (mailing address) Tell people how to Opt-Out (universal unsubscribe rule) Honor Opt-Out requests promptly (< 10 days) Monitor what others are doing on your behalf ^5 Do Spam testing Mailing Check Is Not Spam Mail-Tester Popular Email Blacklisting websites Barracuda Reputation Block List MXToolBox Invaluement MultiRBL Spamcop Spamhaus SURBL If you are blacklisted, follow the instructions to fix the problems and remove your IP address from the list Email Validators Prevention is better than cure, so here are services that check if the emails in your list are still active, so that you don't get accused of spamming. ^3 Tools we can practice on MS Excel Google Website Optimizer (free) Open Refine (formerly Google Refine)","title":"Email marketing"},{"location":"2019-01-09-email-marketing/#email-marketing","text":"^1","title":"Email marketing"},{"location":"2019-01-09-email-marketing/#advantages-and-disadvantages","text":"Pros Cons reach both mobile and pc spam filter blocks effective for info dissemination cheap","title":"Advantages and Disadvantages"},{"location":"2019-01-09-email-marketing/#quick-start","text":"Have a sign-up form in your website, collect emails and pilot test an email marketing campaign. Gmail and Yahoo gives ~500 free emails per day per account You can pay monthly : ^3 Or you can pay per use: ^3 If you pay, you get to easily track: ^6","title":"Quick start"},{"location":"2019-01-09-email-marketing/#collecting-emails","text":"Have multiple subscribe CTA's (i.e. Calls to Action) Exchange something for their emails coupons convenience appeals rewards Disclose your Social Strength (e.g. number of people served, accounts, years up)","title":"Collecting Emails"},{"location":"2019-01-09-email-marketing/#sustaining-interest","text":"Have great content Encourage signing up and forwarding to friends Limit ads to around 10% Great headings (eg \"KATTSI is happy to announce a Destination...\" , \"This is perfect for...\" , \"Book now and you get ...\" , \"For a limited time only, save ....\") Invite past clients first and offer them a discount Offer early bird and regular pricing Send greeting cards","title":"Sustaining interest"},{"location":"2019-01-09-email-marketing/#organizing-the-mailing-list","text":"Put everything on an Excel sheet Remove bad/ bouncing emails (~22.5% emails are deactivated yearly) Have Email Service Validation (so you're not marked as a spammer) Protect your brand by having an Opt-in Policy (6-month last touch expiry) Have Opt-out/ Unsubscribe links ^4","title":"Organizing the Mailing List"},{"location":"2019-01-09-email-marketing/#email-content","text":"Have subjects that are 6-10 words - source Connect with the client Segment by location (L V S) Segment by age (single, family, seniors) Interests (weekend warriors , corporate leave) Add photo/ logo to the email signature Have social media icons in the signature ^2","title":"Email content"},{"location":"2019-01-09-email-marketing/#be-can-spam-compliant","text":"CAN-SPAM stands for Controlling the Assault of Non-Solicited Pornography and Marketing Act of 2003) Steps: Be Who You Say You Are Don't Lie (in the Subject Line) Tell recipients where you are (mailing address) Tell people how to Opt-Out (universal unsubscribe rule) Honor Opt-Out requests promptly (< 10 days) Monitor what others are doing on your behalf ^5","title":"be CAN-SPAM compliant"},{"location":"2019-01-09-email-marketing/#do-spam-testing","text":"Mailing Check Is Not Spam Mail-Tester","title":"Do Spam testing"},{"location":"2019-01-09-email-marketing/#popular-email-blacklisting-websites","text":"Barracuda Reputation Block List MXToolBox Invaluement MultiRBL Spamcop Spamhaus SURBL If you are blacklisted, follow the instructions to fix the problems and remove your IP address from the list","title":"Popular Email Blacklisting websites"},{"location":"2019-01-09-email-marketing/#email-validators","text":"Prevention is better than cure, so here are services that check if the emails in your list are still active, so that you don't get accused of spamming. ^3","title":"Email Validators"},{"location":"2019-01-09-email-marketing/#tools-we-can-practice-on","text":"MS Excel Google Website Optimizer (free) Open Refine (formerly Google Refine)","title":"Tools we can practice on"},{"location":"2019-01-09-marketing-trends-ph/","text":"Philippine Digital Marketing Trends 2018 Filipinos spend an average of 9 hours on the internet and 4 hours 17 minutes on social media every day, the most in the world - source About 59% of Filipinos perceive the content they see in Facebook, Instagram and Twitter as reliable. Globally, only 35% trust the content in these channels - source Smartphone penetration in the Philippines is estimated at 70% - source Filipinos use internet on their mobile devices for over 3.5 hours every day [GlobalWebIndex data] The Philippines posted the highest year-on-year increase in mobile shopping in Asia-Pacific in 2016 [Mastercard consumer poll] Video is the most effective digital marketing format (vs. articles, infographics, e-newsletters) in 2017 [GetCRAFT] example: 65% of Filipinos purchase with their smartphones and 41% make mobile payments at least once a week - source 81% of consumers check products on the internet before buying and the first page of the google search gets 33% more web traffic. - source Philippines has a reported 60 million internet users in the 2017 - source Smartphones take up 69% of digital media time - source Rappler.com TrueLogic.com.ph","title":"Philippine Digital Marketing Trends 2018"},{"location":"2019-01-09-marketing-trends-ph/#philippine-digital-marketing-trends-2018","text":"Filipinos spend an average of 9 hours on the internet and 4 hours 17 minutes on social media every day, the most in the world - source About 59% of Filipinos perceive the content they see in Facebook, Instagram and Twitter as reliable. Globally, only 35% trust the content in these channels - source Smartphone penetration in the Philippines is estimated at 70% - source Filipinos use internet on their mobile devices for over 3.5 hours every day [GlobalWebIndex data] The Philippines posted the highest year-on-year increase in mobile shopping in Asia-Pacific in 2016 [Mastercard consumer poll] Video is the most effective digital marketing format (vs. articles, infographics, e-newsletters) in 2017 [GetCRAFT] example: 65% of Filipinos purchase with their smartphones and 41% make mobile payments at least once a week - source 81% of consumers check products on the internet before buying and the first page of the google search gets 33% more web traffic. - source Philippines has a reported 60 million internet users in the 2017 - source Smartphones take up 69% of digital media time - source Rappler.com TrueLogic.com.ph","title":"Philippine Digital Marketing Trends 2018"},{"location":"2019-01-10-digital-marketing/","text":"Digitial marketing Right now, on worldwide average, Facebook is your number 1 priority in terms of conversion. Next is Mobile (Android or iOS) ads. This is followed by organic marketing , focusing on the human experience and relationship . These three mix in and with themselves. Traditional Digital Marketing in based on SEO (Search Engine Optimization) PPC (Pay per Click) techniques. These are normally what the management will be expecting in your Digital Marketing Campaigns. This is normally done in conjunction with Google Analytics . Other marketing platforms of growing import are: * youtube * Twitter * Instagram * Pinterest * Linkedin Once you have emails and people interested and going to the site, it would be time to build the presence in the respective social media platforms to take care of repeat business, referrals and organic growth. A generic way to reach-out and take care of clients and followers is through email. I have a blog post on that specifics of doing that here . Popular Platforms Facebook Android Classic platforms Google Ads Usage Guide Expectations Guide Step by Step blog Google Analytics Other Important platforms Twitter Instagram youtube Pinterest Linkedin","title":"Digitial marketing"},{"location":"2019-01-10-digital-marketing/#digitial-marketing","text":"Right now, on worldwide average, Facebook is your number 1 priority in terms of conversion. Next is Mobile (Android or iOS) ads. This is followed by organic marketing , focusing on the human experience and relationship . These three mix in and with themselves. Traditional Digital Marketing in based on SEO (Search Engine Optimization) PPC (Pay per Click) techniques. These are normally what the management will be expecting in your Digital Marketing Campaigns. This is normally done in conjunction with Google Analytics . Other marketing platforms of growing import are: * youtube * Twitter * Instagram * Pinterest * Linkedin Once you have emails and people interested and going to the site, it would be time to build the presence in the respective social media platforms to take care of repeat business, referrals and organic growth. A generic way to reach-out and take care of clients and followers is through email. I have a blog post on that specifics of doing that here .","title":"Digitial marketing"},{"location":"2019-01-10-digital-marketing/#popular-platforms","text":"Facebook Android","title":"Popular Platforms"},{"location":"2019-01-10-digital-marketing/#classic-platforms","text":"Google Ads Usage Guide Expectations Guide Step by Step blog Google Analytics","title":"Classic platforms"},{"location":"2019-01-10-digital-marketing/#other-important-platforms","text":"Twitter Instagram youtube Pinterest Linkedin","title":"Other Important platforms"},{"location":"2019-01-12-pro-rails-project/","text":"Professional Rails Project Steps -Roy Canseco New Rails Project use $ rails _5.1.6_ new sample_project --database=postgresql instead of: rails new sample_project Specify the rails version you want to use for the project. It's good to indicate this in the Gemfile too. Immediate use the same database as what you plan to use in production. This is good practice. Connect to a database make sure you have the database software available open config/database.yml edit the default section and add the following with your database details host: username: password: port: you can leave the default pool=5 run $ rails db:create to see if the connection is successful (ie no errors) Create the README include the following sections in the README what is this Project License Getting Started More info / Contact Info We can use this also as the configuration document. Any sensitive information should be left as configuration variables (eg $PASSWORD ) with a mapping in a private spreadsheet somewhere. Create the privete password spreadsheet Google spreadsheets might be a good fit for this. Sample accounts can be stored here. Private Source Code Repository Let's start with gitlab Have the team as collaborators Assign someone for branch merging to master Make \"Hello World\" have the root route to a controller method that says \"Hello World\" this allows us to deploy as early as possible without arousing suspicion Heroku deploy sign-up for Heroku see if you have heroku cli properly installed $ heroku --version login and save keys the create a project and deploy open to see your successful \"hello world\" deployment $ heroku login $ heroku keys:add $ heroku create $ heroku push master $ heroku open Create Static Pages This is you About page etc. practicing branching would be good now too * create a new branch * develop the static Pages * checkout master and merge branch * delete branch $ git checkout -b static_pages $ rails generate controller StaticPages home help $ git add . $ git commit -m \"Add static pages controller\" $ git push -u origin static-pages subsequent pushing is ok with $ git push Setup Automatic Testing Test the titles on the static Pages Freeze the Gemfile Freezing the versions in the Gemfile can be a good idea now. Since you can now have tests that will check if upgrades will break anything important. Setup Continous Integration use Gitlab CI","title":"Professional Rails Project Steps"},{"location":"2019-01-12-pro-rails-project/#professional-rails-project-steps","text":"-Roy Canseco","title":"Professional Rails Project Steps"},{"location":"2019-01-12-pro-rails-project/#new-rails-project","text":"use $ rails _5.1.6_ new sample_project --database=postgresql instead of: rails new sample_project Specify the rails version you want to use for the project. It's good to indicate this in the Gemfile too. Immediate use the same database as what you plan to use in production. This is good practice.","title":"New Rails Project"},{"location":"2019-01-12-pro-rails-project/#connect-to-a-database","text":"make sure you have the database software available open config/database.yml edit the default section and add the following with your database details host: username: password: port: you can leave the default pool=5 run $ rails db:create to see if the connection is successful (ie no errors)","title":"Connect to a database"},{"location":"2019-01-12-pro-rails-project/#create-the-readme","text":"include the following sections in the README what is this Project License Getting Started More info / Contact Info We can use this also as the configuration document. Any sensitive information should be left as configuration variables (eg $PASSWORD ) with a mapping in a private spreadsheet somewhere.","title":"Create the README"},{"location":"2019-01-12-pro-rails-project/#create-the-privete-password-spreadsheet","text":"Google spreadsheets might be a good fit for this. Sample accounts can be stored here.","title":"Create the privete password spreadsheet"},{"location":"2019-01-12-pro-rails-project/#private-source-code-repository","text":"Let's start with gitlab Have the team as collaborators Assign someone for branch merging to master","title":"Private Source Code Repository"},{"location":"2019-01-12-pro-rails-project/#make-hello-world","text":"have the root route to a controller method that says \"Hello World\" this allows us to deploy as early as possible without arousing suspicion","title":"Make \"Hello World\""},{"location":"2019-01-12-pro-rails-project/#heroku-deploy","text":"sign-up for Heroku see if you have heroku cli properly installed $ heroku --version login and save keys the create a project and deploy open to see your successful \"hello world\" deployment $ heroku login $ heroku keys:add $ heroku create $ heroku push master $ heroku open","title":"Heroku deploy"},{"location":"2019-01-12-pro-rails-project/#create-static-pages","text":"This is you About page etc. practicing branching would be good now too * create a new branch * develop the static Pages * checkout master and merge branch * delete branch $ git checkout -b static_pages $ rails generate controller StaticPages home help $ git add . $ git commit -m \"Add static pages controller\" $ git push -u origin static-pages subsequent pushing is ok with $ git push","title":"Create Static Pages"},{"location":"2019-01-12-pro-rails-project/#setup-automatic-testing","text":"Test the titles on the static Pages","title":"Setup Automatic Testing"},{"location":"2019-01-12-pro-rails-project/#freeze-the-gemfile","text":"Freezing the versions in the Gemfile can be a good idea now. Since you can now have tests that will check if upgrades will break anything important.","title":"Freeze the Gemfile"},{"location":"2019-01-12-pro-rails-project/#setup-continous-integration","text":"use Gitlab CI","title":"Setup Continous Integration"},{"location":"2019-01-12-reversing-rails/","text":"Reversing cli commands in RoR $ rails generate controller StaticPages home help $ rails destrol controller StaticPages home help $ rails generate model User name:string email:string $ rails destroy model User $ rails db:migrate $ rails db:rollback You can also \"migrate back\" to a certain version. The first version is 0 and moves sequentially along the migrations after that. $ rails db:migrate VERSION=0","title":"Reversing cli commands in RoR"},{"location":"2019-01-12-reversing-rails/#reversing-cli-commands-in-ror","text":"$ rails generate controller StaticPages home help $ rails destrol controller StaticPages home help $ rails generate model User name:string email:string $ rails destroy model User $ rails db:migrate $ rails db:rollback You can also \"migrate back\" to a certain version. The first version is 0 and moves sequentially along the migrations after that. $ rails db:migrate VERSION=0","title":"Reversing cli commands in RoR"},{"location":"2019-01-16-DENR_TOR/","text":"TERMS OF REFERENCE ( proposed ) IMPROVEMENT OF ENVIRONMENTOR MOBILE APPLICATION AND DEVELOPMENT OF BIG DATA ANALYTICS A. \u200b PROJECT BACKGROUND AND OBJECTIVES EnvironMentor is an information system for the DENR and its stakeholders that emulate the convenience of a search engine. It is also a map-based active application (\u201cdashboard\u201d) that utilizes GPS technology to summon relevant data in the area for the use of DENR insiders and external stakeholders, according to a hierarchy of access based on different levels of responsibility. It has an active GPS-based notification and alert systems. EnvironMentor was adopted by the DENR through DENR Memorandum Circular No. 2017-02 dated 10 March 2017 (\u201cMC 2017-02\u201d). This is pursuant to Executive Order No. 02, otherwise known as \u201c\u200b Operationalizing in the Executive Branch the People\u2019s Constitutional Right to Information and the State Policies to Full Public Disclosure and Transparency in the Public Service and Providing Guidelines Therefor\u201d. Section 5 of MC 2017-02 provides for continuous updates of the application. This Project aims to: To formulate, devise, prepare and implement this project that will strengthen efforts for the conservation, protection and sustainable management of the country\u2019s environment and natural resources; To gather nationwide baseline data on the state of our environment and natural resources as well as identification and quantitative assessment of the factors/pressures contributing to the condition of environment and natural resources for identifying site-specific management; To share and exchange knowledge, expertise, information and experience, other than those proprietary in nature, that can contribute to the efficiency and effectiveness of the program, based on terms and conditions mutually agreed upon by the Parties; and To explore utilization of the UP Diwata and LIDAR\u2019s data for DENR\u2019s output relative to the analysis of land use and land cover changes and National Greening Program impacts to communities and environmental hazards. B. SCOPE OF WORK Improvement of graphical user interface and over-all design of the application prototype of the UI and usage software architecture architecture for the data collection architecture for mobile app UI presentation layer application functions / features layer process logic layer data layer Exploration of access and/or incorporation of other (available) base maps (e.g. satellite imagery, terrain, etc.) data from Diwata microsatellites LiDAR data Inclusion of search function for places in longitude and latitude format Addition of search function for places in the following: List of Protected Areas (PA), Mineral Production Sharing Agreements (MPSA), Community Based Forest Management Agreements (CBFMA), Integrated Forest Management Agreements, and Others Addition of historical interactive time cursor for the following: land cover maps, population maps, project maps and others. Addition of functionality for instant call, text and email DENR Offices upon clicking the number or e-mail address Feasibility assessment of the addition of a track routing system for customized maps from mobile and/or PC Feasibility assessment of a functionality where \u200b authorized users can add shape files/kmz files Feasibility assessment of a functionality where \u200b users can plot/add bearing and distance for customized maps from mobile and/or PC Feasibility assessment of the addition of a crowd sourced information-sharing system on the environment such as flood, pollution-related data and environmental crimes Feasibility assessment of integrating Data Analytical Tools for decision support Design of questions for searching information from database Develop a system for big data analytics as regards land cover data, land use data and others Train personnel/staff that will manage, process and archive data and information gathered. In pursuit of the foregoing works, and for the purpose of evolving EnvironMentor into an ever more responsive information system for the environment and the present and future generations, the trusted partner institutions may use the EnvironMentor for the appropriate academic programs, laboratory works, public discussions, open fora and the like. C. DELIVERABLES/SPECIFIC OUTPUTS EXPECTED Deliverables An improved and enhanced EnvironMentor Mobile Application that is fully functional and exhibits all features enumerated in the \u200b Scope of Work EnvironMentor Web Application to \u200b sync updates\u200b\u200b to the Mobile Application Database System\u200b\u200b for the Uploaded Data on EnvironMentor Web Application Big Data Analytics\u200b\u200b on Information on the Environment At least two (2) \u200b open forum/public discussions and a report on the forum and other academic activities using the EnvironMentor Final Report Delivery and Payment Schedule TWENTY FIVE PERCENT (25%) of the fund - upon issuance of the Notice to Proceed; TWENTY PERCENT (15%) - upon submission and acceptance of the Inception Report; TWENTY PERCENT (25%) - upon submission and acceptance of the Deliverable Nos. 1-3 (see TOR Scope of Work) TWENTY PERCENT (25%) - upon submission and acceptance of the Deliverable Nos. 4-6 in the form of responsive mobile-ready web applications (see TOR Scope of Work); and TEN PERCENT (10%) - will be paid upon submission and acceptance of the Final Report. Reporting The following reports shall be submitted: Inception Report Report on Deliverables No. 1-3 Report on Deliverables No. 4-8 Final Report D. OTHER INPUTS Inception Report Draft Have all the data together, both current and historical in a single database to find the gaps and determine level of specificity to be expected from the final deliverables This will include expectations for each milestone This will detail definitions of done Include demos for map generation (track routes) using google maps api Have 2 versions, one internal-facing and the other public-facing Scoping, what is in-scope and what is out-of-scope for the project crowd source reports to DENR not shared publicly unless DENR pushes to the bulletin page allows upload of evidence (e.g. picture, video, audio) Communical validation Planners can download maps for their own use (not reported back to the system) FGD with planners later on","title":"2019 01 16 DENR TOR"},{"location":"2019-01-16-DENR_TOR/#terms-of-reference-proposed","text":"","title":"TERMS OF REFERENCE (proposed)"},{"location":"2019-01-16-DENR_TOR/#improvement-of-environmentor-mobile-application-and-development-of-big-data-analytics","text":"","title":"IMPROVEMENT OF ENVIRONMENTOR MOBILE APPLICATION AND DEVELOPMENT OF BIG DATA ANALYTICS"},{"location":"2019-01-16-DENR_TOR/#a-project-background-and-objectives","text":"EnvironMentor is an information system for the DENR and its stakeholders that emulate the convenience of a search engine. It is also a map-based active application (\u201cdashboard\u201d) that utilizes GPS technology to summon relevant data in the area for the use of DENR insiders and external stakeholders, according to a hierarchy of access based on different levels of responsibility. It has an active GPS-based notification and alert systems. EnvironMentor was adopted by the DENR through DENR Memorandum Circular No. 2017-02 dated 10 March 2017 (\u201cMC 2017-02\u201d). This is pursuant to Executive Order No. 02, otherwise known as \u201c\u200b Operationalizing in the Executive Branch the People\u2019s Constitutional Right to Information and the State Policies to Full Public Disclosure and Transparency in the Public Service and Providing Guidelines Therefor\u201d. Section 5 of MC 2017-02 provides for continuous updates of the application. This Project aims to: To formulate, devise, prepare and implement this project that will strengthen efforts for the conservation, protection and sustainable management of the country\u2019s environment and natural resources; To gather nationwide baseline data on the state of our environment and natural resources as well as identification and quantitative assessment of the factors/pressures contributing to the condition of environment and natural resources for identifying site-specific management; To share and exchange knowledge, expertise, information and experience, other than those proprietary in nature, that can contribute to the efficiency and effectiveness of the program, based on terms and conditions mutually agreed upon by the Parties; and To explore utilization of the UP Diwata and LIDAR\u2019s data for DENR\u2019s output relative to the analysis of land use and land cover changes and National Greening Program impacts to communities and environmental hazards.","title":"A. \u200b PROJECT BACKGROUND AND OBJECTIVES"},{"location":"2019-01-16-DENR_TOR/#b-scope-of-work","text":"Improvement of graphical user interface and over-all design of the application prototype of the UI and usage software architecture architecture for the data collection architecture for mobile app UI presentation layer application functions / features layer process logic layer data layer Exploration of access and/or incorporation of other (available) base maps (e.g. satellite imagery, terrain, etc.) data from Diwata microsatellites LiDAR data Inclusion of search function for places in longitude and latitude format Addition of search function for places in the following: List of Protected Areas (PA), Mineral Production Sharing Agreements (MPSA), Community Based Forest Management Agreements (CBFMA), Integrated Forest Management Agreements, and Others Addition of historical interactive time cursor for the following: land cover maps, population maps, project maps and others. Addition of functionality for instant call, text and email DENR Offices upon clicking the number or e-mail address Feasibility assessment of the addition of a track routing system for customized maps from mobile and/or PC Feasibility assessment of a functionality where \u200b authorized users can add shape files/kmz files Feasibility assessment of a functionality where \u200b users can plot/add bearing and distance for customized maps from mobile and/or PC Feasibility assessment of the addition of a crowd sourced information-sharing system on the environment such as flood, pollution-related data and environmental crimes Feasibility assessment of integrating Data Analytical Tools for decision support Design of questions for searching information from database Develop a system for big data analytics as regards land cover data, land use data and others Train personnel/staff that will manage, process and archive data and information gathered. In pursuit of the foregoing works, and for the purpose of evolving EnvironMentor into an ever more responsive information system for the environment and the present and future generations, the trusted partner institutions may use the EnvironMentor for the appropriate academic programs, laboratory works, public discussions, open fora and the like.","title":"B. SCOPE OF WORK"},{"location":"2019-01-16-DENR_TOR/#c-deliverablesspecific-outputs-expected","text":"Deliverables An improved and enhanced EnvironMentor Mobile Application that is fully functional and exhibits all features enumerated in the \u200b Scope of Work EnvironMentor Web Application to \u200b sync updates\u200b\u200b to the Mobile Application Database System\u200b\u200b for the Uploaded Data on EnvironMentor Web Application Big Data Analytics\u200b\u200b on Information on the Environment At least two (2) \u200b open forum/public discussions and a report on the forum and other academic activities using the EnvironMentor Final Report Delivery and Payment Schedule TWENTY FIVE PERCENT (25%) of the fund - upon issuance of the Notice to Proceed; TWENTY PERCENT (15%) - upon submission and acceptance of the Inception Report; TWENTY PERCENT (25%) - upon submission and acceptance of the Deliverable Nos. 1-3 (see TOR Scope of Work) TWENTY PERCENT (25%) - upon submission and acceptance of the Deliverable Nos. 4-6 in the form of responsive mobile-ready web applications (see TOR Scope of Work); and TEN PERCENT (10%) - will be paid upon submission and acceptance of the Final Report. Reporting The following reports shall be submitted: Inception Report Report on Deliverables No. 1-3 Report on Deliverables No. 4-8 Final Report","title":"C. DELIVERABLES/SPECIFIC OUTPUTS EXPECTED"},{"location":"2019-01-16-DENR_TOR/#d-other-inputs","text":"","title":"D. OTHER INPUTS"},{"location":"2019-01-16-DENR_TOR/#inception-report-draft","text":"Have all the data together, both current and historical in a single database to find the gaps and determine level of specificity to be expected from the final deliverables This will include expectations for each milestone This will detail definitions of done Include demos for map generation (track routes) using google maps api Have 2 versions, one internal-facing and the other public-facing Scoping, what is in-scope and what is out-of-scope for the project crowd source reports to DENR not shared publicly unless DENR pushes to the bulletin page allows upload of evidence (e.g. picture, video, audio) Communical validation Planners can download maps for their own use (not reported back to the system) FGD with planners later on","title":"Inception Report Draft"},{"location":"2019-01-cv/","text":"Roy Vincent Luna Canseco email: roy@pshs.edu.ph Education 2011-2014: Took Ph.D. Computer Science Coursework , University of the Philippines , Diliman, Quezon City Finished coursework with a 1.3468 GWA (scale of 1-5, 1.0 highest) Completed Coursework , Candidacy and Proposal (2011-2014) 2008-2009: M.S. Electrical Engineering maj. Power Systems , Univeristy of the Philippines , Diliman, Quezon City Masters Thesis: Modeling of Overcurrent Protective Relay Response Time to Electrical Transients in Power Systems Supervisor: Prof. Rowaldo R. del Mundo Description: Software modeling (Matlab) of the characteristics of overcurrent protective relays in the presence of phasors and distortions Completed 2-year degree in 1 year General Weighted Average of 1.3571 (scale of 1-5, 1.0 highest)) 2003-2008: B.S. Electrical Engineering , University of the Philippines , Diliman, Quezon City Obtained highest marks in his E.E. Graduating Class (1.7588 GWA) Employment March 2019 - Present: Special Science Teacher , Philippine Science High School , Diliman, Quezon City February 2019 - Present: Competitive Programming Coach , Computer Science Unit August 2019 - Present: I.T. Liaison Officer , Management Information systems August 2019 - Present: Senior Lecturer , Virata School of Business , UP-Diliman, Quezon City Teaches Information System Analysis and Design May 2019 - Present: I.C.T. Head , University of the Philippines Provident Fund Incorporated , Diliman, Quezon City Supervised the migration of the UPPFI Information System from Phalcon to Laravel January 2019- May 2019: I.T. Consultant , University of the Philippines Provident Fund Incorporated , Diliman, Quezon City Led the User Acceptance Testing of Phase 1 of the UPPFI Information System 08/01/2018-11/31/2018: Senior System Analyst , University of the Philippines - I.T. Development Center , Diliman, Quezon City Co-led the team responsible for the Design of the Insurance Commission - Financial Evaluation Division Software 08/14/2014-07/31/2018: Asst. Professor , University of the Philippines- Department of Computer Science , Diliman, Quezon City Taught courses on Software Engineering , Numerical Methods , Differential Equations , Linear Algebra , I.T. Service Management , Circuits and Introductory Programming Highlights: (2018) Delivered a Plenary Talk on Teaching Innovation for UP Engineering Faculty; (2017) Received the Nokia Teaching Innovation Grant for Software Engineering (2017-18) Served as Lab Head of the Service Science and Software Engineering Laboratory where he led the development of the Industry Practices in Software Engineering Elective led research on Software Quality assessment organized the DCS Student Projects Poster fair (2016) Undertook immersion in Nokia, Technohub for software engineering practices 2011-2014: I.C.T. Consultant , ACDI Multipurpose Cooperative Worked in the Software Migration Team for the Core Banking System 2009-2011: Operations Officer/ Founder , Philippine Open-source Distribution, Inc , Quezon City 2009-2011: Lecturer , Electrical and Electronics Engineering Institute , U.P. Diliman Integrated programming, research, field trips and symposium presentation to the course, which enhanced learning and led to a high Lecturer evaluation 2008: Computer Laboratory Assistant , U.P. Engineering Research and Development Foundation, Inc. , Diliman, Quezon Community Maintained and updated Power System Analysis software used in technical trainings conducted in the National Engineering Center 2007: Intern , Citibank , Makati Created programs to automate several custom customized tasks in the Securities department Languages Filipino - native English - secondary language Relevant Skills Operating systems: Windows , Linux- Ubuntu Programming: Ruby Scientific: Matlab , Maple Framework: Rails Voluntary Work These may be voluntary work or involvement in civic/ non-government / people / voluntary organizations I led or co-led the technical team that analyzed and defined requirements for the Systems Migration of UP Diliman\u2019s HR Data in 2016/ 2017. There were two parts. The development of both are now accomplished and both parts are currently in active use in UP Diliman. (November- December 2018) Trained UP Diliman Staff/ Administrators on Excel and SQL database (November- December 2018) Trained lay-professionals and IT on Practical Database Design","title":"About"},{"location":"2019-01-cv/#roy-vincent-luna-canseco","text":"email: roy@pshs.edu.ph","title":"Roy Vincent Luna Canseco"},{"location":"2019-01-cv/#education","text":"2011-2014: Took Ph.D. Computer Science Coursework , University of the Philippines , Diliman, Quezon City Finished coursework with a 1.3468 GWA (scale of 1-5, 1.0 highest) Completed Coursework , Candidacy and Proposal (2011-2014) 2008-2009: M.S. Electrical Engineering maj. Power Systems , Univeristy of the Philippines , Diliman, Quezon City Masters Thesis: Modeling of Overcurrent Protective Relay Response Time to Electrical Transients in Power Systems Supervisor: Prof. Rowaldo R. del Mundo Description: Software modeling (Matlab) of the characteristics of overcurrent protective relays in the presence of phasors and distortions Completed 2-year degree in 1 year General Weighted Average of 1.3571 (scale of 1-5, 1.0 highest)) 2003-2008: B.S. Electrical Engineering , University of the Philippines , Diliman, Quezon City Obtained highest marks in his E.E. Graduating Class (1.7588 GWA)","title":"Education"},{"location":"2019-01-cv/#employment","text":"March 2019 - Present: Special Science Teacher , Philippine Science High School , Diliman, Quezon City February 2019 - Present: Competitive Programming Coach , Computer Science Unit August 2019 - Present: I.T. Liaison Officer , Management Information systems August 2019 - Present: Senior Lecturer , Virata School of Business , UP-Diliman, Quezon City Teaches Information System Analysis and Design May 2019 - Present: I.C.T. Head , University of the Philippines Provident Fund Incorporated , Diliman, Quezon City Supervised the migration of the UPPFI Information System from Phalcon to Laravel January 2019- May 2019: I.T. Consultant , University of the Philippines Provident Fund Incorporated , Diliman, Quezon City Led the User Acceptance Testing of Phase 1 of the UPPFI Information System 08/01/2018-11/31/2018: Senior System Analyst , University of the Philippines - I.T. Development Center , Diliman, Quezon City Co-led the team responsible for the Design of the Insurance Commission - Financial Evaluation Division Software 08/14/2014-07/31/2018: Asst. Professor , University of the Philippines- Department of Computer Science , Diliman, Quezon City Taught courses on Software Engineering , Numerical Methods , Differential Equations , Linear Algebra , I.T. Service Management , Circuits and Introductory Programming Highlights: (2018) Delivered a Plenary Talk on Teaching Innovation for UP Engineering Faculty; (2017) Received the Nokia Teaching Innovation Grant for Software Engineering (2017-18) Served as Lab Head of the Service Science and Software Engineering Laboratory where he led the development of the Industry Practices in Software Engineering Elective led research on Software Quality assessment organized the DCS Student Projects Poster fair (2016) Undertook immersion in Nokia, Technohub for software engineering practices 2011-2014: I.C.T. Consultant , ACDI Multipurpose Cooperative Worked in the Software Migration Team for the Core Banking System 2009-2011: Operations Officer/ Founder , Philippine Open-source Distribution, Inc , Quezon City 2009-2011: Lecturer , Electrical and Electronics Engineering Institute , U.P. Diliman Integrated programming, research, field trips and symposium presentation to the course, which enhanced learning and led to a high Lecturer evaluation 2008: Computer Laboratory Assistant , U.P. Engineering Research and Development Foundation, Inc. , Diliman, Quezon Community Maintained and updated Power System Analysis software used in technical trainings conducted in the National Engineering Center 2007: Intern , Citibank , Makati Created programs to automate several custom customized tasks in the Securities department","title":"Employment"},{"location":"2019-01-cv/#languages","text":"Filipino - native English - secondary language","title":"Languages"},{"location":"2019-01-cv/#relevant-skills","text":"Operating systems: Windows , Linux- Ubuntu Programming: Ruby Scientific: Matlab , Maple Framework: Rails","title":"Relevant Skills"},{"location":"2019-01-cv/#voluntary-work","text":"These may be voluntary work or involvement in civic/ non-government / people / voluntary organizations I led or co-led the technical team that analyzed and defined requirements for the Systems Migration of UP Diliman\u2019s HR Data in 2016/ 2017. There were two parts. The development of both are now accomplished and both parts are currently in active use in UP Diliman. (November- December 2018) Trained UP Diliman Staff/ Administrators on Excel and SQL database (November- December 2018) Trained lay-professionals and IT on Practical Database Design","title":"Voluntary Work"},{"location":"2019-02-UPPFI-WW-DOD-1/","text":"Abstract This document puts together the issues that UPPFI found and the tests cases created that we believe will more or else ensure that the root causes of the issues have been addressed.[^1] Addressing the issues listed in this document is expected to allow UPPFI to finish testing the functionalities of the Web App, leading to the soonest possible date for going Live as well as project source code verification and turn-over. Issue Prioritization Priority one: The Template/ Sample CSV for Loans uploading catches errors even without us doing anything to it. Kindly fix the bad \"loans_template.csv\" Priority two: The \"TRANSACTIONS\" field in both the \"loans_template.csv\" and the \"contributions_template.csv\" should take in variable length strings. This field's purpose is to inform members of the nature of each loan or contribution record/ transaction and though for a lot of accounts, this includes putting in the OR#, it more often than not, needs to includes some text and dates as well. Please check the View for this also. Remove the automatic \"OR#\" in the transactions column in the views. The UPPFI staff will manually put the \"OR#\" whenever they see appropriate. Priority three: In the \"loans_template_csv\", the following fields should accept \"0\" : AMOUNT AMORTIZATION INTEREST and the following fields should be allowed to be blank: AMORTIZATION START DATE AMORTIZATION END DATE Priority three also: In the \"contributions_template.csv\" the following fields should accept \"0\" : UP CONTRIBUTION MEMBER CONTRIBUTION EARNINGS ON UP CONTRIBUTION EARNINGS ON MEMBER CONTRIBUTION Priority four: The allowed values for the \"TYPE\" field in the \"loans_template.csv\" should be editable/ configurable to allow the PFI to create new loan products are retire old ones. Please note that when Excel exports csv files, default non-string datatypes (e.g. dates and numbers) are not wrapped in quotes. The Web App should anticipate and validate this. Membership Data Import The template workflow is as follows : UPPFI does uses the templates and does their work in Excel. At the end of their work in filling the spreadsheet, they will do an extra step to save in csv format. They will use the web app to upload the resulting csv to the database. The database will be accessed by the members through the corresponding views. Below is a sample xlsx file that includes testcases mapped to the listed priority issues. Note that we are not changing any of the rules, but rather generalizing them to include cases that occur in practice and are expected from the Web App by the members/ end-users of UPPFI. test file: members data - excel The above text file was converted into a csv below. It is the resulting csv that is expected to be imported correctly and reliably to the database. test file: members data - csv Contribution Data Import The above text file was converted into a csv below. It is the resulting csv that is expected to be imported correctly and reliably to the database. test file: contributions data - excel The above text file was converted into a csv below. It is the resulting csv that is expected to be imported correctly and reliably to the database. test file: contributions data - csv Below is a 2nd excel sheet that should be acceptable. Please try to save as csv and check that it will be importable to the database. 2nd test file: contributions data - excel Loans Data Import Below is a sample xlsx file that includes testcases mapped to the listed priority issues. Note that we are not changing any of the rules, but rather generalizing them to include cases that occur in practice and are expected from the Web App by the members/ end-users of UPPFI. test file: loans data - excel The above text file was converted into a csv below. It is the resulting csv that is expected to be imported correctly and reliably to the database. test file: loans data - csv Below is a 2nd excel sheet that should be acceptable. Please try to save as csv and check that it will be importable to the database. 2nd test file: loans data - excel [^1]: Any personally identifiable information have been scrubbed out.","title":"Definitions of Done - UPPFI-WW web app"},{"location":"2019-02-UPPFI-WW-DOD-1/#abstract","text":"This document puts together the issues that UPPFI found and the tests cases created that we believe will more or else ensure that the root causes of the issues have been addressed.[^1] Addressing the issues listed in this document is expected to allow UPPFI to finish testing the functionalities of the Web App, leading to the soonest possible date for going Live as well as project source code verification and turn-over.","title":"Abstract"},{"location":"2019-02-UPPFI-WW-DOD-1/#issue-prioritization","text":"Priority one: The Template/ Sample CSV for Loans uploading catches errors even without us doing anything to it. Kindly fix the bad \"loans_template.csv\" Priority two: The \"TRANSACTIONS\" field in both the \"loans_template.csv\" and the \"contributions_template.csv\" should take in variable length strings. This field's purpose is to inform members of the nature of each loan or contribution record/ transaction and though for a lot of accounts, this includes putting in the OR#, it more often than not, needs to includes some text and dates as well. Please check the View for this also. Remove the automatic \"OR#\" in the transactions column in the views. The UPPFI staff will manually put the \"OR#\" whenever they see appropriate. Priority three: In the \"loans_template_csv\", the following fields should accept \"0\" : AMOUNT AMORTIZATION INTEREST and the following fields should be allowed to be blank: AMORTIZATION START DATE AMORTIZATION END DATE Priority three also: In the \"contributions_template.csv\" the following fields should accept \"0\" : UP CONTRIBUTION MEMBER CONTRIBUTION EARNINGS ON UP CONTRIBUTION EARNINGS ON MEMBER CONTRIBUTION Priority four: The allowed values for the \"TYPE\" field in the \"loans_template.csv\" should be editable/ configurable to allow the PFI to create new loan products are retire old ones. Please note that when Excel exports csv files, default non-string datatypes (e.g. dates and numbers) are not wrapped in quotes. The Web App should anticipate and validate this.","title":"Issue Prioritization"},{"location":"2019-02-UPPFI-WW-DOD-1/#membership-data-import","text":"The template workflow is as follows : UPPFI does uses the templates and does their work in Excel. At the end of their work in filling the spreadsheet, they will do an extra step to save in csv format. They will use the web app to upload the resulting csv to the database. The database will be accessed by the members through the corresponding views. Below is a sample xlsx file that includes testcases mapped to the listed priority issues. Note that we are not changing any of the rules, but rather generalizing them to include cases that occur in practice and are expected from the Web App by the members/ end-users of UPPFI. test file: members data - excel The above text file was converted into a csv below. It is the resulting csv that is expected to be imported correctly and reliably to the database. test file: members data - csv","title":"Membership Data Import"},{"location":"2019-02-UPPFI-WW-DOD-1/#contribution-data-import","text":"The above text file was converted into a csv below. It is the resulting csv that is expected to be imported correctly and reliably to the database. test file: contributions data - excel The above text file was converted into a csv below. It is the resulting csv that is expected to be imported correctly and reliably to the database. test file: contributions data - csv Below is a 2nd excel sheet that should be acceptable. Please try to save as csv and check that it will be importable to the database. 2nd test file: contributions data - excel","title":"Contribution Data Import"},{"location":"2019-02-UPPFI-WW-DOD-1/#loans-data-import","text":"Below is a sample xlsx file that includes testcases mapped to the listed priority issues. Note that we are not changing any of the rules, but rather generalizing them to include cases that occur in practice and are expected from the Web App by the members/ end-users of UPPFI. test file: loans data - excel The above text file was converted into a csv below. It is the resulting csv that is expected to be imported correctly and reliably to the database. test file: loans data - csv Below is a 2nd excel sheet that should be acceptable. Please try to save as csv and check that it will be importable to the database. 2nd test file: loans data - excel [^1]: Any personally identifiable information have been scrubbed out.","title":"Loans Data Import"},{"location":"2019-02-pisay_application/","text":"Dear Venerable Appointment Committee, I wish to apply for a Special Science Teacher post in Philippine Science High School - Main Campus in the Computer Science Unit. Here are some points of interest for consideration. I am putting self evaluations points on the work that I was able to find the certificates for. Thank you very much for considering. Sincerely, Roy Canseco Teaching Performance As my teaching experience is outside PSHS and is in educating college and post-college students, I have no points for this criterion. I do would wish to highlight that some of my early teaching (1st and 2nd year University Computer Science subjects) do apply to PSHS now because of the K12 changes and my effectiveness as a senior high school teacher may be inferred from these. I have the SET's (the evaluation tool of UP Diliman) and the Chairman of Computer Science (during the time I taught freshmen and sophomores) will corroborate this. His contact number is among my references. Kindly take the above into consideration. You won't be disappointed. Relevant Education (19 points) Bachelor of Science in Electrical Engineering - I got the honor of graduating top of the B.S.E.E. class of 2008. Master of Science in Electrical Engineering maj. Power Systems - I got the honor of finishing program in 1 year, instead of 2. My adviser and I believes that I was the first to do so. This can easily be checked by looking at my Bachelor's diploma (year 2008) and comparing it to my Master of Science diploma (year 2009). Both degrees are from UP Diliman. I would like to request 19 points. Relevant Teaching Experience (5.0 points) I include my Service Record in UP Diliman, both for teaching in Electrical and Electronics Engineering and in Computer Science. If you add the years/months/days, it would show a few days more than 5 years worth teaching to present. Relevant Training This is for the usual summer schools and winter schools that are done in more developed countries. It also provides acknowledgment to conferences and seminars. I have some of those. Aside from those I continually undergo online trainings to keep abreast of the very dynamic field of computer science. So my credits would be taken on 0.2 points / day of the relevant training. I ask that the following be credited: Beginning PHP and MySQL Tutorial online course - 0.2 7-10-2018 7-10-2018 10.5 Research Methods and Statistics: An Introduction online course - 0.2 Nuclear Energy Forum: Considerations and Essential Information - 0.2 2017 Mathematical Society of the Philippines Annual Convention - 0.6 Workshop on Empowering Uncommon Knowledge - 0.2 Introduction to Business Analytics Lecture - 0.2 Amian 2017: A Winter School on Modeling, Separation and Purification - 1.6 The Street Strategists' Financial Literacy Program - 0.4 Software Testing - 0.8 UP BEST Technology Tournament - 0.2 12th ANGCA NGV School (CNG Cylinder Safety Workshop) - 0.2 Inquies Summer Course - 0.8 Chemical Engineering and Forensic Science: A closer look at DNA Analysis - 0.2 Open Sourcing UP seminar - 0.2 Technical Support Fundamentals - a Google-authorized Coursera Course - 0.5 The Bits and Bytes of Computer Networking - a Google-authorized Coursera Course - 0.6 Elsevier's Research Writing and Publication Workshop - 0.2 Teaching Effectiveness Course - 1.0 WCTP 2018 - Workshop on Computation: Theory and Practice - 0.4 19th Regional Symposium on Chemical Engineering Professional Output / Activities Teacher Training Involvement 2018 Faculty Conference on Engineering Education Innovation - 0.5 PSHS System\u2019s Science Immersion Program - 2 Blended (Face to Face & Online) Training on the Essentials of Microsoft Excel - 0.5 EPDP Training on Programming Languages: MATLAB - 2 Exploring Non-Linear Temporal Dynamics of Photocatalytic Hydrogen Production using Agent-based Simulations - 2 First Green Tech Boot Camp - 2 Seminar-Workshop on Power System Modeling - 0.25 OpenOffice Training and Open Source Migration Lecture - 2 W.C.C. CISCO Networking I.T. Teachers Training Workshop Series - 1.5 W.C.C. Q.C. I.T. Teachers Training Series - 1.0 Student Training Involvement (4 points) BOOTCAMP 4.0 - 0.5 11.12.13 Ateneo Junior High Math Day Celebration - 0.5 CarEEEr Talk: E-nnovations - 0.5 ES Engineering Symposium 2011 - 0.5 Hotwired 4: Pinoy Tech! - 0.5 WCC Intercampus I.T. Conference - 1.5 Leading a Professional Organization I have none here at the moment. I am a member of the IEEE Philippine Section though. Committee Membership (4.0) University Project Competition committee (2 years) - 1.0 College Information Officer for Computer Science PDA for Training, Education and Development (3 semestral appointments) - 3.0 Administrative Assignments OIC Laboratory Head of the Service Science and Software Engineering Lab (1 year) Books Published none yet (still in the bucket list) Research / Professional Articles Published (4.0 points) R. V. L. Canseco and V. P. Bongolan, \"Markov Chain Monte Carlo optimization of visible light-driven hydrogen production,\" TENCON 2012 IEEE Region 10 Conference, Cebu, 2012, pp. 1-5. doi: 10.1109/TENCON.2012.6412278 SCOPUS indexed - 4.0 Lab Manual/ Workbook published none yet (planning to for Web/ Mobile Information System Development) Involvement in Research Was the Primary Technical Consultant for the STR project of Ryan Misola and Kenji Paralejo (PSHS batch 2012) Was the Primary Technical Consultant for the STR project of Raphael Canseco (PSHS batch 2008) Professional Awards and Recognition (1.0 points) Jose P. Segovia Professorial Chair Award (2016) - 1.0 Nokia Teaching Innovation Grant (2017) Coaching Co-curricular Activities none yet (no plans) Involvement in Outreach Activities (1.2 points) Development of the Scholarship and Fellowship Data System - 1.0 UP OVCA Offices Information Systems Development - 0.2 All in all, I am asking for myself some 62.85 raw points. When compensated with a factor of (119/89), it becomes 84.04 points. Thank you for your kind consideration!","title":"Teacher Career Path Evaluation Sheet"},{"location":"2019-02-pisay_application/#teaching-performance","text":"As my teaching experience is outside PSHS and is in educating college and post-college students, I have no points for this criterion. I do would wish to highlight that some of my early teaching (1st and 2nd year University Computer Science subjects) do apply to PSHS now because of the K12 changes and my effectiveness as a senior high school teacher may be inferred from these. I have the SET's (the evaluation tool of UP Diliman) and the Chairman of Computer Science (during the time I taught freshmen and sophomores) will corroborate this. His contact number is among my references. Kindly take the above into consideration. You won't be disappointed.","title":"Teaching Performance"},{"location":"2019-02-pisay_application/#relevant-education-19-points","text":"Bachelor of Science in Electrical Engineering - I got the honor of graduating top of the B.S.E.E. class of 2008. Master of Science in Electrical Engineering maj. Power Systems - I got the honor of finishing program in 1 year, instead of 2. My adviser and I believes that I was the first to do so. This can easily be checked by looking at my Bachelor's diploma (year 2008) and comparing it to my Master of Science diploma (year 2009). Both degrees are from UP Diliman. I would like to request 19 points.","title":"Relevant Education (19 points)"},{"location":"2019-02-pisay_application/#relevant-teaching-experience-50-points","text":"I include my Service Record in UP Diliman, both for teaching in Electrical and Electronics Engineering and in Computer Science. If you add the years/months/days, it would show a few days more than 5 years worth teaching to present.","title":"Relevant Teaching Experience (5.0 points)"},{"location":"2019-02-pisay_application/#relevant-training","text":"This is for the usual summer schools and winter schools that are done in more developed countries. It also provides acknowledgment to conferences and seminars. I have some of those. Aside from those I continually undergo online trainings to keep abreast of the very dynamic field of computer science. So my credits would be taken on 0.2 points / day of the relevant training. I ask that the following be credited: Beginning PHP and MySQL Tutorial online course - 0.2 7-10-2018 7-10-2018 10.5 Research Methods and Statistics: An Introduction online course - 0.2 Nuclear Energy Forum: Considerations and Essential Information - 0.2 2017 Mathematical Society of the Philippines Annual Convention - 0.6 Workshop on Empowering Uncommon Knowledge - 0.2 Introduction to Business Analytics Lecture - 0.2 Amian 2017: A Winter School on Modeling, Separation and Purification - 1.6 The Street Strategists' Financial Literacy Program - 0.4 Software Testing - 0.8 UP BEST Technology Tournament - 0.2 12th ANGCA NGV School (CNG Cylinder Safety Workshop) - 0.2 Inquies Summer Course - 0.8 Chemical Engineering and Forensic Science: A closer look at DNA Analysis - 0.2 Open Sourcing UP seminar - 0.2 Technical Support Fundamentals - a Google-authorized Coursera Course - 0.5 The Bits and Bytes of Computer Networking - a Google-authorized Coursera Course - 0.6 Elsevier's Research Writing and Publication Workshop - 0.2 Teaching Effectiveness Course - 1.0 WCTP 2018 - Workshop on Computation: Theory and Practice - 0.4 19th Regional Symposium on Chemical Engineering","title":"Relevant Training"},{"location":"2019-02-pisay_application/#professional-output-activities","text":"","title":"Professional Output / Activities"},{"location":"2019-02-pisay_application/#teacher-training-involvement","text":"2018 Faculty Conference on Engineering Education Innovation - 0.5 PSHS System\u2019s Science Immersion Program - 2 Blended (Face to Face & Online) Training on the Essentials of Microsoft Excel - 0.5 EPDP Training on Programming Languages: MATLAB - 2 Exploring Non-Linear Temporal Dynamics of Photocatalytic Hydrogen Production using Agent-based Simulations - 2 First Green Tech Boot Camp - 2 Seminar-Workshop on Power System Modeling - 0.25 OpenOffice Training and Open Source Migration Lecture - 2 W.C.C. CISCO Networking I.T. Teachers Training Workshop Series - 1.5 W.C.C. Q.C. I.T. Teachers Training Series - 1.0","title":"Teacher Training Involvement"},{"location":"2019-02-pisay_application/#student-training-involvement-4-points","text":"BOOTCAMP 4.0 - 0.5 11.12.13 Ateneo Junior High Math Day Celebration - 0.5 CarEEEr Talk: E-nnovations - 0.5 ES Engineering Symposium 2011 - 0.5 Hotwired 4: Pinoy Tech! - 0.5 WCC Intercampus I.T. Conference - 1.5","title":"Student Training Involvement (4 points)"},{"location":"2019-02-pisay_application/#leading-a-professional-organization","text":"I have none here at the moment. I am a member of the IEEE Philippine Section though.","title":"Leading a Professional Organization"},{"location":"2019-02-pisay_application/#committee-membership-40","text":"University Project Competition committee (2 years) - 1.0 College Information Officer for Computer Science PDA for Training, Education and Development (3 semestral appointments) - 3.0","title":"Committee Membership (4.0)"},{"location":"2019-02-pisay_application/#administrative-assignments","text":"OIC Laboratory Head of the Service Science and Software Engineering Lab (1 year)","title":"Administrative Assignments"},{"location":"2019-02-pisay_application/#books-published","text":"none yet (still in the bucket list)","title":"Books Published"},{"location":"2019-02-pisay_application/#research-professional-articles-published-40-points","text":"R. V. L. Canseco and V. P. Bongolan, \"Markov Chain Monte Carlo optimization of visible light-driven hydrogen production,\" TENCON 2012 IEEE Region 10 Conference, Cebu, 2012, pp. 1-5. doi: 10.1109/TENCON.2012.6412278 SCOPUS indexed - 4.0","title":"Research / Professional Articles Published (4.0 points)"},{"location":"2019-02-pisay_application/#lab-manual-workbook-published","text":"none yet (planning to for Web/ Mobile Information System Development)","title":"Lab Manual/ Workbook published"},{"location":"2019-02-pisay_application/#involvement-in-research","text":"Was the Primary Technical Consultant for the STR project of Ryan Misola and Kenji Paralejo (PSHS batch 2012) Was the Primary Technical Consultant for the STR project of Raphael Canseco (PSHS batch 2008)","title":"Involvement in Research"},{"location":"2019-02-pisay_application/#professional-awards-and-recognition-10-points","text":"Jose P. Segovia Professorial Chair Award (2016) - 1.0 Nokia Teaching Innovation Grant (2017)","title":"Professional Awards and Recognition (1.0 points)"},{"location":"2019-02-pisay_application/#coaching-co-curricular-activities","text":"none yet (no plans)","title":"Coaching Co-curricular Activities"},{"location":"2019-02-pisay_application/#involvement-in-outreach-activities-12-points","text":"Development of the Scholarship and Fellowship Data System - 1.0 UP OVCA Offices Information Systems Development - 0.2 All in all, I am asking for myself some 62.85 raw points. When compensated with a factor of (119/89), it becomes 84.04 points. Thank you for your kind consideration!","title":"Involvement in Outreach Activities (1.2 points)"},{"location":"2019-03-30-se_proj_planning/","text":"This Project Planning from SDLC Cost Considerations COTS for general problems is cheaper Custom dev for specific problems is cheaper In-house for small dev projects is cheaper Out-source for large dev projects is cheaper Clear is Cheap. Ambiguity is Costly Manage by Scope (in and out) Definitions of Done Milestones Prioritization Prioritize by Value Cost Time Scope","title":"This Project Planning from SDLC"},{"location":"2019-03-30-se_proj_planning/#this-project-planning-from-sdlc","text":"","title":"This Project Planning from SDLC"},{"location":"2019-03-30-se_proj_planning/#cost-considerations","text":"COTS for general problems is cheaper Custom dev for specific problems is cheaper In-house for small dev projects is cheaper Out-source for large dev projects is cheaper Clear is Cheap. Ambiguity is Costly","title":"Cost Considerations"},{"location":"2019-03-30-se_proj_planning/#manage-by","text":"Scope (in and out) Definitions of Done Milestones Prioritization","title":"Manage by"},{"location":"2019-03-30-se_proj_planning/#prioritize-by","text":"Value Cost Time Scope","title":"Prioritize by"},{"location":"2019-03-phalcon_php/","text":"Installing Phalcon PHP in Ubuntu 18.04 requirements database connectivity will require the php_pdo extension which can be found in the php7.2-common package MySQL/ MariaDB or Aurora databases will need php_mysqlnd extension , while PostgreSQL will need php_pgsql extension. Both extensions are in the php7.2-pdo* packages Hardware requirements An AWS VM with 512 RAM and 1vCPU will be enough for simple sites such as blogs. software prerequisites We assume that we want to use PHP 7+ (e.g. 7.2) Step 1 will be to install the following prerequisite programs: curl gettext gd2 (php-gd) libpcre3-dev json (php-json) mbstring (php-mbstring) pdo_* (php7.2-pdo*) fileinfo (php7.2-common) openssl Note that depending on what you want to do, pdo_* , openssl and mbstring may be optional. Installation proper Get a stable release script: curl - https://packagecloud.io/install/repositories/phalcon/stable/script.deb.sh | sudo bash Install Phalcon sudo apt-get update && sudo apt-get install php7.2-phalcon Install Phalcon Developer Tools for Linux sudo apt install -y git cd git clone git://github.com/phalcon/phalcon-devtools.git Enter the cloned directory and run cd phalcon-devtools/ . ./phalcon.sh Create a symlink to the phalcon script sudo ln -s ~/phalcon-devtools/phalcon.php /usr/bin/phalcon sudo chmod ugo+x /usr/bin/phalcon Check for installation success using phalcon commands $ phalcon commands Phalcon DevTools (3.0.0) Available commands: commands (alias of: list, enumerate) controller (alias of: create-controller) module (alias of: create-module) model (alias of: create-model) all-models (alias of: create-all-models) project (alias of: create-project) scaffold (alias of: create-scaffold) migration (alias of: create-migration) webtools (alias of: create-webtools) Generating a Project Skeleton $ cd $ mkdir projects $ cd projects $ phalcon create-project store Using the Built-in Webserver (for Development) $(which php) -S localhost:8000 -t public .htrouter.php $(which php) - will insert the absolute path to your PHP binary -S localhost:8000 - invokes server mode with the provided host:port -t public - defines the servers root directory, necessary for php to route requests to assets like JS, CSS, and images in your public directory .htrouter.php - the entry point that will be evaluated for each request Go to http://localhost:8000/ to check if everything is working.","title":"Installing Phalcon PHP in Ubuntu 18.04"},{"location":"2019-03-phalcon_php/#installing-phalcon-php-in-ubuntu-1804","text":"","title":"Installing Phalcon PHP in Ubuntu 18.04"},{"location":"2019-03-phalcon_php/#requirements","text":"database connectivity will require the php_pdo extension which can be found in the php7.2-common package MySQL/ MariaDB or Aurora databases will need php_mysqlnd extension , while PostgreSQL will need php_pgsql extension. Both extensions are in the php7.2-pdo* packages","title":"requirements"},{"location":"2019-03-phalcon_php/#hardware-requirements","text":"An AWS VM with 512 RAM and 1vCPU will be enough for simple sites such as blogs.","title":"Hardware requirements"},{"location":"2019-03-phalcon_php/#software-prerequisites","text":"We assume that we want to use PHP 7+ (e.g. 7.2) Step 1 will be to install the following prerequisite programs: curl gettext gd2 (php-gd) libpcre3-dev json (php-json) mbstring (php-mbstring) pdo_* (php7.2-pdo*) fileinfo (php7.2-common) openssl Note that depending on what you want to do, pdo_* , openssl and mbstring may be optional.","title":"software prerequisites"},{"location":"2019-03-phalcon_php/#installation-proper","text":"Get a stable release script: curl - https://packagecloud.io/install/repositories/phalcon/stable/script.deb.sh | sudo bash Install Phalcon sudo apt-get update && sudo apt-get install php7.2-phalcon Install Phalcon Developer Tools for Linux sudo apt install -y git cd git clone git://github.com/phalcon/phalcon-devtools.git Enter the cloned directory and run cd phalcon-devtools/ . ./phalcon.sh Create a symlink to the phalcon script sudo ln -s ~/phalcon-devtools/phalcon.php /usr/bin/phalcon sudo chmod ugo+x /usr/bin/phalcon Check for installation success using phalcon commands $ phalcon commands Phalcon DevTools (3.0.0) Available commands: commands (alias of: list, enumerate) controller (alias of: create-controller) module (alias of: create-module) model (alias of: create-model) all-models (alias of: create-all-models) project (alias of: create-project) scaffold (alias of: create-scaffold) migration (alias of: create-migration) webtools (alias of: create-webtools)","title":"Installation proper"},{"location":"2019-03-phalcon_php/#generating-a-project-skeleton","text":"$ cd $ mkdir projects $ cd projects $ phalcon create-project store","title":"Generating a Project Skeleton"},{"location":"2019-03-phalcon_php/#using-the-built-in-webserver-for-development","text":"$(which php) -S localhost:8000 -t public .htrouter.php $(which php) - will insert the absolute path to your PHP binary -S localhost:8000 - invokes server mode with the provided host:port -t public - defines the servers root directory, necessary for php to route requests to assets like JS, CSS, and images in your public directory .htrouter.php - the entry point that will be evaluated for each request Go to http://localhost:8000/ to check if everything is working.","title":"Using the Built-in Webserver (for Development)"},{"location":"2019-03-pisay_cs4_setup/","text":"How to setup Java FXML with Netbeans and Scene Builder in Ubuntu 18.04 A guide for my students in Computer Science Download Oracle JDK 1.8 this has javafx automatically included to it. it's free you'll need to sign up, but other alternatives are way harder to do JDK 1.8 is also know as JDK 8 We can also use higher versions of java, but we'll need more complicated build tools like maven or gradle to work with JavaFX. We want Java 8 so we can stick to the default ANT build tool. To install NetBeans, you have to download it first from the Oracle official website: https://www.oracle.com/java/technologies/javase-jdk8-downloads.html Scroll down until you find the right download for your machine Download and install or unzip Install NetBeans To install NetBeans, you have to download it first from the NetBeans official website: https://netbeans.apache.org/download/index.html Click on the green \u201cDownload\u201d button under the Apache NetBeans LTS line You can also learn more about NetBeans by clicking the blue \u201cFeatures\u201d button next to the \u201cDownload\u201d button. You can also download other previous versions as well but its recommended to use the latest version. This will take you to a page titled \u201cDownloading Apache NetBeans (incubating)\u201d. From this page, click on the \u201cBinaries\u201d link. You can click the \u201cSource\u201d link and download that if you want to compile it yourself but downloading the \u201cBinaries\u201d is faster and easier. Once clicked, this will redirect you to the apache page where a link will be generated for you. Click the link and it will start downloading. Install or unzip and run. You might be asked for the version of JDK to use. Make sure it's JDK 1.8 by pointing to the directory where you it's installed If you are greeted with this view once it opens, then NetBeans has been successfully installed and is ready for you to start writing programs and developing applications on it. Install the JavaFX Scene Builder Now that NetBeans has been successfully installed and is working properly, we can move to the next step; install JavaFX Scene Builder. First, we have to download Scene Builder from its official website: https://gluonhq.com/products/scene-builder/#download On this page, scroll down until you see the download options for your version of Java (Java 8). Look for the right Scene Builder version for your operating system and click the green \u201cDownload\u201d button. This will redirect you to a \u201cThanks\u201d page and start downloading. Once downloaded, open the installer. In the installer, accept the terms and conditions and click install. Once installed, click finish. To check whether the installation was successful or not you can open \u201cSceneBuilder\u201d and will be greeted with the following view if the installation was successful: Integrate JavaFX Scene Builder and NetBeans Once Scene Builder and NetBeans have been installed, it is time to move to the final step; integrate both the programs. Open NetBeans, click on \u201cFile\u201d and then \u201cNew project.\u201d in the dropdown menu. A new window will open. Click on \u201cJavaFX\u201d from the \u201cCategories\u201d tab and \u201cJava FXML Application\u201d from \u201cProjects\u201d tab. 4. Click \u201cNext\u201d. 5. Install any modules, if it prompts to download and activate any modules. In the next window give the project a name and click \u201cFinish\u201d. 6. Once opened, go to the \u201cProjects\u201d tab and click on your project. 7. Then click on \u201cSource Packages\u201d, 8. click on your project\u2019s package, 9. right-click on the .fxml file and click \u201cOpen\u201d. 10. This will open the file in Scene Builder for you to work on it. Next Steps And with this, you have successfully integrated Scene Builder and NetBeans to work together seamlessly. Once you are done with making the GUI, to add functionality and logic to it, edit the \u201cController.Java\u201d file directly below the .fxml file and give it functionality. Now you can go on and enjoy making GUI for your programs in an intuitive and fun way using JavaFX Scene Builder.","title":"2019 03 pisay cs4 setup"},{"location":"2019-03-pisay_cs4_setup/#how-to-setup-java-fxml-with-netbeans-and-scene-builder-in-ubuntu-1804","text":"A guide for my students in Computer Science","title":"How to setup Java FXML with Netbeans and Scene Builder in Ubuntu 18.04"},{"location":"2019-03-pisay_cs4_setup/#download-oracle-jdk-18","text":"this has javafx automatically included to it. it's free you'll need to sign up, but other alternatives are way harder to do JDK 1.8 is also know as JDK 8 We can also use higher versions of java, but we'll need more complicated build tools like maven or gradle to work with JavaFX. We want Java 8 so we can stick to the default ANT build tool. To install NetBeans, you have to download it first from the Oracle official website: https://www.oracle.com/java/technologies/javase-jdk8-downloads.html Scroll down until you find the right download for your machine Download and install or unzip","title":"Download Oracle JDK 1.8"},{"location":"2019-03-pisay_cs4_setup/#install-netbeans","text":"To install NetBeans, you have to download it first from the NetBeans official website: https://netbeans.apache.org/download/index.html Click on the green \u201cDownload\u201d button under the Apache NetBeans LTS line You can also learn more about NetBeans by clicking the blue \u201cFeatures\u201d button next to the \u201cDownload\u201d button. You can also download other previous versions as well but its recommended to use the latest version. This will take you to a page titled \u201cDownloading Apache NetBeans (incubating)\u201d. From this page, click on the \u201cBinaries\u201d link. You can click the \u201cSource\u201d link and download that if you want to compile it yourself but downloading the \u201cBinaries\u201d is faster and easier. Once clicked, this will redirect you to the apache page where a link will be generated for you. Click the link and it will start downloading. Install or unzip and run. You might be asked for the version of JDK to use. Make sure it's JDK 1.8 by pointing to the directory where you it's installed If you are greeted with this view once it opens, then NetBeans has been successfully installed and is ready for you to start writing programs and developing applications on it.","title":"Install NetBeans"},{"location":"2019-03-pisay_cs4_setup/#install-the-javafx-scene-builder","text":"Now that NetBeans has been successfully installed and is working properly, we can move to the next step; install JavaFX Scene Builder. First, we have to download Scene Builder from its official website: https://gluonhq.com/products/scene-builder/#download On this page, scroll down until you see the download options for your version of Java (Java 8). Look for the right Scene Builder version for your operating system and click the green \u201cDownload\u201d button. This will redirect you to a \u201cThanks\u201d page and start downloading. Once downloaded, open the installer. In the installer, accept the terms and conditions and click install. Once installed, click finish. To check whether the installation was successful or not you can open \u201cSceneBuilder\u201d and will be greeted with the following view if the installation was successful:","title":"Install the JavaFX Scene Builder"},{"location":"2019-03-pisay_cs4_setup/#integrate-javafx-scene-builder-and-netbeans","text":"Once Scene Builder and NetBeans have been installed, it is time to move to the final step; integrate both the programs. Open NetBeans, click on \u201cFile\u201d and then \u201cNew project.\u201d in the dropdown menu. A new window will open. Click on \u201cJavaFX\u201d from the \u201cCategories\u201d tab and \u201cJava FXML Application\u201d from \u201cProjects\u201d tab. 4. Click \u201cNext\u201d. 5. Install any modules, if it prompts to download and activate any modules. In the next window give the project a name and click \u201cFinish\u201d. 6. Once opened, go to the \u201cProjects\u201d tab and click on your project. 7. Then click on \u201cSource Packages\u201d, 8. click on your project\u2019s package, 9. right-click on the .fxml file and click \u201cOpen\u201d. 10. This will open the file in Scene Builder for you to work on it.","title":"Integrate JavaFX Scene Builder and NetBeans"},{"location":"2019-03-pisay_cs4_setup/#next-steps","text":"And with this, you have successfully integrated Scene Builder and NetBeans to work together seamlessly. Once you are done with making the GUI, to add functionality and logic to it, edit the \u201cController.Java\u201d file directly below the .fxml file and give it functionality. Now you can go on and enjoy making GUI for your programs in an intuitive and fun way using JavaFX Scene Builder.","title":"Next Steps"},{"location":"2019-04-pisay_promotion/","text":"Dear Venerable Appointment Committee, I wish to apply for a Special Science Teacher V post in Philippine Science High School - Main Campus in the Computer Science Unit. Here are some points of interest for consideration. I am putting self evaluations points on the work that I was able to find the certificates for. Thank you very much for considering. Sincerely, Roy Canseco Teaching Performance Relevant Education (19 points) Bachelor of Science in Electrical Engineering - I got the honor of graduating top of the B.S.E.E. class of 2008. Master of Science in Electrical Engineering maj. Power Systems - I got the honor of finishing program in 1 year, instead of 2. My adviser and I believes that I was the first to do so. This can easily be checked by looking at my Bachelor's diploma (year 2008) and comparing it to my Master of Science diploma (year 2009). Both degrees are from UP Diliman. I would like to request 19 points. Relevant Teaching Experience (5.0 points) I include my Service Record in UP Diliman, both for teaching in Electrical and Electronics Engineering and in Computer Science. If you add the years/months/days, it would show a few days more than 5 years worth teaching to present. Relevant Training (8.9 points) I ask that the following be credited: Professional Output / Activities Teacher Training Involvement Student Training Involvement (4 points) Leading a Professional Organization Committee Membership (4.0) Administrative Assignments Books Published none yet (still in the bucket list) Research / Professional Articles Published (4.0 points) Lab Manual/ Workbook published none yet (planning to for Web/ Mobile Information System Development) Involvement in Research Professional Awards and Recognition (1.0 points) Coaching Co-curricular Activities none yet (no plans) Involvement in Outreach Activities (1.2 points) Thank you for your kind consideration!","title":"Teacher Career Path Evaluation Sheet"},{"location":"2019-04-pisay_promotion/#teaching-performance","text":"","title":"Teaching Performance"},{"location":"2019-04-pisay_promotion/#relevant-education-19-points","text":"Bachelor of Science in Electrical Engineering - I got the honor of graduating top of the B.S.E.E. class of 2008. Master of Science in Electrical Engineering maj. Power Systems - I got the honor of finishing program in 1 year, instead of 2. My adviser and I believes that I was the first to do so. This can easily be checked by looking at my Bachelor's diploma (year 2008) and comparing it to my Master of Science diploma (year 2009). Both degrees are from UP Diliman. I would like to request 19 points.","title":"Relevant Education (19 points)"},{"location":"2019-04-pisay_promotion/#relevant-teaching-experience-50-points","text":"I include my Service Record in UP Diliman, both for teaching in Electrical and Electronics Engineering and in Computer Science. If you add the years/months/days, it would show a few days more than 5 years worth teaching to present.","title":"Relevant Teaching Experience (5.0 points)"},{"location":"2019-04-pisay_promotion/#relevant-training-89-points","text":"I ask that the following be credited:","title":"Relevant Training (8.9 points)"},{"location":"2019-04-pisay_promotion/#professional-output-activities","text":"","title":"Professional Output / Activities"},{"location":"2019-04-pisay_promotion/#teacher-training-involvement","text":"","title":"Teacher Training Involvement"},{"location":"2019-04-pisay_promotion/#student-training-involvement-4-points","text":"","title":"Student Training Involvement (4 points)"},{"location":"2019-04-pisay_promotion/#leading-a-professional-organization","text":"","title":"Leading a Professional Organization"},{"location":"2019-04-pisay_promotion/#committee-membership-40","text":"","title":"Committee Membership (4.0)"},{"location":"2019-04-pisay_promotion/#administrative-assignments","text":"","title":"Administrative Assignments"},{"location":"2019-04-pisay_promotion/#books-published","text":"none yet (still in the bucket list)","title":"Books Published"},{"location":"2019-04-pisay_promotion/#research-professional-articles-published-40-points","text":"","title":"Research / Professional Articles Published (4.0 points)"},{"location":"2019-04-pisay_promotion/#lab-manual-workbook-published","text":"none yet (planning to for Web/ Mobile Information System Development)","title":"Lab Manual/ Workbook published"},{"location":"2019-04-pisay_promotion/#involvement-in-research","text":"","title":"Involvement in Research"},{"location":"2019-04-pisay_promotion/#professional-awards-and-recognition-10-points","text":"","title":"Professional Awards and Recognition (1.0 points)"},{"location":"2019-04-pisay_promotion/#coaching-co-curricular-activities","text":"none yet (no plans)","title":"Coaching Co-curricular Activities"},{"location":"2019-04-pisay_promotion/#involvement-in-outreach-activities-12-points","text":"Thank you for your kind consideration!","title":"Involvement in Outreach Activities (1.2 points)"},{"location":"2019-04-xp_virtualbox/","text":"Setting up Networking for WinXP on virtualbox Windows XP may be necessary in getting some old system to work for the purposes of Migration. One of the best ways is to use virtualbox. The following steps will allow a virtualized winxp installation to have internet. Setup a shared folder between host os and guest xp Download and install updated drivers Download the following using the host os Intel Pro/1000 MT Desktop network drivers winxp service pack 3 firefox 52.3.0esr.exe Copy the installers into the winxp guest using the shared folder Install the 3 installers Reboot winxp Check if everything worked using the installed Firefox","title":"Setting up Networking for WinXP on virtualbox"},{"location":"2019-04-xp_virtualbox/#setting-up-networking-for-winxp-on-virtualbox","text":"Windows XP may be necessary in getting some old system to work for the purposes of Migration. One of the best ways is to use virtualbox. The following steps will allow a virtualized winxp installation to have internet.","title":"Setting up Networking for WinXP on virtualbox"},{"location":"2019-04-xp_virtualbox/#setup-a-shared-folder-between-host-os-and-guest-xp","text":"","title":"Setup a shared folder between host os and guest xp"},{"location":"2019-04-xp_virtualbox/#download-and-install-updated-drivers","text":"Download the following using the host os Intel Pro/1000 MT Desktop network drivers winxp service pack 3 firefox 52.3.0esr.exe Copy the installers into the winxp guest using the shared folder Install the 3 installers Reboot winxp Check if everything worked using the installed Firefox","title":"Download and install updated drivers"},{"location":"2020-03-pisay_cs4_setup/","text":"How to setup Java FXML with Netbeans and Scene Builder in Windows 10 A guide for my students in Computer Science Uninstall any old SceneBuilder, NetBeans and Java there might be conflicts with old installations, so do this step It's good to uninstall in reverse order remove SceneBuilder first then remove netbeans then remove Java (all versions and updates) for SceneBuilder, go to \"Start-> Apps and Features\" uninstall SceneBuilder for Apache Netbeans, you can just delete the Installation Folder (usually in Downloads ) for Java, go to \"Start-> Apps and Features\" uninstall Java Download Oracle JDK 1.8 this has javafx automatically included to it. it's free you'll need to sign up, but other alternatives are way harder to do JDK 1.8 is also know as JDK 8 We can also use higher versions of java, but we'll need more complicated build tools like maven or gradle to work with JavaFX. We want Java 8 so we can stick to the default ANT build tool. To install NetBeans, you have to download it first from the Oracle official website: https://www.oracle.com/java/technologies/javase-jdk8-downloads.html Scroll down until you find the right download for your machine (probably the 64-bit version for windows) Download and install Install NetBeans To install NetBeans, you have to download it first from the NetBeans official website: https://netbeans.apache.org/download/index.html Click on the green \u201cDownload\u201d button under the Apache NetBeans LTS line You can also learn more about NetBeans by clicking the blue \u201cFeatures\u201d button next to the \u201cDownload\u201d button. You can also download other previous versions as well but I recommend the LTS version. This will take you to a page titled \u201cDownloading Apache NetBeans (incubating)\u201d. From this page, click on the \u201cBinaries\u201d link. You can click the \u201cSource\u201d link and download that if you want to compile it yourself but downloading the \u201cBinaries\u201d is faster and easier. Once clicked, this will redirect you to the apache page where a link will be generated for you. Click the link and it will start downloading. Unzip After extraction, go in the extracted directory and look for the \u201cbin\u201d folder. Go in the \u201cbin\u201d folder and you will see two \u201cApplication\u201d files; \u201cnetbeans.exe\u201d and \u201cnetbeans64.exe\u201d. You probably should run the 64-bit version If you are greeted with this view once it opens, then NetBeans has been successfully installed. You are ready to start writing java programs. Install the JavaFX Scene Builder Now that NetBeans has been successfully installed and is working properly, we can move to the next step; install JavaFX Scene Builder. First, we have to download Scene Builder from its official website: https://gluonhq.com/products/scene-builder/#download On this page, scroll down until you see the download options for your version of Java (Java 8). Look for the right Scene Builder version for your operating system and click the green \u201cDownload\u201d button. This will redirect you to a \u201cThanks\u201d page and start downloading. Once downloaded, open the installer. In the installer, accept the terms and conditions and click install. Once installed, click finish. To check whether the installation was successful or not you can open \u201cSceneBuilder\u201d and will be greeted with the following view if the installation was successful: Integrate JavaFX Scene Builder and NetBeans Once Scene Builder and NetBeans have been installed, it is time to move to the final step; integrate both the programs. Open NetBeans, click on \u201cFile\u201d and then \u201cNew project.\u201d in the dropdown menu. A new window will open. Click on \u201cJavaFX\u201d from the \u201cCategories\u201d tab and \u201cJava FXML Application\u201d from \u201cProjects\u201d tab. Click \u201cNext\u201d. Install any modules, if it prompts to download and activate any modules. In the next window give the project a name and click \u201cFinish\u201d. 6. Once opened, go to the \u201cProjects\u201d tab and click on your project. 7. Then click on \u201cSource Packages\u201d, 8. click on your project\u2019s package, 9. double-click on the .fxml file 10. This will open the file in Scene Builder for you to work on it. 11. Run your new fxml project and see the default \"Hello World\" program. Next Steps You have successfully integrated Scene Builder and NetBeans to work together. Once you are done with making the GUI, add functionality and logic to it by editing the \u201cController.Java\u201d file, which is directly below the .fxml file. Enjoy making GUI for your programs in an intuitive and fun way using JavaFX Scene Builder.","title":"2020 03 pisay cs4 setup"},{"location":"2020-03-pisay_cs4_setup/#how-to-setup-java-fxml-with-netbeans-and-scene-builder-in-windows-10","text":"A guide for my students in Computer Science","title":"How to setup Java FXML with Netbeans and Scene Builder in Windows 10"},{"location":"2020-03-pisay_cs4_setup/#uninstall-any-old-scenebuilder-netbeans-and-java","text":"there might be conflicts with old installations, so do this step It's good to uninstall in reverse order remove SceneBuilder first then remove netbeans then remove Java (all versions and updates) for SceneBuilder, go to \"Start-> Apps and Features\" uninstall SceneBuilder for Apache Netbeans, you can just delete the Installation Folder (usually in Downloads ) for Java, go to \"Start-> Apps and Features\" uninstall Java","title":"Uninstall any old SceneBuilder, NetBeans and Java"},{"location":"2020-03-pisay_cs4_setup/#download-oracle-jdk-18","text":"this has javafx automatically included to it. it's free you'll need to sign up, but other alternatives are way harder to do JDK 1.8 is also know as JDK 8 We can also use higher versions of java, but we'll need more complicated build tools like maven or gradle to work with JavaFX. We want Java 8 so we can stick to the default ANT build tool. To install NetBeans, you have to download it first from the Oracle official website: https://www.oracle.com/java/technologies/javase-jdk8-downloads.html Scroll down until you find the right download for your machine (probably the 64-bit version for windows) Download and install","title":"Download Oracle JDK 1.8"},{"location":"2020-03-pisay_cs4_setup/#install-netbeans","text":"To install NetBeans, you have to download it first from the NetBeans official website: https://netbeans.apache.org/download/index.html Click on the green \u201cDownload\u201d button under the Apache NetBeans LTS line You can also learn more about NetBeans by clicking the blue \u201cFeatures\u201d button next to the \u201cDownload\u201d button. You can also download other previous versions as well but I recommend the LTS version. This will take you to a page titled \u201cDownloading Apache NetBeans (incubating)\u201d. From this page, click on the \u201cBinaries\u201d link. You can click the \u201cSource\u201d link and download that if you want to compile it yourself but downloading the \u201cBinaries\u201d is faster and easier. Once clicked, this will redirect you to the apache page where a link will be generated for you. Click the link and it will start downloading. Unzip After extraction, go in the extracted directory and look for the \u201cbin\u201d folder. Go in the \u201cbin\u201d folder and you will see two \u201cApplication\u201d files; \u201cnetbeans.exe\u201d and \u201cnetbeans64.exe\u201d. You probably should run the 64-bit version If you are greeted with this view once it opens, then NetBeans has been successfully installed. You are ready to start writing java programs.","title":"Install NetBeans"},{"location":"2020-03-pisay_cs4_setup/#install-the-javafx-scene-builder","text":"Now that NetBeans has been successfully installed and is working properly, we can move to the next step; install JavaFX Scene Builder. First, we have to download Scene Builder from its official website: https://gluonhq.com/products/scene-builder/#download On this page, scroll down until you see the download options for your version of Java (Java 8). Look for the right Scene Builder version for your operating system and click the green \u201cDownload\u201d button. This will redirect you to a \u201cThanks\u201d page and start downloading. Once downloaded, open the installer. In the installer, accept the terms and conditions and click install. Once installed, click finish. To check whether the installation was successful or not you can open \u201cSceneBuilder\u201d and will be greeted with the following view if the installation was successful:","title":"Install the JavaFX Scene Builder"},{"location":"2020-03-pisay_cs4_setup/#integrate-javafx-scene-builder-and-netbeans","text":"Once Scene Builder and NetBeans have been installed, it is time to move to the final step; integrate both the programs. Open NetBeans, click on \u201cFile\u201d and then \u201cNew project.\u201d in the dropdown menu. A new window will open. Click on \u201cJavaFX\u201d from the \u201cCategories\u201d tab and \u201cJava FXML Application\u201d from \u201cProjects\u201d tab. Click \u201cNext\u201d. Install any modules, if it prompts to download and activate any modules. In the next window give the project a name and click \u201cFinish\u201d. 6. Once opened, go to the \u201cProjects\u201d tab and click on your project. 7. Then click on \u201cSource Packages\u201d, 8. click on your project\u2019s package, 9. double-click on the .fxml file 10. This will open the file in Scene Builder for you to work on it. 11. Run your new fxml project and see the default \"Hello World\" program.","title":"Integrate JavaFX Scene Builder and NetBeans"},{"location":"2020-03-pisay_cs4_setup/#next-steps","text":"You have successfully integrated Scene Builder and NetBeans to work together. Once you are done with making the GUI, add functionality and logic to it by editing the \u201cController.Java\u201d file, which is directly below the .fxml file. Enjoy making GUI for your programs in an intuitive and fun way using JavaFX Scene Builder.","title":"Next Steps"},{"location":"2020-2021%20committee%20memberships/","text":"2020-2021 committee memberships Intellectual Property Committee SCA adviser/ ORI Committee Graduation Steering Committee","title":"2020 2021 committee memberships"},{"location":"2020-2021%20committee%20memberships/#2020-2021-committee-memberships","text":"Intellectual Property Committee SCA adviser/ ORI Committee Graduation Steering Committee","title":"2020-2021 committee memberships"},{"location":"2021-06-khub-linode_migration/","text":"KHub linode migration Fix Linode root PSmc!20 sir_roy roypass $ ssh user@server -o ServerAliveInterval=15 $ HOME/.ssh/config $ chmod 600 ~/.ssh/config config: Host remotehost HostName remotehost.com ServerAliveInterval 240 or: Host * ServerAliveInterval 240 alternatives for xip.io : * nip.io * sslip.io * localtls steps once working: * download miscellaneous courses * put in up.alum gdrive Duplicate Linode change the server name in moodle config and in sites-available wait a bit for changes to effect mv moodle code, data, and DB $ cp -rp rm moodle code, data, and DB in server2 setup ssh from server1 to server2 rsync moodle code, data, and DB dump to server2 check that it works. --progress :: estimate progress --delete :: delete extraneous Recommended method Turn on maintenance mode: Site Administration > Server > Maintenance Mode Copy moodledata from the old server to the new server: NB: It is not necessary to copy the contents of these > directories: /moodledata/cache /moodledata/localcache /moodledata/sessions /moodledata/temp /moodledata/trashdir Omitting these files will reduce transfer time substantially. Check the file permissions of the copied files. The web server needs read and write access. Copy the Moodle code from the old server to the new server check permissions the server needs read access Note: use rsync Update config.php with the URL of the new server Test the copied site Update links containing wwwroot in the database Note: use sed Take the site out of maintenance mode: When you are happy all has gone well, set up redirects/make DNS changes if required rm moodle code, data, and DB in server1 setup ssh from server2 to server1 rsync moodle code, data, and DB dump to server1 check that it works. Prepare for KHub sync install moodle 3.9 with postgresql 11.1 and catalyst objectfs check that things are still working upgrade to 2cpu 4GB ram linode check that things are still working increase swap disk check that things are still working set notification thresholds Build fresh server Note: use Build a fresh server If you want to set up a postgresql database like KHub, you can use: postgresql 11 Set up a DNS record for moodle application For users to access your Moodle instance you need to create a subdomain for it, thus, you need to create a DNS A record to achieve this. For this guide, our test domain is testprojects.me, so we need to create a subdomain, for example, learning.testprojects.me. So, log into your domain registrar\u2019s web console and access your domain\u2019s advanced settings, click Add New Record of type A, a host should be learning (or any word of your choice), and value should be the public IP address of your Ubuntu server. install php Note: use PHP 7.4 get moodle code cd /opt sudo git clone git://git.moodle.org/moodle.git cd moodle sudo git branch -a sudo git branch --track MOODLE_39_STABLE origin/MOODLE_39_STABLE sudo git checkout MOODLE_39_STABLE sudo cp -R /opt/moodle /var/www/ sudo mkdir /var/www/moodledata sudo chown -R www-data /var/www/moodledata sudo chmod -R 777 /var/www/moodledata sudo chmod -R 0755 /var/www/moodle Explanation: Since we setup a local repository in the previous step, you will copy it to your webroot after any updates and making changes. Having your local repository outside of the webroot, like we have in /opt, you will be able to prepare and stage your upgrades in a more efficient manner. For example, you want to make some changes or add some plug-ins, you would download the plugin and copy it to your local moodle repository. After you have added the plug-in and any other changes you might have made you will need to edit the file located in /opt/moodle/.git/info/exclude. Within that file you want to tell git which files/folders to exclude when it pulls down the updates when you run your next \"sudo git pull\". An example entry would be the certificate mod located in /opt/moodle/mod/certificate so within the exclude file you want to add \"/mod/certificate\" below the last comments. You would add additional entries, 1 per line, for each plug-in or file you might have changed. If I were to change the favicon.ico file you would just add \"favicon.ico\" to the exclude file. Now when you run \"sudo git pull\" to update moodle to the latest version it will ignore those files and directories and just update the core moodle code. Before copying to your webroot to upgrade you want to make sure and download and copy over the latest versions of the plug-ins you might have added. setup moodle to use postgresql $ cd /var/www/moodle/ $ sudo cp config-dist.php config.php $ sudo vim config.php $CFG->dbtype = 'pgsql'; // 'pgsql', 'mariadb', 'mysqli', 'sqlsrv' or 'oci' $CFG->dblibrary = 'native'; // 'native' only at the moment $CFG->dbhost = 'localhost'; // eg 'localhost' or 'db.isp.com' or IP $CFG->dbname = 'moodle_db'; // database name, eg moodle $CFG->dbuser = 'moodle_user'; // your database username $CFG->dbpass = 'moodle_password'; // your database password $CFG->prefix = 'mdl_'; // prefix to use for all table names // 'dbcollation' => 'utf8mb4_unicode_ci', $CFG->wwwroot = 'http://khub.example.com'; $CFG->dataroot = '/var/www/moodledata'; Set up Nginx Note: use nginx Configuring Nginx to work with PHP-FPM Note: use configure Nginx with PHP-FPM Configuring NGINX to Serve Moodle Application For NGINX to server your Moodle site, you need to create a new server block configuration under the NGINX configuration, in the directory /etc/nginx/conf.d/ $ sudo vim /etc/nginx/conf.d/moodle.conf Copy and paste the following configuration in it, replace backhub.pshsmc.xyz with your subdomain. server{ listen 80; server_name backhub.pshsmc.xyz; root /var/www/html/moodle; index index.php; location / { try_files $uri $uri/ /index.php?$query_string; } location ~ ^(.+\\.php)(.*)$ { fastcgi_split_path_info ^(.+\\.php)(.*)$; fastcgi_index index.php; fastcgi_pass unix:/run/php/php7.4-fpm.sock; include /etc/nginx/mime.types; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } client_max_body_size 200M; } Next, verify that the NGINX configuration is OK after making the above changes, then gracefully restart the NGINX service. $ sudo nginx -t $ sudo systemctl reload nginx Completing Moodle Installation via Web Installer System paths after install After installing Moodle you should set the system paths, this will provide better performance VS not setting them. Each entry in Moodle will have it's explanation. Navigate, on the moodle webpage, to Site Administration > Server > System Paths Input the following; Path to du: /usr/bin/du Path to apsell: /usr/bin/aspell Path to dot: /usr/bin/dot Save Changes Optional if you do not already have an AntiVirus Solution We also installed ClamAV previously Navigate to Site Administration > Plugins > Antivirus plugins > Manage antivirus plugins Enable ClamAV antivirus Click on Settings Set the proper settings Save changes ClamAV Path : /usr/bin/clamscan Save Changes Configure php.ini Check these settings in your php.ini or .htaccess file (if you're using Apache). For settings which use ON/OFF as their values, you can substitute 1 for ON and 0 for OFF if you prefer. If you change php.ini, don't forget to restart the server. Settings memory_limit needs to be at least 96M (although some functions may not work if this low). Moodle will refuse to install if lower. 128M is recommended. Large systems may need an even higher setting. session.save_handler needs to be set to FILES. file_uploads needs to be ON. session.auto_start needs to be OFF. The temp folder must be defined and writeable by your webserver user Check the error display/logging section. Make sure the settings are appropriate for your server use. post_max_size and upload_max_filesize restrict the maximum file size that can be uploaded. Check the [mail function] and database section (for your chosen database) to make sure they match your server configuration. check max_execution time -> 600 Find the correct php.ini php -i | grep php.ini Site admins can display phpinfo in moodle Settings > Site administration > Server > PHP info Extensions and libraries The iconv extension is required. The mbstring extension is required. The curl extension is required (required for networking and web services). The openssl extension is recommended (required for networking and web services). The tokenizer extension is recommended. The xmlrpc extension is recommended (required for networking and web services). The soap extension is recommended (required for web services). The ctype extension is required. The zip extension is required. The gd extension is recommended (required for manipulating images). The simplexml extension is required. The spl extension is required. The pcre extension is required. The dom extension is required. The xml extension is required. The intl extension is recommended. The json extension is required. The appropriate extension for your chosen database is also required. Other PHP extensions may be required to support optional Moodle functionality, especially external authentication and/or enrolment (e.g. LDAP extension for LDAP authentication and the sockets extension for Chat server). sudo systemctl restart php7.4-fpm.service sudo systemctl restart nginx Restoring a postgresql db dump $ cd $ pg_dump moodle_db > moodle-postgre-db.sql $ dropdb moodle_db $ createdb --owner=moodle_user --encoding=UTF8 moodle_db $ cat moodle_dump.sql | grep -i \"oldserver.com\" Update links containing wwwroot in the database #sed -e 's/oldserver.com/newserver.com/g' oldmysqldump.sql > newmysqldump.sql -e :: script #sed -i.bak -e 's/oldserver.com/newserver.com/g' mysqldump.sql -i.bak :: save the file changes in-place, but backup file first Check that it worked: $ cat moodle_db.sql | grep -i \"oldserver.com\" | head $ cat moodle_db.sql | grep -i \"newserver.com\" | head $ psql -U sir_roy -d moodle_db --set on_error_stop=on -f /opt/backup/backup/moodle_db.sql Create volume for db files To get started with a new volume, you'll want to create a filesystem on it: mkfs.ext4 \"/dev/disk/by-id/scsi-0Linode_Volume_ext-drive\" Once the volume has a filesystem, you can create a mountpoint for it: mkdir \"/mnt/ext-drive\" Then you can mount the new volume: mount \"/dev/disk/by-id/scsi-0Linode_Volume_ext-drive\" \"/mnt/ext-drive\" If you want the volume to automatically mount every time your Linode boots, you'll want to add a line like the following to your /etc/fstab file: /dev/disk/by-id/scsi-0Linode_Volume_ext-drive /mnt/ext-drive ext4 defaults,noatime,nofail 0 2 Setting Up HTTPS on Moodle Application Using Let\u2019s Encrypt Optimize server for moodle set up site backup install LBS for baseline monitoring on server install firefox YSlow tool for client consider stress testing: Load Test Your Web Server with Siege consider install moodle plugin: Edwiser Site Monitor If still slow consider transfer to Cloudways for advance cache solutions After returning to KHub consider updating and upgrading ubuntu server consider doing postgresql 11 streaming replication Plan D :) goodls moosh setup moosh: Note: use moosh - Moodle Shell Appendix MariaDB backup Note: use MariaDB backup","title":"2021 06 khub linode migration"},{"location":"2021-06-khub-linode_migration/#khub-linode-migration","text":"","title":"KHub linode migration"},{"location":"2021-06-khub-linode_migration/#fix-linode","text":"root PSmc!20 sir_roy roypass $ ssh user@server -o ServerAliveInterval=15 $ HOME/.ssh/config $ chmod 600 ~/.ssh/config config: Host remotehost HostName remotehost.com ServerAliveInterval 240 or: Host * ServerAliveInterval 240 alternatives for xip.io : * nip.io * sslip.io * localtls steps once working: * download miscellaneous courses * put in up.alum gdrive","title":"Fix Linode"},{"location":"2021-06-khub-linode_migration/#duplicate-linode","text":"change the server name in moodle config and in sites-available wait a bit for changes to effect","title":"Duplicate Linode"},{"location":"2021-06-khub-linode_migration/#mv-moodle-code-data-and-db","text":"$ cp -rp","title":"mv moodle code, data, and DB"},{"location":"2021-06-khub-linode_migration/#rm-moodle-code-data-and-db-in-server2","text":"setup ssh from server1 to server2 rsync moodle code, data, and DB dump to server2 check that it works. --progress :: estimate progress --delete :: delete extraneous","title":"rm moodle code, data, and DB in server2"},{"location":"2021-06-khub-linode_migration/#recommended-method","text":"Turn on maintenance mode: Site Administration > Server > Maintenance Mode Copy moodledata from the old server to the new server: NB: It is not necessary to copy the contents of these > directories: /moodledata/cache /moodledata/localcache /moodledata/sessions /moodledata/temp /moodledata/trashdir Omitting these files will reduce transfer time substantially. Check the file permissions of the copied files. The web server needs read and write access. Copy the Moodle code from the old server to the new server check permissions the server needs read access Note: use rsync Update config.php with the URL of the new server Test the copied site Update links containing wwwroot in the database Note: use sed Take the site out of maintenance mode: When you are happy all has gone well, set up redirects/make DNS changes if required","title":"Recommended method"},{"location":"2021-06-khub-linode_migration/#rm-moodle-code-data-and-db-in-server1","text":"setup ssh from server2 to server1 rsync moodle code, data, and DB dump to server1 check that it works.","title":"rm moodle code, data, and DB in server1"},{"location":"2021-06-khub-linode_migration/#prepare-for-khub-sync","text":"install moodle 3.9 with postgresql 11.1 and catalyst objectfs check that things are still working upgrade to 2cpu 4GB ram linode check that things are still working increase swap disk check that things are still working set notification thresholds","title":"Prepare for KHub sync"},{"location":"2021-06-khub-linode_migration/#build-fresh-server","text":"Note: use Build a fresh server If you want to set up a postgresql database like KHub, you can use: postgresql 11","title":"Build fresh server"},{"location":"2021-06-khub-linode_migration/#set-up-a-dns-record-for-moodle-application","text":"For users to access your Moodle instance you need to create a subdomain for it, thus, you need to create a DNS A record to achieve this. For this guide, our test domain is testprojects.me, so we need to create a subdomain, for example, learning.testprojects.me. So, log into your domain registrar\u2019s web console and access your domain\u2019s advanced settings, click Add New Record of type A, a host should be learning (or any word of your choice), and value should be the public IP address of your Ubuntu server.","title":"Set up a DNS record for moodle application"},{"location":"2021-06-khub-linode_migration/#install-php","text":"Note: use PHP 7.4","title":"install php"},{"location":"2021-06-khub-linode_migration/#get-moodle-code","text":"cd /opt sudo git clone git://git.moodle.org/moodle.git cd moodle sudo git branch -a sudo git branch --track MOODLE_39_STABLE origin/MOODLE_39_STABLE sudo git checkout MOODLE_39_STABLE sudo cp -R /opt/moodle /var/www/ sudo mkdir /var/www/moodledata sudo chown -R www-data /var/www/moodledata sudo chmod -R 777 /var/www/moodledata sudo chmod -R 0755 /var/www/moodle Explanation: Since we setup a local repository in the previous step, you will copy it to your webroot after any updates and making changes. Having your local repository outside of the webroot, like we have in /opt, you will be able to prepare and stage your upgrades in a more efficient manner. For example, you want to make some changes or add some plug-ins, you would download the plugin and copy it to your local moodle repository. After you have added the plug-in and any other changes you might have made you will need to edit the file located in /opt/moodle/.git/info/exclude. Within that file you want to tell git which files/folders to exclude when it pulls down the updates when you run your next \"sudo git pull\". An example entry would be the certificate mod located in /opt/moodle/mod/certificate so within the exclude file you want to add \"/mod/certificate\" below the last comments. You would add additional entries, 1 per line, for each plug-in or file you might have changed. If I were to change the favicon.ico file you would just add \"favicon.ico\" to the exclude file. Now when you run \"sudo git pull\" to update moodle to the latest version it will ignore those files and directories and just update the core moodle code. Before copying to your webroot to upgrade you want to make sure and download and copy over the latest versions of the plug-ins you might have added.","title":"get moodle code"},{"location":"2021-06-khub-linode_migration/#setup-moodle-to-use-postgresql","text":"$ cd /var/www/moodle/ $ sudo cp config-dist.php config.php $ sudo vim config.php $CFG->dbtype = 'pgsql'; // 'pgsql', 'mariadb', 'mysqli', 'sqlsrv' or 'oci' $CFG->dblibrary = 'native'; // 'native' only at the moment $CFG->dbhost = 'localhost'; // eg 'localhost' or 'db.isp.com' or IP $CFG->dbname = 'moodle_db'; // database name, eg moodle $CFG->dbuser = 'moodle_user'; // your database username $CFG->dbpass = 'moodle_password'; // your database password $CFG->prefix = 'mdl_'; // prefix to use for all table names // 'dbcollation' => 'utf8mb4_unicode_ci', $CFG->wwwroot = 'http://khub.example.com'; $CFG->dataroot = '/var/www/moodledata';","title":"setup moodle to use postgresql"},{"location":"2021-06-khub-linode_migration/#set-up-nginx","text":"Note: use nginx","title":"Set up Nginx"},{"location":"2021-06-khub-linode_migration/#configuring-nginx-to-work-with-php-fpm","text":"Note: use configure Nginx with PHP-FPM","title":"Configuring Nginx to work with PHP-FPM"},{"location":"2021-06-khub-linode_migration/#configuring-nginx-to-serve-moodle-application","text":"For NGINX to server your Moodle site, you need to create a new server block configuration under the NGINX configuration, in the directory /etc/nginx/conf.d/ $ sudo vim /etc/nginx/conf.d/moodle.conf Copy and paste the following configuration in it, replace backhub.pshsmc.xyz with your subdomain. server{ listen 80; server_name backhub.pshsmc.xyz; root /var/www/html/moodle; index index.php; location / { try_files $uri $uri/ /index.php?$query_string; } location ~ ^(.+\\.php)(.*)$ { fastcgi_split_path_info ^(.+\\.php)(.*)$; fastcgi_index index.php; fastcgi_pass unix:/run/php/php7.4-fpm.sock; include /etc/nginx/mime.types; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } client_max_body_size 200M; } Next, verify that the NGINX configuration is OK after making the above changes, then gracefully restart the NGINX service. $ sudo nginx -t $ sudo systemctl reload nginx","title":"Configuring NGINX to Serve Moodle Application"},{"location":"2021-06-khub-linode_migration/#completing-moodle-installation-via-web-installer","text":"","title":"Completing Moodle Installation via Web Installer"},{"location":"2021-06-khub-linode_migration/#system-paths-after-install","text":"After installing Moodle you should set the system paths, this will provide better performance VS not setting them. Each entry in Moodle will have it's explanation. Navigate, on the moodle webpage, to Site Administration > Server > System Paths Input the following; Path to du: /usr/bin/du Path to apsell: /usr/bin/aspell Path to dot: /usr/bin/dot Save Changes Optional if you do not already have an AntiVirus Solution We also installed ClamAV previously Navigate to Site Administration > Plugins > Antivirus plugins > Manage antivirus plugins Enable ClamAV antivirus Click on Settings Set the proper settings Save changes ClamAV Path : /usr/bin/clamscan Save Changes","title":"System paths after install"},{"location":"2021-06-khub-linode_migration/#configure-phpini","text":"Check these settings in your php.ini or .htaccess file (if you're using Apache). For settings which use ON/OFF as their values, you can substitute 1 for ON and 0 for OFF if you prefer. If you change php.ini, don't forget to restart the server.","title":"Configure php.ini"},{"location":"2021-06-khub-linode_migration/#settings","text":"memory_limit needs to be at least 96M (although some functions may not work if this low). Moodle will refuse to install if lower. 128M is recommended. Large systems may need an even higher setting. session.save_handler needs to be set to FILES. file_uploads needs to be ON. session.auto_start needs to be OFF. The temp folder must be defined and writeable by your webserver user Check the error display/logging section. Make sure the settings are appropriate for your server use. post_max_size and upload_max_filesize restrict the maximum file size that can be uploaded. Check the [mail function] and database section (for your chosen database) to make sure they match your server configuration. check max_execution time -> 600 Find the correct php.ini php -i | grep php.ini Site admins can display phpinfo in moodle Settings > Site administration > Server > PHP info","title":"Settings"},{"location":"2021-06-khub-linode_migration/#extensions-and-libraries","text":"The iconv extension is required. The mbstring extension is required. The curl extension is required (required for networking and web services). The openssl extension is recommended (required for networking and web services). The tokenizer extension is recommended. The xmlrpc extension is recommended (required for networking and web services). The soap extension is recommended (required for web services). The ctype extension is required. The zip extension is required. The gd extension is recommended (required for manipulating images). The simplexml extension is required. The spl extension is required. The pcre extension is required. The dom extension is required. The xml extension is required. The intl extension is recommended. The json extension is required. The appropriate extension for your chosen database is also required. Other PHP extensions may be required to support optional Moodle functionality, especially external authentication and/or enrolment (e.g. LDAP extension for LDAP authentication and the sockets extension for Chat server). sudo systemctl restart php7.4-fpm.service sudo systemctl restart nginx","title":"Extensions and libraries"},{"location":"2021-06-khub-linode_migration/#restoring-a-postgresql-db-dump","text":"$ cd $ pg_dump moodle_db > moodle-postgre-db.sql $ dropdb moodle_db $ createdb --owner=moodle_user --encoding=UTF8 moodle_db $ cat moodle_dump.sql | grep -i \"oldserver.com\" Update links containing wwwroot in the database #sed -e 's/oldserver.com/newserver.com/g' oldmysqldump.sql > newmysqldump.sql -e :: script #sed -i.bak -e 's/oldserver.com/newserver.com/g' mysqldump.sql -i.bak :: save the file changes in-place, but backup file first Check that it worked: $ cat moodle_db.sql | grep -i \"oldserver.com\" | head $ cat moodle_db.sql | grep -i \"newserver.com\" | head $ psql -U sir_roy -d moodle_db --set on_error_stop=on -f /opt/backup/backup/moodle_db.sql","title":"Restoring a postgresql db dump"},{"location":"2021-06-khub-linode_migration/#create-volume-for-db-files","text":"To get started with a new volume, you'll want to create a filesystem on it: mkfs.ext4 \"/dev/disk/by-id/scsi-0Linode_Volume_ext-drive\" Once the volume has a filesystem, you can create a mountpoint for it: mkdir \"/mnt/ext-drive\" Then you can mount the new volume: mount \"/dev/disk/by-id/scsi-0Linode_Volume_ext-drive\" \"/mnt/ext-drive\" If you want the volume to automatically mount every time your Linode boots, you'll want to add a line like the following to your /etc/fstab file: /dev/disk/by-id/scsi-0Linode_Volume_ext-drive /mnt/ext-drive ext4 defaults,noatime,nofail 0 2","title":"Create volume for db files"},{"location":"2021-06-khub-linode_migration/#setting-up-https-on-moodle-application-using-lets-encrypt","text":"","title":"Setting Up HTTPS on Moodle Application Using Let\u2019s Encrypt"},{"location":"2021-06-khub-linode_migration/#optimize-server-for-moodle","text":"set up site backup install LBS for baseline monitoring on server install firefox YSlow tool for client consider stress testing: Load Test Your Web Server with Siege consider install moodle plugin: Edwiser Site Monitor","title":"Optimize server for moodle"},{"location":"2021-06-khub-linode_migration/#if-still-slow","text":"consider transfer to Cloudways for advance cache solutions","title":"If still slow"},{"location":"2021-06-khub-linode_migration/#after-returning-to-khub","text":"consider updating and upgrading ubuntu server consider doing postgresql 11 streaming replication","title":"After returning to KHub"},{"location":"2021-06-khub-linode_migration/#plan-d","text":"","title":"Plan D  :)"},{"location":"2021-06-khub-linode_migration/#goodls","text":"","title":"goodls"},{"location":"2021-06-khub-linode_migration/#moosh","text":"setup moosh: Note: use moosh - Moodle Shell","title":"moosh"},{"location":"2021-06-khub-linode_migration/#appendix","text":"","title":"Appendix"},{"location":"2021-06-khub-linode_migration/#mariadb-backup","text":"Note: use MariaDB backup","title":"MariaDB backup"},{"location":"AWS%20Build%20to%20Scale/","text":"AWS Build to Scale Roy Canseco 2020-10-30 Context AWS is special in how flexible it is compared to most cloud providers. However, we, the clients are paying for this flexibility. Other cloud providers actually provide cheaper products with as much functionality but with less flexibility. It is therefore up to us, the clients, to leverage this flexibility by configuring AWS workloads to our advantage. The corollary to this, if we fail to configure properly, we will be paying more, or getting less. Big Idea We look to AWS as to how to iteratively build a generic web application that will make the most of the AWS flexibility and give us the most bang for our buck. It turns out that AWS has a 4-step process. Deploy a simple your web application code in an EC2 instance, your database in a block storage, and your static files into an S3 bucket. Replace your block storage with RDS Put in cloud watch, a load balancer, and an auto scaling group of EC2 instances Add cloud formation to be able to convert your infrastructure layout to code. This is taken from AWS Public Sector Summit Online / Breakout Sessions / ... Building in the cloud Patrick Do, Technical Trainer, AWS If we are able to fix the storage issue through S3 or EFS, then we will be completing step 2. Benefits Each step delivers unique advantages 1. Cheap storage that scales as your files grow 2. A database that can be managed and secured separately from the web application 3. A fleet of CPU instances that balances load between them and increases/ decreases their number as needed 4. A way to export and store all the infrastructure configuration for quick and easy redeployment This will bring us to an Optimized Lift and Shift status as described as the halfway point to total cost optimization, which was also described in AWS Summit 2020, as mentioned in my Oct 29 report. There was a report of an institution in India, EdTech Impartus, that launched online education in AWS for 90 schools, equivalent to 530,000 students and 32,000 teachers during the recent pandemic months. It is possible to setup AWS for all PSHS campuses well. Details Situationer Right now our moodledata are inside the Instance Store (ephemeral storage). This is fast, but expanding this is very costly. Also this hinders us from doing EC2 autoscaling since the compute node has the user data as well. Ideally the static data will be in the S3 bucket, which is also something we are not using at this point. On the other hand, our database is already well placed and is separate from the webserver instance. ### Step 1 of 4 This diagram is how most web applications in AWS will start. We haven't fully reached this stage yet since we haven't separated our static content from our compute instance. This implies that we can manage our static content apart from the compute instance. For our particular case, this can mean that we put our moodledata folder inside a block storage. We can also use a moodle plugin to get static content from within moodledata block storage and store them in the object bucket. Once we fully achieve this, we should be able to scale our storage as needed. Step 2 of 4 This is stage 2, where we configure the database in a way that it can be managed apart from our compute instance. With regards to the database, our current setup fully satisfies this best practice. Step 3 of 4 This is stage 3, where we have slimmed down our compute instance to do just computing functions. Both data files and databases are already separated from it. We can now create a fleet of compute instances that we can scale up or scale down based on our present need. We are not doing this at all as of now. This part is where AWS excels. Not being able to do this takes out a lot of the advantages that AWS has over cheaper cloud platforms. This will need that have the following to work: 1. a load balancer 2. a fleet of compute instances 3. a monitor to signal increasing or decreasing of compute instances The following picture shows the AWS load-balancer. The following picture shows a fleet of compute instances that only runs 2 instances during low usage times and up to 10 instances during peak usage times. The following picture describes the monitor AWS uses to trigger alarms and autoscaling (increase or decrease) of compute instances. It was mentioned in the AWS Summit 2020 that they recommend increasing compute capacity once 60% is already reached. They also recommend decreasing capacity once utilization falls to 20% . Step 4 of 4 This is stage 4, where we describe our AWS configuration in a script and save it. This means that if we want to set everything up again, we can do so easily just be running our script. This makes sure that our configuration is correct every time. This uses AWS Cloud Formation templates. Next Steps There are various things that can go wrong in putting together server infrastructure in the cloud. That is why it is recommended to iterate from simple to a complex architecture. Through every stage, the reliability, ease of management and total cost becomes better and better. It would be good to be proactive in this regard. At this point, PSHS needs KHub to fully reach stage 2. The key component to this is being able to separate static content from the compute node. This is very much doable. As soon stage 2 is reached, it would be advisable to explore and prototype a solution to reach Stage 3 so as to be future ready. It seems that OED/ Nephila is poising to integrate all KHubs in the future. This is evidenced by the current setup where there is only 1 database for all campuses. This means that in case we want to separate the campuses, we will not find it that easy to do because campuses are sharing database tables. Also, from today's meeting, their plan is to have 1 object bucket for the static content of all campuses. All these point to integrating all campus KHubs together. When that happens, reaching the stage 3 architecture is a must to be feasible. Stage 4 will be necessary to maintain such a configuration in the long run.","title":"AWS Build to Scale"},{"location":"AWS%20Build%20to%20Scale/#aws-build-to-scale","text":"Roy Canseco 2020-10-30","title":"AWS Build to Scale"},{"location":"AWS%20Build%20to%20Scale/#context","text":"AWS is special in how flexible it is compared to most cloud providers. However, we, the clients are paying for this flexibility. Other cloud providers actually provide cheaper products with as much functionality but with less flexibility. It is therefore up to us, the clients, to leverage this flexibility by configuring AWS workloads to our advantage. The corollary to this, if we fail to configure properly, we will be paying more, or getting less.","title":"Context"},{"location":"AWS%20Build%20to%20Scale/#big-idea","text":"We look to AWS as to how to iteratively build a generic web application that will make the most of the AWS flexibility and give us the most bang for our buck. It turns out that AWS has a 4-step process. Deploy a simple your web application code in an EC2 instance, your database in a block storage, and your static files into an S3 bucket. Replace your block storage with RDS Put in cloud watch, a load balancer, and an auto scaling group of EC2 instances Add cloud formation to be able to convert your infrastructure layout to code. This is taken from AWS Public Sector Summit Online / Breakout Sessions / ... Building in the cloud Patrick Do, Technical Trainer, AWS If we are able to fix the storage issue through S3 or EFS, then we will be completing step 2.","title":"Big Idea"},{"location":"AWS%20Build%20to%20Scale/#benefits","text":"Each step delivers unique advantages 1. Cheap storage that scales as your files grow 2. A database that can be managed and secured separately from the web application 3. A fleet of CPU instances that balances load between them and increases/ decreases their number as needed 4. A way to export and store all the infrastructure configuration for quick and easy redeployment This will bring us to an Optimized Lift and Shift status as described as the halfway point to total cost optimization, which was also described in AWS Summit 2020, as mentioned in my Oct 29 report. There was a report of an institution in India, EdTech Impartus, that launched online education in AWS for 90 schools, equivalent to 530,000 students and 32,000 teachers during the recent pandemic months. It is possible to setup AWS for all PSHS campuses well.","title":"Benefits"},{"location":"AWS%20Build%20to%20Scale/#details","text":"","title":"Details"},{"location":"AWS%20Build%20to%20Scale/#situationer","text":"Right now our moodledata are inside the Instance Store (ephemeral storage). This is fast, but expanding this is very costly. Also this hinders us from doing EC2 autoscaling since the compute node has the user data as well. Ideally the static data will be in the S3 bucket, which is also something we are not using at this point. On the other hand, our database is already well placed and is separate from the webserver instance. ### Step 1 of 4 This diagram is how most web applications in AWS will start. We haven't fully reached this stage yet since we haven't separated our static content from our compute instance. This implies that we can manage our static content apart from the compute instance. For our particular case, this can mean that we put our moodledata folder inside a block storage. We can also use a moodle plugin to get static content from within moodledata block storage and store them in the object bucket. Once we fully achieve this, we should be able to scale our storage as needed.","title":"Situationer"},{"location":"AWS%20Build%20to%20Scale/#step-2-of-4","text":"This is stage 2, where we configure the database in a way that it can be managed apart from our compute instance. With regards to the database, our current setup fully satisfies this best practice.","title":"Step 2 of 4"},{"location":"AWS%20Build%20to%20Scale/#step-3-of-4","text":"This is stage 3, where we have slimmed down our compute instance to do just computing functions. Both data files and databases are already separated from it. We can now create a fleet of compute instances that we can scale up or scale down based on our present need. We are not doing this at all as of now. This part is where AWS excels. Not being able to do this takes out a lot of the advantages that AWS has over cheaper cloud platforms. This will need that have the following to work: 1. a load balancer 2. a fleet of compute instances 3. a monitor to signal increasing or decreasing of compute instances The following picture shows the AWS load-balancer. The following picture shows a fleet of compute instances that only runs 2 instances during low usage times and up to 10 instances during peak usage times. The following picture describes the monitor AWS uses to trigger alarms and autoscaling (increase or decrease) of compute instances. It was mentioned in the AWS Summit 2020 that they recommend increasing compute capacity once 60% is already reached. They also recommend decreasing capacity once utilization falls to 20% .","title":"Step 3 of 4"},{"location":"AWS%20Build%20to%20Scale/#step-4-of-4","text":"This is stage 4, where we describe our AWS configuration in a script and save it. This means that if we want to set everything up again, we can do so easily just be running our script. This makes sure that our configuration is correct every time. This uses AWS Cloud Formation templates.","title":"Step 4 of 4"},{"location":"AWS%20Build%20to%20Scale/#next-steps","text":"There are various things that can go wrong in putting together server infrastructure in the cloud. That is why it is recommended to iterate from simple to a complex architecture. Through every stage, the reliability, ease of management and total cost becomes better and better. It would be good to be proactive in this regard. At this point, PSHS needs KHub to fully reach stage 2. The key component to this is being able to separate static content from the compute node. This is very much doable. As soon stage 2 is reached, it would be advisable to explore and prototype a solution to reach Stage 3 so as to be future ready. It seems that OED/ Nephila is poising to integrate all KHubs in the future. This is evidenced by the current setup where there is only 1 database for all campuses. This means that in case we want to separate the campuses, we will not find it that easy to do because campuses are sharing database tables. Also, from today's meeting, their plan is to have 1 object bucket for the static content of all campuses. All these point to integrating all campus KHubs together. When that happens, reaching the stage 3 architecture is a must to be feasible. Stage 4 will be necessary to maintain such a configuration in the long run.","title":"Next Steps"},{"location":"AWS%20TCO%20Optimization/","text":"AWS TCO Optimization 2020-10-29T12.54.05 Roy Canseco Context By attending this year's AWS International Public Sector Summit, I was able to determine the best practices in cost-optimizing Web Applications running on AWS infrastructure. This might be important for PSHS because we are experiencing Moodle/ KHub downtime every 2 weeks due to under-capacity of our underlying infrastructure. Our provider, OED/KID, said that this is due to the ballooning of monthly bills from AWS. In an attempt to find alternatives to alleviate the matter, the PSHS- MC leadership, under Dr. Lawrence Madriaga, the KHub Coordinator, and the MIS wish to present the latest best practice roadmap for minimizing Total Cost of Ownership for software applications hosted on AWS. Big Idea [perfect] We adaptively Right-size [fail] We can implement auto-scaling for various parts of the system (e.g. storage, CPU, cache) [?] This means going prepaid, much like we do on cellphones. Using reserved nodes/ instances normally gives 30-50% savings. Best is to do pre-paid for expected minimum use, then postpaid (i.e. monthly billing) for anything above the minimum expected use. This is most effective in conjunction with #2. [fail] According to the 2018 suggested architecture for moodle released by AWS, the current practice of keeping moodledata inside the webserver is not best practice. I add that such makes doing #2 more difficult. [perfect] We are measuring and monitoring Benefits By utilizing the innate flexibility of the AWS platform, there is a large room for improvement open to us. We are just on the first step of the stairs going in getting our costs down, which is Instance Right-Sizing. It was said in the talk that the Lift and Shift stage has minimal to negligible cost benefits when compared to On-Premise installations. Details The talk was given in a Breakout Session for TCO Optimization in the 2020 AWS Public Sector Summit Online. The speaker was Mr. David Lurie, who works in AWS- Canada. There are different services in AWS that will be used for optimizing depending on the specific needs, but the following services will be crucial to everyone serious in making the most (and paying the least) for the AWS platform. Next Steps The speaker acknowledges that setting up AWS well can be technical and tricky. Thus, David urges reaching out to AWS partners, consultants, and soluton architects. David also encourages organizations with AWS workloads to send their people to train.","title":"AWS TCO Optimization"},{"location":"AWS%20TCO%20Optimization/#aws-tco-optimization","text":"2020-10-29T12.54.05 Roy Canseco","title":"AWS TCO Optimization"},{"location":"AWS%20TCO%20Optimization/#context","text":"By attending this year's AWS International Public Sector Summit, I was able to determine the best practices in cost-optimizing Web Applications running on AWS infrastructure. This might be important for PSHS because we are experiencing Moodle/ KHub downtime every 2 weeks due to under-capacity of our underlying infrastructure. Our provider, OED/KID, said that this is due to the ballooning of monthly bills from AWS. In an attempt to find alternatives to alleviate the matter, the PSHS- MC leadership, under Dr. Lawrence Madriaga, the KHub Coordinator, and the MIS wish to present the latest best practice roadmap for minimizing Total Cost of Ownership for software applications hosted on AWS.","title":"Context"},{"location":"AWS%20TCO%20Optimization/#big-idea","text":"[perfect] We adaptively Right-size [fail] We can implement auto-scaling for various parts of the system (e.g. storage, CPU, cache) [?] This means going prepaid, much like we do on cellphones. Using reserved nodes/ instances normally gives 30-50% savings. Best is to do pre-paid for expected minimum use, then postpaid (i.e. monthly billing) for anything above the minimum expected use. This is most effective in conjunction with #2. [fail] According to the 2018 suggested architecture for moodle released by AWS, the current practice of keeping moodledata inside the webserver is not best practice. I add that such makes doing #2 more difficult. [perfect] We are measuring and monitoring","title":"Big Idea"},{"location":"AWS%20TCO%20Optimization/#benefits","text":"By utilizing the innate flexibility of the AWS platform, there is a large room for improvement open to us. We are just on the first step of the stairs going in getting our costs down, which is Instance Right-Sizing. It was said in the talk that the Lift and Shift stage has minimal to negligible cost benefits when compared to On-Premise installations.","title":"Benefits"},{"location":"AWS%20TCO%20Optimization/#details","text":"The talk was given in a Breakout Session for TCO Optimization in the 2020 AWS Public Sector Summit Online. The speaker was Mr. David Lurie, who works in AWS- Canada. There are different services in AWS that will be used for optimizing depending on the specific needs, but the following services will be crucial to everyone serious in making the most (and paying the least) for the AWS platform.","title":"Details"},{"location":"AWS%20TCO%20Optimization/#next-steps","text":"The speaker acknowledges that setting up AWS well can be technical and tricky. Thus, David urges reaching out to AWS partners, consultants, and soluton architects. David also encourages organizations with AWS workloads to send their people to train.","title":"Next Steps"},{"location":"BA%20186%20-%20Activity%20Guide/","text":"BA 186 - Activity Guide Week 1 - Information Systems Development Environment We will have a discussion activity for this topic. Instructions We will do a 1-3-2 for this. Each student shall post 1 reflection on the questions we raised. Each student will react/ respond to at least 3 other students\u2019 reflections. Let\u2019s try to make sure each student gets at least 2 replies. Each student will respond/ reply to at least 2 responses to their reflections. Questions Raised SDLC is sometimes defined as: Plan \u2013 Analyze \u2013 Design \u2013 Implement \u2013 Maintain and sometimes it is defined as: Analysis \u2013 Requirements \u2013 Design \u2013 Development \u2013 Implementation . With which do you agree more? Why? From what you\u2019ve studied, if you were to have your own personal Software Development Life Cycle, what would the steps be? Netiquette Participate : This is a shared learning environment. No lurking in the cyberspace background. It is not enough to log in and read the discussion thread of others. For the maximum benefit to all, everyone must contribute. Avoid Repetition : Read everything in the discussion thread before replying. This will help you avoid repeating something someone else has already contributed. Acknowledge the points made with which you agree and suggest alternatives for those with which you don\u2019t. Use Proper Writing Style : The academic environment expects a higher-order language. Write as if you were writing a term paper. Correct spelling, grammatical construction, and sentence structure are expected in every other writing activity associated with scholarship and academic engagement. Online discussions are no different. Avoid profanity. Cite Your Sources : Another big must! If your contribution to the conversation includes the intellectual property (authored material) of others, e.g., books, newspaper, magazine, or journal articles\u2014online or in print\u2014they must be given proper attribution. Respect Diversity : It\u2019s an ethnically rich and diverse, multi-cultural world in which we live. Use no language that is\u2014or that could be construed to be\u2014offensive toward others. Racists, sexist, and heterosexist comments and jokes are unacceptable, as are derogatory and/or sarcastic comments and jokes directed at religious beliefs, disabilities, and age. We all come with different perspectives, so please be respectful and resist the urge to tell anyone they are wrong. Understand they have had different life experiences and all of our world views are simply different. No YELLING! Using bold upper-case letters is bad form, like stomping around and yelling at somebody (NOT TO MENTION BEING HARD ON THE EYE). Remember, You Can't Un-Ring the Bell : Language is your only tool in an online environment. Be mindful. How others perceive you will be large\u2014as always\u2014up to you. Once you've hit the send button, you've rung the bell. Review your written posts and responses to ensure that you\u2019ve conveyed exactly what you intended. This is an excellent opportunity to practice your proofreading, revision, and rewriting skills\u2014valuable assets in the professional world for which you are now preparing. Read your post out loud before hitting the send button. This will tell you a lot about whether your grammar and sentence structure are correct, your tone is appropriate, and your contribution clear or not. Adapted from Colorado State University Week 2 - The Origins of Software We will have a zoom webinar for this. Instructions Login using the zoom link that will be provided. Rename using surname first. Discuss with the class about the sources of software. All sources of software originate from ideas of how someone's life can be made better with technology. The more clearly imagined the idea, the more possible it is to make real, like the ipod. The ideas that are tied to how feel, are more real to you. Think of 3 pain points, problems that you feel deeply about. List them and send them to me via chat. Now think of the opposites of these problems. What would that look like? Describe them in 1 sentence each. Send them to me via chat. Now think of a mobile app that, if existed, would ba part of the solution that would bring about the situation you desire. What would the app do? How will it help? Answer these in 2 sentences for each app. Send me your app descriptions via chat. Go into prof-assigned breakout rooms of 3-5 students each. Get to know each other. Turn on your video when you introduce yourself. Assign a group secretary Take 2-minute turns introducing your App Ideas while the secretary lists The secretary will then share screen and the group discusses and eliminates ideas that are vague or unpalatable for the group to pursue until 3 app ideas remain. Send me your group's top 3 via chat. Think about personas for each of the 3 app ideas. Tell me about the persona, the problem and the app when I visit your breakup room. Netiquette Remember: * Participate * Respect differing opinions * Each individual is important * NO YELLING! * Think before you speak Week 3 - Identifying and Selecting Systems Development Projects We will have an inter-group discussion activity for this topic. Instructions We will do a 1-4-3 for this. Each group shall post 1 article based on the questions for this week. Each group will react/ respond to at least 4 other groups' articles. Let\u2019s try to make sure each group gets at least 3 substantial comments. Each group will respond/ reply to at least 3 comments to their articles. Use the zoom breakout room to jointly create your article, while the secretary shares her screen and types in UVLE. Questions What is the problem/ pain point / need that your app is trying to address? What's the big idea / value behind your app? Put into words the Measurable Organizational Value (MOV) of your app for the company/ group who will use it. Netiquette Remember: * Participate * Respect differing opinions * Each individual is important * NO YELLING! * Think before you speak/ type Week 4 - Managing the Information Systems Project We will have a reflection paper for this topic. Instructions Make a 1-2 page reflection paper on the most unforgettable experience you had as a Project Manager. You may attach pictures, links, Gantt charts and the like for bonus points. In case, you haven't been a Project Manager before, reflect on an experience where you were a part of the team that took care of an event or created a project. Relate your experience to the things we discussed this week in class. Weeks 5 - 11 We'll have Class Discussions with updates on group deliverables with respect to their project assignments Week 12 We'll have a mini lecture Weeks 13 - 14 Agile-style stand-up meetings for group presentations and class production","title":"BA 186   Activity Guide"},{"location":"BA%20186%20-%20Activity%20Guide/#ba-186-activity-guide","text":"","title":"BA 186 - Activity Guide"},{"location":"BA%20186%20-%20Activity%20Guide/#week-1-information-systems-development-environment","text":"We will have a discussion activity for this topic.","title":"Week 1 - Information Systems Development Environment"},{"location":"BA%20186%20-%20Activity%20Guide/#instructions","text":"We will do a 1-3-2 for this. Each student shall post 1 reflection on the questions we raised. Each student will react/ respond to at least 3 other students\u2019 reflections. Let\u2019s try to make sure each student gets at least 2 replies. Each student will respond/ reply to at least 2 responses to their reflections.","title":"Instructions"},{"location":"BA%20186%20-%20Activity%20Guide/#questions-raised","text":"SDLC is sometimes defined as: Plan \u2013 Analyze \u2013 Design \u2013 Implement \u2013 Maintain and sometimes it is defined as: Analysis \u2013 Requirements \u2013 Design \u2013 Development \u2013 Implementation . With which do you agree more? Why? From what you\u2019ve studied, if you were to have your own personal Software Development Life Cycle, what would the steps be?","title":"Questions Raised"},{"location":"BA%20186%20-%20Activity%20Guide/#netiquette","text":"Participate : This is a shared learning environment. No lurking in the cyberspace background. It is not enough to log in and read the discussion thread of others. For the maximum benefit to all, everyone must contribute. Avoid Repetition : Read everything in the discussion thread before replying. This will help you avoid repeating something someone else has already contributed. Acknowledge the points made with which you agree and suggest alternatives for those with which you don\u2019t. Use Proper Writing Style : The academic environment expects a higher-order language. Write as if you were writing a term paper. Correct spelling, grammatical construction, and sentence structure are expected in every other writing activity associated with scholarship and academic engagement. Online discussions are no different. Avoid profanity. Cite Your Sources : Another big must! If your contribution to the conversation includes the intellectual property (authored material) of others, e.g., books, newspaper, magazine, or journal articles\u2014online or in print\u2014they must be given proper attribution. Respect Diversity : It\u2019s an ethnically rich and diverse, multi-cultural world in which we live. Use no language that is\u2014or that could be construed to be\u2014offensive toward others. Racists, sexist, and heterosexist comments and jokes are unacceptable, as are derogatory and/or sarcastic comments and jokes directed at religious beliefs, disabilities, and age. We all come with different perspectives, so please be respectful and resist the urge to tell anyone they are wrong. Understand they have had different life experiences and all of our world views are simply different. No YELLING! Using bold upper-case letters is bad form, like stomping around and yelling at somebody (NOT TO MENTION BEING HARD ON THE EYE). Remember, You Can't Un-Ring the Bell : Language is your only tool in an online environment. Be mindful. How others perceive you will be large\u2014as always\u2014up to you. Once you've hit the send button, you've rung the bell. Review your written posts and responses to ensure that you\u2019ve conveyed exactly what you intended. This is an excellent opportunity to practice your proofreading, revision, and rewriting skills\u2014valuable assets in the professional world for which you are now preparing. Read your post out loud before hitting the send button. This will tell you a lot about whether your grammar and sentence structure are correct, your tone is appropriate, and your contribution clear or not. Adapted from Colorado State University","title":"Netiquette"},{"location":"BA%20186%20-%20Activity%20Guide/#week-2-the-origins-of-software","text":"We will have a zoom webinar for this.","title":"Week 2 - The Origins of Software"},{"location":"BA%20186%20-%20Activity%20Guide/#instructions_1","text":"Login using the zoom link that will be provided. Rename using surname first. Discuss with the class about the sources of software. All sources of software originate from ideas of how someone's life can be made better with technology. The more clearly imagined the idea, the more possible it is to make real, like the ipod. The ideas that are tied to how feel, are more real to you. Think of 3 pain points, problems that you feel deeply about. List them and send them to me via chat. Now think of the opposites of these problems. What would that look like? Describe them in 1 sentence each. Send them to me via chat. Now think of a mobile app that, if existed, would ba part of the solution that would bring about the situation you desire. What would the app do? How will it help? Answer these in 2 sentences for each app. Send me your app descriptions via chat. Go into prof-assigned breakout rooms of 3-5 students each. Get to know each other. Turn on your video when you introduce yourself. Assign a group secretary Take 2-minute turns introducing your App Ideas while the secretary lists The secretary will then share screen and the group discusses and eliminates ideas that are vague or unpalatable for the group to pursue until 3 app ideas remain. Send me your group's top 3 via chat. Think about personas for each of the 3 app ideas. Tell me about the persona, the problem and the app when I visit your breakup room.","title":"Instructions"},{"location":"BA%20186%20-%20Activity%20Guide/#netiquette_1","text":"Remember: * Participate * Respect differing opinions * Each individual is important * NO YELLING! * Think before you speak","title":"Netiquette"},{"location":"BA%20186%20-%20Activity%20Guide/#week-3-identifying-and-selecting-systems-development-projects","text":"We will have an inter-group discussion activity for this topic.","title":"Week 3 - Identifying and Selecting Systems Development Projects"},{"location":"BA%20186%20-%20Activity%20Guide/#instructions_2","text":"We will do a 1-4-3 for this. Each group shall post 1 article based on the questions for this week. Each group will react/ respond to at least 4 other groups' articles. Let\u2019s try to make sure each group gets at least 3 substantial comments. Each group will respond/ reply to at least 3 comments to their articles. Use the zoom breakout room to jointly create your article, while the secretary shares her screen and types in UVLE.","title":"Instructions"},{"location":"BA%20186%20-%20Activity%20Guide/#questions","text":"What is the problem/ pain point / need that your app is trying to address? What's the big idea / value behind your app? Put into words the Measurable Organizational Value (MOV) of your app for the company/ group who will use it.","title":"Questions"},{"location":"BA%20186%20-%20Activity%20Guide/#netiquette_2","text":"Remember: * Participate * Respect differing opinions * Each individual is important * NO YELLING! * Think before you speak/ type","title":"Netiquette"},{"location":"BA%20186%20-%20Activity%20Guide/#week-4-managing-the-information-systems-project","text":"We will have a reflection paper for this topic.","title":"Week 4 - Managing the Information Systems Project"},{"location":"BA%20186%20-%20Activity%20Guide/#instructions_3","text":"Make a 1-2 page reflection paper on the most unforgettable experience you had as a Project Manager. You may attach pictures, links, Gantt charts and the like for bonus points. In case, you haven't been a Project Manager before, reflect on an experience where you were a part of the team that took care of an event or created a project. Relate your experience to the things we discussed this week in class.","title":"Instructions"},{"location":"BA%20186%20-%20Activity%20Guide/#weeks-5-11","text":"We'll have Class Discussions with updates on group deliverables with respect to their project assignments","title":"Weeks 5 - 11"},{"location":"BA%20186%20-%20Activity%20Guide/#week-12","text":"We'll have a mini lecture","title":"Week 12"},{"location":"BA%20186%20-%20Activity%20Guide/#weeks-13-14","text":"Agile-style stand-up meetings for group presentations and class production","title":"Weeks 13 - 14"},{"location":"BA%20186%20-%20Study%20Guide/","text":"BA 186 - Study Guide by Roy Vincent L. Canseco SY 2020- 2021 Week 1 - Information Systems Development Environment Let's Begin In week 1, we get introduced to what information systems are and how they come about. Please accomplish the following before our first meeting for the week. Read pp 9-13. What Are Information Systems?. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Stop before What Does an IS Career Look Like? Watch https://edpuzzle.com/assignments/5f154e802cc63e3f2812f318/watch Think What are the similarities of building a house and developing an information system? Can you imagine a house, where the builder forgot to install a toilet? Can you as easily see if you missed to develop some part of the information system? What are the differences in building a house and developing an information system? Please accomplish the following before our second meeting for the week. Watch https://edpuzzle.com/assignments/5f1681ccbcac813f230610a5/watch Read pp 17-19. Systems Development Life Cycle (SDLC). https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Think SDLC is sometimes defined as: Plan \u2013 Analyze \u2013 Design \u2013 Implement \u2013 Maintain and sometimes it is defined as: Analysis \u2013 Requirements \u2013 Design \u2013 Development \u2013 Implementation . With which do you agree more? Why? From what you\u2019ve studied, if you were to have your own personal Software Development Life Cycle, what would the steps be? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 1 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 2. This is useful if you find yourself having trouble with quizzes. Week 2 - The Origins of Software Let's Begin Here we look at where software comes from. We will see that software are either bought or build. We'll see that either way, most software today originate from teams with a purpose. Then we'll go through the experience by forming our teams, coming up with our software idea, analyzing then designing the software. Do these before the first meeting for the week Watch https://edpuzzle.com/assignments/5f16d5f40d40a83f8cfc3e75/watch Read First download the Entrepreneur Wireframe Kit \u2013 PowerPoint \u2013 FREE Version from https://knockoutprezo.com/freethings/free-powerpoint-templates/entrepreneurs-wireframe-kit-powerpoint-free-version/ Then read * pp. 70-76. Plan and Design Your App. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Think A design team benefits from having the following: a person with a creative eye and can communicate ideas a person who can research and validate/ support ideas a person who can keep track of the work Which kind(s) of person describes you best? Do you know of a classmate with compatible skills to what you have? Just by looking at a person, what he/ she wears, how he/ she speaks, the kind of questions that he or she asks, can you predict what value he/ she can contribute to your team? Do this before the second meeting for the week. Read pp. 93-94. Build vs. Buy. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Think What kind of software source was used for the office software I'm using, bought or built? What kind of software source(s) do you think was used for UP CRS, bought or built? What kind of software source(s) do you think was used for UVLE? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 2 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 2. This is useful if you find yourself having trouble with quizzes. Week 3 - Identifying and Selecting Systems Development Projects Let's Begin In this week, we shall look at company goals and the processes that bring value to it. We then look at how Information Systems can enhance that value. Please do these before the first meeting for the week. Read pp 24-29. What Is a Business Process?. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Watch Measurable Organizational Value. https://edpuzzle.com/assignments/5f168d4e967c073f4d9c8339/watch Developing the MOV. https://edpuzzle.com/assignments/5f1699f626dbe93f38346b4d/watch Think What's the MOV for our project? How can the value be measured? In what way can it be estimated? What's the baseline value of the parameter our app seeks to improve? At what percent improvement would be our app a success? Please do the following before the second meeting for the week. Watch Business Case. https://edpuzzle.com/assignments/5f16a443928d7f3f1d04bd07/watch Think What's our Business Case for our app? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 4 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 4. This is useful if you find yourself having trouble with quizzes. Week 4 - Managing the Information Systems Project Let's Begin In this week, we shall learn about project management, with a focus on the usually large and complex Information System projects. The lessons will help you in creating your group project as well as other large projects you'll do in the future. Do these before the first meeting for the week Watch https://edpuzzle.com/assignments/5f16dad87ea8933f1205b68c/watch https://edpuzzle.com/assignments/5f17f907725b3c3f44aaf80e/watch Think What are the major work activities that we'll need for your project? Which activities are dependent on each other? Are there activities that be done simultaneously? Please do the following before the second zoom meeting for the week Watch https://edpuzzle.com/assignments/5f17fa6d725b3c3f44aafb51/watch Read pp 116-136. Knowledge with Information Systems: Forecast Revenues and Expenses for the App. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Think What apps are similar to our group app? Around how much do those apps cost? Compared with the app estimated in the text, will our app cost more or less than that? Much more? Much less? Around how much might the development of our app cost? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 3 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 3. This is useful if you find yourself having trouble with quizzes. Week 5 - Initiating and Planning Systems Development Projects Let's Begin In this week, we look at the details and calculations that go into initiating and planning for information systems development projects. Please do the following before the first meeting this week. Watch Breakeven point. https://edpuzzle.com/assignments/5f16b003bcac813f2306744f/watch Project Planning. https://edpuzzle.com/assignments/5f16b915967c073f4d9ce299/watch Think What steps would you need to do to predict when breakeven would happen for our app project? What other calculations can we do to get people to have confidence that our app is a good project to undertake? What other details can we add to convince possible partners that we've thought of our app project thoroughly? Please do the following before the second meeting for this week. Watch Improving Plans. https://edpuzzle.com/assignments/5f178a7471b5b93f64c4cdc5/watch Read pp 137-147. Decision Support: Determine Feasibility of a BusinessLoan for the App. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Think How would our current app work schedule change when we apply the learning from this recent video? What are the calculations necessary to check whether our app development can be loaned from a bank or similar institution? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 5 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 5. This is useful if you find yourself having trouble with quizzes. Week 6 - Determining System Requirements Let's Begin In this week, we shall talk about validating our ideas of the information system requirements and estimates by comparing it to reality, or at least to as much reality that our senses can reasonably gather. Watch Estimation. https://edpuzzle.com/assignments/5f16df5c16f7663f04f3ebb7/watch Read System Service Request. https://docs.google.com/document/d/1Uu5kRo7oG46h4C1ICSVe1wd7Ss66LubeSloeOeFPReo/edit?usp=sharing Read this template so as to be able to create a version for our group project. Think Our goal is to create Information Systems that bring value to users and organizations. Do you think interviewing our perspective app users would be important? How so? Do you think observing our perspective app users would be important? How so? Do you think studying the forms they use for data input would be important? How so? Do you think that studying the reports they create would be important? How so? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 6 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 6. Week 7 - Structuring System Process Requirements Let's Begin In this week, we look at how we can efficiently record business processes so that we can effectively communicate the written form to our teammates and promote a single understanding of the work we do. Read pp. 30-35. Diagramming a Business Process. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Watch System Scope. https://edpuzzle.com/assignments/5f16e7d9a4b24a3f2e2bd4bc/watch Think Using what you've read, how would you make the process flow chart for our app? Looking at what you've watched, what other types of process diagrams might be useful to have to our app? What are the advantages do each of the diagramming methods you've learned? ### Dig Deeper * Make sure you join the zoom class meeting scheduled for your section. * You can also read chapter 7 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) * You can also check out the extended slides for Chapter 7. Week 8 - Designing Forms and Reports Let's Begin In this week, we learn to group together inputs into concise forms. We also learn to group together outputs into meaningful reports. Read pp 37-53. Professionalism in Deliverables: Principles of Graphic Design. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that chek out: https://color.adobe.com/create/color-wheel The color wheel will help you forms and reports that are cool to look at. Having a good color scheme will also help in the future. Think Isn't it annoying when you have to re-type information that you've already submitted previously? What advantages can forms in information systems have over paper forms? Besides in forms and reports, where else can good color schemes help in the design of our app? What are the forms necessary for our app? What reports are necessary for our app? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 10 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 10. Week 9 - Graphical User Interfaces and Dialogues Let's Begin In this week, we look at how to put together the user interfaces and dialogues of our mobile app for a good user experience. Read pp 57-69. User Centered Design: Design an iPhone App. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Think What screens would be necessary for our app to have? When a user submits something, what kind of dialogue boxes should appear? What would the boxes say? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 11 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 11. Week 10 - Structuring System Data Requirements Let's Begin In this week, we look at how data can be represented in diagrams so that it can be communicated easily and efficiently to the team. Please do the following before the first meeting for this week. Read pp 21-30. Entity Relationships. https://bookboon.com/en/database-design-and-implementation-ebook Think Give an example of an entity type that can be found in our group app? Give an example of an entity occurrence that can be found in our group app? Please do the following before the second meeting for this week. Read pp 31-43. Complex relationships. https://bookboon.com/en/database-design-and-implementation-ebook Think What many-to-many entity relationship can be found in our group app? What link/ associative entity would link the two entities? What would be the steps in creating an Entity Relationship Diagram (ERD) for our group app? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 8 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 8. Week 11 - Designing Databases Let's Begin In this week, we look at converting ERD's into tables that computers can understand and use. We also look into optimizing the resulting tables for faster searches and maximized storage. Please read the following before the first meeting for the week. Read pp 44-61. Logical Database Design. https://bookboon.com/en/database-design-and-implementation-ebook Think What are the steps to convert an ERD into a set of related tables? Please read the following before the second meeting for the week. Read pp 62-84. CH5 Normalisation. https://bookboon.com/en/database-design-and-implementation-ebook Think Why do we do normalization, in your own words? What is something unique about the first normal form? What is something unique about the second normal form? What is something unique about the third normal form? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 9 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 9. Week 12 - Distributed and Internet Systems Security Let's Begin In this week, we acknowledge the pervasiveness of the cloud-based applications and look at the security that modern information systems have to consider. Read pp.64-73. CH 6. Information Systems Security. https://open.umn.edu/opentextbooks/textbooks/information-systems-for-business-and-beyond Think Describe one method of multi-factor authentication that you have experienced and discuss the pros and cons of using multi-factor authentication. When was the last time you backed up your data? What method did you use? Dig Deeper Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 12 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 12. Week 13 - Consultations for Presentation Content Explore canva for slides creation. Canva. https://www.canva.com/ Week 14 - Video Presentation of Mobile App Design Explore Screencastify for video creation. Screencastify. https://www.screencastify.com/","title":"BA 186   Study Guide"},{"location":"BA%20186%20-%20Study%20Guide/#ba-186-study-guide","text":"by Roy Vincent L. Canseco SY 2020- 2021","title":"BA 186 - Study Guide"},{"location":"BA%20186%20-%20Study%20Guide/#week-1-information-systems-development-environment","text":"","title":"Week 1 - Information Systems Development Environment"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin","text":"In week 1, we get introduced to what information systems are and how they come about. Please accomplish the following before our first meeting for the week.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#read","text":"pp 9-13. What Are Information Systems?. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that Stop before What Does an IS Career Look Like?","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#watch","text":"https://edpuzzle.com/assignments/5f154e802cc63e3f2812f318/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#think","text":"What are the similarities of building a house and developing an information system? Can you imagine a house, where the builder forgot to install a toilet? Can you as easily see if you missed to develop some part of the information system? What are the differences in building a house and developing an information system? Please accomplish the following before our second meeting for the week.","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#watch_1","text":"https://edpuzzle.com/assignments/5f1681ccbcac813f230610a5/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#read_1","text":"pp 17-19. Systems Development Life Cycle (SDLC). https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_1","text":"SDLC is sometimes defined as: Plan \u2013 Analyze \u2013 Design \u2013 Implement \u2013 Maintain and sometimes it is defined as: Analysis \u2013 Requirements \u2013 Design \u2013 Development \u2013 Implementation . With which do you agree more? Why? From what you\u2019ve studied, if you were to have your own personal Software Development Life Cycle, what would the steps be?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 1 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 2. This is useful if you find yourself having trouble with quizzes.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-2-the-origins-of-software","text":"","title":"Week 2 - The Origins of Software"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_1","text":"Here we look at where software comes from. We will see that software are either bought or build. We'll see that either way, most software today originate from teams with a purpose. Then we'll go through the experience by forming our teams, coming up with our software idea, analyzing then designing the software. Do these before the first meeting for the week","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#watch_2","text":"https://edpuzzle.com/assignments/5f16d5f40d40a83f8cfc3e75/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#read_2","text":"First download the Entrepreneur Wireframe Kit \u2013 PowerPoint \u2013 FREE Version from https://knockoutprezo.com/freethings/free-powerpoint-templates/entrepreneurs-wireframe-kit-powerpoint-free-version/ Then read * pp. 70-76. Plan and Design Your App. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_2","text":"A design team benefits from having the following: a person with a creative eye and can communicate ideas a person who can research and validate/ support ideas a person who can keep track of the work Which kind(s) of person describes you best? Do you know of a classmate with compatible skills to what you have? Just by looking at a person, what he/ she wears, how he/ she speaks, the kind of questions that he or she asks, can you predict what value he/ she can contribute to your team? Do this before the second meeting for the week.","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#read_3","text":"pp. 93-94. Build vs. Buy. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_3","text":"What kind of software source was used for the office software I'm using, bought or built? What kind of software source(s) do you think was used for UP CRS, bought or built? What kind of software source(s) do you think was used for UVLE?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_1","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 2 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 2. This is useful if you find yourself having trouble with quizzes.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-3-identifying-and-selecting-systems-development-projects","text":"","title":"Week 3 - Identifying and Selecting Systems Development Projects"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_2","text":"In this week, we shall look at company goals and the processes that bring value to it. We then look at how Information Systems can enhance that value. Please do these before the first meeting for the week.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#read_4","text":"pp 24-29. What Is a Business Process?. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#watch_3","text":"Measurable Organizational Value. https://edpuzzle.com/assignments/5f168d4e967c073f4d9c8339/watch Developing the MOV. https://edpuzzle.com/assignments/5f1699f626dbe93f38346b4d/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#think_4","text":"What's the MOV for our project? How can the value be measured? In what way can it be estimated? What's the baseline value of the parameter our app seeks to improve? At what percent improvement would be our app a success? Please do the following before the second meeting for the week.","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#watch_4","text":"Business Case. https://edpuzzle.com/assignments/5f16a443928d7f3f1d04bd07/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#think_5","text":"What's our Business Case for our app?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_2","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 4 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 4. This is useful if you find yourself having trouble with quizzes.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-4-managing-the-information-systems-project","text":"","title":"Week 4 - Managing the Information Systems Project"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_3","text":"In this week, we shall learn about project management, with a focus on the usually large and complex Information System projects. The lessons will help you in creating your group project as well as other large projects you'll do in the future. Do these before the first meeting for the week","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#watch_5","text":"https://edpuzzle.com/assignments/5f16dad87ea8933f1205b68c/watch https://edpuzzle.com/assignments/5f17f907725b3c3f44aaf80e/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#think_6","text":"What are the major work activities that we'll need for your project? Which activities are dependent on each other? Are there activities that be done simultaneously? Please do the following before the second zoom meeting for the week","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#watch_6","text":"https://edpuzzle.com/assignments/5f17fa6d725b3c3f44aafb51/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#read_5","text":"pp 116-136. Knowledge with Information Systems: Forecast Revenues and Expenses for the App. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_7","text":"What apps are similar to our group app? Around how much do those apps cost? Compared with the app estimated in the text, will our app cost more or less than that? Much more? Much less? Around how much might the development of our app cost?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_3","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 3 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 3. This is useful if you find yourself having trouble with quizzes.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-5-initiating-and-planning-systems-development-projects","text":"","title":"Week 5 - Initiating and Planning Systems Development Projects"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_4","text":"In this week, we look at the details and calculations that go into initiating and planning for information systems development projects. Please do the following before the first meeting this week.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#watch_7","text":"Breakeven point. https://edpuzzle.com/assignments/5f16b003bcac813f2306744f/watch Project Planning. https://edpuzzle.com/assignments/5f16b915967c073f4d9ce299/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#think_8","text":"What steps would you need to do to predict when breakeven would happen for our app project? What other calculations can we do to get people to have confidence that our app is a good project to undertake? What other details can we add to convince possible partners that we've thought of our app project thoroughly? Please do the following before the second meeting for this week.","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#watch_8","text":"Improving Plans. https://edpuzzle.com/assignments/5f178a7471b5b93f64c4cdc5/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#read_6","text":"pp 137-147. Decision Support: Determine Feasibility of a BusinessLoan for the App. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_9","text":"How would our current app work schedule change when we apply the learning from this recent video? What are the calculations necessary to check whether our app development can be loaned from a bank or similar institution?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_4","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 5 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 5. This is useful if you find yourself having trouble with quizzes.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-6-determining-system-requirements","text":"","title":"Week 6 - Determining System Requirements"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_5","text":"In this week, we shall talk about validating our ideas of the information system requirements and estimates by comparing it to reality, or at least to as much reality that our senses can reasonably gather.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#watch_9","text":"Estimation. https://edpuzzle.com/assignments/5f16df5c16f7663f04f3ebb7/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#read_7","text":"System Service Request. https://docs.google.com/document/d/1Uu5kRo7oG46h4C1ICSVe1wd7Ss66LubeSloeOeFPReo/edit?usp=sharing Read this template so as to be able to create a version for our group project.","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_10","text":"Our goal is to create Information Systems that bring value to users and organizations. Do you think interviewing our perspective app users would be important? How so? Do you think observing our perspective app users would be important? How so? Do you think studying the forms they use for data input would be important? How so? Do you think that studying the reports they create would be important? How so?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_5","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 6 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 6.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-7-structuring-system-process-requirements","text":"","title":"Week 7 - Structuring System Process Requirements"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_6","text":"In this week, we look at how we can efficiently record business processes so that we can effectively communicate the written form to our teammates and promote a single understanding of the work we do.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#read_8","text":"pp. 30-35. Diagramming a Business Process. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#watch_10","text":"System Scope. https://edpuzzle.com/assignments/5f16e7d9a4b24a3f2e2bd4bc/watch","title":"Watch"},{"location":"BA%20186%20-%20Study%20Guide/#think_11","text":"Using what you've read, how would you make the process flow chart for our app? Looking at what you've watched, what other types of process diagrams might be useful to have to our app? What are the advantages do each of the diagramming methods you've learned? ### Dig Deeper * Make sure you join the zoom class meeting scheduled for your section. * You can also read chapter 7 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) * You can also check out the extended slides for Chapter 7.","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#week-8-designing-forms-and-reports","text":"","title":"Week 8 - Designing Forms and Reports"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_7","text":"In this week, we learn to group together inputs into concise forms. We also learn to group together outputs into meaningful reports.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#read_9","text":"pp 37-53. Professionalism in Deliverables: Principles of Graphic Design. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that chek out: https://color.adobe.com/create/color-wheel The color wheel will help you forms and reports that are cool to look at. Having a good color scheme will also help in the future.","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_12","text":"Isn't it annoying when you have to re-type information that you've already submitted previously? What advantages can forms in information systems have over paper forms? Besides in forms and reports, where else can good color schemes help in the design of our app? What are the forms necessary for our app? What reports are necessary for our app?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_6","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 10 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 10.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-9-graphical-user-interfaces-and-dialogues","text":"","title":"Week 9 - Graphical User Interfaces and Dialogues"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_8","text":"In this week, we look at how to put together the user interfaces and dialogues of our mobile app for a good user experience.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#read_10","text":"pp 57-69. User Centered Design: Design an iPhone App. https://open.umn.edu/opentextbooks/textbooks/business-information-systems-design-an-app-for-that","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_13","text":"What screens would be necessary for our app to have? When a user submits something, what kind of dialogue boxes should appear? What would the boxes say?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_7","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 11 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 11.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-10-structuring-system-data-requirements","text":"","title":"Week 10 - Structuring System Data Requirements"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_9","text":"In this week, we look at how data can be represented in diagrams so that it can be communicated easily and efficiently to the team. Please do the following before the first meeting for this week.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#read_11","text":"pp 21-30. Entity Relationships. https://bookboon.com/en/database-design-and-implementation-ebook","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_14","text":"Give an example of an entity type that can be found in our group app? Give an example of an entity occurrence that can be found in our group app? Please do the following before the second meeting for this week.","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#read_12","text":"pp 31-43. Complex relationships. https://bookboon.com/en/database-design-and-implementation-ebook","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_15","text":"What many-to-many entity relationship can be found in our group app? What link/ associative entity would link the two entities? What would be the steps in creating an Entity Relationship Diagram (ERD) for our group app?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_8","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 8 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 8.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-11-designing-databases","text":"","title":"Week 11 - Designing Databases"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_10","text":"In this week, we look at converting ERD's into tables that computers can understand and use. We also look into optimizing the resulting tables for faster searches and maximized storage. Please read the following before the first meeting for the week.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#read_13","text":"pp 44-61. Logical Database Design. https://bookboon.com/en/database-design-and-implementation-ebook","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_16","text":"What are the steps to convert an ERD into a set of related tables? Please read the following before the second meeting for the week.","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#read_14","text":"pp 62-84. CH5 Normalisation. https://bookboon.com/en/database-design-and-implementation-ebook","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_17","text":"Why do we do normalization, in your own words? What is something unique about the first normal form? What is something unique about the second normal form? What is something unique about the third normal form?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_9","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 9 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 9.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-12-distributed-and-internet-systems-security","text":"","title":"Week 12 - Distributed and Internet Systems Security"},{"location":"BA%20186%20-%20Study%20Guide/#lets-begin_11","text":"In this week, we acknowledge the pervasiveness of the cloud-based applications and look at the security that modern information systems have to consider.","title":"Let's Begin"},{"location":"BA%20186%20-%20Study%20Guide/#read_15","text":"pp.64-73. CH 6. Information Systems Security. https://open.umn.edu/opentextbooks/textbooks/information-systems-for-business-and-beyond","title":"Read"},{"location":"BA%20186%20-%20Study%20Guide/#think_18","text":"Describe one method of multi-factor authentication that you have experienced and discuss the pros and cons of using multi-factor authentication. When was the last time you backed up your data? What method did you use?","title":"Think"},{"location":"BA%20186%20-%20Study%20Guide/#dig-deeper_10","text":"Make sure you join the zoom class meeting scheduled for your section. You can also read chapter 12 of our textbook: Modern Systems Analysis and Design, 8th edition. Jeffrey A. Hoffer, Joey F. George, and Joseph S. Valacich. (2017) You can also check out the extended slides for Chapter 12.","title":"Dig Deeper"},{"location":"BA%20186%20-%20Study%20Guide/#week-13-consultations-for-presentation-content","text":"Explore canva for slides creation. Canva. https://www.canva.com/","title":"Week 13 - Consultations for Presentation Content"},{"location":"BA%20186%20-%20Study%20Guide/#week-14-video-presentation-of-mobile-app-design","text":"Explore Screencastify for video creation. Screencastify. https://www.screencastify.com/","title":"Week 14 - Video Presentation of Mobile App Design"},{"location":"BA%20186%20Online%20Classes/","text":"BA 186 Online Classes Database Email Hello, What respectable company doesn't have a database? Let's talk about how to design one and give you an edge in a world moving towards business intelligence, data analytics, and big data. 10 am. June 4. The short meeting will last somewhere between 15 to 50 minutes. Roy Canseco is inviting you to a scheduled Zoom meeting. Join Zoom Meeting https://us04web.zoom.us/j/78719745106?pwd=Vll0NlRxVXdBeEk4VExUTTRVcDBoUT09 Meeting ID: 787 1974 5106 Password: 1pERX2 PS. This is an optional educational activity for those not afraid of working that extra mile to become a cut above the rest. student emails egsimpao@up.edu.ph, rctec@up.edu.ph, asangeles1@up.edu.ph, rlcanlas1@up.edu.ph, poguinto@up.edu.ph, abloyola1@up.edu.ph, jdperez9@up.edu.ph, jdng1@up.edu.ph, rarabino@up.edu.ph, yvbuenaventura@up.edu.ph, lsnonaka@up.edu.ph, cbdimanalata@up.edu.ph, aptan9@up.edu.ph, ssong@up.edu.ph, hcdeperio1@up.edu.ph, mtbabila@up.edu.ph, jcchua8@up.edu.ph, kmramos6@up.edu.ph, abaguilon@up.edu.ph, nmnatividad@up.edu.ph, ayponco@up.edu.ph, isinocencio@up.edu.ph, along7@up.edu.ph, maputi@up.edu.ph, gamacalino@up.edu.ph, aclim9@up.edu.ph, mbmegino1@up.edu.ph, mcanarcon@up.edu.ph, czencinares@up.edu.ph, arluna2@up.edu.ph, rssantiago4@up.edu.ph, hccabrera@up.edu.ph, rptse@up.edu.ph, jbpunzalan5@up.edu.ph, srparaiso@up.edu.ph, astrinidad2@up.edu.ph, kadee1@up.edu.ph, ldhernandez1@up.edu.ph Reports and Forms email Hello, There's no escape from Forms and Reports, no matter what business you are in. Let's talk about how to design those and give you an edge in a world moving towards business intelligence, data analytics, and big data. 11 am. June 4. The short meeting will last somewhere between 15 to 50 minutes. Roy Canseco is inviting you to a scheduled Zoom meeting. Join Zoom Meeting https://us04web.zoom.us/j/72247778129?pwd=QzNlbEhGcFVJYXh5eFNIN2g1a1pFdz09 Meeting ID: 722 4777 8129 Password: 1hksSb PS. This is an optional educational activity for those not afraid of working that extra mile to become a cut above the rest. Database Meeting why study databases? Script Good morning. Welcome to this BA 186 online meeting. We will record this meeting for the benefit of interested students not able to join us at the moment. I am Sir Roy and I'll begin with a roll call. Please unmute your mic and say hi so that we know your audio works. Also turn on your video and wave so we know that works too. At his point, le ask for 1 or 2 responses to this online meeting. Just introduce yourself and tell us what you think of this meeting _ __ In closing, we see that _ __ is important and understanding it can help us become better _____ . Let's turn on our videos for a class pic.","title":"BA 186 Online Classes"},{"location":"BA%20186%20Online%20Classes/#ba-186-online-classes","text":"","title":"BA 186 Online Classes"},{"location":"BA%20186%20Online%20Classes/#database-email","text":"Hello, What respectable company doesn't have a database? Let's talk about how to design one and give you an edge in a world moving towards business intelligence, data analytics, and big data. 10 am. June 4. The short meeting will last somewhere between 15 to 50 minutes. Roy Canseco is inviting you to a scheduled Zoom meeting. Join Zoom Meeting https://us04web.zoom.us/j/78719745106?pwd=Vll0NlRxVXdBeEk4VExUTTRVcDBoUT09 Meeting ID: 787 1974 5106 Password: 1pERX2 PS. This is an optional educational activity for those not afraid of working that extra mile to become a cut above the rest.","title":"Database Email"},{"location":"BA%20186%20Online%20Classes/#student-emails","text":"egsimpao@up.edu.ph, rctec@up.edu.ph, asangeles1@up.edu.ph, rlcanlas1@up.edu.ph, poguinto@up.edu.ph, abloyola1@up.edu.ph, jdperez9@up.edu.ph, jdng1@up.edu.ph, rarabino@up.edu.ph, yvbuenaventura@up.edu.ph, lsnonaka@up.edu.ph, cbdimanalata@up.edu.ph, aptan9@up.edu.ph, ssong@up.edu.ph, hcdeperio1@up.edu.ph, mtbabila@up.edu.ph, jcchua8@up.edu.ph, kmramos6@up.edu.ph, abaguilon@up.edu.ph, nmnatividad@up.edu.ph, ayponco@up.edu.ph, isinocencio@up.edu.ph, along7@up.edu.ph, maputi@up.edu.ph, gamacalino@up.edu.ph, aclim9@up.edu.ph, mbmegino1@up.edu.ph, mcanarcon@up.edu.ph, czencinares@up.edu.ph, arluna2@up.edu.ph, rssantiago4@up.edu.ph, hccabrera@up.edu.ph, rptse@up.edu.ph, jbpunzalan5@up.edu.ph, srparaiso@up.edu.ph, astrinidad2@up.edu.ph, kadee1@up.edu.ph, ldhernandez1@up.edu.ph","title":"student emails"},{"location":"BA%20186%20Online%20Classes/#reports-and-forms-email","text":"Hello, There's no escape from Forms and Reports, no matter what business you are in. Let's talk about how to design those and give you an edge in a world moving towards business intelligence, data analytics, and big data. 11 am. June 4. The short meeting will last somewhere between 15 to 50 minutes. Roy Canseco is inviting you to a scheduled Zoom meeting. Join Zoom Meeting https://us04web.zoom.us/j/72247778129?pwd=QzNlbEhGcFVJYXh5eFNIN2g1a1pFdz09 Meeting ID: 722 4777 8129 Password: 1hksSb PS. This is an optional educational activity for those not afraid of working that extra mile to become a cut above the rest.","title":"Reports and Forms email"},{"location":"BA%20186%20Online%20Classes/#database-meeting","text":"why study databases?","title":"Database Meeting"},{"location":"BA%20186%20Online%20Classes/#script","text":"Good morning. Welcome to this BA 186 online meeting. We will record this meeting for the benefit of interested students not able to join us at the moment. I am Sir Roy and I'll begin with a roll call. Please unmute your mic and say hi so that we know your audio works. Also turn on your video and wave so we know that works too. At his point, le ask for 1 or 2 responses to this online meeting. Just introduce yourself and tell us what you think of this meeting _ __ In closing, we see that _ __ is important and understanding it can help us become better _____ . Let's turn on our videos for a class pic.","title":"Script"},{"location":"Bouncing%20Back%20Big%202020-08-24T21.05.26/","text":"Bouncing Back Big 2020-08-24T21.05.26 3 Step Formula Great things are waiting for you around the corner... In fact, they have arrived. You took action, you're here. How to feel good right now. Whatever is happening right now. Focus on what you want. Focus on the positive, the wonderful things arriving to your life. They are on the way because you are open to it. Imagine your greatest life because it's possible. You can achieve all you want in life and go through stuff. Bad stuff just bounce of you as you love life. Just be open to receive. Intention What I want. Declaration All of this will glorify the God who loves me. 3 Step Formula If you keep doing what you're doing, you'll get what you're getting Think Different Manage your perception your thinking is what is causing your suffering every time you dwell on the negative is like staring at a close door. step away from the closed door. look at the open doors. the words I am are the most powerful words you'll ever speak Reprogram your Beliefs Project Positive Points Choose your friends carefully Let go of the past Forgive yourself and others","title":"Bouncing Back Big 2020 08 24T21.05.26"},{"location":"Bouncing%20Back%20Big%202020-08-24T21.05.26/#bouncing-back-big-2020-08-24t210526","text":"3 Step Formula Great things are waiting for you around the corner... In fact, they have arrived. You took action, you're here. How to feel good right now. Whatever is happening right now. Focus on what you want. Focus on the positive, the wonderful things arriving to your life. They are on the way because you are open to it. Imagine your greatest life because it's possible. You can achieve all you want in life and go through stuff. Bad stuff just bounce of you as you love life. Just be open to receive.","title":"Bouncing Back Big 2020-08-24T21.05.26"},{"location":"Bouncing%20Back%20Big%202020-08-24T21.05.26/#intention","text":"What I want.","title":"Intention"},{"location":"Bouncing%20Back%20Big%202020-08-24T21.05.26/#declaration","text":"All of this will glorify the God who loves me.","title":"Declaration"},{"location":"Bouncing%20Back%20Big%202020-08-24T21.05.26/#3-step-formula","text":"If you keep doing what you're doing, you'll get what you're getting","title":"3 Step Formula"},{"location":"Bouncing%20Back%20Big%202020-08-24T21.05.26/#think-different","text":"Manage your perception your thinking is what is causing your suffering every time you dwell on the negative is like staring at a close door. step away from the closed door. look at the open doors. the words I am are the most powerful words you'll ever speak","title":"Think Different"},{"location":"Bouncing%20Back%20Big%202020-08-24T21.05.26/#reprogram-your-beliefs","text":"","title":"Reprogram your Beliefs"},{"location":"Bouncing%20Back%20Big%202020-08-24T21.05.26/#project-positive-points","text":"Choose your friends carefully Let go of the past Forgive yourself and others","title":"Project Positive Points"},{"location":"Build%20a%20fresh%20server/","text":"Build a fresh server ubuntu 20.04 LTS adduser sir_roy usermod -aG sudo sir_roy -a :: append -G :: group su - sir_roy setup firewall: ufw app list ufw allow OpenSSH ufw enable ufw status numbered sudo ufw allow ssh sudo ufw allow 22 sudo ufw allow http sudo ufw allow 80 sudo ufw allow https sudo ufw allow 443 sudo ufw allow proto tcp from any to any port 80,443 sudo ufw allow 5432 dpkg-reconfigure tzdata","title":"Build a fresh server"},{"location":"Build%20a%20fresh%20server/#build-a-fresh-server","text":"","title":"Build a fresh server"},{"location":"Build%20a%20fresh%20server/#ubuntu-2004-lts","text":"adduser sir_roy usermod -aG sudo sir_roy -a :: append -G :: group su - sir_roy setup firewall: ufw app list ufw allow OpenSSH ufw enable ufw status numbered sudo ufw allow ssh sudo ufw allow 22 sudo ufw allow http sudo ufw allow 80 sudo ufw allow https sudo ufw allow 443 sudo ufw allow proto tcp from any to any port 80,443 sudo ufw allow 5432 dpkg-reconfigure tzdata","title":"ubuntu 20.04 LTS"},{"location":"CHMF%202020-10-13T16.48.48/","text":"CHMF 2020-10-13T16.48.48 Proposal Rationale Big Idea Advantages/ Benefits Details Responsibilities (Scope) Deliverables Schedule First Step (Conforme) Cover letter / Project charter TOR Company Contact Time of Engagement Designation Rationale c/o Naidz Scope of Work Appointment Scheduling Feature Patient Data Reason for consultation Relevant files / lab test results Specialization of Doctor needed [optional] Doctor information Schedule Personal Information Accepted Terms and Conditions Data Privacy notice Appointment Reminder Feature E-Prescription Feature Clinical Abstract Feature Consultation Summary Feature Deliverables and Schedule Baseline Project Plan Logical and Physical Design Documents Development Patient module Doctor's module Admin module Testing Alpha testing Beta testing Deployment Compensation and Benefits c/o Naidz Accompanying General Guidelines / Appendix Definition of Terms Electronic Medical Record (EMR) Electronic Prescription (ePrescription) Healthcare Provider Processing Telemedicine Declaration of Principles Separability Clause Reports Outcome and Summary Reports Performance Reports Operational Reports Forms Consultation form Feedback form (Patient Satisfaction Survey) Informed consent form Implementation Requirements Telemedicine consultation protocol Data privacy policy Cybersecurity measures Risk and issues management protocol Monitoring and evaluation mechanisms Patient flow incorporating DOH COVID-19 process flow Considerations Data warehousing features Business intelligence features Workflow and User Interface Guide Conforme","title":"CHMF 2020 10 13T16.48.48"},{"location":"CHMF%202020-10-13T16.48.48/#chmf-2020-10-13t164848","text":"Proposal","title":"CHMF 2020-10-13T16.48.48"},{"location":"CHMF%202020-10-13T16.48.48/#rationale","text":"","title":"Rationale"},{"location":"CHMF%202020-10-13T16.48.48/#big-idea","text":"","title":"Big Idea"},{"location":"CHMF%202020-10-13T16.48.48/#advantages-benefits","text":"","title":"Advantages/ Benefits"},{"location":"CHMF%202020-10-13T16.48.48/#details","text":"","title":"Details"},{"location":"CHMF%202020-10-13T16.48.48/#responsibilities-scope","text":"","title":"Responsibilities (Scope)"},{"location":"CHMF%202020-10-13T16.48.48/#deliverables","text":"","title":"Deliverables"},{"location":"CHMF%202020-10-13T16.48.48/#schedule","text":"","title":"Schedule"},{"location":"CHMF%202020-10-13T16.48.48/#first-step-conforme","text":"Cover letter / Project charter","title":"First Step (Conforme)"},{"location":"CHMF%202020-10-13T16.48.48/#tor","text":"Company Contact Time of Engagement Designation","title":"TOR"},{"location":"CHMF%202020-10-13T16.48.48/#rationale_1","text":"c/o Naidz","title":"Rationale"},{"location":"CHMF%202020-10-13T16.48.48/#scope-of-work","text":"","title":"Scope of Work"},{"location":"CHMF%202020-10-13T16.48.48/#appointment-scheduling-feature","text":"","title":"Appointment Scheduling Feature"},{"location":"CHMF%202020-10-13T16.48.48/#patient-data","text":"Reason for consultation Relevant files / lab test results Specialization of Doctor needed [optional] Doctor information Schedule Personal Information Accepted Terms and Conditions Data Privacy notice","title":"Patient Data"},{"location":"CHMF%202020-10-13T16.48.48/#appointment-reminder-feature","text":"","title":"Appointment Reminder Feature"},{"location":"CHMF%202020-10-13T16.48.48/#e-prescription-feature","text":"","title":"E-Prescription Feature"},{"location":"CHMF%202020-10-13T16.48.48/#clinical-abstract-feature","text":"","title":"Clinical Abstract Feature"},{"location":"CHMF%202020-10-13T16.48.48/#consultation-summary-feature","text":"","title":"Consultation Summary Feature"},{"location":"CHMF%202020-10-13T16.48.48/#deliverables-and-schedule","text":"","title":"Deliverables and Schedule"},{"location":"CHMF%202020-10-13T16.48.48/#baseline-project-plan","text":"","title":"Baseline Project Plan"},{"location":"CHMF%202020-10-13T16.48.48/#logical-and-physical-design-documents","text":"","title":"Logical and Physical Design Documents"},{"location":"CHMF%202020-10-13T16.48.48/#development","text":"Patient module Doctor's module Admin module","title":"Development"},{"location":"CHMF%202020-10-13T16.48.48/#testing","text":"Alpha testing Beta testing","title":"Testing"},{"location":"CHMF%202020-10-13T16.48.48/#deployment","text":"","title":"Deployment"},{"location":"CHMF%202020-10-13T16.48.48/#compensation-and-benefits","text":"c/o Naidz","title":"Compensation and Benefits"},{"location":"CHMF%202020-10-13T16.48.48/#accompanying-general-guidelines-appendix","text":"","title":"Accompanying General Guidelines / Appendix"},{"location":"CHMF%202020-10-13T16.48.48/#definition-of-terms","text":"Electronic Medical Record (EMR) Electronic Prescription (ePrescription) Healthcare Provider Processing Telemedicine","title":"Definition of Terms"},{"location":"CHMF%202020-10-13T16.48.48/#declaration-of-principles","text":"","title":"Declaration of Principles"},{"location":"CHMF%202020-10-13T16.48.48/#separability-clause","text":"","title":"Separability Clause"},{"location":"CHMF%202020-10-13T16.48.48/#reports","text":"Outcome and Summary Reports Performance Reports Operational Reports","title":"Reports"},{"location":"CHMF%202020-10-13T16.48.48/#forms","text":"Consultation form Feedback form (Patient Satisfaction Survey) Informed consent form","title":"Forms"},{"location":"CHMF%202020-10-13T16.48.48/#implementation-requirements","text":"Telemedicine consultation protocol Data privacy policy Cybersecurity measures Risk and issues management protocol Monitoring and evaluation mechanisms Patient flow incorporating DOH COVID-19 process flow","title":"Implementation Requirements"},{"location":"CHMF%202020-10-13T16.48.48/#considerations","text":"Data warehousing features Business intelligence features","title":"Considerations"},{"location":"CHMF%202020-10-13T16.48.48/#workflow-and-user-interface-guide","text":"Conforme","title":"Workflow and User Interface Guide"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/","text":"CS4 Q3 Practical Test (50pts) Create the following Scenes with pictures Allow scene changing Make the Random Crush button change the image and name Change the background-color and increase font-size using CSS Put your name on the first scene and decorate it with a unique font and color [bonus] ** you must have the previous parts checked first make sure to create a gdoc with screenshots. no gdoc, no grade upload the exported netbeans zip and the gdoc to google classroom Points Distribution Create the following Scenes with pictures 10 points This is a check point, you may lock a minimum grade here Allow scene changing 10 points This is a check point, you may lock a minimum grade here Make the Random Crush button change the image and name 10 points This is a check point, you may lock a minimum grade here Change the background-color and increase font-size using CSS 10 points This is a check point, you may lock a minimum grade here Put your name on the first scene and decorate it with a unique font and color 10 points This is a check point, you may lock your perfect grade here Bonus: Create another scene, this time, with your CS4 groupmates as characters and some pictures of persons you admire. Create the appropriate buttons to link this scene to your main program. 10 points This is a check point, you may lock a minimum grade here You may make full use of internet at this point.","title":"CS4 Q3 Practical Test (50pts)"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/#cs4-q3-practical-test-50pts","text":"Create the following Scenes with pictures Allow scene changing Make the Random Crush button change the image and name Change the background-color and increase font-size using CSS Put your name on the first scene and decorate it with a unique font and color [bonus] ** you must have the previous parts checked first make sure to create a gdoc with screenshots. no gdoc, no grade upload the exported netbeans zip and the gdoc to google classroom","title":"CS4 Q3 Practical Test (50pts)"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/#points-distribution","text":"","title":"Points Distribution"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/#create-the-following-scenes-with-pictures","text":"10 points This is a check point, you may lock a minimum grade here","title":"Create the following Scenes with pictures"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/#allow-scene-changing","text":"10 points This is a check point, you may lock a minimum grade here","title":"Allow scene changing"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/#make-the-random-crush-button-change-the-image-and-name","text":"10 points This is a check point, you may lock a minimum grade here","title":"Make the Random Crush button change the image and name"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/#change-the-background-color-and-increase-font-size-using-css","text":"10 points This is a check point, you may lock a minimum grade here","title":"Change the background-color and increase font-size using CSS"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/#put-your-name-on-the-first-scene-and-decorate-it-with-a-unique-font-and-color","text":"10 points This is a check point, you may lock your perfect grade here","title":"Put your name on the first scene and decorate it with a unique font and color"},{"location":"CS4%20Q3%20Practical%20Test%20%2850pts%29/#bonus","text":"Create another scene, this time, with your CS4 groupmates as characters and some pictures of persons you admire. Create the appropriate buttons to link this scene to your main program. 10 points This is a check point, you may lock a minimum grade here You may make full use of internet at this point.","title":"Bonus:"},{"location":"Cloud%20Engineer%202021-06-23T18.06.01/","text":"Cloud Engineer 2021-06-23T18.06.01 https://www.reddit.com/r/sysadmin/comments/8inzn5/so_you_want_to_learn_aws_aka_how_do_i_learn_to_be/ So many people struggle with where to get started with AWS and cloud technologies in general. There is popular \"How do I learn to be a Linux admin?\" post that inspired me to write an equivalent for cloud technologies. This post serves as a guide of goals to grow from basic AWS knowledge to understanding and deploying complex architectures in an automated way. Feel free to pick up where you feel relevant based on prior experience. Assumptions: You have basic-to-moderate Linux systems administration skills You are at least familiar with programming/scripting. You don't need to be a whiz but you should have some decent hands-on experience automating and programming. You are willing to dedicate the time to overcome complex issues. You have an AWS Account and a marginal amount of money to spend improving your skills. How to use this guide: This is not a step by step how-to guide. You should take each goal and \"figure it out\". I have hints to guide you in the right direction. Google is your friend. AWS Documentation is your friend. Stack Overflow is your friend. Find out and implement the \"right way\", not the quick way. Ok, maybe do the quick way first then refactor to the right way before moving on. Shut down or de-provision as much as you can between learning sessions. You should be able to do everything in this guide for literally less than $50 using the AWS Free Tier. Rebuilding often will reinforce concepts anyway. Skip ahead and read the Cost Analysis and Automation sections and have them in the back of your mind as you work through the goals. Lastly, just get hands on, no better time to start then NOW. Project Overview This is NOT a guide on how to develop websites on AWS. This uses a website as an excuse to use all the technologies AWS puts at your fingertips. The concepts you will learn going through these exercises apply all over AWS. This guide takes you through a maturity process from the most basic webpage to an extremely cheap scalable web application. The small app you will build does not matter. It can do anything you want, just keep it simple. Need an idea? Here: Fortune-of-the-Day - Display a random fortune each page load, have a box at the bottom and a submit button to add a new fortune to the random fortune list. Account Basics Create an IAM user for your personal use. Set up MFA for your root user, turn off all root user API keys. Set up Billing Alerts for anything over a few dollars. Configure the AWS CLI for your user using API credentials. Checkpoint: You can use the AWS CLI to interrogate information about your AWS account. Web Hosting Basics Deploy a EC2 VM and host a simple static \"Fortune-of-the-Day Coming Soon\" web page. Take a snapshot of your VM, delete the VM, and deploy a new one from the snapshot. Basically disk backup + disk restore. Checkpoint: You can view a simple HTML page served from your EC2 instance. Auto Scaling Create an AMI from that VM and put it in an autoscaling group so one VM always exists. Put a Elastic Load Balancer infront of that VM and load balance between two Availability Zones (one EC2 in each AZ). Checkpoint: You can view a simple HTML page served from both of your EC2 instances. You can turn one off and your website is still accessible. External Data Create a DynamoDB table and experiment with loading and retrieving data manually, then do the same via a script on your local machine. Refactor your static page into your Fortune-of-the-Day website (Node, PHP, Python, whatever) which reads/updates a list of fortunes in the AWS DynamoDB table. (Hint: EC2 Instance Role) Checkpoint: Your HA/AutoScaled website can now load/save data to a database between users and sessions Web Hosting Platform-as-a-Service Retire that simple website and re-deploy it on Elastic Beanstalk. Create a S3 Static Website Bucket, upload some sample static pages/files/images. Add those assets to your Elastic Beanstalk website. Register a domain (or re-use and existing one). Set Route53 as the Nameservers and use Route53 for DNS. Make www.yourdomain.com go to your Elastic Beanstalk. Make static.yourdomain.com serve data from the S3 bucket. Enable SSL for your Static S3 Website. This isn't exactly trivial. (Hint: CloudFront + ACM) Enable SSL for your Elastic Beanstalk Website. Checkpoint: Your HA/AutoScaled website now serves all data over HTTPS. The same as before, except you don't have to manage the servers, web server software, website deployment, or the load balancer. Microservices Refactor your EB website into ONLY providing an API. It should only have a POST/GET to update/retrieve that specific data from DynamoDB. Bonus: Make it a simple REST API. Get rid of www.yourdomain.com and serve this EB as api.yourdomain.com Move most of the UI piece of your EB website into your Static S3 Website and use Javascript/whatever to retrieve the data from your api.yourdomain.com URL on page load. Send data to the EB URL to have it update the DynamoDB. Get rid of static.yourdomain.com and change your S3 bucket to serve from www.yourdomain.com. Checkpoint: Your EB deployment is now only a structured way to retrieve data from your database. All of your UI and application logic is served from the S3 Bucket (via CloudFront). You can support many more users since you're no longer using expensive servers to serve your website's static data. Serverless Write a AWS Lambda function to email you a list of all of the Fortunes in the DynamoDB table every night. Implement Least Privilege security for the Lambda Role. (Hint: Lambda using Python 3, Boto3, Amazon SES, scheduled with CloudWatch) Refactor the above app into a Serverless app. This is where it get's a little more abstract and you'll have to do a lot of research, experimentation on your own. The architecture: Static S3 Website Front-End calls API Gateway which executes a Lambda Function which reads/updates data in the DyanmoDB table. Use your SSL enabled bucket as the primary domain landing page with static content. Create an AWS API Gateway, use it to forward HTTP requests to an AWS Lambda function that queries the same data from DynamoDB as your EB Microservice. Your S3 static content should make Javascript calls to the API Gateway and then update the page with the retrieved data. Once you have the \"Get Fortune\" API Gateway + Lambda working, do the \"New Fortune\" API. Checkpoint: Your API Gateway and S3 Bucket are fronted by CloudFront with SSL. You have no EC2 instances deployed. All work is done by AWS services and billed as consumed. Cost Analysis Explore the AWS pricing models and see how pricing is structured for the services you've used. Answer the following for each of the main architectures you built: Roughly how much would this have costed for a month? How would I scale this architecture and how would my costs change? Architectures Basic Web Hosting: HA EC2 Instances Serving Static Web Page behind ELB Microservices: Elastic Beanstalk SSL Website for only API + S3 Static Website for all static content + DynamoDB Table + Route53 + CloudFront SSL Serverless: Serverless Website using API Gateway + Lambda Functions + DynamoDB + Route53 + CloudFront SSL + S3 Static Website for all static content Automation !!! This is REALLY important !!! These technologies are the most powerful when they're automated. You can make a Development environment in minutes and experiment and throw it away without a thought. This stuff isn't easy, but it's where the really skilled people excel. Automate the deployment of the architectures above. Use whatever tool you want. The popular ones are AWS CloudFormation or Teraform. Store your code in AWS CodeCommit or on GitHub. Yes, you can automate the deployment of ALL of the above with native AWS tools. I suggest when you get each app-related section of the done by hand you go back and automate the provisioning of the infrastructure. For example, automate the provisioning of your EC2 instance. Automate the creation of your S3 Bucket with Static Website Hosting enabled, etc. This is not easy, but it is very rewarding when you see it work. Continuous Delivery As you become more familiar with Automating deployments you should explore and implement a Continuous Delivery pipeline. Develop a CI/CD pipeline to automatically update a dev deployment of your infrastructure when new code is published, and then build a workflow to update the production version if approved. Travis CI is a decent SaaS tool, Jenkins has a huge following too, if you want to stick with AWS-specific technologies you'll be looking at CodePipeline. Miscellaneous / Bonus These didn't fit in nicely anywhere but are important AWS topics you should also explore: IAM: You should really learn how to create complex IAM Policies. You would have had to do basic roles+policies for for the EC2 Instance Role and Lambda Execution Role, but there are many advanced features. Networking: Create a new VPC from scratch with multiple subnets (you'll learn a LOT of networking concepts), once that is working create another VPC and peer them together. Get a VM in each subnet to talk to eachother using only their private IP addresses. KMS: Go back and redo the early EC2 instance goals but enable encryption on the disk volumes. Learn how to encrypt an AMI. Final Thoughts I've been recently recruiting for Cloud Systems Engineers and Cloud Systems Administrators. We've interviewed over a dozen local people with relevant resume experience. Every single person we interviewed would probably struggle starting with the DynamoDB/AutoScaling work. I'm finding there are very few people that HAVE ACTUALLY DONE THIS STUFF. Many people are familiar with the concepts, but when pushed for details they don't have answers or admit to just peripheral knowledge. You learn SO MUCH by doing. If you can't find an excuse or get support to do this as part of your job I would find a small but flashy/impressive personal project that you can build and show off as proof of your skills. Open source it on GitHub, make professional documentation, comment as much as is reasonable, and host a demo of the website. Add links to your LinkedIn, reference it on your resume, work it into interview answers, etc. When in a job interview you'll be able to answer all kinds of real-world questions because you've been-there-done-that with most of AWS' major services. I'm happy to hear any feedback. I'm considering making THIS post my flashy/impressive personal project in the form of a GitHub repo with sample code for each step, architecture diagrams, etc.","title":"Cloud Engineer 2021 06 23T18.06.01"},{"location":"Cloud%20Engineer%202021-06-23T18.06.01/#cloud-engineer-2021-06-23t180601","text":"https://www.reddit.com/r/sysadmin/comments/8inzn5/so_you_want_to_learn_aws_aka_how_do_i_learn_to_be/ So many people struggle with where to get started with AWS and cloud technologies in general. There is popular \"How do I learn to be a Linux admin?\" post that inspired me to write an equivalent for cloud technologies. This post serves as a guide of goals to grow from basic AWS knowledge to understanding and deploying complex architectures in an automated way. Feel free to pick up where you feel relevant based on prior experience.","title":"Cloud Engineer 2021-06-23T18.06.01"},{"location":"Cloud%20Engineer%202021-06-23T18.06.01/#assumptions","text":"You have basic-to-moderate Linux systems administration skills You are at least familiar with programming/scripting. You don't need to be a whiz but you should have some decent hands-on experience automating and programming. You are willing to dedicate the time to overcome complex issues. You have an AWS Account and a marginal amount of money to spend improving your skills.","title":"Assumptions:"},{"location":"Cloud%20Engineer%202021-06-23T18.06.01/#how-to-use-this-guide","text":"This is not a step by step how-to guide. You should take each goal and \"figure it out\". I have hints to guide you in the right direction. Google is your friend. AWS Documentation is your friend. Stack Overflow is your friend. Find out and implement the \"right way\", not the quick way. Ok, maybe do the quick way first then refactor to the right way before moving on. Shut down or de-provision as much as you can between learning sessions. You should be able to do everything in this guide for literally less than $50 using the AWS Free Tier. Rebuilding often will reinforce concepts anyway. Skip ahead and read the Cost Analysis and Automation sections and have them in the back of your mind as you work through the goals. Lastly, just get hands on, no better time to start then NOW.","title":"How to use this guide:"},{"location":"Cloud%20Engineer%202021-06-23T18.06.01/#project-overview","text":"This is NOT a guide on how to develop websites on AWS. This uses a website as an excuse to use all the technologies AWS puts at your fingertips. The concepts you will learn going through these exercises apply all over AWS. This guide takes you through a maturity process from the most basic webpage to an extremely cheap scalable web application. The small app you will build does not matter. It can do anything you want, just keep it simple. Need an idea? Here: Fortune-of-the-Day - Display a random fortune each page load, have a box at the bottom and a submit button to add a new fortune to the random fortune list.","title":"Project Overview"},{"location":"Cloud%20Engineer%202021-06-23T18.06.01/#account-basics","text":"Create an IAM user for your personal use. Set up MFA for your root user, turn off all root user API keys. Set up Billing Alerts for anything over a few dollars. Configure the AWS CLI for your user using API credentials. Checkpoint: You can use the AWS CLI to interrogate information about your AWS account.","title":"Account Basics"},{"location":"Cloud%20Engineer%202021-06-23T18.06.01/#web-hosting-basics","text":"Deploy a EC2 VM and host a simple static \"Fortune-of-the-Day Coming Soon\" web page. Take a snapshot of your VM, delete the VM, and deploy a new one from the snapshot. Basically disk backup + disk restore. Checkpoint: You can view a simple HTML page served from your EC2 instance. Auto Scaling Create an AMI from that VM and put it in an autoscaling group so one VM always exists. Put a Elastic Load Balancer infront of that VM and load balance between two Availability Zones (one EC2 in each AZ). Checkpoint: You can view a simple HTML page served from both of your EC2 instances. You can turn one off and your website is still accessible. External Data Create a DynamoDB table and experiment with loading and retrieving data manually, then do the same via a script on your local machine. Refactor your static page into your Fortune-of-the-Day website (Node, PHP, Python, whatever) which reads/updates a list of fortunes in the AWS DynamoDB table. (Hint: EC2 Instance Role) Checkpoint: Your HA/AutoScaled website can now load/save data to a database between users and sessions Web Hosting Platform-as-a-Service Retire that simple website and re-deploy it on Elastic Beanstalk. Create a S3 Static Website Bucket, upload some sample static pages/files/images. Add those assets to your Elastic Beanstalk website. Register a domain (or re-use and existing one). Set Route53 as the Nameservers and use Route53 for DNS. Make www.yourdomain.com go to your Elastic Beanstalk. Make static.yourdomain.com serve data from the S3 bucket. Enable SSL for your Static S3 Website. This isn't exactly trivial. (Hint: CloudFront + ACM) Enable SSL for your Elastic Beanstalk Website. Checkpoint: Your HA/AutoScaled website now serves all data over HTTPS. The same as before, except you don't have to manage the servers, web server software, website deployment, or the load balancer. Microservices Refactor your EB website into ONLY providing an API. It should only have a POST/GET to update/retrieve that specific data from DynamoDB. Bonus: Make it a simple REST API. Get rid of www.yourdomain.com and serve this EB as api.yourdomain.com Move most of the UI piece of your EB website into your Static S3 Website and use Javascript/whatever to retrieve the data from your api.yourdomain.com URL on page load. Send data to the EB URL to have it update the DynamoDB. Get rid of static.yourdomain.com and change your S3 bucket to serve from www.yourdomain.com. Checkpoint: Your EB deployment is now only a structured way to retrieve data from your database. All of your UI and application logic is served from the S3 Bucket (via CloudFront). You can support many more users since you're no longer using expensive servers to serve your website's static data. Serverless Write a AWS Lambda function to email you a list of all of the Fortunes in the DynamoDB table every night. Implement Least Privilege security for the Lambda Role. (Hint: Lambda using Python 3, Boto3, Amazon SES, scheduled with CloudWatch) Refactor the above app into a Serverless app. This is where it get's a little more abstract and you'll have to do a lot of research, experimentation on your own. The architecture: Static S3 Website Front-End calls API Gateway which executes a Lambda Function which reads/updates data in the DyanmoDB table. Use your SSL enabled bucket as the primary domain landing page with static content. Create an AWS API Gateway, use it to forward HTTP requests to an AWS Lambda function that queries the same data from DynamoDB as your EB Microservice. Your S3 static content should make Javascript calls to the API Gateway and then update the page with the retrieved data. Once you have the \"Get Fortune\" API Gateway + Lambda working, do the \"New Fortune\" API. Checkpoint: Your API Gateway and S3 Bucket are fronted by CloudFront with SSL. You have no EC2 instances deployed. All work is done by AWS services and billed as consumed. Cost Analysis Explore the AWS pricing models and see how pricing is structured for the services you've used. Answer the following for each of the main architectures you built: Roughly how much would this have costed for a month? How would I scale this architecture and how would my costs change? Architectures Basic Web Hosting: HA EC2 Instances Serving Static Web Page behind ELB Microservices: Elastic Beanstalk SSL Website for only API + S3 Static Website for all static content + DynamoDB Table + Route53 + CloudFront SSL Serverless: Serverless Website using API Gateway + Lambda Functions + DynamoDB + Route53 + CloudFront SSL + S3 Static Website for all static content Automation !!! This is REALLY important !!! These technologies are the most powerful when they're automated. You can make a Development environment in minutes and experiment and throw it away without a thought. This stuff isn't easy, but it's where the really skilled people excel. Automate the deployment of the architectures above. Use whatever tool you want. The popular ones are AWS CloudFormation or Teraform. Store your code in AWS CodeCommit or on GitHub. Yes, you can automate the deployment of ALL of the above with native AWS tools. I suggest when you get each app-related section of the done by hand you go back and automate the provisioning of the infrastructure. For example, automate the provisioning of your EC2 instance. Automate the creation of your S3 Bucket with Static Website Hosting enabled, etc. This is not easy, but it is very rewarding when you see it work. Continuous Delivery As you become more familiar with Automating deployments you should explore and implement a Continuous Delivery pipeline. Develop a CI/CD pipeline to automatically update a dev deployment of your infrastructure when new code is published, and then build a workflow to update the production version if approved. Travis CI is a decent SaaS tool, Jenkins has a huge following too, if you want to stick with AWS-specific technologies you'll be looking at CodePipeline. Miscellaneous / Bonus These didn't fit in nicely anywhere but are important AWS topics you should also explore: IAM: You should really learn how to create complex IAM Policies. You would have had to do basic roles+policies for for the EC2 Instance Role and Lambda Execution Role, but there are many advanced features. Networking: Create a new VPC from scratch with multiple subnets (you'll learn a LOT of networking concepts), once that is working create another VPC and peer them together. Get a VM in each subnet to talk to eachother using only their private IP addresses. KMS: Go back and redo the early EC2 instance goals but enable encryption on the disk volumes. Learn how to encrypt an AMI. Final Thoughts I've been recently recruiting for Cloud Systems Engineers and Cloud Systems Administrators. We've interviewed over a dozen local people with relevant resume experience. Every single person we interviewed would probably struggle starting with the DynamoDB/AutoScaling work. I'm finding there are very few people that HAVE ACTUALLY DONE THIS STUFF. Many people are familiar with the concepts, but when pushed for details they don't have answers or admit to just peripheral knowledge. You learn SO MUCH by doing. If you can't find an excuse or get support to do this as part of your job I would find a small but flashy/impressive personal project that you can build and show off as proof of your skills. Open source it on GitHub, make professional documentation, comment as much as is reasonable, and host a demo of the website. Add links to your LinkedIn, reference it on your resume, work it into interview answers, etc. When in a job interview you'll be able to answer all kinds of real-world questions because you've been-there-done-that with most of AWS' major services. I'm happy to hear any feedback. I'm considering making THIS post my flashy/impressive personal project in the form of a GitHub repo with sample code for each step, architecture diagrams, etc.","title":"Web Hosting Basics"},{"location":"Competitive%20Programming%20Coach/","text":"Competitive Programming Coach setup platform for all catalyst computers https://icpc.baylor.edu/worldfinals/programming-environment https://pc2.ecs.baylor.edu/wfImageBuilds/icpc2020/ImageBuildInstructions.html setup the server https://api.judge0.com/dummy-client.html","title":"Competitive Programming Coach"},{"location":"Competitive%20Programming%20Coach/#competitive-programming-coach","text":"setup platform for all catalyst computers https://icpc.baylor.edu/worldfinals/programming-environment https://pc2.ecs.baylor.edu/wfImageBuilds/icpc2020/ImageBuildInstructions.html setup the server https://api.judge0.com/dummy-client.html","title":"Competitive Programming Coach"},{"location":"CyberAttack%202020-09-30T08.26.16/","text":"CyberAttack 2020-09-30T08.26.16 9/29/20 It's night. DICT notifies PSHS OED/ MC MIS that some of its computers are talking to a malicious C&C server. I tell the director. MIS plans. Carlo replies to OED: Ronaldo Azagra 9/30/20 8:30 AM MIS wasn't able to block the ip using the firewall. I'll go try soon as I can. MIS moving to installing free antivirus software to campus computers. From Ma'am Aline: hi sir, based from experience before po when we had a squid/proxy server in pshs. usually there were several sites that accessed the campus network from questionable sources/countries..kaya blacklisting po may not be enough..... suggestion lang po...maybe we could implement state inspection (established communication only) or application layer filtering po....","title":"CyberAttack 2020 09 30T08.26.16"},{"location":"CyberAttack%202020-09-30T08.26.16/#cyberattack-2020-09-30t082616","text":"","title":"CyberAttack 2020-09-30T08.26.16"},{"location":"CyberAttack%202020-09-30T08.26.16/#92920","text":"It's night. DICT notifies PSHS OED/ MC MIS that some of its computers are talking to a malicious C&C server. I tell the director. MIS plans. Carlo replies to OED: Ronaldo Azagra","title":"9/29/20"},{"location":"CyberAttack%202020-09-30T08.26.16/#93020-830-am","text":"MIS wasn't able to block the ip using the firewall. I'll go try soon as I can. MIS moving to installing free antivirus software to campus computers. From Ma'am Aline: hi sir, based from experience before po when we had a squid/proxy server in pshs. usually there were several sites that accessed the campus network from questionable sources/countries..kaya blacklisting po may not be enough..... suggestion lang po...maybe we could implement state inspection (established communication only) or application layer filtering po....","title":"9/30/20 8:30 AM"},{"location":"Data%20Loader%20Tool%20for%20Oracle%20E-Business%2C%20Import%20Excel%2CCSV%20Convert%20MySQL%2C%20MS%20Access/","text":"Data Loader Tool for Oracle E-Business, Import Excel,CSV Convert MySQL, MS Access https://www.dbload.com/ Data Loader is a simple, yet powerful tool capable of Synchronizing, exporting and importing data between many common database formats. If you wish to convert MS SQL Server, CSV or MS Access to MySQL, this is the best tool satisfying your specific needs effectively. The latest Data Loader Version supports MySQL, Oracle, MS Access, Excel, FoxPro, DBF, MS SQL Server, CSV and Delimited or Flat Files. You can now easily convert Oracle to MySQL or MS SQL Server using this tool equipped with several unique and advanced features.","title":"Data Loader Tool for Oracle E Business, Import Excel,CSV Convert MySQL, MS Access"},{"location":"Data%20Loader%20Tool%20for%20Oracle%20E-Business%2C%20Import%20Excel%2CCSV%20Convert%20MySQL%2C%20MS%20Access/#data-loader-tool-for-oracle-e-business-import-excelcsv-convert-mysql-ms-access","text":"https://www.dbload.com/ Data Loader is a simple, yet powerful tool capable of Synchronizing, exporting and importing data between many common database formats. If you wish to convert MS SQL Server, CSV or MS Access to MySQL, this is the best tool satisfying your specific needs effectively. The latest Data Loader Version supports MySQL, Oracle, MS Access, Excel, FoxPro, DBF, MS SQL Server, CSV and Delimited or Flat Files. You can now easily convert Oracle to MySQL or MS SQL Server using this tool equipped with several unique and advanced features.","title":"Data Loader Tool for Oracle E-Business, Import Excel,CSV Convert MySQL, MS Access"},{"location":"Database%20replication/","text":"Database replication Careful note: I had set this up and the triggers kept putting my single-core VPS to 100% utilization May this solution is best for multi-core or dedicated VPS's So, you have postgre installed locallly and a in a VPS, both running Ubuntu 18.04. Here's what to do and what not to do in order to have a database replication between those two. > this should work with mysql databases too. haven't tried though. > VPS like linode or digital ocean or AWS. We'll go roughly through the following steps 1. create a database and create tables locally 2. create a database of the same name and tables in the VPS 3. install rubyrep locally 4. create a rubyrep.conf file 5. scan the databases for differences 6. sync the databases manually 7. start the replication 8. test by inserting records in the local and viewing them in the VPS 9. test by inserting records in the VPS and viewing them locally > it's important that the tables are already set up in both databases > it's possible to map local tables to vps tables manually if they have different names > The rubyrep.conf file can be named anything, e.g. myrubyrep.conf Create a database locally I'm using Ubuntu 18.04 and am practicing working with psql on the commandline. You can use whatever method is applicable with you. $ sudo -u postgres psql =# CREATE DATABASE ls_burgers =# \\c ls_burgers =# CREATE TABLE orders ( id integer, customer_name text, burger text, side text, drink text ); =# INSERT INTO orders VALUES (1, 'Todd Perez', 'LS Burger', 'Fries', 'Lemonade'); INSERT INTO orders VALUES (2, 'Florence Jordan', 'LS Cheeseburger', 'Fries', 'Chocolate Shake'); INSERT INTO orders VALUES (3, 'Robin Barnes', 'LS Burger', 'Onion Rings', 'Vanilla Shake'); INSERT INTO orders VALUES (4, 'Joyce Silva', 'LS Double Deluxe Burger', 'Fries', 'Chocolate Shake'); INSERT INTO orders VALUES (5, 'Joyce Silva', 'LS Chicken Burger', 'Onion Rings', 'Cola'); =# SELECT * FROM orders; \\q That should create your sample database with your sample table including some sample rows. It should also show (with the SELECT statment) that everything works. Create a database on the VPS This assumes that postgres is happily installed in your VPS as well. So we connect to the VPS using ssh and we'll just repeat what we did locally. $ sudo -u postgres psql =# CREATE DATABASE ls_burgers =# \\c ls_burgers =# CREATE TABLE orders ( id integer, customer_name text, burger text, side text, drink text ); =# INSERT INTO orders VALUES (1, 'Todd Perez', 'LS Burger', 'Fries', 'Lemonade'); INSERT INTO orders VALUES (2, 'Florence Jordan', 'LS Cheeseburger', 'Fries', 'Chocolate Shake'); INSERT INTO orders VALUES (3, 'Robin Barnes', 'LS Burger', 'Onion Rings', 'Vanilla Shake'); INSERT INTO orders VALUES (4, 'Joyce Silva', 'LS Double Deluxe Burger', 'Fries', 'Chocolate Shake'); INSERT INTO orders VALUES (5, 'Joyce Silva', 'LS Chicken Burger', 'Onion Rings', 'Cola'); =# SELECT * FROM orders; \\q Then we setup the server so that our local computer can access server postgres db. Here are the steps: enable the postgresql port `sudo ufw enable 5432/tcp` put a password on the default postgres account psql =# ALTER USER postgres PASSWORD 'myPassword'; ALTER ROLE go to /etc/postgresql/10/main open postgresql.conf for editing set to listen_addresses '*' to allow postgresql to listen to any ip address open pg_hba.conf set to host allow allow 0.0.0.0/0 md5 > i think just enabling 5432 would work as well > we can leave the password empty, but if we do, we can't use *md5* in pg_hba.conf > instead *md5*, we'll have to use *trust* > this makes things even less secure > the folder in etc will depend on your postgres version. mine is 10 > for editing, i just use: sudo nano postgresql.conf Install rubyrep gem locally and run Go to rubyrep.org There are 2 options: standard ruby or jruby. I will of course go with standard ruby since ruby is installed in my local ubuntu and my ubuntu vps. It doesn't say so, you should create a Gemfile. create a new directory $ mkdir pg_replication cd pg_replication nano Gemfile gem 'pg', '~> 0.20.0' gem 'rubyrep' bundle install nano myrubyrep.conf RR::Initializer::run do |config| config.left = { :adapter => 'postgresql', # or 'mysql' :database => 'SCOTT', :username => 'scott', :password => 'tiger', :host => '172.16.1.1' } config.right = { :adapter => 'postgresql', :database => 'SCOTT', :username => 'scott', :password => 'tiger', :host => '172.16.1.2' } config.include_tables /./ end bundle exec rubyrep scan -c myrubyrep.conf bundle exec rubyrep sync -c myrubyrep.conf bundle exec rubyrep replicate -c myrubyrep.conf > you can name your directory anything you want > the Gemfile keeps you the the verions of pg gem that is compatible with rubyrep > without the Gemfile, you might get depreciated command errors > afaik, version 0.20.x is the latest that would work > just `bundle` will probably work too > you don't have to use *nano*, vim or any other text editor should work > to make sure the Gemfile is enforced we add *bundle exec* to the rubyrep commands > after running *scan*, you should see the number of unsynced rows per matched table in the two databases > after running *sync*, you should see the number or rows synced > you can run *scan* again, this should give you 0 rows unsynced > once you run replicate, it doesn't stop until the process is manually killed or the local computer is shut. References http://www.rubyrep.org/ https://github.com/launchschool/sql_course_data/blob/master/sql-and-relational-databases/introduction-to-the-course/read-the-launch-school-sql-book/ls_burger.sql https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands https://www.digitalocean.com/community/questions/remote-access-to-postgresql-with-pgadmin https://digitaloceancode.com/remote-access-to-a-postgresql-database-digitalocean/","title":"Database replication"},{"location":"Database%20replication/#database-replication","text":"Careful note: I had set this up and the triggers kept putting my single-core VPS to 100% utilization May this solution is best for multi-core or dedicated VPS's So, you have postgre installed locallly and a in a VPS, both running Ubuntu 18.04. Here's what to do and what not to do in order to have a database replication between those two. > this should work with mysql databases too. haven't tried though. > VPS like linode or digital ocean or AWS. We'll go roughly through the following steps 1. create a database and create tables locally 2. create a database of the same name and tables in the VPS 3. install rubyrep locally 4. create a rubyrep.conf file 5. scan the databases for differences 6. sync the databases manually 7. start the replication 8. test by inserting records in the local and viewing them in the VPS 9. test by inserting records in the VPS and viewing them locally > it's important that the tables are already set up in both databases > it's possible to map local tables to vps tables manually if they have different names > The rubyrep.conf file can be named anything, e.g. myrubyrep.conf","title":"Database replication"},{"location":"Database%20replication/#create-a-database-locally","text":"I'm using Ubuntu 18.04 and am practicing working with psql on the commandline. You can use whatever method is applicable with you. $ sudo -u postgres psql =# CREATE DATABASE ls_burgers =# \\c ls_burgers =# CREATE TABLE orders ( id integer, customer_name text, burger text, side text, drink text ); =# INSERT INTO orders VALUES (1, 'Todd Perez', 'LS Burger', 'Fries', 'Lemonade'); INSERT INTO orders VALUES (2, 'Florence Jordan', 'LS Cheeseburger', 'Fries', 'Chocolate Shake'); INSERT INTO orders VALUES (3, 'Robin Barnes', 'LS Burger', 'Onion Rings', 'Vanilla Shake'); INSERT INTO orders VALUES (4, 'Joyce Silva', 'LS Double Deluxe Burger', 'Fries', 'Chocolate Shake'); INSERT INTO orders VALUES (5, 'Joyce Silva', 'LS Chicken Burger', 'Onion Rings', 'Cola'); =# SELECT * FROM orders; \\q That should create your sample database with your sample table including some sample rows. It should also show (with the SELECT statment) that everything works.","title":"Create a database locally"},{"location":"Database%20replication/#create-a-database-on-the-vps","text":"This assumes that postgres is happily installed in your VPS as well. So we connect to the VPS using ssh and we'll just repeat what we did locally. $ sudo -u postgres psql =# CREATE DATABASE ls_burgers =# \\c ls_burgers =# CREATE TABLE orders ( id integer, customer_name text, burger text, side text, drink text ); =# INSERT INTO orders VALUES (1, 'Todd Perez', 'LS Burger', 'Fries', 'Lemonade'); INSERT INTO orders VALUES (2, 'Florence Jordan', 'LS Cheeseburger', 'Fries', 'Chocolate Shake'); INSERT INTO orders VALUES (3, 'Robin Barnes', 'LS Burger', 'Onion Rings', 'Vanilla Shake'); INSERT INTO orders VALUES (4, 'Joyce Silva', 'LS Double Deluxe Burger', 'Fries', 'Chocolate Shake'); INSERT INTO orders VALUES (5, 'Joyce Silva', 'LS Chicken Burger', 'Onion Rings', 'Cola'); =# SELECT * FROM orders; \\q Then we setup the server so that our local computer can access server postgres db. Here are the steps: enable the postgresql port `sudo ufw enable 5432/tcp` put a password on the default postgres account psql =# ALTER USER postgres PASSWORD 'myPassword'; ALTER ROLE go to /etc/postgresql/10/main open postgresql.conf for editing set to listen_addresses '*' to allow postgresql to listen to any ip address open pg_hba.conf set to host allow allow 0.0.0.0/0 md5 > i think just enabling 5432 would work as well > we can leave the password empty, but if we do, we can't use *md5* in pg_hba.conf > instead *md5*, we'll have to use *trust* > this makes things even less secure > the folder in etc will depend on your postgres version. mine is 10 > for editing, i just use: sudo nano postgresql.conf","title":"Create a database on the VPS"},{"location":"Database%20replication/#install-rubyrep-gem-locally-and-run","text":"Go to rubyrep.org There are 2 options: standard ruby or jruby. I will of course go with standard ruby since ruby is installed in my local ubuntu and my ubuntu vps. It doesn't say so, you should create a Gemfile. create a new directory $ mkdir pg_replication cd pg_replication nano Gemfile gem 'pg', '~> 0.20.0' gem 'rubyrep' bundle install nano myrubyrep.conf RR::Initializer::run do |config| config.left = { :adapter => 'postgresql', # or 'mysql' :database => 'SCOTT', :username => 'scott', :password => 'tiger', :host => '172.16.1.1' } config.right = { :adapter => 'postgresql', :database => 'SCOTT', :username => 'scott', :password => 'tiger', :host => '172.16.1.2' } config.include_tables /./ end bundle exec rubyrep scan -c myrubyrep.conf bundle exec rubyrep sync -c myrubyrep.conf bundle exec rubyrep replicate -c myrubyrep.conf > you can name your directory anything you want > the Gemfile keeps you the the verions of pg gem that is compatible with rubyrep > without the Gemfile, you might get depreciated command errors > afaik, version 0.20.x is the latest that would work > just `bundle` will probably work too > you don't have to use *nano*, vim or any other text editor should work > to make sure the Gemfile is enforced we add *bundle exec* to the rubyrep commands > after running *scan*, you should see the number of unsynced rows per matched table in the two databases > after running *sync*, you should see the number or rows synced > you can run *scan* again, this should give you 0 rows unsynced > once you run replicate, it doesn't stop until the process is manually killed or the local computer is shut.","title":"Install rubyrep gem locally and run"},{"location":"Database%20replication/#references","text":"http://www.rubyrep.org/ https://github.com/launchschool/sql_course_data/blob/master/sql-and-relational-databases/introduction-to-the-course/read-the-launch-school-sql-book/ls_burger.sql https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands https://www.digitalocean.com/community/questions/remote-access-to-postgresql-with-pgadmin https://digitaloceancode.com/remote-access-to-a-postgresql-database-digitalocean/","title":"References"},{"location":"Easter%20Bonus%20points/","text":"Easter Bonus points 2 points for the after party b2025lbencarnacion@pshs.edu.ph b2025bgbsison@pshs.edu.ph b2025hyramos@pshs.edu.ph b2025rvbjanapin@pshs.edu.ph b2025akgbermudo@pshs.edu.ph b2025bcjcatli@pshs.edu.ph b2025mmcbaniqued@pshs.edu.ph Encarnacion, Lior Sison, Bree Genzoe Ramos, Hannah Janapin, Raphael Vitto Bermudo, Aryenne Kiersten CATLI, Bob Christian Baniqued, Marky Miguel Contest winner Hannah Ramos - 3 First to achieve a correct answer Vitto Janapin First to complete each problem Hannah Ramos - 4 Vitto Janapin - 4 ## Joining bonus Hannah Ramos Vitto Janapin","title":"Easter Bonus points"},{"location":"Easter%20Bonus%20points/#easter-bonus-points","text":"","title":"Easter Bonus points"},{"location":"Easter%20Bonus%20points/#2-points-for-the-after-party","text":"b2025lbencarnacion@pshs.edu.ph b2025bgbsison@pshs.edu.ph b2025hyramos@pshs.edu.ph b2025rvbjanapin@pshs.edu.ph b2025akgbermudo@pshs.edu.ph b2025bcjcatli@pshs.edu.ph b2025mmcbaniqued@pshs.edu.ph Encarnacion, Lior Sison, Bree Genzoe Ramos, Hannah Janapin, Raphael Vitto Bermudo, Aryenne Kiersten CATLI, Bob Christian Baniqued, Marky Miguel","title":"2 points for the after party"},{"location":"Easter%20Bonus%20points/#contest-winner","text":"Hannah Ramos - 3","title":"Contest winner"},{"location":"Easter%20Bonus%20points/#first-to-achieve-a-correct-answer","text":"Vitto Janapin","title":"First to achieve a correct answer"},{"location":"Easter%20Bonus%20points/#first-to-complete-each-problem","text":"Hannah Ramos - 4 Vitto Janapin - 4 ## Joining bonus Hannah Ramos Vitto Janapin","title":"First to complete each problem"},{"location":"Equipment%20Outlay/","text":"Equipment Outlay Azlek Owen Tan aobtan@pshs.edu.ph Wed, Mar 11, 2020, 2:50 PM to Carlo, Edge, Edge, Edge, me Good afternoon po, Eto po yung tentative list of ICT equipments for 2020. Pakicheck nalang po yung mga priority this year kasi nagexceed na po tayo ng budget amounting to Php7,697,000.00. Kailangan po natin magbawas para isama nalang sa list of equipment for savings sa last quarter or next year budget. Pa-advise nalng po ng changes. Thank you. -- AZLEK OWEN B. TAN Administrative Officer V Procurement Unit Philippine Science High School - Main Campus Telefax: 7500-1448","title":"Equipment Outlay"},{"location":"Equipment%20Outlay/#equipment-outlay","text":"Azlek Owen Tan aobtan@pshs.edu.ph Wed, Mar 11, 2020, 2:50 PM to Carlo, Edge, Edge, Edge, me Good afternoon po, Eto po yung tentative list of ICT equipments for 2020. Pakicheck nalang po yung mga priority this year kasi nagexceed na po tayo ng budget amounting to Php7,697,000.00. Kailangan po natin magbawas para isama nalang sa list of equipment for savings sa last quarter or next year budget. Pa-advise nalng po ng changes. Thank you. -- AZLEK OWEN B. TAN Administrative Officer V Procurement Unit Philippine Science High School - Main Campus Telefax: 7500-1448","title":"Equipment Outlay"},{"location":"Feature%20Creation/","text":"Feature Creation This document talks about how we add features to the UPPFI Laravel Portal. Considerations Business Case Feasiblity Priority How will we test Github Example For the case of the Online Loan Application Feature: The business case is that an Online Loans Application is critical for the New Normal Scenario The IT of Provident has determined it's feasibility beforehand The recent ECQ made this feature a priority We shall test it via subject matter experts (SMEs) IT (Roy and Regi) Operations (May) Management (James) Current Feature Workflow Regi is assigned a laptop and he creates the feature using laravel code using the laptop. He then uploads this code into the Staging Server. The staging server uses an old copy of the database. I.T. gives the SME testers credentials they can use to test the new software. The SME testers use the staging server to try out things. The SME's and the IT group iterate until they're satisfied. The code is placed into the Production Server. A github branch is made for the feature. Target Workflow I.T. is assigned a laptop and he creates the feature using laravel code using the laptop. He then uploads this code into the Staging Server. A feature branch is created in Github with the staging. The staging server uses an old copy of the database. I.T. gives the SME testers credentials they can use to test the new software. The SME testers use the staging server to try out things. I.T. conducts a code review on the diffs of the files used for the new feature to check that the minimum amount of impact to other code is achieved. The SME's and the IT group iterate until they're satisfied. The code is placed into the Production Server. The Github feature branch is updated. The feature branch is pulled into the master The master is tagged with a version number/ text","title":"Feature Creation"},{"location":"Feature%20Creation/#feature-creation","text":"This document talks about how we add features to the UPPFI Laravel Portal.","title":"Feature Creation"},{"location":"Feature%20Creation/#considerations","text":"Business Case Feasiblity Priority How will we test Github","title":"Considerations"},{"location":"Feature%20Creation/#example","text":"For the case of the Online Loan Application Feature: The business case is that an Online Loans Application is critical for the New Normal Scenario The IT of Provident has determined it's feasibility beforehand The recent ECQ made this feature a priority We shall test it via subject matter experts (SMEs) IT (Roy and Regi) Operations (May) Management (James)","title":"Example"},{"location":"Feature%20Creation/#current-feature-workflow","text":"Regi is assigned a laptop and he creates the feature using laravel code using the laptop. He then uploads this code into the Staging Server. The staging server uses an old copy of the database. I.T. gives the SME testers credentials they can use to test the new software. The SME testers use the staging server to try out things. The SME's and the IT group iterate until they're satisfied. The code is placed into the Production Server. A github branch is made for the feature.","title":"Current Feature Workflow"},{"location":"Feature%20Creation/#target-workflow","text":"I.T. is assigned a laptop and he creates the feature using laravel code using the laptop. He then uploads this code into the Staging Server. A feature branch is created in Github with the staging. The staging server uses an old copy of the database. I.T. gives the SME testers credentials they can use to test the new software. The SME testers use the staging server to try out things. I.T. conducts a code review on the diffs of the files used for the new feature to check that the minimum amount of impact to other code is achieved. The SME's and the IT group iterate until they're satisfied. The code is placed into the Production Server. The Github feature branch is updated. The feature branch is pulled into the master The master is tagged with a version number/ text","title":"Target Workflow"},{"location":"Fiber%20Project/","text":"Fiber Project CASE NUMBER CAS-07733-L3X6B4 CUSTOMER INFORMATION Company Name : PSHS \u2013 QC Address : Agham road, Quezon City AGENDA/ACTIVITY DESCRIPTION Date of Activity : 05/05/2021 Support Type : Pre-sales Details of meeting Supply and installation of 6core outdoor FOC from MIS Server room to Admin Server room (2nd floor) Existing underground conduit to be used from MIS to Admin building Existing indoor conduit (pvc pipes) to be used from admin entrance to Server room (2nd floor) Supply and installation of 6core outdoor FOC from MIS server room to Gymnasium ground floor To layout a new underground conduit To submit an Underground fiber layout Supply and installation of fiber patchpanels, fiber patchcords, connectors Supply and installation of 42U cabinet at Admin building and 3ft data cabinet at gymnasium Termination of all cat6 cables in the cubicles of the admin building RECOMMENDATION PENDING List of files to be provided by the client: Termination of cat6 scope Complete Floorplan of admin building REMARKS - ASSIGNED ENGINEER/S Christian Guevarra Ponciano Malubay Pictures","title":"Fiber Project"},{"location":"Fiber%20Project/#fiber-project","text":"CASE NUMBER CAS-07733-L3X6B4 CUSTOMER INFORMATION Company Name : PSHS \u2013 QC Address : Agham road, Quezon City AGENDA/ACTIVITY DESCRIPTION Date of Activity : 05/05/2021 Support Type : Pre-sales Details of meeting Supply and installation of 6core outdoor FOC from MIS Server room to Admin Server room (2nd floor) Existing underground conduit to be used from MIS to Admin building Existing indoor conduit (pvc pipes) to be used from admin entrance to Server room (2nd floor) Supply and installation of 6core outdoor FOC from MIS server room to Gymnasium ground floor To layout a new underground conduit To submit an Underground fiber layout Supply and installation of fiber patchpanels, fiber patchcords, connectors Supply and installation of 42U cabinet at Admin building and 3ft data cabinet at gymnasium Termination of all cat6 cables in the cubicles of the admin building RECOMMENDATION PENDING List of files to be provided by the client: Termination of cat6 scope Complete Floorplan of admin building REMARKS - ASSIGNED ENGINEER/S Christian Guevarra Ponciano Malubay","title":"Fiber Project"},{"location":"Fiber%20Project/#pictures","text":"","title":"Pictures"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/","text":"Github and Rails on Replit 2021-07-02T09.41.07 4.1 GitHub Rails developers use GitHub for collaboration and remote backup of projects. For this tutorial, I suggest you get a free personal GitHub account if you don\u2019t already have one. As a developer, your GitHub account establishes your reputation in the open source community. If you\u2019re seeking a job as a developer, employers will look at your GitHub account. When you work with other developers, they may check to see what you\u2019ve worked on recently. Don\u2019t be reluctant to set up a GitHub account, even if you\u2019re a beginner. It shows you are serious about learning Rails. You\u2019ll be asked to provide a username. This can be a nickname or short version of your real name (for example, your Twitter username). You\u2019ll be asked to provide an email address. It\u2019s very important that you use the same email address for your GitHub account that you use to configure Git locally (there will be more about configuring Git later). If you create a Heroku account to deploy and host your Rails applications, you should use the same email address. After you create your GitHub account, log in and look for the button \u201cEdit Your Profile.\u201d Take a few minutes to add some public information to your account. It is really important to provide your real name and a public email address. Displaying your real name on your GitHub account makes it easy for people to associate you with your work when they meet you in real life, for example at a meetup, a hackathon, or a conference. Providing a public email address makes it possible for other developers to reach you if you ask questions or submit issues. If you can, provide a website address (even just your Twitter or Facebook page). In general, you won\u2019t be exposed to stalkers or spammers (except some recruiters) if you are open about yourself on GitHub. Later I\u2019ll show you how to set up and use Git and GitHub. Chapter 5 Get Started Before you can start building, you\u2019ll need to install Ruby (the language) and Rails (the gem). I\u2019ll provide links to installation instructions that are up to date. Even if you\u2019ve already installed Rails, please review the instructions to make sure your development environment is set up correctly. Other books and tutorials often skip important details. 5.1 Text Editor and Terminal Applications I\u2019ve explained how to use a text editor and terminal application in Book One. If you haven\u2019t used the Unix command line before, refer to Book One for an introduction. I recommend the Atom text editor but you may use Sublime Text or any others that provide syntax highlighting. Refer to Book One for important instructions about setting up the text editor so you can open a file from the command line. 5.2 Copying and Pasting Code In the next chapter you\u2019ll begin building a Rails application. You need to get the code from this tutorial into your computer. You could just read and imagine, but really, building a working application is the only way to learn. The most obvious way is to copy and paste from this tutorial into your text editor, assuming you are reading this on your computer (not a tablet or printed pages). It\u2019s a bit tedious and error-prone but you\u2019ll have a good opportunity to examine the code closely. Some students like to type in the code, character by character. If you have patience, it\u2019s a worthwhile approach because you\u2019ll become more familiar with the code than by copying and pasting. Don\u2019t feel shy about copying code; it\u2019s how you will learn. Working programmers spend a lot of time copying code from others. At first, you will copy a lot of code. As you gain proficiency, you will copy code and adapt it, more extensively as you gain confidence and skill. Only when you\u2019ve been working full-time as a coder for months or years will you find yourself writing code from scratch; even then, when you encounter new problems, you will still look for code examples to copy and adapt. Box 5.1. Warning About the PDF and Kindle Versions This book is available in several formats, including online (HTML), PDF, ePub (Apple iBooks), and mobi (Kindle) versions. Use the online edition of the book if you can. With the online edition, you\u2019ll be able to copy and paste the code without any problem. The ePub version (using Apple iBooks) also preserves line breaks and indentation when copying code. Copying without line breaks will cause code errors. You\u2019ll lose line breaks when copying code with the following versions: PDF version on macOS using the Preview application mobi (Kindle) If you use Adobe Acrobat you\u2019ll be able to copy the line breaks (though indenting is lost). You can also open a PDF file in Chrome or Safari web browsers and copy code with line breaks. With the mobi (Kindle) version, you\u2019ll have to carefully reformat the code after pasting into your text editor. Indentation makes code more readable, so try to preserve the indentation you see in the code samples. In YAML files (with the file extension .yml ), indentation is required (your application will break without it). 5.3 Your Computer You can develop web applications with Rails on computers running Mac OS X, Linux, or Microsoft Windows operating systems. Most Rails developers use macOS or Linux because the underlying Unix operating system has long been the basis for open source programming. Later in this chapter, I\u2019ll give links to installation instructions for macOS and Linux. For Windows users, I have to say, installing Rails on Windows is frustrating and painful. Readers and workshop students often tell me that they\u2019ve given up on learning Rails because installation of Ruby on Windows is difficult and introduces bugs or creates configuration issues. Even when you succeed in getting Rails to run on Windows, you will encounter gems you cannot install. For these reasons, I urge you to use Cloud9, a browser-based development environment, on your Windows laptop. 5.3.1 Hosted Computing If you are using Windows, or have difficulty installing Ruby on your computer, try using Cloud9. Cloud9 provides a hosted development environment. That means you set up an account and then access a remote computer from your web browser. The Cloud9 service is free for ordinary use. There is no credit card required to set up an account. You\u2019ll only be charged if you add extra computer memory or disk space (which you don\u2019t need for ordinary Rails development). The Cloud9 service gives you everything you need for Rails development, including a Unix shell with Ruby pre-installed, plus a browser-based file manager and text editor. Any device that runs a web browser will give you access to Cloud9, including a tablet or smartphone, though you need a broadband connection, a sizable screen, and a keyboard to be productive. 5.4 Try the Terminal Look for the Terminal application in the following places: MacOS: Applications - Utilities - Terminal Linux: Applications - Accessories - Terminal Windows: Taskbar Start Button - Command Prompt On the Mac, search for the macOS Terminal application by pressing the Command-Spacebar combination (which Apple calls \u201cSpotlight Search\u201d) and searching for \u201cTerminal.\u201d The magnifying glass in the upper right corner of your screen will also launch \u201cSpotlight Search.\u201d Or look in the Applications/Utilities/ folder for the Terminal application. You\u2019ll need to click the name of the application to launch the Terminal. For Linux or Windows, The Command Line Crash Course explains how to launch a terminal application . Launch your terminal application now. Try out the terminal application by entering a shell command. $ whoami Don\u2019t type the $ character. The $ character is a cue that you should enter a shell command. This is a longtime convention that indicates you should enter a command in the terminal application or console. The Unix shell command whoami returns your username. Don\u2019t type the $ prompt. You might see: command not found: $ which indicates you typed the $ character by mistake. If you are new to programming, using a text editor and the shell will seem primitive compared to the complexity and sophistication of Microsoft Word or Photoshop. Software developers edit files with simple text editors and run programs in the shell. That\u2019s all we do. We have to remember the commands we need (or consult a cheatsheet) because there are no graphical menus or toolbars. Yet with nothing more than a text editor and the command line interface, programmers have created everything that you use on your computer. 5.5 Installing Ruby Your first challenge in learning Rails is installing Ruby on your computer. Frankly, this can be the most difficult step in learning Rails because no tutorial can sort out the specific configuration of your computer. Get over this hump and everything else becomes easy. The focus of this book is learning Rails, not installing Ruby, so to keep the book short and readable, I\u2019m going to give you links to articles that will help you install Ruby. You\u2019ll spend at least an hour installing Ruby and Rails, so be sure to allow enough time for the task. 5.5.1 MacOS See this article for macOS installation instructions: Install Ruby on Rails - MacOS 5.5.2 Ubuntu Linux See this article for Ubuntu installation instructions: Install Ruby on Rails - Ubuntu 5.5.3 Hosted Computing Cloud9 is a browser-based development environment. Cloud9 is free for small projects. If you have a fast broadband connection to the Internet, this is your best choice for developing Rails on Windows. And it is a good option if you have any trouble installing Ruby on Mac or Linux because the Cloud9 hosted environment provides everything you need, including a Unix shell with Ruby and RVM pre-installed, plus a browser-based file manager and text editor. Using a hosted development environment is unconventional but leading developers do so and it may be the wave of the future. See this article for Cloud9 installation instructions: Install Ruby on Rails - Cloud9 The article shows how to get started with Cloud9. If you use Cloud9, be sure to pick the \u201cBlank\u201d template for your workspace, not the \u201cRuby\u201d or \u201cRuby on Rails\u201d templates that provide a prebuilt Rails application. We\u2019re building from scratch in this tutorial. 5.5.4 Windows Here are your choices for Windows: Use the Cloud9 hosted development environment Install the Railsbridge Virtual Machine Use RubyInstaller for Windows Cloud9 is ideal if you have a fast Internet connection. If not, download the Railsbridge Virtual Machine to create a virtual Linux computer using Vagrant . Other tutorials may suggest using RailsInstaller , but it will not provide an up-to-date version of Ruby or Rails. Also, RVM does not run on Windows. 5.6 Your Workspace Take a moment to think about where on your computer you\u2019ll do your work and store your files. You may have a documents/ folder. You could make a similar folder named projects/ or code/ or workspace/ for your programming projects. Use the Unix mkdir command to create a folder or create it with your file browser. If you haven\u2019t done so already, make a folder to contain your programming projects. You don\u2019t need to do this if you already created a workspace/ folder in the Unix chapter in Book One. $ cd ~ $ pwd /Users/danielkehoe $ mkdir workspace $ cd workspace In this tutorial, the terms \u201cfolders\u201d and \u201cdirectories\u201d mean the same thing. Use the Unix cd command to change directories. When you enter the Unix command cd ~ , you\u2019ll move to your home (or \u201cuser\u201d) directory. The squiggly ~ \u201ctilde\u201d character is a Unix shortcut that indicates your home folder. The Unix pwd command shows the \u201cpresent working directory,\u201d where you are. The Unix mkdir command creates an empty folder and we move into it with the Unix cd command. 5.6.1 Video Option Watch the four minute video if you have subscribed: UNIX Commands Basics 5.7 Understanding Version Numbers Rails follows a convention named semantic versioning : The first number denotes a major version (Rails 4) The second number denotes a minor release (Rails 4.2) The third number denotes a patch level (Rails 4.2.1) A major release includes new features, including changes which break backward compatibility. For example, switching from Rails 3.2 to Rails 4.0 required a significant rewrite of every Rails application. A minor release introduces new features but doesn\u2019t break anything. For example, Rails 3.2 added the asset pipeline, and Rails 4.2 added the Active Job feature for background processing. A patch release fixes bugs but doesn\u2019t introduce significant features. Usually this means you can change the version number in the Gemfile and run bundle update without making any other changes to your application. 5.8 Ruby and Rails Version Check Check that appropriate versions of Ruby and Rails are installed in your development environment. You\u2019ll need: The Ruby language (version 2.3 or newer) The Rails gem (version 5.1 or newer) Open your terminal application and enter: $ ruby -v You might see: ruby 2.4.1p0 (...) You\u2019ve got Ruby version 2.4.1, patch level \u201cp0\u201d (Ruby versions add an extra patch level to semantic versioning). If you\u2019ve got a newer version of Ruby, no problem; minor updates to Ruby don\u2019t affect Rails. Try: $ rails -v You might see: Rails 5.1.2 If you see: Rails is not currently installed on this system. You are not using an RVM gemset where the Rails gem is installed. Go to the Installing Rails instructions for your computer if you have not set up Rails. The next section explains more about RVM gemsets which may be all you need to find Rails. If you have Rails 4.2 or older versions, you must update to Rails 5.1. See the Installing Rails instructions for your computer. Versions such as 5.0.0.beta3 or 5.0.0.rc1 are beta versions or \u201crelease candidates.\u201d You can use a release candidate in the weeks before a final release becomes available. If you\u2019ve got Rails 5.1.3 or newer, that\u2019s fine. It means minor bugs have been fixed since this was written, but the book is still current. You can check for the current version of Rails here. Box 5.2. Rails 5.1 This edition of the book was prepared using Rails 5.1.2. The newest version of the book is listed on the README page of the learn-rails GitHub repository. 5.9 RVM I promised that this book would introduce you to the practices of professional Rails developers. One of the most important utilities you\u2019ll need in setting up a real-world Rails development environment is RVM, the Ruby Version Manager . RVM lets you switch between different versions of Ruby. Right now, that might not seem important, but as soon as a new version of Ruby is released, you\u2019ll need to upgrade, and it is best to be ready by installing the current version of Ruby with RVM, so you can easily add a new version of Ruby later, and still switch back to older versions as needed. RVM also helps you manage your collections of gems, by letting you create multiple gemsets . Each gemset is the collection of gems you need for a specific project. Rails changes frequently; with RVM, you can install a specific version of Rails in a project gemset, along with all the gems you need for the project. When a new version of Rails is released, you can create a new gemset with the new Rails version when you start a new project. Your old project will still have the version of Rails it needs in its own gemset. If you\u2019ve followed the instructions in the article Installing Rails and installed RVM, you\u2019ll be ready to handle multiple versions of Ruby, and multiple versions of Rails. That\u2019s as it should be. Most professional Rails developers have more than one version of Ruby or Rails, and RVM makes it easy to switch. RVM will show you a list of available Ruby versions: $ rvm list You can see a list of available gemsets associated with the current Ruby version: $ rvm gemset list You will see an arrow that shows which gemset is active. You will see a global gemset as well as any others you have created, such as a gemset for Rails5.0 . Here\u2019s how to switch between gemsets: $ rvm gemset use global And switch back to another: $ rvm gemset use default After you\u2019ve worked on a few Rails applications, you\u2019ll see several project-specific gemsets if you are using RVM in the way most developers do. RVM is not the only utility you can use to manage multiple Ruby versions. Some developers like Chruby or rbenv . Don\u2019t be worried if you hear debates about RVM versus Chruby or rbenv; developers love to compare the merits of their tools. RVM is popular, well-supported, and an excellent utility to help a developer install Ruby and manage gemsets; that\u2019s why we use it. 5.10 Project-Specific Gemset For our learn-rails application, we\u2019ll create a project-specific gemset using RVM. We\u2019ll give the gemset the same name as our application. By creating a gemset for our tutorial application, we\u2019ll isolate the current version of Rails and the gems we need for this project. Whether you use RVM or another Ruby version manager, this will introduce you to the idea of \u201csandboxing\u201d (isolating) your development environment so you can avoid conflicts among projects. After we create the project-specific gemset, we\u2019ll install the Rails gem into the gemset. Enter these commands: $ rvm use [email protected] --create $ gem install rails This will install the newest version of Rails 5.0. It takes a few minutes to automatically install all the gems that are needed for Rails. It\u2019s absolutely necessary to create a gemset and install Rails so we can move on to creating the application in the next chapter. If you have trouble at this point, refer to the article Installing Rails or the RVM website . Linux users may need to check instructions for Integrating RVM . Let\u2019s make sure Rails is ready to run. Open a terminal and type: $ rails -v You should see the message \u201cRails 5.1.2\u201d (or something similar). Now let\u2019s explore the rails new command and get started building the tutorial application. Chapter 6 Create the Application In this chapter, we\u2019ll begin building the tutorial application. But first, let\u2019s consider the options you have for starter applications. 6.1 Starter Applications Rails provides a framework ; that is, a software library that provides utilities, conventions, and organizing principles to allow us to build complex web applications. Without a framework, we\u2019d have to code everything from scratch. Rails gives us the basics we need for many websites. Still, the framework doesn\u2019t give us all the features we need for many common types of websites. For example, we might want users to register for an account and log in to access the website (\u201cuser management and authentication\u201d). We might want to restrict portions of our website to just administrators (\u201cauthorization\u201d). We also might want to add gems that enhance Rails to aid development (gems for testing, for example) or improve the look and feel of our application (the Bootstrap or Foundation front-end frameworks). Developers often mix and match components to make a customized Rails stack. Developers often use a starter application instead of assembling an application from scratch. You might call this a \u201ctemplate\u201d but we use that term to refer to the view files that combine HTML with Ruby code to generate web pages. Most experienced developers have one or more starter applications that save time when beginning a new project. The RailsApps project was launched to provide open source starter applications so developers could collaborate on their starter applications and avoid duplicated effort. After you gain some skill with this tutorial, you might use the RailsApps starter apps to instantly generate a Rails application with features like authentication, authorization, and an attractive design. At the end of this book, you\u2019ll learn about Rails Composer , a tool for building starter applications. For now, we\u2019ll begin with the Rails default starter application. 6.2 Workspace Folder and RVM Gemset Are you in the folder named workspace/ you created earlier? $ pwd /Users/danielkehoe/workspace/ If you\u2019re not in your workspace folder, enter a Unix command to move to the folder: $ cd ~/workspace We already created a project-specific gemset using RVM. Make sure it\u2019s ready to use: $ rvm use [email protected] $ rvm gemset list gemsets for ruby-2.4.1... (default) global \\=> learn-rails You should see an arrow pointing to the learn-rails gemset. If not, go back to the previous \u201cGet Started\u201d chapter. 6.3 Use \u201cRails New\u201d to Build the Application Let\u2019s go! We have selected a gemset, we have Rails installed, and we\u2019re in our workspace/ folder. Let\u2019s build a Rails application! To create the Rails default starter application, type: $ rails new learn-rails This will create a new Rails application named \u201clearn-rails.\u201d It takes a few minutes when the build script runs bundle install . Don\u2019t worry; just give it enough time to finish (but no more than five minutes even if your Internet connection is very slow). In the future, you can give your application a different name. For this tutorial, it is VERY IMPORTANT that you use the name \u201clearn-rails.\u201d You\u2019ll be copying code that assumes the name is \u201clearn-rails;\u201d it will save you trouble to use this name. The rails new command will create ten folders and 93 files. It will install 62 gems into your gemset. After you create the application, switch to its folder to continue work directly in the application: $ cd learn-rails This is your project directory. It is also called the application root directory. You\u2019ll spend all your time inside this folder. Box 6.1. Spring After creating a new Rails application, you may see a message to run a command: $ bundle exec spring binstub --all The command sets up Spring. Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don\u2019t need to stop and restart it when you make changes. After you change into the project directory, you can run the command. Type the ls command to show the folders and files in a directory. Soon we\u2019ll learn more about each of these folders and files. $ ls Gemfile Rakefile config lib test Gemfile.lock app config.ru log tmp README.md bin db public vendor 6.4 Make a Sticky Gemset RVM gives us a convenient technique to make sure we are always using the correct gemset when we enter the project directory. It will create hidden files to designate the correct Ruby version and project-specific gemset. Enter this command to create the hidden files: $ rvm use [email protected] --ruby-version The \u2013ruby-version argument creates two files, .ruby-version and .ruby-gemset , that set RVM every time we cd to the project directory. Without these two hidden files, you\u2019d need to remember to enter rvm use [[email protected]](/cdn-cgi/l/email-protection) every time you start work on your project after closing the console. If you see \u201cERROR: Gemset \u2018learn-rails\u2019 does not exist\u201d, perhaps you overlooked an earlier step in the Project-Specific Gemset section (in the previous chapter) where we created the learn-rails gemset. After creating the two hidden files, check if they are there: $ ls -1pa ./ ../ .gitignore .ruby-gemset .ruby-version Gemfile Gemfile.lock README.md Rakefile app/ bin/ config/ config.ru db/ lib/ log/ public/ test/ tmp/ vendor/ The \u201ca\u201d flag in the Unix ls -1pa command displays hidden files. Each hidden file is listed with a dot (period or full stop) at the beginning of the filename. You\u2019ll notice .ruby-gemset and .ruby-version . You\u2019ll also see two \u201cspecial files\u201d which are not files at all: ./ - an alias that represents the current directory ../ - an alias that represents the parent directory Box 6.2. Hidden Files in Cloud9 If you\u2019re using Cloud9, you must change preferences to see hidden files. In the window that contains the file list, there is a gear icon (dark in color and difficult to see). Clicking the gear option will give you options: Show Root File System Show Home in Favorites Show Hidden Files You must select all three options to see the hidden files. That\u2019s a brief diversion into Unix; let\u2019s try running our new Rails application. 6.5 Test the Application You\u2019ve created a simple default web application. It\u2019s ready to run. 6.5.1 Launching the Web Server You can launch the application by entering the command: $ rails server Alternatively, to save typing, you can abbreviate the rails server command: $ rails s If you are using the Cloud9 hosted service, you\u2019ll need to enter bin/rails server -p $PORT -b $IP . You\u2019ll see: \\=> Booting Puma \\=> Rails 5.1.2 application starting in development on http://localhost:3000 \\=> Run `rails server -h` for more startup options \\=> Ctrl-C to shutdown server Puma starting in single mode... * Version 3.4.0 (ruby 2.4.1-p0), codename: Owl Bowl Brawl * Min threads: 5, max threads: 5 * Environment: development * Listening on tcp://localhost:3000 Use Ctrl-C to stop The rails server command launches the Puma web server that is provided with Rails. 6.5.2 Errors for Linux Users If you enter the command rails server and get an error message: ... Could not find a JavaScript runtime ... You need to install Node.js. For help, see Install Ruby on Rails - Ubuntu . 6.5.3 Viewing in the Web Browser To see your application in action, open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see the Rails default information page. Box 6.3. Viewing on a Hosted Platform It is easy to see your web application in action on your local computer. If you are using a hosted service such as Cloud9, it is a little more complicated. If you are using Cloud9 , click the \u201cPreview\u201d link in the IDE menu (at the top of the page). There is a \u201cRun\u201d link, too, but it doesn\u2019t work if you have created your Rails application in a folder within the workspace/ folder. You can also open a browser tab or window and enter the URL for the application, as hosted by Cloud9. When you launch the Rails server, Cloud9 displays a helpful message showing the URL where you can view your application. 6.5.4 Watch Log Messages Notice that messages scroll in the console window when your browser requests the Rails default web page. Open the file log/development.log and you\u2019ll see the same messages. When a browser sends requests to the Puma web server, diagnostic messages are written to the console and to the log/development.log file. These diagnostic messages are an important tool for troubleshooting when you are developing. 6.5.5 Multiple Terminal Windows You can keep more than one terminal window open. For convenience, you may want to keep a terminal window open for running the web server and watching diagnostic messages. In the Terminal or iTerm2 applications, Command-t opens additional console sessions in new \u201ctabs.\u201d Developers typically open more than one terminal window when they work on a Rails application. They\u2019ll start the server with the rails server command in one window (or tab) and watch the log messages. In another window (or tab), they\u2019ll enter commands as they build the application. They might create folders with a Unix command, run generators, or try out code with the rails console command (you\u2019ll learn about the rails console command in the \u201cTroubleshoot\u201d chapter). To some people, the text editor and the terminal window look very similar. When you work on a file in a text editor, you make changes to one file, in one place. The terminal window is very different. Your computer can run multiple programs at once. You can open multiple terminal windows. In each terminal window, you can use the command line to launch a different program. Each program you start in a terminal window is a separate process and multiple processes can run simultaneously. You can end a process by pressing Control-c (in most cases), Control-d (in some cases), or closing the terminal window (almost always). From this perspective, a terminal window is a tool you use to launch processes and your computer is a machine that runs processes. 6.5.6 Stop the Web Server You can stop the server with Control-c to return to the command prompt. When we say Control-c, we mean hold down the Control key as you press the letter \u201cc\u201d. Most of the time you\u2019ll keep the web server running as you add or edit files in your project. Changes will automatically appear when you refresh the browser or request a new page. There is a tricky exception, however. If you make changes to the Gemfile, or changes to configuration files, the web server must be shut down and relaunched for changes to be activated. As a rule of thumb, files that produce web pages can be changed without a restart. This includes any file in the app/ folder which creates web pages, as well as the config/routes.rb file. Changes to files that create the environment for the web application, such as gems or configuration files, and are loaded at web server launch, won\u2019t be seen until the web server is restarted. 6.6 Get Organized for Efficiency Before we learn about the Rails directory structure, take a minute to organize your screen real estate. During development, you\u2019ll jump between the console in a terminal application, your text editor, and a web browser window. As a Rails developer, you\u2019ll do this constantly, so think about how you can do this efficiently. Multiple screens make it easy, but even on a laptop you can get organized for efficiency. Figure 6.1: Getting organized for efficiency. Here\u2019s some ideas. Open a window in the terminal application, place it on the left side of your screen, and stretch it to the maximum vertical height of your screen. Open multiple tabs in your terminal application. Keep one tabbed window open for entering shell commands (like cd or ls ) and another terminal window open for running the rails server command and viewing the log output. Place your text editor window next to the terminal window and stretch it to full vertical height. If you are using Atom or Sublime Text, you can open two editor panels side-by-side. Some developers find it helpful to leave the file browser panel open to navigate the project directory; others hide the file browser panel to save space. If you have enough screen space, leave your web browser open and place it next to your text editor. If your screen space is limited, you may have to overlap the web browser with the text editor, but position your web browser window so you can bring it to the front with a single click. You\u2019ll need multiple tabs open in your web browser. Unless you like constant distraction, close Gmail, Facebook, Twitter, and Hacker News. Open tabs for http://localhost:3000/ , this tutorial, and additional references or documentation. On the Mac, there are window management utilities that reposition windows with just a click or keyboard command; I use Moom but you can find others if you search for \u201cmac window management utilities.\u201d This is just a guide; I\u2019m sure you can improve upon these suggestions.","title":"Github and Rails on Replit 2021 07 02T09.41.07"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#github-and-rails-on-replit-2021-07-02t094107","text":"","title":"Github and Rails on Replit 2021-07-02T09.41.07"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#41-github","text":"Rails developers use GitHub for collaboration and remote backup of projects. For this tutorial, I suggest you get a free personal GitHub account if you don\u2019t already have one. As a developer, your GitHub account establishes your reputation in the open source community. If you\u2019re seeking a job as a developer, employers will look at your GitHub account. When you work with other developers, they may check to see what you\u2019ve worked on recently. Don\u2019t be reluctant to set up a GitHub account, even if you\u2019re a beginner. It shows you are serious about learning Rails. You\u2019ll be asked to provide a username. This can be a nickname or short version of your real name (for example, your Twitter username). You\u2019ll be asked to provide an email address. It\u2019s very important that you use the same email address for your GitHub account that you use to configure Git locally (there will be more about configuring Git later). If you create a Heroku account to deploy and host your Rails applications, you should use the same email address. After you create your GitHub account, log in and look for the button \u201cEdit Your Profile.\u201d Take a few minutes to add some public information to your account. It is really important to provide your real name and a public email address. Displaying your real name on your GitHub account makes it easy for people to associate you with your work when they meet you in real life, for example at a meetup, a hackathon, or a conference. Providing a public email address makes it possible for other developers to reach you if you ask questions or submit issues. If you can, provide a website address (even just your Twitter or Facebook page). In general, you won\u2019t be exposed to stalkers or spammers (except some recruiters) if you are open about yourself on GitHub. Later I\u2019ll show you how to set up and use Git and GitHub.","title":"4.1 GitHub"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#chapter-5-get-started","text":"Before you can start building, you\u2019ll need to install Ruby (the language) and Rails (the gem). I\u2019ll provide links to installation instructions that are up to date. Even if you\u2019ve already installed Rails, please review the instructions to make sure your development environment is set up correctly. Other books and tutorials often skip important details.","title":"Chapter 5 Get Started"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#51-text-editor-and-terminal-applications","text":"I\u2019ve explained how to use a text editor and terminal application in Book One. If you haven\u2019t used the Unix command line before, refer to Book One for an introduction. I recommend the Atom text editor but you may use Sublime Text or any others that provide syntax highlighting. Refer to Book One for important instructions about setting up the text editor so you can open a file from the command line.","title":"5.1 Text Editor and Terminal Applications"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#52-copying-and-pasting-code","text":"In the next chapter you\u2019ll begin building a Rails application. You need to get the code from this tutorial into your computer. You could just read and imagine, but really, building a working application is the only way to learn. The most obvious way is to copy and paste from this tutorial into your text editor, assuming you are reading this on your computer (not a tablet or printed pages). It\u2019s a bit tedious and error-prone but you\u2019ll have a good opportunity to examine the code closely. Some students like to type in the code, character by character. If you have patience, it\u2019s a worthwhile approach because you\u2019ll become more familiar with the code than by copying and pasting. Don\u2019t feel shy about copying code; it\u2019s how you will learn. Working programmers spend a lot of time copying code from others. At first, you will copy a lot of code. As you gain proficiency, you will copy code and adapt it, more extensively as you gain confidence and skill. Only when you\u2019ve been working full-time as a coder for months or years will you find yourself writing code from scratch; even then, when you encounter new problems, you will still look for code examples to copy and adapt. Box 5.1. Warning About the PDF and Kindle Versions This book is available in several formats, including online (HTML), PDF, ePub (Apple iBooks), and mobi (Kindle) versions. Use the online edition of the book if you can. With the online edition, you\u2019ll be able to copy and paste the code without any problem. The ePub version (using Apple iBooks) also preserves line breaks and indentation when copying code. Copying without line breaks will cause code errors. You\u2019ll lose line breaks when copying code with the following versions: PDF version on macOS using the Preview application mobi (Kindle) If you use Adobe Acrobat you\u2019ll be able to copy the line breaks (though indenting is lost). You can also open a PDF file in Chrome or Safari web browsers and copy code with line breaks. With the mobi (Kindle) version, you\u2019ll have to carefully reformat the code after pasting into your text editor. Indentation makes code more readable, so try to preserve the indentation you see in the code samples. In YAML files (with the file extension .yml ), indentation is required (your application will break without it).","title":"5.2 Copying and Pasting Code"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#53-your-computer","text":"You can develop web applications with Rails on computers running Mac OS X, Linux, or Microsoft Windows operating systems. Most Rails developers use macOS or Linux because the underlying Unix operating system has long been the basis for open source programming. Later in this chapter, I\u2019ll give links to installation instructions for macOS and Linux. For Windows users, I have to say, installing Rails on Windows is frustrating and painful. Readers and workshop students often tell me that they\u2019ve given up on learning Rails because installation of Ruby on Windows is difficult and introduces bugs or creates configuration issues. Even when you succeed in getting Rails to run on Windows, you will encounter gems you cannot install. For these reasons, I urge you to use Cloud9, a browser-based development environment, on your Windows laptop.","title":"5.3 Your Computer"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#531-hosted-computing","text":"If you are using Windows, or have difficulty installing Ruby on your computer, try using Cloud9. Cloud9 provides a hosted development environment. That means you set up an account and then access a remote computer from your web browser. The Cloud9 service is free for ordinary use. There is no credit card required to set up an account. You\u2019ll only be charged if you add extra computer memory or disk space (which you don\u2019t need for ordinary Rails development). The Cloud9 service gives you everything you need for Rails development, including a Unix shell with Ruby pre-installed, plus a browser-based file manager and text editor. Any device that runs a web browser will give you access to Cloud9, including a tablet or smartphone, though you need a broadband connection, a sizable screen, and a keyboard to be productive.","title":"5.3.1 Hosted Computing"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#54-try-the-terminal","text":"Look for the Terminal application in the following places: MacOS: Applications - Utilities - Terminal Linux: Applications - Accessories - Terminal Windows: Taskbar Start Button - Command Prompt On the Mac, search for the macOS Terminal application by pressing the Command-Spacebar combination (which Apple calls \u201cSpotlight Search\u201d) and searching for \u201cTerminal.\u201d The magnifying glass in the upper right corner of your screen will also launch \u201cSpotlight Search.\u201d Or look in the Applications/Utilities/ folder for the Terminal application. You\u2019ll need to click the name of the application to launch the Terminal. For Linux or Windows, The Command Line Crash Course explains how to launch a terminal application . Launch your terminal application now. Try out the terminal application by entering a shell command. $ whoami Don\u2019t type the $ character. The $ character is a cue that you should enter a shell command. This is a longtime convention that indicates you should enter a command in the terminal application or console. The Unix shell command whoami returns your username. Don\u2019t type the $ prompt. You might see: command not found: $ which indicates you typed the $ character by mistake. If you are new to programming, using a text editor and the shell will seem primitive compared to the complexity and sophistication of Microsoft Word or Photoshop. Software developers edit files with simple text editors and run programs in the shell. That\u2019s all we do. We have to remember the commands we need (or consult a cheatsheet) because there are no graphical menus or toolbars. Yet with nothing more than a text editor and the command line interface, programmers have created everything that you use on your computer.","title":"5.4 Try the Terminal"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#55-installing-ruby","text":"Your first challenge in learning Rails is installing Ruby on your computer. Frankly, this can be the most difficult step in learning Rails because no tutorial can sort out the specific configuration of your computer. Get over this hump and everything else becomes easy. The focus of this book is learning Rails, not installing Ruby, so to keep the book short and readable, I\u2019m going to give you links to articles that will help you install Ruby. You\u2019ll spend at least an hour installing Ruby and Rails, so be sure to allow enough time for the task.","title":"5.5 Installing Ruby"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#551-macos","text":"See this article for macOS installation instructions: Install Ruby on Rails - MacOS","title":"5.5.1 MacOS"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#552-ubuntu-linux","text":"See this article for Ubuntu installation instructions: Install Ruby on Rails - Ubuntu","title":"5.5.2 Ubuntu Linux"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#553-hosted-computing","text":"Cloud9 is a browser-based development environment. Cloud9 is free for small projects. If you have a fast broadband connection to the Internet, this is your best choice for developing Rails on Windows. And it is a good option if you have any trouble installing Ruby on Mac or Linux because the Cloud9 hosted environment provides everything you need, including a Unix shell with Ruby and RVM pre-installed, plus a browser-based file manager and text editor. Using a hosted development environment is unconventional but leading developers do so and it may be the wave of the future. See this article for Cloud9 installation instructions: Install Ruby on Rails - Cloud9 The article shows how to get started with Cloud9. If you use Cloud9, be sure to pick the \u201cBlank\u201d template for your workspace, not the \u201cRuby\u201d or \u201cRuby on Rails\u201d templates that provide a prebuilt Rails application. We\u2019re building from scratch in this tutorial.","title":"5.5.3 Hosted Computing"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#554-windows","text":"Here are your choices for Windows: Use the Cloud9 hosted development environment Install the Railsbridge Virtual Machine Use RubyInstaller for Windows Cloud9 is ideal if you have a fast Internet connection. If not, download the Railsbridge Virtual Machine to create a virtual Linux computer using Vagrant . Other tutorials may suggest using RailsInstaller , but it will not provide an up-to-date version of Ruby or Rails. Also, RVM does not run on Windows.","title":"5.5.4 Windows"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#56-your-workspace","text":"Take a moment to think about where on your computer you\u2019ll do your work and store your files. You may have a documents/ folder. You could make a similar folder named projects/ or code/ or workspace/ for your programming projects. Use the Unix mkdir command to create a folder or create it with your file browser. If you haven\u2019t done so already, make a folder to contain your programming projects. You don\u2019t need to do this if you already created a workspace/ folder in the Unix chapter in Book One. $ cd ~ $ pwd /Users/danielkehoe $ mkdir workspace $ cd workspace In this tutorial, the terms \u201cfolders\u201d and \u201cdirectories\u201d mean the same thing. Use the Unix cd command to change directories. When you enter the Unix command cd ~ , you\u2019ll move to your home (or \u201cuser\u201d) directory. The squiggly ~ \u201ctilde\u201d character is a Unix shortcut that indicates your home folder. The Unix pwd command shows the \u201cpresent working directory,\u201d where you are. The Unix mkdir command creates an empty folder and we move into it with the Unix cd command.","title":"5.6 Your Workspace"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#561-video-option","text":"Watch the four minute video if you have subscribed: UNIX Commands Basics","title":"5.6.1 Video Option"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#57-understanding-version-numbers","text":"Rails follows a convention named semantic versioning : The first number denotes a major version (Rails 4) The second number denotes a minor release (Rails 4.2) The third number denotes a patch level (Rails 4.2.1) A major release includes new features, including changes which break backward compatibility. For example, switching from Rails 3.2 to Rails 4.0 required a significant rewrite of every Rails application. A minor release introduces new features but doesn\u2019t break anything. For example, Rails 3.2 added the asset pipeline, and Rails 4.2 added the Active Job feature for background processing. A patch release fixes bugs but doesn\u2019t introduce significant features. Usually this means you can change the version number in the Gemfile and run bundle update without making any other changes to your application.","title":"5.7 Understanding Version Numbers"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#58-ruby-and-rails-version-check","text":"Check that appropriate versions of Ruby and Rails are installed in your development environment. You\u2019ll need: The Ruby language (version 2.3 or newer) The Rails gem (version 5.1 or newer) Open your terminal application and enter: $ ruby -v You might see: ruby 2.4.1p0 (...) You\u2019ve got Ruby version 2.4.1, patch level \u201cp0\u201d (Ruby versions add an extra patch level to semantic versioning). If you\u2019ve got a newer version of Ruby, no problem; minor updates to Ruby don\u2019t affect Rails. Try: $ rails -v You might see: Rails 5.1.2 If you see: Rails is not currently installed on this system. You are not using an RVM gemset where the Rails gem is installed. Go to the Installing Rails instructions for your computer if you have not set up Rails. The next section explains more about RVM gemsets which may be all you need to find Rails. If you have Rails 4.2 or older versions, you must update to Rails 5.1. See the Installing Rails instructions for your computer. Versions such as 5.0.0.beta3 or 5.0.0.rc1 are beta versions or \u201crelease candidates.\u201d You can use a release candidate in the weeks before a final release becomes available. If you\u2019ve got Rails 5.1.3 or newer, that\u2019s fine. It means minor bugs have been fixed since this was written, but the book is still current. You can check for the current version of Rails here. Box 5.2. Rails 5.1 This edition of the book was prepared using Rails 5.1.2. The newest version of the book is listed on the README page of the learn-rails GitHub repository.","title":"5.8 Ruby and Rails Version Check"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#59-rvm","text":"I promised that this book would introduce you to the practices of professional Rails developers. One of the most important utilities you\u2019ll need in setting up a real-world Rails development environment is RVM, the Ruby Version Manager . RVM lets you switch between different versions of Ruby. Right now, that might not seem important, but as soon as a new version of Ruby is released, you\u2019ll need to upgrade, and it is best to be ready by installing the current version of Ruby with RVM, so you can easily add a new version of Ruby later, and still switch back to older versions as needed. RVM also helps you manage your collections of gems, by letting you create multiple gemsets . Each gemset is the collection of gems you need for a specific project. Rails changes frequently; with RVM, you can install a specific version of Rails in a project gemset, along with all the gems you need for the project. When a new version of Rails is released, you can create a new gemset with the new Rails version when you start a new project. Your old project will still have the version of Rails it needs in its own gemset. If you\u2019ve followed the instructions in the article Installing Rails and installed RVM, you\u2019ll be ready to handle multiple versions of Ruby, and multiple versions of Rails. That\u2019s as it should be. Most professional Rails developers have more than one version of Ruby or Rails, and RVM makes it easy to switch. RVM will show you a list of available Ruby versions: $ rvm list You can see a list of available gemsets associated with the current Ruby version: $ rvm gemset list You will see an arrow that shows which gemset is active. You will see a global gemset as well as any others you have created, such as a gemset for Rails5.0 . Here\u2019s how to switch between gemsets: $ rvm gemset use global And switch back to another: $ rvm gemset use default After you\u2019ve worked on a few Rails applications, you\u2019ll see several project-specific gemsets if you are using RVM in the way most developers do. RVM is not the only utility you can use to manage multiple Ruby versions. Some developers like Chruby or rbenv . Don\u2019t be worried if you hear debates about RVM versus Chruby or rbenv; developers love to compare the merits of their tools. RVM is popular, well-supported, and an excellent utility to help a developer install Ruby and manage gemsets; that\u2019s why we use it.","title":"5.9 RVM"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#510-project-specific-gemset","text":"For our learn-rails application, we\u2019ll create a project-specific gemset using RVM. We\u2019ll give the gemset the same name as our application. By creating a gemset for our tutorial application, we\u2019ll isolate the current version of Rails and the gems we need for this project. Whether you use RVM or another Ruby version manager, this will introduce you to the idea of \u201csandboxing\u201d (isolating) your development environment so you can avoid conflicts among projects. After we create the project-specific gemset, we\u2019ll install the Rails gem into the gemset. Enter these commands: $ rvm use [email protected] --create $ gem install rails This will install the newest version of Rails 5.0. It takes a few minutes to automatically install all the gems that are needed for Rails. It\u2019s absolutely necessary to create a gemset and install Rails so we can move on to creating the application in the next chapter. If you have trouble at this point, refer to the article Installing Rails or the RVM website . Linux users may need to check instructions for Integrating RVM . Let\u2019s make sure Rails is ready to run. Open a terminal and type: $ rails -v You should see the message \u201cRails 5.1.2\u201d (or something similar). Now let\u2019s explore the rails new command and get started building the tutorial application.","title":"5.10 Project-Specific Gemset"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#chapter-6-create-the-application","text":"In this chapter, we\u2019ll begin building the tutorial application. But first, let\u2019s consider the options you have for starter applications.","title":"Chapter 6 Create the Application"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#61-starter-applications","text":"Rails provides a framework ; that is, a software library that provides utilities, conventions, and organizing principles to allow us to build complex web applications. Without a framework, we\u2019d have to code everything from scratch. Rails gives us the basics we need for many websites. Still, the framework doesn\u2019t give us all the features we need for many common types of websites. For example, we might want users to register for an account and log in to access the website (\u201cuser management and authentication\u201d). We might want to restrict portions of our website to just administrators (\u201cauthorization\u201d). We also might want to add gems that enhance Rails to aid development (gems for testing, for example) or improve the look and feel of our application (the Bootstrap or Foundation front-end frameworks). Developers often mix and match components to make a customized Rails stack. Developers often use a starter application instead of assembling an application from scratch. You might call this a \u201ctemplate\u201d but we use that term to refer to the view files that combine HTML with Ruby code to generate web pages. Most experienced developers have one or more starter applications that save time when beginning a new project. The RailsApps project was launched to provide open source starter applications so developers could collaborate on their starter applications and avoid duplicated effort. After you gain some skill with this tutorial, you might use the RailsApps starter apps to instantly generate a Rails application with features like authentication, authorization, and an attractive design. At the end of this book, you\u2019ll learn about Rails Composer , a tool for building starter applications. For now, we\u2019ll begin with the Rails default starter application.","title":"6.1 Starter Applications"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#62-workspace-folder-and-rvm-gemset","text":"Are you in the folder named workspace/ you created earlier? $ pwd /Users/danielkehoe/workspace/ If you\u2019re not in your workspace folder, enter a Unix command to move to the folder: $ cd ~/workspace We already created a project-specific gemset using RVM. Make sure it\u2019s ready to use: $ rvm use [email protected] $ rvm gemset list gemsets for ruby-2.4.1... (default) global \\=> learn-rails You should see an arrow pointing to the learn-rails gemset. If not, go back to the previous \u201cGet Started\u201d chapter.","title":"6.2 Workspace Folder and RVM Gemset"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#63-use-rails-new-to-build-the-application","text":"Let\u2019s go! We have selected a gemset, we have Rails installed, and we\u2019re in our workspace/ folder. Let\u2019s build a Rails application! To create the Rails default starter application, type: $ rails new learn-rails This will create a new Rails application named \u201clearn-rails.\u201d It takes a few minutes when the build script runs bundle install . Don\u2019t worry; just give it enough time to finish (but no more than five minutes even if your Internet connection is very slow). In the future, you can give your application a different name. For this tutorial, it is VERY IMPORTANT that you use the name \u201clearn-rails.\u201d You\u2019ll be copying code that assumes the name is \u201clearn-rails;\u201d it will save you trouble to use this name. The rails new command will create ten folders and 93 files. It will install 62 gems into your gemset. After you create the application, switch to its folder to continue work directly in the application: $ cd learn-rails This is your project directory. It is also called the application root directory. You\u2019ll spend all your time inside this folder. Box 6.1. Spring After creating a new Rails application, you may see a message to run a command: $ bundle exec spring binstub --all The command sets up Spring. Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don\u2019t need to stop and restart it when you make changes. After you change into the project directory, you can run the command. Type the ls command to show the folders and files in a directory. Soon we\u2019ll learn more about each of these folders and files. $ ls Gemfile Rakefile config lib test Gemfile.lock app config.ru log tmp README.md bin db public vendor","title":"6.3 Use \u201cRails New\u201d to Build the Application"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#64-make-a-sticky-gemset","text":"RVM gives us a convenient technique to make sure we are always using the correct gemset when we enter the project directory. It will create hidden files to designate the correct Ruby version and project-specific gemset. Enter this command to create the hidden files: $ rvm use [email protected] --ruby-version The \u2013ruby-version argument creates two files, .ruby-version and .ruby-gemset , that set RVM every time we cd to the project directory. Without these two hidden files, you\u2019d need to remember to enter rvm use [[email protected]](/cdn-cgi/l/email-protection) every time you start work on your project after closing the console. If you see \u201cERROR: Gemset \u2018learn-rails\u2019 does not exist\u201d, perhaps you overlooked an earlier step in the Project-Specific Gemset section (in the previous chapter) where we created the learn-rails gemset. After creating the two hidden files, check if they are there: $ ls -1pa ./ ../ .gitignore .ruby-gemset .ruby-version Gemfile Gemfile.lock README.md Rakefile app/ bin/ config/ config.ru db/ lib/ log/ public/ test/ tmp/ vendor/ The \u201ca\u201d flag in the Unix ls -1pa command displays hidden files. Each hidden file is listed with a dot (period or full stop) at the beginning of the filename. You\u2019ll notice .ruby-gemset and .ruby-version . You\u2019ll also see two \u201cspecial files\u201d which are not files at all: ./ - an alias that represents the current directory ../ - an alias that represents the parent directory Box 6.2. Hidden Files in Cloud9 If you\u2019re using Cloud9, you must change preferences to see hidden files. In the window that contains the file list, there is a gear icon (dark in color and difficult to see). Clicking the gear option will give you options: Show Root File System Show Home in Favorites Show Hidden Files You must select all three options to see the hidden files. That\u2019s a brief diversion into Unix; let\u2019s try running our new Rails application.","title":"6.4 Make a Sticky Gemset"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#65-test-the-application","text":"You\u2019ve created a simple default web application. It\u2019s ready to run.","title":"6.5 Test the Application"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#651-launching-the-web-server","text":"You can launch the application by entering the command: $ rails server Alternatively, to save typing, you can abbreviate the rails server command: $ rails s If you are using the Cloud9 hosted service, you\u2019ll need to enter bin/rails server -p $PORT -b $IP . You\u2019ll see: \\=> Booting Puma \\=> Rails 5.1.2 application starting in development on http://localhost:3000 \\=> Run `rails server -h` for more startup options \\=> Ctrl-C to shutdown server Puma starting in single mode... * Version 3.4.0 (ruby 2.4.1-p0), codename: Owl Bowl Brawl * Min threads: 5, max threads: 5 * Environment: development * Listening on tcp://localhost:3000 Use Ctrl-C to stop The rails server command launches the Puma web server that is provided with Rails.","title":"6.5.1 Launching the Web Server"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#652-errors-for-linux-users","text":"If you enter the command rails server and get an error message: ... Could not find a JavaScript runtime ... You need to install Node.js. For help, see Install Ruby on Rails - Ubuntu .","title":"6.5.2 Errors for Linux Users"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#653-viewing-in-the-web-browser","text":"To see your application in action, open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see the Rails default information page. Box 6.3. Viewing on a Hosted Platform It is easy to see your web application in action on your local computer. If you are using a hosted service such as Cloud9, it is a little more complicated. If you are using Cloud9 , click the \u201cPreview\u201d link in the IDE menu (at the top of the page). There is a \u201cRun\u201d link, too, but it doesn\u2019t work if you have created your Rails application in a folder within the workspace/ folder. You can also open a browser tab or window and enter the URL for the application, as hosted by Cloud9. When you launch the Rails server, Cloud9 displays a helpful message showing the URL where you can view your application.","title":"6.5.3 Viewing in the Web Browser"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#654-watch-log-messages","text":"Notice that messages scroll in the console window when your browser requests the Rails default web page. Open the file log/development.log and you\u2019ll see the same messages. When a browser sends requests to the Puma web server, diagnostic messages are written to the console and to the log/development.log file. These diagnostic messages are an important tool for troubleshooting when you are developing.","title":"6.5.4 Watch Log Messages"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#655-multiple-terminal-windows","text":"You can keep more than one terminal window open. For convenience, you may want to keep a terminal window open for running the web server and watching diagnostic messages. In the Terminal or iTerm2 applications, Command-t opens additional console sessions in new \u201ctabs.\u201d Developers typically open more than one terminal window when they work on a Rails application. They\u2019ll start the server with the rails server command in one window (or tab) and watch the log messages. In another window (or tab), they\u2019ll enter commands as they build the application. They might create folders with a Unix command, run generators, or try out code with the rails console command (you\u2019ll learn about the rails console command in the \u201cTroubleshoot\u201d chapter). To some people, the text editor and the terminal window look very similar. When you work on a file in a text editor, you make changes to one file, in one place. The terminal window is very different. Your computer can run multiple programs at once. You can open multiple terminal windows. In each terminal window, you can use the command line to launch a different program. Each program you start in a terminal window is a separate process and multiple processes can run simultaneously. You can end a process by pressing Control-c (in most cases), Control-d (in some cases), or closing the terminal window (almost always). From this perspective, a terminal window is a tool you use to launch processes and your computer is a machine that runs processes.","title":"6.5.5 Multiple Terminal Windows"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#656-stop-the-web-server","text":"You can stop the server with Control-c to return to the command prompt. When we say Control-c, we mean hold down the Control key as you press the letter \u201cc\u201d. Most of the time you\u2019ll keep the web server running as you add or edit files in your project. Changes will automatically appear when you refresh the browser or request a new page. There is a tricky exception, however. If you make changes to the Gemfile, or changes to configuration files, the web server must be shut down and relaunched for changes to be activated. As a rule of thumb, files that produce web pages can be changed without a restart. This includes any file in the app/ folder which creates web pages, as well as the config/routes.rb file. Changes to files that create the environment for the web application, such as gems or configuration files, and are loaded at web server launch, won\u2019t be seen until the web server is restarted.","title":"6.5.6 Stop the Web Server"},{"location":"Github%20and%20Rails%20on%20Replit%202021-07-02T09.41.07/#66-get-organized-for-efficiency","text":"Before we learn about the Rails directory structure, take a minute to organize your screen real estate. During development, you\u2019ll jump between the console in a terminal application, your text editor, and a web browser window. As a Rails developer, you\u2019ll do this constantly, so think about how you can do this efficiently. Multiple screens make it easy, but even on a laptop you can get organized for efficiency. Figure 6.1: Getting organized for efficiency. Here\u2019s some ideas. Open a window in the terminal application, place it on the left side of your screen, and stretch it to the maximum vertical height of your screen. Open multiple tabs in your terminal application. Keep one tabbed window open for entering shell commands (like cd or ls ) and another terminal window open for running the rails server command and viewing the log output. Place your text editor window next to the terminal window and stretch it to full vertical height. If you are using Atom or Sublime Text, you can open two editor panels side-by-side. Some developers find it helpful to leave the file browser panel open to navigate the project directory; others hide the file browser panel to save space. If you have enough screen space, leave your web browser open and place it next to your text editor. If your screen space is limited, you may have to overlap the web browser with the text editor, but position your web browser window so you can bring it to the front with a single click. You\u2019ll need multiple tabs open in your web browser. Unless you like constant distraction, close Gmail, Facebook, Twitter, and Hacker News. Open tabs for http://localhost:3000/ , this tutorial, and additional references or documentation. On the Mac, there are window management utilities that reposition windows with just a click or keyboard command; I use Moom but you can find others if you search for \u201cmac window management utilities.\u201d This is just a guide; I\u2019m sure you can improve upon these suggestions.","title":"6.6 Get Organized for Efficiency"},{"location":"Gr%2012%20grades%20deadline/","text":"Gr 12 grades deadline Efren Paz Tue, Mar 23, 3:53 PM to PSHS, Academic, Leonel, Rosalie, Caryljae, Eileen, Adrian, MC-Guidance, MC-Registrar's Dear Grade 12 Teachers, Please take note of our fourth-quarter schedule. I am sending you this in advance to anticipate that we need to come up with the grades immediately after our 4th Quarter Perio. Our schedule is as follows: Grade 12 May 5 - 6 - Perio 4th Quarter May 10 - AM - Encoding of Grades May 10 - PM - Scholarship Committee Meeting We cannot entertain further adjustments on our schedule due to the following plan set by the OED. May 13 - Execom Meeting to Recommend Candidates for Graduation May 19 - BOT Meeting to approve Candidates for Graduation Best Regards, Efren Paz -- Mr. Efren P. Paz Special Science Teacher V Chemistry Unit Philippine Science High School - Main Campus Agham Road, Diliman, Quezon City Philippines 1104","title":"Gr 12 grades deadline"},{"location":"Gr%2012%20grades%20deadline/#gr-12-grades-deadline","text":"Efren Paz Tue, Mar 23, 3:53 PM to PSHS, Academic, Leonel, Rosalie, Caryljae, Eileen, Adrian, MC-Guidance, MC-Registrar's Dear Grade 12 Teachers, Please take note of our fourth-quarter schedule. I am sending you this in advance to anticipate that we need to come up with the grades immediately after our 4th Quarter Perio. Our schedule is as follows: Grade 12 May 5 - 6 - Perio 4th Quarter May 10 - AM - Encoding of Grades May 10 - PM - Scholarship Committee Meeting We cannot entertain further adjustments on our schedule due to the following plan set by the OED. May 13 - Execom Meeting to Recommend Candidates for Graduation May 19 - BOT Meeting to approve Candidates for Graduation Best Regards, Efren Paz -- Mr. Efren P. Paz Special Science Teacher V Chemistry Unit Philippine Science High School - Main Campus Agham Road, Diliman, Quezon City Philippines 1104","title":"Gr 12 grades deadline"},{"location":"Hacker%20Rank%202020-09-22T13.41.30/","text":"Hacker Rank 2020-09-22T13.41.30 Day 0: Hello, World. 1 more challenge to get your first star! Points: 1/2 Days of Code Objective In this challenge, we review some basic concepts that will get you started with this series. You will need to use the same (or similar) syntax to read input and write output in challenges throughout HackerRank. Check out the Tutorial tab for learning materials and an instructional video! Task To complete this challenge, you must save a line of input from stdin to a variable, print Hello, World. on a single line, and finally print the value of your variable on a second line. You've got this! Note: The instructions are Java-based, but we support submissions in many popular languages. You can switch languages using the drop-down menu above your editor, and the variable may be written differently depending on the best-practice conventions of your submission language. Input Format A single line of text denoting (the variable whose contents must be printed). Output Format Print Hello, World. on the first line, and the contents of on the second line. Sample Input Welcome to 30 Days of Code! Sample Output Hello, World. Welcome to 30 Days of Code! Explanation On the first line, we print the string literal Hello, World.. On the second line, we print the contents of the variable which, for this sample case, happens to be Welcome to 30 Days of Code!. If you do not print the variable's contents to stdout, you will not pass the hidden test case. #include <cmath> #include <cstdio> #include <vector> #include <iostream> #include <algorithm> using namespace std; int main() { // Declare a variable named 'input_string' to hold our input. string input_string; // Read a full line of input from stdin (cin) and save it to our variable, input_string. getline(cin, input_string); // Print a string literal saying \"Hello, World.\" to stdout using cout. cout << \"Hello, World.\" << endl; // TODO: Write a line of code here that prints the contents of input_string to stdout. cout << input_string; return 0; } Day 1: Data Types Objective Today, we're discussing data types. Check out the Tutorial tab for learning materials and an instructional video! Task Complete the code in the editor below. The variables , , and are already declared and initialized for you. You must: Declare variables: one of type int, one of type double, and one of type String. Read lines of input from stdin (according to the sequence given in the Input Format section below) and initialize your variables. Use the operator to perform the following operations: Print the sum of plus your int variable on a new line. Print the sum of plus your double variable to a scale of one decimal place on a new line. Concatenate with the string you read as input and print the result on a new line. Note: If you are using a language that doesn't support using for string concatenation (e.g.: C), you can just print one variable immediately following the other on the same line. The string provided in your editor must be printed first, immediately followed by the string you read as input. Input Format The first line contains an integer that you must sum with . The second line contains a double that you must sum with . The third line contains a string that you must concatenate with . Output Format Print the sum of both integers on the first line, the sum of both doubles (scaled to decimal place) on the second line, and then the two concatenated strings on the third line. Sample Input 12 4.0 is the best place to learn and practice coding! Sample Output 16 8.0 HackerRank is the best place to learn and practice coding! Explanation When we sum the integers and , we get the integer . When we sum the floating-point numbers and , we get . When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!. You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above and reading input from stdin. #include <iostream> #include <iomanip> #include <limits> using namespace std; int main() { int i = 4; double d = 4.0; string s = \"HackerRank \"; // Declare second integer, double, and String variables. // Read and save an integer, double, and String to your variables. // Note: If you have trouble reading the entire string, please go back and review the Tutorial closely. // Print the sum of both integer variables on a new line. // Print the sum of the double variables on a new line. // Concatenate and print the String variables on a new line // The 's' variable above should be printed first. return 0;","title":"Hacker Rank 2020 09 22T13.41.30"},{"location":"Hacker%20Rank%202020-09-22T13.41.30/#hacker-rank-2020-09-22t134130","text":"","title":"Hacker Rank 2020-09-22T13.41.30"},{"location":"Hacker%20Rank%202020-09-22T13.41.30/#day-0-hello-world","text":"1 more challenge to get your first star! Points: 1/2 Days of Code Objective In this challenge, we review some basic concepts that will get you started with this series. You will need to use the same (or similar) syntax to read input and write output in challenges throughout HackerRank. Check out the Tutorial tab for learning materials and an instructional video! Task To complete this challenge, you must save a line of input from stdin to a variable, print Hello, World. on a single line, and finally print the value of your variable on a second line. You've got this! Note: The instructions are Java-based, but we support submissions in many popular languages. You can switch languages using the drop-down menu above your editor, and the variable may be written differently depending on the best-practice conventions of your submission language. Input Format A single line of text denoting (the variable whose contents must be printed). Output Format Print Hello, World. on the first line, and the contents of on the second line. Sample Input Welcome to 30 Days of Code! Sample Output Hello, World. Welcome to 30 Days of Code! Explanation On the first line, we print the string literal Hello, World.. On the second line, we print the contents of the variable which, for this sample case, happens to be Welcome to 30 Days of Code!. If you do not print the variable's contents to stdout, you will not pass the hidden test case. #include <cmath> #include <cstdio> #include <vector> #include <iostream> #include <algorithm> using namespace std; int main() { // Declare a variable named 'input_string' to hold our input. string input_string; // Read a full line of input from stdin (cin) and save it to our variable, input_string. getline(cin, input_string); // Print a string literal saying \"Hello, World.\" to stdout using cout. cout << \"Hello, World.\" << endl; // TODO: Write a line of code here that prints the contents of input_string to stdout. cout << input_string; return 0; }","title":"Day 0: Hello, World."},{"location":"Hacker%20Rank%202020-09-22T13.41.30/#day-1-data-types","text":"Objective Today, we're discussing data types. Check out the Tutorial tab for learning materials and an instructional video! Task Complete the code in the editor below. The variables , , and are already declared and initialized for you. You must: Declare variables: one of type int, one of type double, and one of type String. Read lines of input from stdin (according to the sequence given in the Input Format section below) and initialize your variables. Use the operator to perform the following operations: Print the sum of plus your int variable on a new line. Print the sum of plus your double variable to a scale of one decimal place on a new line. Concatenate with the string you read as input and print the result on a new line. Note: If you are using a language that doesn't support using for string concatenation (e.g.: C), you can just print one variable immediately following the other on the same line. The string provided in your editor must be printed first, immediately followed by the string you read as input. Input Format The first line contains an integer that you must sum with . The second line contains a double that you must sum with . The third line contains a string that you must concatenate with . Output Format Print the sum of both integers on the first line, the sum of both doubles (scaled to decimal place) on the second line, and then the two concatenated strings on the third line. Sample Input 12 4.0 is the best place to learn and practice coding! Sample Output 16 8.0 HackerRank is the best place to learn and practice coding! Explanation When we sum the integers and , we get the integer . When we sum the floating-point numbers and , we get . When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!. You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above and reading input from stdin. #include <iostream> #include <iomanip> #include <limits> using namespace std; int main() { int i = 4; double d = 4.0; string s = \"HackerRank \"; // Declare second integer, double, and String variables. // Read and save an integer, double, and String to your variables. // Note: If you have trouble reading the entire string, please go back and review the Tutorial closely. // Print the sum of both integer variables on a new line. // Print the sum of the double variables on a new line. // Concatenate and print the String variables on a new line // The 's' variable above should be printed first. return 0;","title":"Day 1: Data Types"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Ubuntu%2018.04/","text":"How to setup Java FXML with Netbeans and Scene Builder in Ubuntu 18.04 A guide for my students in Computer Science Download Oracle JDK 1.8 this has javafx automatically included to it. it's free you'll need to sign up, but other alternatives are way harder to do JDK 1.8 is also know as JDK 8 We can also use higher versions of java, but we'll need more complicated build tools like maven or gradle to work with JavaFX. We want Java 8 so we can stick to the default ANT build tool. To install NetBeans, you have to download it first from the Oracle official website: https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html Scroll down until you find the right download for your machine it's probably the x64.tar.gz version you'll have to sign in to your oracle account Download and install or unzip Install openjdk 8 The netbeans installer requires java to be in the system first. $ sudo apt install openjdk-8-jdk openjfx openjdk-8-jdk-headless Install NetBeans To install NetBeans, you have to download it first from the NetBeans official website: https://netbeans.apache.org/download/index.html Click on the green \u201cDownload\u201d button under the Apache NetBeans LTS line You can also learn more about NetBeans by clicking the blue \u201cFeatures\u201d button next to the \u201cDownload\u201d button. You can also download other previous versions as well but its recommended to use the latest version. This will take you to a page titled \u201cDownloading Apache NetBeans (incubating)\u201d. From this page, click on the \u201cBinaries\u201d link. You can click the \u201cSource\u201d link and download that if you want to compile it yourself but downloading the \u201cBinaries\u201d is faster and easier. Once clicked, this will redirect you to the apache page where a link will be generated for you. Click the link and it will start downloading. Install or unzip and run. You might be asked for the version of JDK to use. Make sure it's JDK 1.8 by pointing to the directory where you it's installed (see figure) If you are greeted with this view once it opens, then NetBeans has been successfully installed and is ready for you to start writing programs and developing applications on it. Install the JavaFX Scene Builder Now that NetBeans has been successfully installed and is working properly, we can move to the next step; install JavaFX Scene Builder. First, we have to download Scene Builder from its official website: https://gluonhq.com/products/scene-builder/#download On this page, scroll down until you see the download options for your version of Java (Java 8). Look for the right Scene Builder version for your operating system and click the green \u201cDownload\u201d button. This will redirect you to a \u201cThanks\u201d page and start downloading. Once downloaded, open the installer. In the installer, accept the terms and conditions and click install. Once installed, click finish. To check whether the installation was successful or not you can open \u201cSceneBuilder\u201d and will be greeted with the following view if the installation was successful: Integrate JavaFX Scene Builder and NetBeans Once Scene Builder and NetBeans have been installed, it is time to move to the final step; integrate both the programs. Open NetBeans, click on \u201cFile\u201d and then \u201cNew project.\u201d in the dropdown menu. A new window will open. Click on \u201cJavaFX\u201d from the \u201cCategories\u201d tab and \u201cJava FXML Application\u201d from \u201cProjects\u201d tab. Click \u201cNext\u201d. Install any modules, if it prompts to download and activate any modules. In the next window give the project a name and click \u201cFinish\u201d. 6. Once opened, go to the \u201cProjects\u201d tab and click on your project. 7. Then click on \u201cSource Packages\u201d, 8. click on your project\u2019s package, 9. right-click on the .fxml file and click \u201cOpen\u201d. 10. This will open the file in Scene Builder for you to work on it. Next Steps And with this, you have successfully integrated Scene Builder and NetBeans to work together seamlessly. Once you are done with making the GUI, to add functionality and logic to it, edit the \u201cController.Java\u201d file directly below the .fxml file and give it functionality. Now you can go on and enjoy making GUI for your programs in an intuitive and fun way using JavaFX Scene Builder.","title":"How to setup Java FXML with Netbeans and Scene Builder in Ubuntu 18.04"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Ubuntu%2018.04/#how-to-setup-java-fxml-with-netbeans-and-scene-builder-in-ubuntu-1804","text":"A guide for my students in Computer Science","title":"How to setup Java FXML with Netbeans and Scene Builder in Ubuntu 18.04"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Ubuntu%2018.04/#download-oracle-jdk-18","text":"this has javafx automatically included to it. it's free you'll need to sign up, but other alternatives are way harder to do JDK 1.8 is also know as JDK 8 We can also use higher versions of java, but we'll need more complicated build tools like maven or gradle to work with JavaFX. We want Java 8 so we can stick to the default ANT build tool. To install NetBeans, you have to download it first from the Oracle official website: https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html Scroll down until you find the right download for your machine it's probably the x64.tar.gz version you'll have to sign in to your oracle account Download and install or unzip","title":"Download Oracle JDK 1.8"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Ubuntu%2018.04/#install-openjdk-8","text":"The netbeans installer requires java to be in the system first. $ sudo apt install openjdk-8-jdk openjfx openjdk-8-jdk-headless","title":"Install openjdk 8"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Ubuntu%2018.04/#install-netbeans","text":"To install NetBeans, you have to download it first from the NetBeans official website: https://netbeans.apache.org/download/index.html Click on the green \u201cDownload\u201d button under the Apache NetBeans LTS line You can also learn more about NetBeans by clicking the blue \u201cFeatures\u201d button next to the \u201cDownload\u201d button. You can also download other previous versions as well but its recommended to use the latest version. This will take you to a page titled \u201cDownloading Apache NetBeans (incubating)\u201d. From this page, click on the \u201cBinaries\u201d link. You can click the \u201cSource\u201d link and download that if you want to compile it yourself but downloading the \u201cBinaries\u201d is faster and easier. Once clicked, this will redirect you to the apache page where a link will be generated for you. Click the link and it will start downloading. Install or unzip and run. You might be asked for the version of JDK to use. Make sure it's JDK 1.8 by pointing to the directory where you it's installed (see figure) If you are greeted with this view once it opens, then NetBeans has been successfully installed and is ready for you to start writing programs and developing applications on it.","title":"Install NetBeans"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Ubuntu%2018.04/#install-the-javafx-scene-builder","text":"Now that NetBeans has been successfully installed and is working properly, we can move to the next step; install JavaFX Scene Builder. First, we have to download Scene Builder from its official website: https://gluonhq.com/products/scene-builder/#download On this page, scroll down until you see the download options for your version of Java (Java 8). Look for the right Scene Builder version for your operating system and click the green \u201cDownload\u201d button. This will redirect you to a \u201cThanks\u201d page and start downloading. Once downloaded, open the installer. In the installer, accept the terms and conditions and click install. Once installed, click finish. To check whether the installation was successful or not you can open \u201cSceneBuilder\u201d and will be greeted with the following view if the installation was successful:","title":"Install the JavaFX Scene Builder"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Ubuntu%2018.04/#integrate-javafx-scene-builder-and-netbeans","text":"Once Scene Builder and NetBeans have been installed, it is time to move to the final step; integrate both the programs. Open NetBeans, click on \u201cFile\u201d and then \u201cNew project.\u201d in the dropdown menu. A new window will open. Click on \u201cJavaFX\u201d from the \u201cCategories\u201d tab and \u201cJava FXML Application\u201d from \u201cProjects\u201d tab. Click \u201cNext\u201d. Install any modules, if it prompts to download and activate any modules. In the next window give the project a name and click \u201cFinish\u201d. 6. Once opened, go to the \u201cProjects\u201d tab and click on your project. 7. Then click on \u201cSource Packages\u201d, 8. click on your project\u2019s package, 9. right-click on the .fxml file and click \u201cOpen\u201d. 10. This will open the file in Scene Builder for you to work on it.","title":"Integrate JavaFX Scene Builder and NetBeans"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Ubuntu%2018.04/#next-steps","text":"And with this, you have successfully integrated Scene Builder and NetBeans to work together seamlessly. Once you are done with making the GUI, to add functionality and logic to it, edit the \u201cController.Java\u201d file directly below the .fxml file and give it functionality. Now you can go on and enjoy making GUI for your programs in an intuitive and fun way using JavaFX Scene Builder.","title":"Next Steps"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Windows%2010/","text":"How to setup Java FXML with Netbeans and Scene Builder in Windows 10 A guide for my students in Computer Science Uninstall old SceneBuilder, NetBeans and Java there might be conflicts with old installations, so do this step It's good to uninstall in reverse order remove SceneBuilder first then remove netbeans then remove Java (all versions and updates) for SceneBuilder, go to \"Start-> Apps and Features\" uninstall SceneBuilder for Apache Netbeans, you can just delete the Installation Folder (usually in Downloads ) for Java, go to \"Start-> Apps and Features\" uninstall Java Download Oracle JDK 1.8 this has javafx automatically included to it. it's free you'll need to sign up, but other alternatives are way harder to do JDK 1.8 is also know as JDK 8 We can also use higher versions of java, but we'll need more complicated build tools like maven or gradle to work with JavaFX. We want Java 8 so we can stick to the default ANT build tool. To install NetBeans, you have to download it first from the Oracle official website: https://www.oracle.com/java/technologies/javase-jdk8-downloads.html Scroll down until you find the right download for your machine (probably the 64-bit version for windows) Download and install Install NetBeans To install NetBeans, you have to download it first from the NetBeans official website: https://netbeans.apache.org/download/index.html Click on the green \u201cDownload\u201d button under the Apache NetBeans LTS line You can also learn more about NetBeans by clicking the blue \u201cFeatures\u201d button next to the \u201cDownload\u201d button. You can also download other previous versions as well but I recommend the LTS version. This will take you to a page titled \u201cDownloading Apache NetBeans (incubating)\u201d. From this page, click on the \u201cBinaries\u201d link. You can click the \u201cSource\u201d link and download that if you want to compile it yourself but downloading the \u201cBinaries\u201d is faster and easier. Once clicked, this will redirect you to the apache page where a link will be generated for you. Click the link and it will start downloading. Unzip After extraction, go in the extracted directory and look for the \u201cbin\u201d folder. Go in the \u201cbin\u201d folder and you will see two \u201cApplication\u201d files; \u201cnetbeans.exe\u201d and \u201cnetbeans64.exe\u201d. You probably should run the 64-bit version If you are greeted with this view once it opens, then NetBeans has been successfully installed. You are ready to start writing java programs. Install the JavaFX Scene Builder Now that NetBeans has been successfully installed and is working properly, we can move to the next step; install JavaFX Scene Builder. First, we have to download Scene Builder from its official website: https://gluonhq.com/products/scene-builder/#download On this page, scroll down until you see the download options for your version of Java (Java 8). Look for the right Scene Builder version for your operating system and click the green \u201cDownload\u201d button. This will redirect you to a \u201cThanks\u201d page and start downloading. Once downloaded, open the installer. In the installer, accept the terms and conditions and click install. Once installed, click finish. To check whether the installation was successful or not you can open \u201cSceneBuilder\u201d and will be greeted with the following view if the installation was successful: Integrate JavaFX Scene Builder and NetBeans Once Scene Builder and NetBeans have been installed, it is time to move to the final step; integrate both the programs. Open NetBeans, click on \u201cFile\u201d and then \u201cNew project.\u201d in the dropdown menu. A new window will open. Click on \u201cJavaFX\u201d from the \u201cCategories\u201d tab and \u201cJava FXML Application\u201d from \u201cProjects\u201d tab. Click \u201cNext\u201d. Install any modules, if it prompts to download and activate any modules. In the next window give the project a name and click \u201cFinish\u201d. Once opened, go to the \u201cProjects\u201d tab and click on your project. Then click on \u201cSource Packages\u201d, click on your project\u2019s package, double-click on the .fxml file This will open the file in Scene Builder for you to work on it. Run your new fxml project and see the default \"Hello World\" program. Next Steps You have successfully integrated Scene Builder and NetBeans to work together. Once you are done with making the GUI, add functionality and logic to it by editing the \u201cController.Java\u201d file, which is directly below the .fxml file. Enjoy making GUI for your programs in an intuitive and fun way using JavaFX Scene Builder.","title":"How to setup Java FXML with Netbeans and Scene Builder in Windows 10"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Windows%2010/#how-to-setup-java-fxml-with-netbeans-and-scene-builder-in-windows-10","text":"A guide for my students in Computer Science","title":"How to setup Java FXML with Netbeans and Scene Builder in Windows 10"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Windows%2010/#uninstall-old-scenebuilder-netbeans-and-java","text":"there might be conflicts with old installations, so do this step It's good to uninstall in reverse order remove SceneBuilder first then remove netbeans then remove Java (all versions and updates) for SceneBuilder, go to \"Start-> Apps and Features\" uninstall SceneBuilder for Apache Netbeans, you can just delete the Installation Folder (usually in Downloads ) for Java, go to \"Start-> Apps and Features\" uninstall Java","title":"Uninstall old SceneBuilder, NetBeans and Java"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Windows%2010/#download-oracle-jdk-18","text":"this has javafx automatically included to it. it's free you'll need to sign up, but other alternatives are way harder to do JDK 1.8 is also know as JDK 8 We can also use higher versions of java, but we'll need more complicated build tools like maven or gradle to work with JavaFX. We want Java 8 so we can stick to the default ANT build tool. To install NetBeans, you have to download it first from the Oracle official website: https://www.oracle.com/java/technologies/javase-jdk8-downloads.html Scroll down until you find the right download for your machine (probably the 64-bit version for windows) Download and install","title":"Download Oracle JDK 1.8"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Windows%2010/#install-netbeans","text":"To install NetBeans, you have to download it first from the NetBeans official website: https://netbeans.apache.org/download/index.html Click on the green \u201cDownload\u201d button under the Apache NetBeans LTS line You can also learn more about NetBeans by clicking the blue \u201cFeatures\u201d button next to the \u201cDownload\u201d button. You can also download other previous versions as well but I recommend the LTS version. This will take you to a page titled \u201cDownloading Apache NetBeans (incubating)\u201d. From this page, click on the \u201cBinaries\u201d link. You can click the \u201cSource\u201d link and download that if you want to compile it yourself but downloading the \u201cBinaries\u201d is faster and easier. Once clicked, this will redirect you to the apache page where a link will be generated for you. Click the link and it will start downloading. Unzip After extraction, go in the extracted directory and look for the \u201cbin\u201d folder. Go in the \u201cbin\u201d folder and you will see two \u201cApplication\u201d files; \u201cnetbeans.exe\u201d and \u201cnetbeans64.exe\u201d. You probably should run the 64-bit version If you are greeted with this view once it opens, then NetBeans has been successfully installed. You are ready to start writing java programs.","title":"Install NetBeans"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Windows%2010/#install-the-javafx-scene-builder","text":"Now that NetBeans has been successfully installed and is working properly, we can move to the next step; install JavaFX Scene Builder. First, we have to download Scene Builder from its official website: https://gluonhq.com/products/scene-builder/#download On this page, scroll down until you see the download options for your version of Java (Java 8). Look for the right Scene Builder version for your operating system and click the green \u201cDownload\u201d button. This will redirect you to a \u201cThanks\u201d page and start downloading. Once downloaded, open the installer. In the installer, accept the terms and conditions and click install. Once installed, click finish. To check whether the installation was successful or not you can open \u201cSceneBuilder\u201d and will be greeted with the following view if the installation was successful:","title":"Install the JavaFX Scene Builder"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Windows%2010/#integrate-javafx-scene-builder-and-netbeans","text":"Once Scene Builder and NetBeans have been installed, it is time to move to the final step; integrate both the programs. Open NetBeans, click on \u201cFile\u201d and then \u201cNew project.\u201d in the dropdown menu. A new window will open. Click on \u201cJavaFX\u201d from the \u201cCategories\u201d tab and \u201cJava FXML Application\u201d from \u201cProjects\u201d tab. Click \u201cNext\u201d. Install any modules, if it prompts to download and activate any modules. In the next window give the project a name and click \u201cFinish\u201d. Once opened, go to the \u201cProjects\u201d tab and click on your project. Then click on \u201cSource Packages\u201d, click on your project\u2019s package, double-click on the .fxml file This will open the file in Scene Builder for you to work on it. Run your new fxml project and see the default \"Hello World\" program.","title":"Integrate JavaFX Scene Builder and NetBeans"},{"location":"How%20to%20setup%20Java%20FXML%20with%20Netbeans%20and%20Scene%20Builder%20in%20Windows%2010/#next-steps","text":"You have successfully integrated Scene Builder and NetBeans to work together. Once you are done with making the GUI, add functionality and logic to it by editing the \u201cController.Java\u201d file, which is directly below the .fxml file. Enjoy making GUI for your programs in an intuitive and fun way using JavaFX Scene Builder.","title":"Next Steps"},{"location":"I.T.%20Service%20Management%20Elective/","text":"I.T. Service Management Elective Service Strategy Service Portfolio Management Demand Management Service Design Service Level Management Availability Management Capacity Management Continuity Management Service Transition Change Management Release and Deployment Management Transition Planning and Support Service Operations Service Desk Incident Management Problem Management Event Management Access Management Request Fulfillment Continuous Service Improvement Identifying Service Strategies Defining Metrics Data Gathering Data Processing Data Analysis Data Presentation Improvement Plan Course Outcomes Upon completion of the course, students must be able to: CO 1 Discuss a conceptual framework of I.T. Service Management and its underlying principles CO 2 Apply appropriate tools and techniques for I.T. Risk Assessment and Project Management CO 3 Identify the key principles related to each stage of I.T. Service Management CO 4 Explain the processes of Demand, Capacity and Availability Monitoring CO 5 Identify and plan for managing project risks and opportunities for improvement","title":"I.T. Service Management Elective"},{"location":"I.T.%20Service%20Management%20Elective/#it-service-management-elective","text":"Service Strategy Service Portfolio Management Demand Management Service Design Service Level Management Availability Management Capacity Management Continuity Management Service Transition Change Management Release and Deployment Management Transition Planning and Support Service Operations Service Desk Incident Management Problem Management Event Management Access Management Request Fulfillment Continuous Service Improvement Identifying Service Strategies Defining Metrics Data Gathering Data Processing Data Analysis Data Presentation Improvement Plan Course Outcomes Upon completion of the course, students must be able to: CO 1 Discuss a conceptual framework of I.T. Service Management and its underlying principles CO 2 Apply appropriate tools and techniques for I.T. Risk Assessment and Project Management CO 3 Identify the key principles related to each stage of I.T. Service Management CO 4 Explain the processes of Demand, Capacity and Availability Monitoring CO 5 Identify and plan for managing project risks and opportunities for improvement","title":"I.T. Service Management Elective"},{"location":"ICPC%20Initial%20exercise/","text":"ICPC Initial exercise Produce working code that is as concise as possible for the following tasks: Using C++, read in a double (e.g. 1.4732, 15.324547327, etc.) echo it, but with a minimum field width of 7 and 3 digits after the decimal point (e.g. ss1.473 (where \u2018s\u2019 denotes a space), s15.325, etc.) Given an integer n (n \u2264 15) , print \u03c0 to n digits after the decimal point (rounded). (e.g. for n = 2 , print 3.14; for n = 4 , print 3.1416; for n = 5, prints 3.14159.) Given a date, determine the day of the week (Monday, . . . , Sunday) on that day. (e.g. 9 August 2010\u2014the launch date of the first edition of this book\u2014is a Monday.) Given n random integers, print the distinct (unique) integers in sorted order. Given the distinct and valid birthdates of n people as triples (DD, MM, YYYY), order them first by ascending birth months (MM), then by ascending birth dates (DD), and finally by ascending age. Given a list of sorted integers L of size up to 1M items, determine whether a value v exists in L with no more than 20 comparisons. Generate all possible permutations of {\u2018A\u2019, \u2018B\u2019, \u2018C\u2019, . . . , \u2018J\u2019}, the first N = 10 letters in the alphabet. Generate all possible subsets of {0, 1, 2, . . . , N-1}, for N = 20. Given a string that represents a base X number, convert it to an equivalent string in base Y, 2 \u2264 X, Y \u2264 36. For example: \u201cFF\u201d in base X = 16 (hexadecimal) is \u201c255\u201d in base Y 1 = 10 (decimal) and \u201c11111111\u201d in base Y 2 = 2 (binary). Let\u2019s define a \u2018special word\u2019 as a lowercase alphabet followed by two consecutive digits. Given a string, replace all \u2018special words\u2019 of length 3 with 3 stars \u201c \u201d, e.g. S = \u201cline: a70 and z72 will be replaced, aa24 and a872 will not\u201d should be transformed into: S = \u201cline: and *** will be replaced, aa24 and a872 will not\u201d. Given a valid mathematical expression involving \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, \u2018/\u2019, \u2018(\u2019, and \u2018)\u2019 in a single line, evaluate that expression. (e.g. a rather complicated but valid expression 3 + (8 - 7.5) * 10 / 5 - (2 + 5 * 7) should produce -33.0 when evaluated with standard operator precedence.)","title":"ICPC Initial exercise"},{"location":"ICPC%20Initial%20exercise/#icpc-initial-exercise","text":"Produce working code that is as concise as possible for the following tasks: Using C++, read in a double (e.g. 1.4732, 15.324547327, etc.) echo it, but with a minimum field width of 7 and 3 digits after the decimal point (e.g. ss1.473 (where \u2018s\u2019 denotes a space), s15.325, etc.) Given an integer n (n \u2264 15) , print \u03c0 to n digits after the decimal point (rounded). (e.g. for n = 2 , print 3.14; for n = 4 , print 3.1416; for n = 5, prints 3.14159.) Given a date, determine the day of the week (Monday, . . . , Sunday) on that day. (e.g. 9 August 2010\u2014the launch date of the first edition of this book\u2014is a Monday.) Given n random integers, print the distinct (unique) integers in sorted order. Given the distinct and valid birthdates of n people as triples (DD, MM, YYYY), order them first by ascending birth months (MM), then by ascending birth dates (DD), and finally by ascending age. Given a list of sorted integers L of size up to 1M items, determine whether a value v exists in L with no more than 20 comparisons. Generate all possible permutations of {\u2018A\u2019, \u2018B\u2019, \u2018C\u2019, . . . , \u2018J\u2019}, the first N = 10 letters in the alphabet. Generate all possible subsets of {0, 1, 2, . . . , N-1}, for N = 20. Given a string that represents a base X number, convert it to an equivalent string in base Y, 2 \u2264 X, Y \u2264 36. For example: \u201cFF\u201d in base X = 16 (hexadecimal) is \u201c255\u201d in base Y 1 = 10 (decimal) and \u201c11111111\u201d in base Y 2 = 2 (binary). Let\u2019s define a \u2018special word\u2019 as a lowercase alphabet followed by two consecutive digits. Given a string, replace all \u2018special words\u2019 of length 3 with 3 stars \u201c \u201d, e.g. S = \u201cline: a70 and z72 will be replaced, aa24 and a872 will not\u201d should be transformed into: S = \u201cline: and *** will be replaced, aa24 and a872 will not\u201d. Given a valid mathematical expression involving \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, \u2018/\u2019, \u2018(\u2019, and \u2018)\u2019 in a single line, evaluate that expression. (e.g. a rather complicated but valid expression 3 + (8 - 7.5) * 10 / 5 - (2 + 5 * 7) should produce -33.0 when evaluated with standard operator precedence.)","title":"ICPC Initial exercise"},{"location":"IP%20Website/","text":"IP Website https://mail.google.com/mail/u/0/#inbox/FMfcgxwLswDnDZZvKLzmskDdScntPQCV Roy Vincent Canseco rvlcanseco@pshs.edu.ph Mar 12, 2021, 7:29 PM (13 days ago) to Mara, Donna, Ralph Thank you for the updates Ma'am Mara! I'm attaching a gdoc version of the IP Agreement with my final comments/ suggestions. What I'm thinking to put into the Pisay IP Website, for now, are the following: The IP Agreement The presentation of Dr. Tangonan on why IP is important The names and pics of the IP Committee 2021. :) I plan to have it private to the Pisay community as a resource for our students and teachers. We can also link work, which we have secured patent/ copyright for, in the site to highlight them to the community. What do you think? Happy dinner! -Roy","title":"IP Website"},{"location":"IP%20Website/#ip-website","text":"https://mail.google.com/mail/u/0/#inbox/FMfcgxwLswDnDZZvKLzmskDdScntPQCV Roy Vincent Canseco rvlcanseco@pshs.edu.ph Mar 12, 2021, 7:29 PM (13 days ago) to Mara, Donna, Ralph Thank you for the updates Ma'am Mara! I'm attaching a gdoc version of the IP Agreement with my final comments/ suggestions. What I'm thinking to put into the Pisay IP Website, for now, are the following: The IP Agreement The presentation of Dr. Tangonan on why IP is important The names and pics of the IP Committee 2021. :) I plan to have it private to the Pisay community as a resource for our students and teachers. We can also link work, which we have secured patent/ copyright for, in the site to highlight them to the community. What do you think? Happy dinner! -Roy","title":"IP Website"},{"location":"IT%20Consulting%202020-09-22T08.49.39/","text":"IT Consulting 2020-09-22T08.49.39 I.T. Consulting Engagement Proposal Hi, I'm Roy Canseco, I am the Management Information Systems Head of Philippine Science High School in Diliman. I do active consulting for the UP Provident Fund Office for which I supervise the development of the Online Loans Application Module for UP employees nationwide. I also teach I.T. System Analysis and Computer Science in U.P. Diliman and Philippine Science. Previously, I managed the UP HRDO SQL migration project from a 25-year old legacy dos-based system into the modern web-based Ruby-on-Rails application they are using right now. Previously, I also co-founded an I.T. company that concentrated on Open Sourcing consulting, which I exited to join the academe. Currently, I am working on the development of an open source Online Learning Backup System for Philippine Science. I am applying to be your I.T. Consultant for the Telemedicine Project. As I.T. Consultant, I can provide the following services. Primarily author the project Terms of Reference Offer clarifications on technical issues and concerns Define fair expectations on I.T. deliverables Protect the client's technical interests Verify free and open-source software license effectiveness I engage in either hourly or monthly consulting. Monthly consulting is based on the assumption of around an hour of I.T. work daily. Hourly work is rounded to the nearest hour. Here are my standard rates as of 2020. For UP: 1k/ hr or 25k/ mo For Government: 1.5k/ hr or 35k/ mo For Cooperatives: 2k/ hr or 45k/ mo For Corporate: 3k/ hr or 60k/ mo Thank you for your kind consideration. Sincerely, Roy Canseco","title":"IT Consulting 2020 09 22T08.49.39"},{"location":"IT%20Consulting%202020-09-22T08.49.39/#it-consulting-2020-09-22t084939","text":"I.T. Consulting Engagement Proposal Hi, I'm Roy Canseco, I am the Management Information Systems Head of Philippine Science High School in Diliman. I do active consulting for the UP Provident Fund Office for which I supervise the development of the Online Loans Application Module for UP employees nationwide. I also teach I.T. System Analysis and Computer Science in U.P. Diliman and Philippine Science. Previously, I managed the UP HRDO SQL migration project from a 25-year old legacy dos-based system into the modern web-based Ruby-on-Rails application they are using right now. Previously, I also co-founded an I.T. company that concentrated on Open Sourcing consulting, which I exited to join the academe. Currently, I am working on the development of an open source Online Learning Backup System for Philippine Science. I am applying to be your I.T. Consultant for the Telemedicine Project. As I.T. Consultant, I can provide the following services. Primarily author the project Terms of Reference Offer clarifications on technical issues and concerns Define fair expectations on I.T. deliverables Protect the client's technical interests Verify free and open-source software license effectiveness I engage in either hourly or monthly consulting. Monthly consulting is based on the assumption of around an hour of I.T. work daily. Hourly work is rounded to the nearest hour. Here are my standard rates as of 2020. For UP: 1k/ hr or 25k/ mo For Government: 1.5k/ hr or 35k/ mo For Cooperatives: 2k/ hr or 45k/ mo For Corporate: 3k/ hr or 60k/ mo Thank you for your kind consideration. Sincerely, Roy Canseco","title":"IT Consulting 2020-09-22T08.49.39"},{"location":"IT%20Training%20Plan/","text":"IT Training Plan Day 1 - restarting moodle webservers (nginx and php-fpm) putty adduser usermod -aG sudo ssh user@172.105.217.30 sudo systemctl restart nginx php7.1-fpm php7.2-fpm mysqld chmod +x restart bash script Day 2 - linux backup basics (tar and rsync) I'll create a script to quickly make a folder with a lot of files I'll ask everyone to tarball the folder I'll ask everyone to rsync the folder into another folder We'll log into the backhub server We'll tarball the important Nephila folders We'll rsync pull down to the laptop rsync tar Day 3 Present a roy-tutorial on installing moodle on a VPS Create nanodes for everyone Ask everyone to follow the tutorial and STOP at the Moodle installation web page R :: results we want O :: observations to make along the way W :: why we do it this way Day 4 Do the DNS setup in CloudFlare update config.php and sites-available/moodle Check for https Finish Moodle installation Log in as admin Day 5 Create a course rsync a large course into the server Try to restore a large course adjust config.php to increase upload size Restore a large course Day 6 install moosh sudo -u www-data watch moosh top sudo -u www-data moosh course-list check database sudo -u www-data moosh course-delete go over the backup script Day 7 go over the bulk_create_restore script install goodls get api key download .mbz directory realpath redirection: > run the bulk_create_restore script Day 8 Try Ruby","title":"IT Training Plan"},{"location":"IT%20Training%20Plan/#it-training-plan","text":"","title":"IT Training Plan"},{"location":"IT%20Training%20Plan/#day-1-restarting-moodle-webservers-nginx-and-php-fpm","text":"putty adduser usermod -aG sudo ssh user@172.105.217.30 sudo systemctl restart nginx php7.1-fpm php7.2-fpm mysqld chmod +x restart bash script","title":"Day 1 - restarting moodle webservers (nginx and php-fpm)"},{"location":"IT%20Training%20Plan/#day-2-linux-backup-basics-tar-and-rsync","text":"I'll create a script to quickly make a folder with a lot of files I'll ask everyone to tarball the folder I'll ask everyone to rsync the folder into another folder We'll log into the backhub server We'll tarball the important Nephila folders We'll rsync pull down to the laptop","title":"Day 2 - linux backup basics (tar and rsync)"},{"location":"IT%20Training%20Plan/#rsync","text":"","title":"rsync"},{"location":"IT%20Training%20Plan/#tar","text":"","title":"tar"},{"location":"IT%20Training%20Plan/#day-3","text":"Present a roy-tutorial on installing moodle on a VPS Create nanodes for everyone Ask everyone to follow the tutorial and STOP at the Moodle installation web page R :: results we want O :: observations to make along the way W :: why we do it this way","title":"Day 3"},{"location":"IT%20Training%20Plan/#day-4","text":"Do the DNS setup in CloudFlare update config.php and sites-available/moodle Check for https Finish Moodle installation Log in as admin","title":"Day 4"},{"location":"IT%20Training%20Plan/#day-5","text":"Create a course rsync a large course into the server Try to restore a large course adjust config.php to increase upload size Restore a large course","title":"Day 5"},{"location":"IT%20Training%20Plan/#day-6","text":"install moosh sudo -u www-data watch moosh top sudo -u www-data moosh course-list check database sudo -u www-data moosh course-delete go over the backup script","title":"Day 6"},{"location":"IT%20Training%20Plan/#day-7","text":"go over the bulk_create_restore script install goodls get api key download .mbz directory realpath redirection: > run the bulk_create_restore script","title":"Day 7"},{"location":"IT%20Training%20Plan/#day-8","text":"Try Ruby","title":"Day 8"},{"location":"KHub%20details/","text":"KHub details IP addresses of KHub-MC: 18.138.173.11","title":"KHub details"},{"location":"KHub%20details/#khub-details","text":"IP addresses of KHub-MC: 18.138.173.11","title":"KHub details"},{"location":"KHub%20linode%20migration/","text":"KHub linode migration Fix Linode root PSmc!20 sir_roy roypass $ ssh user@server -o ServerAliveInterval=15 $ HOME/.ssh/config $ chmod 600 ~/.ssh/config config: Host remotehost HostName remotehost.com ServerAliveInterval 240 or: Host * ServerAliveInterval 240 alternatives for xip.io : * nip.io * sslip.io * localtls steps once working: * download miscellaneous courses * put in up.alum gdrive Duplicate Linode change the server name in moodle config and in sites-available wait a bit for changes to effect mv moodle code, data, and DB $ cp -rp rm moodle code, data, and DB in server2 setup ssh from server1 to server2 rsync moodle code, data, and DB dump to server2 check that it works. --progress :: estimate progress --delete :: delete extraneous Recommended method Turn on maintenance mode: Site Administration > Server > Maintenance Mode Copy moodledata from the old server to the new server: NB: It is not necessary to copy the contents of these > directories: /moodledata/cache /moodledata/localcache /moodledata/sessions /moodledata/temp /moodledata/trashdir Omitting these files will reduce transfer time substantially. Check the file permissions of the copied files. The web server needs read and write access. Copy the Moodle code from the old server to the new server check permissions the server needs read access Note: use rsync Update config.php with the URL of the new server Test the copied site Update links containing wwwroot in the database Note: use sed Take the site out of maintenance mode: When you are happy all has gone well, set up redirects/make DNS changes if required rm moodle code, data, and DB in server1 setup ssh from server2 to server1 rsync moodle code, data, and DB dump to server1 check that it works. Prepare for KHub sync install moodle 3.9 with postgresql 11.1 and catalyst objectfs check that things are still working upgrade to 2cpu 4GB ram linode check that things are still working increase swap disk check that things are still working set notification thresholds Build fresh server Note: use Build a fresh server If you want to set up a postgresql database like KHub, you can use: postgresql 11 Set up a DNS record for moodle application For users to access your Moodle instance you need to create a subdomain for it, thus, you need to create a DNS A record to achieve this. For this guide, our test domain is testprojects.me, so we need to create a subdomain, for example, learning.testprojects.me. So, log into your domain registrar\u2019s web console and access your domain\u2019s advanced settings, click Add New Record of type A, a host should be learning (or any word of your choice), and value should be the public IP address of your Ubuntu server. install php Note: use PHP 7.4 get moodle code cd /opt sudo git clone git://git.moodle.org/moodle.git cd moodle sudo git branch -a sudo git branch --track MOODLE_39_STABLE origin/MOODLE_39_STABLE sudo git checkout MOODLE_39_STABLE sudo cp -R /opt/moodle /var/www/ sudo mkdir /var/www/moodledata sudo chown -R www-data /var/www/moodledata sudo chmod -R 777 /var/www/moodledata sudo chmod -R 0755 /var/www/moodle Explanation: Since we setup a local repository in the previous step, you will copy it to your webroot after any updates and making changes. Having your local repository outside of the webroot, like we have in /opt, you will be able to prepare and stage your upgrades in a more efficient manner. For example, you want to make some changes or add some plug-ins, you would download the plugin and copy it to your local moodle repository. After you have added the plug-in and any other changes you might have made you will need to edit the file located in /opt/moodle/.git/info/exclude. Within that file you want to tell git which files/folders to exclude when it pulls down the updates when you run your next \"sudo git pull\". An example entry would be the certificate mod located in /opt/moodle/mod/certificate so within the exclude file you want to add \"/mod/certificate\" below the last comments. You would add additional entries, 1 per line, for each plug-in or file you might have changed. If I were to change the favicon.ico file you would just add \"favicon.ico\" to the exclude file. Now when you run \"sudo git pull\" to update moodle to the latest version it will ignore those files and directories and just update the core moodle code. Before copying to your webroot to upgrade you want to make sure and download and copy over the latest versions of the plug-ins you might have added. setup moodle to use postgresql $ cd /var/www/moodle/ $ sudo cp config-dist.php config.php $ sudo vim config.php $CFG->dbtype = 'pgsql'; // 'pgsql', 'mariadb', 'mysqli', 'sqlsrv' or 'oci' $CFG->dblibrary = 'native'; // 'native' only at the moment $CFG->dbhost = 'localhost'; // eg 'localhost' or 'db.isp.com' or IP $CFG->dbname = 'moodle_db'; // database name, eg moodle $CFG->dbuser = 'moodle_user'; // your database username $CFG->dbpass = 'moodle_password'; // your database password $CFG->prefix = 'mdl_'; // prefix to use for all table names // 'dbcollation' => 'utf8mb4_unicode_ci', $CFG->wwwroot = 'http://khub.example.com'; $CFG->dataroot = '/var/www/moodledata'; Set up Nginx Note: use nginx Configuring Nginx to work with PHP-FPM Note: use configure Nginx with PHP-FPM Configuring NGINX to Serve Moodle Application For NGINX to server your Moodle site, you need to create a new server block configuration under the NGINX configuration, in the directory /etc/nginx/conf.d/ $ sudo vim /etc/nginx/conf.d/moodle.conf Copy and paste the following configuration in it, replace backhub.pshsmc.xyz with your subdomain. server{ listen 80; server_name backhub.pshsmc.xyz; root /var/www/html/moodle; index index.php; location / { try_files $uri $uri/ /index.php?$query_string; } location ~ ^(.+\\.php)(.*)$ { fastcgi_split_path_info ^(.+\\.php)(.*)$; fastcgi_index index.php; fastcgi_pass unix:/run/php/php7.4-fpm.sock; include /etc/nginx/mime.types; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } client_max_body_size 200M; } Next, verify that the NGINX configuration is OK after making the above changes, then gracefully restart the NGINX service. $ sudo nginx -t $ sudo systemctl reload nginx Completing Moodle Installation via Web Installer System paths after install After installing Moodle you should set the system paths, this will provide better performance VS not setting them. Each entry in Moodle will have it's explanation. Navigate, on the moodle webpage, to Site Administration > Server > System Paths Input the following; Path to du: /usr/bin/du Path to apsell: /usr/bin/aspell Path to dot: /usr/bin/dot Save Changes Optional if you do not already have an AntiVirus Solution We also installed ClamAV previously Navigate to Site Administration > Plugins > Antivirus plugins > Manage antivirus plugins Enable ClamAV antivirus Click on Settings Set the proper settings Save changes ClamAV Path : /usr/bin/clamscan Save Changes Configure php.ini Check these settings in your php.ini or .htaccess file (if you're using Apache). For settings which use ON/OFF as their values, you can substitute 1 for ON and 0 for OFF if you prefer. If you change php.ini, don't forget to restart the server. Settings memory_limit needs to be at least 96M (although some functions may not work if this low). Moodle will refuse to install if lower. 128M is recommended. Large systems may need an even higher setting. session.save_handler needs to be set to FILES. file_uploads needs to be ON. session.auto_start needs to be OFF. The temp folder must be defined and writeable by your webserver user Check the error display/logging section. Make sure the settings are appropriate for your server use. post_max_size and upload_max_filesize restrict the maximum file size that can be uploaded. Check the [mail function] and database section (for your chosen database) to make sure they match your server configuration. check max_execution time -> 600 Find the correct php.ini php -i | grep php.ini Site admins can display phpinfo in moodle Settings > Site administration > Server > PHP info Extensions and libraries The iconv extension is required. The mbstring extension is required. The curl extension is required (required for networking and web services). The openssl extension is recommended (required for networking and web services). The tokenizer extension is recommended. The xmlrpc extension is recommended (required for networking and web services). The soap extension is recommended (required for web services). The ctype extension is required. The zip extension is required. The gd extension is recommended (required for manipulating images). The simplexml extension is required. The spl extension is required. The pcre extension is required. The dom extension is required. The xml extension is required. The intl extension is recommended. The json extension is required. The appropriate extension for your chosen database is also required. Other PHP extensions may be required to support optional Moodle functionality, especially external authentication and/or enrolment (e.g. LDAP extension for LDAP authentication and the sockets extension for Chat server). sudo systemctl restart php7.4-fpm.service sudo systemctl restart nginx Restoring a postgresql db dump $ cd $ pg_dump moodle_db > moodle-postgre-db.sql $ dropdb moodle_db $ createdb --owner=moodle_user --encoding=UTF8 moodle_db $ cat moodle_dump.sql | grep -i \"oldserver.com\" Update links containing wwwroot in the database #sed -e 's/oldserver.com/newserver.com/g' oldmysqldump.sql > newmysqldump.sql -e :: script #sed -i.bak -e 's/oldserver.com/newserver.com/g' mysqldump.sql -i.bak :: save the file changes in-place, but backup file first Check that it worked: $ cat moodle_db.sql | grep -i \"oldserver.com\" | head $ cat moodle_db.sql | grep -i \"newserver.com\" | head $ psql -U sir_roy -d moodle_db --set on_error_stop=on -f /opt/backup/backup/moodle_db.sql Create volume for db files To get started with a new volume, you'll want to create a filesystem on it: mkfs.ext4 \"/dev/disk/by-id/scsi-0Linode_Volume_ext-drive\" Once the volume has a filesystem, you can create a mountpoint for it: mkdir \"/mnt/ext-drive\" Then you can mount the new volume: mount \"/dev/disk/by-id/scsi-0Linode_Volume_ext-drive\" \"/mnt/ext-drive\" If you want the volume to automatically mount every time your Linode boots, you'll want to add a line like the following to your /etc/fstab file: /dev/disk/by-id/scsi-0Linode_Volume_ext-drive /mnt/ext-drive ext4 defaults,noatime,nofail 0 2 Setting Up HTTPS on Moodle Application Using Let\u2019s Encrypt Optimize server for moodle set up site backup install LBS for baseline monitoring on server install firefox YSlow tool for client consider stress testing: Load Test Your Web Server with Siege consider install moodle plugin: Edwiser Site Monitor If still slow consider transfer to Cloudways for advance cache solutions After returning to KHub consider updating and upgrading ubuntu server consider doing postgresql 11 streaming replication Plan D :) moosh setup moosh: Note: use moosh - Moodle Shell https://moosh-online.com/commands/ Very Useful Websites Namecheap Private Email records for domains with third-party DNS Configure Your Linode for Reverse DNS (rDNS) Domain Name Registration Data Lookup goodls CloudFlare Appendix MariaDB backup Note: use MariaDB backup","title":"KHub linode migration"},{"location":"KHub%20linode%20migration/#khub-linode-migration","text":"","title":"KHub linode migration"},{"location":"KHub%20linode%20migration/#fix-linode","text":"root PSmc!20 sir_roy roypass $ ssh user@server -o ServerAliveInterval=15 $ HOME/.ssh/config $ chmod 600 ~/.ssh/config config: Host remotehost HostName remotehost.com ServerAliveInterval 240 or: Host * ServerAliveInterval 240 alternatives for xip.io : * nip.io * sslip.io * localtls steps once working: * download miscellaneous courses * put in up.alum gdrive","title":"Fix Linode"},{"location":"KHub%20linode%20migration/#duplicate-linode","text":"change the server name in moodle config and in sites-available wait a bit for changes to effect","title":"Duplicate Linode"},{"location":"KHub%20linode%20migration/#mv-moodle-code-data-and-db","text":"$ cp -rp","title":"mv moodle code, data, and DB"},{"location":"KHub%20linode%20migration/#rm-moodle-code-data-and-db-in-server2","text":"setup ssh from server1 to server2 rsync moodle code, data, and DB dump to server2 check that it works. --progress :: estimate progress --delete :: delete extraneous","title":"rm moodle code, data, and DB in server2"},{"location":"KHub%20linode%20migration/#recommended-method","text":"Turn on maintenance mode: Site Administration > Server > Maintenance Mode Copy moodledata from the old server to the new server: NB: It is not necessary to copy the contents of these > directories: /moodledata/cache /moodledata/localcache /moodledata/sessions /moodledata/temp /moodledata/trashdir Omitting these files will reduce transfer time substantially. Check the file permissions of the copied files. The web server needs read and write access. Copy the Moodle code from the old server to the new server check permissions the server needs read access Note: use rsync Update config.php with the URL of the new server Test the copied site Update links containing wwwroot in the database Note: use sed Take the site out of maintenance mode: When you are happy all has gone well, set up redirects/make DNS changes if required","title":"Recommended method"},{"location":"KHub%20linode%20migration/#rm-moodle-code-data-and-db-in-server1","text":"setup ssh from server2 to server1 rsync moodle code, data, and DB dump to server1 check that it works.","title":"rm moodle code, data, and DB in server1"},{"location":"KHub%20linode%20migration/#prepare-for-khub-sync","text":"install moodle 3.9 with postgresql 11.1 and catalyst objectfs check that things are still working upgrade to 2cpu 4GB ram linode check that things are still working increase swap disk check that things are still working set notification thresholds","title":"Prepare for KHub sync"},{"location":"KHub%20linode%20migration/#build-fresh-server","text":"Note: use Build a fresh server If you want to set up a postgresql database like KHub, you can use: postgresql 11","title":"Build fresh server"},{"location":"KHub%20linode%20migration/#set-up-a-dns-record-for-moodle-application","text":"For users to access your Moodle instance you need to create a subdomain for it, thus, you need to create a DNS A record to achieve this. For this guide, our test domain is testprojects.me, so we need to create a subdomain, for example, learning.testprojects.me. So, log into your domain registrar\u2019s web console and access your domain\u2019s advanced settings, click Add New Record of type A, a host should be learning (or any word of your choice), and value should be the public IP address of your Ubuntu server.","title":"Set up a DNS record for moodle application"},{"location":"KHub%20linode%20migration/#install-php","text":"Note: use PHP 7.4","title":"install php"},{"location":"KHub%20linode%20migration/#get-moodle-code","text":"cd /opt sudo git clone git://git.moodle.org/moodle.git cd moodle sudo git branch -a sudo git branch --track MOODLE_39_STABLE origin/MOODLE_39_STABLE sudo git checkout MOODLE_39_STABLE sudo cp -R /opt/moodle /var/www/ sudo mkdir /var/www/moodledata sudo chown -R www-data /var/www/moodledata sudo chmod -R 777 /var/www/moodledata sudo chmod -R 0755 /var/www/moodle Explanation: Since we setup a local repository in the previous step, you will copy it to your webroot after any updates and making changes. Having your local repository outside of the webroot, like we have in /opt, you will be able to prepare and stage your upgrades in a more efficient manner. For example, you want to make some changes or add some plug-ins, you would download the plugin and copy it to your local moodle repository. After you have added the plug-in and any other changes you might have made you will need to edit the file located in /opt/moodle/.git/info/exclude. Within that file you want to tell git which files/folders to exclude when it pulls down the updates when you run your next \"sudo git pull\". An example entry would be the certificate mod located in /opt/moodle/mod/certificate so within the exclude file you want to add \"/mod/certificate\" below the last comments. You would add additional entries, 1 per line, for each plug-in or file you might have changed. If I were to change the favicon.ico file you would just add \"favicon.ico\" to the exclude file. Now when you run \"sudo git pull\" to update moodle to the latest version it will ignore those files and directories and just update the core moodle code. Before copying to your webroot to upgrade you want to make sure and download and copy over the latest versions of the plug-ins you might have added.","title":"get moodle code"},{"location":"KHub%20linode%20migration/#setup-moodle-to-use-postgresql","text":"$ cd /var/www/moodle/ $ sudo cp config-dist.php config.php $ sudo vim config.php $CFG->dbtype = 'pgsql'; // 'pgsql', 'mariadb', 'mysqli', 'sqlsrv' or 'oci' $CFG->dblibrary = 'native'; // 'native' only at the moment $CFG->dbhost = 'localhost'; // eg 'localhost' or 'db.isp.com' or IP $CFG->dbname = 'moodle_db'; // database name, eg moodle $CFG->dbuser = 'moodle_user'; // your database username $CFG->dbpass = 'moodle_password'; // your database password $CFG->prefix = 'mdl_'; // prefix to use for all table names // 'dbcollation' => 'utf8mb4_unicode_ci', $CFG->wwwroot = 'http://khub.example.com'; $CFG->dataroot = '/var/www/moodledata';","title":"setup moodle to use postgresql"},{"location":"KHub%20linode%20migration/#set-up-nginx","text":"Note: use nginx","title":"Set up Nginx"},{"location":"KHub%20linode%20migration/#configuring-nginx-to-work-with-php-fpm","text":"Note: use configure Nginx with PHP-FPM","title":"Configuring Nginx to work with PHP-FPM"},{"location":"KHub%20linode%20migration/#configuring-nginx-to-serve-moodle-application","text":"For NGINX to server your Moodle site, you need to create a new server block configuration under the NGINX configuration, in the directory /etc/nginx/conf.d/ $ sudo vim /etc/nginx/conf.d/moodle.conf Copy and paste the following configuration in it, replace backhub.pshsmc.xyz with your subdomain. server{ listen 80; server_name backhub.pshsmc.xyz; root /var/www/html/moodle; index index.php; location / { try_files $uri $uri/ /index.php?$query_string; } location ~ ^(.+\\.php)(.*)$ { fastcgi_split_path_info ^(.+\\.php)(.*)$; fastcgi_index index.php; fastcgi_pass unix:/run/php/php7.4-fpm.sock; include /etc/nginx/mime.types; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } client_max_body_size 200M; } Next, verify that the NGINX configuration is OK after making the above changes, then gracefully restart the NGINX service. $ sudo nginx -t $ sudo systemctl reload nginx","title":"Configuring NGINX to Serve Moodle Application"},{"location":"KHub%20linode%20migration/#completing-moodle-installation-via-web-installer","text":"","title":"Completing Moodle Installation via Web Installer"},{"location":"KHub%20linode%20migration/#system-paths-after-install","text":"After installing Moodle you should set the system paths, this will provide better performance VS not setting them. Each entry in Moodle will have it's explanation. Navigate, on the moodle webpage, to Site Administration > Server > System Paths Input the following; Path to du: /usr/bin/du Path to apsell: /usr/bin/aspell Path to dot: /usr/bin/dot Save Changes Optional if you do not already have an AntiVirus Solution We also installed ClamAV previously Navigate to Site Administration > Plugins > Antivirus plugins > Manage antivirus plugins Enable ClamAV antivirus Click on Settings Set the proper settings Save changes ClamAV Path : /usr/bin/clamscan Save Changes","title":"System paths after install"},{"location":"KHub%20linode%20migration/#configure-phpini","text":"Check these settings in your php.ini or .htaccess file (if you're using Apache). For settings which use ON/OFF as their values, you can substitute 1 for ON and 0 for OFF if you prefer. If you change php.ini, don't forget to restart the server.","title":"Configure php.ini"},{"location":"KHub%20linode%20migration/#settings","text":"memory_limit needs to be at least 96M (although some functions may not work if this low). Moodle will refuse to install if lower. 128M is recommended. Large systems may need an even higher setting. session.save_handler needs to be set to FILES. file_uploads needs to be ON. session.auto_start needs to be OFF. The temp folder must be defined and writeable by your webserver user Check the error display/logging section. Make sure the settings are appropriate for your server use. post_max_size and upload_max_filesize restrict the maximum file size that can be uploaded. Check the [mail function] and database section (for your chosen database) to make sure they match your server configuration. check max_execution time -> 600 Find the correct php.ini php -i | grep php.ini Site admins can display phpinfo in moodle Settings > Site administration > Server > PHP info","title":"Settings"},{"location":"KHub%20linode%20migration/#extensions-and-libraries","text":"The iconv extension is required. The mbstring extension is required. The curl extension is required (required for networking and web services). The openssl extension is recommended (required for networking and web services). The tokenizer extension is recommended. The xmlrpc extension is recommended (required for networking and web services). The soap extension is recommended (required for web services). The ctype extension is required. The zip extension is required. The gd extension is recommended (required for manipulating images). The simplexml extension is required. The spl extension is required. The pcre extension is required. The dom extension is required. The xml extension is required. The intl extension is recommended. The json extension is required. The appropriate extension for your chosen database is also required. Other PHP extensions may be required to support optional Moodle functionality, especially external authentication and/or enrolment (e.g. LDAP extension for LDAP authentication and the sockets extension for Chat server). sudo systemctl restart php7.4-fpm.service sudo systemctl restart nginx","title":"Extensions and libraries"},{"location":"KHub%20linode%20migration/#restoring-a-postgresql-db-dump","text":"$ cd $ pg_dump moodle_db > moodle-postgre-db.sql $ dropdb moodle_db $ createdb --owner=moodle_user --encoding=UTF8 moodle_db $ cat moodle_dump.sql | grep -i \"oldserver.com\" Update links containing wwwroot in the database #sed -e 's/oldserver.com/newserver.com/g' oldmysqldump.sql > newmysqldump.sql -e :: script #sed -i.bak -e 's/oldserver.com/newserver.com/g' mysqldump.sql -i.bak :: save the file changes in-place, but backup file first Check that it worked: $ cat moodle_db.sql | grep -i \"oldserver.com\" | head $ cat moodle_db.sql | grep -i \"newserver.com\" | head $ psql -U sir_roy -d moodle_db --set on_error_stop=on -f /opt/backup/backup/moodle_db.sql","title":"Restoring a postgresql db dump"},{"location":"KHub%20linode%20migration/#create-volume-for-db-files","text":"To get started with a new volume, you'll want to create a filesystem on it: mkfs.ext4 \"/dev/disk/by-id/scsi-0Linode_Volume_ext-drive\" Once the volume has a filesystem, you can create a mountpoint for it: mkdir \"/mnt/ext-drive\" Then you can mount the new volume: mount \"/dev/disk/by-id/scsi-0Linode_Volume_ext-drive\" \"/mnt/ext-drive\" If you want the volume to automatically mount every time your Linode boots, you'll want to add a line like the following to your /etc/fstab file: /dev/disk/by-id/scsi-0Linode_Volume_ext-drive /mnt/ext-drive ext4 defaults,noatime,nofail 0 2","title":"Create volume for db files"},{"location":"KHub%20linode%20migration/#setting-up-https-on-moodle-application-using-lets-encrypt","text":"","title":"Setting Up HTTPS on Moodle Application Using Let\u2019s Encrypt"},{"location":"KHub%20linode%20migration/#optimize-server-for-moodle","text":"set up site backup install LBS for baseline monitoring on server install firefox YSlow tool for client consider stress testing: Load Test Your Web Server with Siege consider install moodle plugin: Edwiser Site Monitor","title":"Optimize server for moodle"},{"location":"KHub%20linode%20migration/#if-still-slow","text":"consider transfer to Cloudways for advance cache solutions","title":"If still slow"},{"location":"KHub%20linode%20migration/#after-returning-to-khub","text":"consider updating and upgrading ubuntu server consider doing postgresql 11 streaming replication","title":"After returning to KHub"},{"location":"KHub%20linode%20migration/#plan-d","text":"","title":"Plan D  :)"},{"location":"KHub%20linode%20migration/#moosh","text":"setup moosh: Note: use moosh - Moodle Shell https://moosh-online.com/commands/","title":"moosh"},{"location":"KHub%20linode%20migration/#very-useful-websites","text":"Namecheap Private Email records for domains with third-party DNS Configure Your Linode for Reverse DNS (rDNS) Domain Name Registration Data Lookup goodls CloudFlare","title":"Very Useful Websites"},{"location":"KHub%20linode%20migration/#appendix","text":"","title":"Appendix"},{"location":"KHub%20linode%20migration/#mariadb-backup","text":"Note: use MariaDB backup","title":"MariaDB backup"},{"location":"LDAP%20-%20Prime/","text":"LDAP - Prime 2020-11-17T13.11.31 original source Install necessary packages. yum update -y && yum install -y openldap openldap-clients openldap-servers Initialize service. - cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG - chown ldap. /var/lib/ldap/DB_CONFIG - systemctl start slapd - systemctl enable slapd Create ROOT account. - ldapadd -Y EXTERNAL -H ldapi:/// -f root.ldif SASL/EXTERNAL authentication started SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth SASL SSF: 0 modifying entry \"olcDatabase={0}config,cn=config\" Build the directory. ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif Replace the content of the templates. sed -i 's/myorg/prime/g' * sed -i 's/desired_manager_password/strong_manager_password/g' * sed -i 's/MYORG/PRIME/g' * OR vim access.ldif lines 4, 9, 16, 26, 28: replace with own domain line 21: replace with directory manager password dn: olcDatabase={1}monitor,cn=config changetype: modify replace: olcAccess olcAccess: {0}to * by dn.base=\"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\" read by dn.base=\"cn=manager,dc=myorg,dc=edu,dc=ph\" read by * none dn: olcDatabase={2}hdb,cn=config changetype: modify replace: olcSuffix olcSuffix: dc=myorg,dc=edu,dc=ph dn: olcDatabase={2}hdb,cn=config changetype: modify replace: olcRootDN olcRootDN: cn=manager,dc=myorg,dc=edu,dc=ph dn: olcDatabase={2}hdb,cn=config changetype: modify add: olcRootPW olcRootPW: desired_manager_password dn: olcDatabase={2}hdb,cn=config changetype: modify add: olcAccess olcAccess: {0}to attrs=userPassword,shadowLastChange by dn=\"cn=ext.services,dc=myorg,dc=edu,dc=ph\" write by anonymous auth by self write by * none olcAccess: {1}to dn.base=\"\" by * read olcAccess: {2}to * by self read by dn=\"cn=ext.services,dc=myorg,dc=edu,dc=ph\" read by * none Continue building the directory while setting access controls. ldapmodify -Y EXTERNAL -H ldapi:/// -f access.ldif SASL/EXTERNAL authentication started SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth SASL SSF: 0 modifying entry \"olcDatabase={1}monitor,cn=config\" modifying entry \"olcDatabase={2}hdb,cn=config\" modifying entry \"olcDatabase={2}hdb,cn=config\" modifying entry \"olcDatabase={2}hdb,cn=config\" modifying entry \"olcDatabase={2}hdb,cn=config\" Create the domain, configure domain MANAGER account, and create the OUs. ldapadd -x -D cn=manager,dc=prime,dc=edu,dc=ph -W -f domain.ldif Enter LDAP Password: strong_manager_password adding new entry \"dc=prime,dc=edu,dc=ph\" adding new entry \"cn=manager,dc=prime,dc=edu,dc=ph\" adding new entry \"ou=people,dc=prime,dc=edu,dc=ph\" adding new entry \"ou=group,dc=prime,dc=edu,dc=ph\" At this point, the directory is complete and we can now add objects such as users and groups. Replace the test user password. sed -i 's/your_desired_password/test.user_password/g' * Upload the test user directory entries. ldapadd -xD cn=manager,dc=prime,dc=edu,dc=ph -W -f test-user.ldif Enter LDAP Password: strong_manager_password adding new entry \"uid=test.user,ou=people,dc=prime,dc=edu,dc=ph\" Set up bind account credentials. sed -i 's/desired_bind_password/strong_bind_password/g' * ldapadd -xD cn=manager,dc=prime,dc=edu,dc=ph -W -f bindaccount.ldif Enter LDAP Password: strong_manager_password adding new entry \"cn=ext.services,dc=prime,dc=edu,dc=ph\" Verify records You can check the directory for a record with ldapsearch as a user with read access, or with ldapwhoami as the account holder. Perform a search using the external service bind account to verify read-access: - ldapsearch -xb dc=prime,dc=edu,dc=ph -D cn=ext.services,dc=prime,dc=edu,dc=ph -W Enter LDAP Password: strong_bind_password < directory content > Or perform a whoami operation: - ldapwhoami -xD uid=test.user,ou=people,dc=prime,dc=edu,dc=ph -W Enter LDAP Password: test.user_password dn:uid=test.user,ou=people,dc=prime,dc=edu,dc=ph Proceed to the VPN exercises","title":"LDAP   Prime"},{"location":"LDAP%20-%20Prime/#ldap-prime","text":"2020-11-17T13.11.31 original source","title":"LDAP - Prime"},{"location":"LDAP%20-%20Prime/#install-necessary-packages","text":"yum update -y && yum install -y openldap openldap-clients openldap-servers Initialize service. - cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG - chown ldap. /var/lib/ldap/DB_CONFIG - systemctl start slapd - systemctl enable slapd Create ROOT account. - ldapadd -Y EXTERNAL -H ldapi:/// -f root.ldif SASL/EXTERNAL authentication started SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth SASL SSF: 0 modifying entry \"olcDatabase={0}config,cn=config\" Build the directory. ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif Replace the content of the templates. sed -i 's/myorg/prime/g' * sed -i 's/desired_manager_password/strong_manager_password/g' * sed -i 's/MYORG/PRIME/g' * OR vim access.ldif lines 4, 9, 16, 26, 28: replace with own domain line 21: replace with directory manager password dn: olcDatabase={1}monitor,cn=config changetype: modify replace: olcAccess olcAccess: {0}to * by dn.base=\"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\" read by dn.base=\"cn=manager,dc=myorg,dc=edu,dc=ph\" read by * none dn: olcDatabase={2}hdb,cn=config changetype: modify replace: olcSuffix olcSuffix: dc=myorg,dc=edu,dc=ph dn: olcDatabase={2}hdb,cn=config changetype: modify replace: olcRootDN olcRootDN: cn=manager,dc=myorg,dc=edu,dc=ph dn: olcDatabase={2}hdb,cn=config changetype: modify add: olcRootPW olcRootPW: desired_manager_password dn: olcDatabase={2}hdb,cn=config changetype: modify add: olcAccess olcAccess: {0}to attrs=userPassword,shadowLastChange by dn=\"cn=ext.services,dc=myorg,dc=edu,dc=ph\" write by anonymous auth by self write by * none olcAccess: {1}to dn.base=\"\" by * read olcAccess: {2}to * by self read by dn=\"cn=ext.services,dc=myorg,dc=edu,dc=ph\" read by * none Continue building the directory while setting access controls. ldapmodify -Y EXTERNAL -H ldapi:/// -f access.ldif SASL/EXTERNAL authentication started SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth SASL SSF: 0 modifying entry \"olcDatabase={1}monitor,cn=config\" modifying entry \"olcDatabase={2}hdb,cn=config\" modifying entry \"olcDatabase={2}hdb,cn=config\" modifying entry \"olcDatabase={2}hdb,cn=config\" modifying entry \"olcDatabase={2}hdb,cn=config\" Create the domain, configure domain MANAGER account, and create the OUs. ldapadd -x -D cn=manager,dc=prime,dc=edu,dc=ph -W -f domain.ldif Enter LDAP Password: strong_manager_password adding new entry \"dc=prime,dc=edu,dc=ph\" adding new entry \"cn=manager,dc=prime,dc=edu,dc=ph\" adding new entry \"ou=people,dc=prime,dc=edu,dc=ph\" adding new entry \"ou=group,dc=prime,dc=edu,dc=ph\" At this point, the directory is complete and we can now add objects such as users and groups.","title":"Install necessary packages."},{"location":"LDAP%20-%20Prime/#_1","text":"Replace the test user password. sed -i 's/your_desired_password/test.user_password/g' * Upload the test user directory entries. ldapadd -xD cn=manager,dc=prime,dc=edu,dc=ph -W -f test-user.ldif Enter LDAP Password: strong_manager_password adding new entry \"uid=test.user,ou=people,dc=prime,dc=edu,dc=ph\" Set up bind account credentials. sed -i 's/desired_bind_password/strong_bind_password/g' * ldapadd -xD cn=manager,dc=prime,dc=edu,dc=ph -W -f bindaccount.ldif Enter LDAP Password: strong_manager_password adding new entry \"cn=ext.services,dc=prime,dc=edu,dc=ph\"","title":""},{"location":"LDAP%20-%20Prime/#_2","text":"Verify records You can check the directory for a record with ldapsearch as a user with read access, or with ldapwhoami as the account holder. Perform a search using the external service bind account to verify read-access: - ldapsearch -xb dc=prime,dc=edu,dc=ph -D cn=ext.services,dc=prime,dc=edu,dc=ph -W Enter LDAP Password: strong_bind_password < directory content > Or perform a whoami operation: - ldapwhoami -xD uid=test.user,ou=people,dc=prime,dc=edu,dc=ph -W Enter LDAP Password: test.user_password dn:uid=test.user,ou=people,dc=prime,dc=edu,dc=ph Proceed to the VPN exercises","title":""},{"location":"Laravel%20on%20XAMPP%20in%20Ubuntu%2018.04/","text":"Laravel on XAMPP in Ubuntu 18.04 setup XAMPP Note that you may need to uninstall apache first $ sudo apt remove apache* https://www.5balloons.info/how-to-install-laravel-5-5-with-xampp-on-linux/ $ sudo apt install php7.4 php7.4-cli php7.4-common php7.4-json php7.4-opcache php7.4-mysql php7.4-mbstring php7.4-zip php7.4-fpm php7.4-xml -y open xampp from /opt/lampp/xampp start the apache server go to authproject.localhost/myProject Connect to a database https://www.5balloons.info/connecting-your-project-to-database-in-laravel/","title":"Laravel on XAMPP in Ubuntu 18.04"},{"location":"Laravel%20on%20XAMPP%20in%20Ubuntu%2018.04/#laravel-on-xampp-in-ubuntu-1804","text":"","title":"Laravel on XAMPP in Ubuntu 18.04"},{"location":"Laravel%20on%20XAMPP%20in%20Ubuntu%2018.04/#setup-xampp","text":"Note that you may need to uninstall apache first $ sudo apt remove apache* https://www.5balloons.info/how-to-install-laravel-5-5-with-xampp-on-linux/ $ sudo apt install php7.4 php7.4-cli php7.4-common php7.4-json php7.4-opcache php7.4-mysql php7.4-mbstring php7.4-zip php7.4-fpm php7.4-xml -y open xampp from /opt/lampp/xampp start the apache server go to authproject.localhost/myProject","title":"setup XAMPP"},{"location":"Laravel%20on%20XAMPP%20in%20Ubuntu%2018.04/#connect-to-a-database","text":"https://www.5balloons.info/connecting-your-project-to-database-in-laravel/","title":"Connect to a database"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/","text":"Learn Ruby on Rails: Book One Version 4.0.0, 25 November 2016 Daniel Kehoe Contents Chapter 1 Free Offer and More 1.1 Get Book Two 1.2 Get the Videos 1.3 The Online and Ebook Versions Chapter 2 Introduction 2.1 Is It for You? 2.2 What To Expect 2.2.1 What\u2019s in Book One 2.2.2 What\u2019s in Book Two 2.2.3 A Warning About Links 2.2.4 What Comes Next 2.2.5 Versions 2.2.6 Staying In Touch 2.2.7 A Note to Reviewers and Teachers 2.2.8 Using the Book in the Classroom 2.2.9 Let\u2019s Get Started Chapter 3 Concepts 3.1 How the Web Works 3.2 Programming Languages 3.3 Ruby and JavaScript 3.4 JavaScript and JQuery 3.4.1 JQuery 3.4.2 Full-Stack JavaScript 3.5 Front and Back Ends 3.6 Rails 5 3.7 JavaScript Frameworks 3.7.1 AngularJS and Ember.js 3.7.2 React Chapter 4 What is Rails? 4.1 Rails as a Community 4.2 Six Perspectives on Rails 4.2.1 Web Browser Perspective 4.2.2 Programmer Perspective 4.2.3 Software Architect Perspective 4.2.4 Gem Hunter Perspective 4.2.5 Time Traveler Perspective 4.2.6 Tester Perspective 4.3 Understanding Stacks 4.3.1 Full Stack 4.3.2 Rails Stacks Chapter 5 Why Rails? 5.1 Why Ruby? 5.2 Why Rails? 5.3 Rails Guiding Principles 5.3.1 Rails is Opinionated 5.3.2 Rails is Omakase 5.3.3 Convention Over Configuration 5.3.4 Don\u2019t Repeat Yourself 5.4 Where Rails Gets Complicated 5.4.1 When Rails has No Opinion 5.4.2 Omakase But Substitutions Are Allowed 5.4.3 Conventions or Magic? 5.4.4 DRY to Obscurity Chapter 6 Rails Challenges 6.1 A List of Challenges 6.1.1 It is difficult to install Ruby. 6.1.2 Rails is a nightmare on Windows. 6.1.3 Why do I have to learn Git? It is difficult. 6.1.4 Why worry about versions? 6.1.5 Do I really need to learn about testing? 6.1.6 Rails error reporting is cryptic. 6.1.7 There is too much magic. 6.1.8 It is difficult to grasp MVC and REST. 6.1.9 Rails contains lots of things I don\u2019t understand. 6.1.10 There is too much to learn. 6.1.11 It is difficult to find up-to-date advice. 6.1.12 It is difficult to know what gems to use. 6.1.13 Rails changes too often. 6.1.14 It is difficult to transition from tutorials to building real applications. 6.1.15 I\u2019m not sure where the code goes. 6.1.16 People like me don\u2019t go into programming. Chapter 7 Get Help When You Need It 7.1 Getting Help With Rails 7.2 References 7.2.1 RailsGuides 7.2.2 Cheatsheets 7.2.3 API Documentation 7.3 Meetups, Hack Nights, and Workshops 7.4 Pair Programming 7.5 Pairing With a Mentor 7.6 Code Review 7.7 Staying Up-to-Date Chapter 8 Plan Your Product 8.1 Product Owner 8.2 User Stories 8.3 Wireframes and Mockups 8.4 Graphic Design 8.5 Software Development Process 8.6 Behavior-Driven Development Chapter 9 Manage Your Project 9.1 To-Do List 9.2 Kanban 9.3 Agile Methodologies Chapter 10 Mac, Linux, or Windows 10.1 Your Computer 10.2 Hosted Computing 10.3 Installing Ruby 10.3.1 MacOS 10.3.2 Ubuntu Linux 10.3.3 Hosted Computing 10.3.4 Windows Chapter 11 Terminal Unix 11.1 The Terminal 11.2 Unix Commands Explained 11.3 Getting Fancy With the Prompt 11.4 Learning Unix Commands 11.5 Exit Gracefully 11.6 Structure of Unix Commands 11.6.1 Prompt 11.6.2 Command 11.6.3 Option 11.6.4 Argument 11.7 Quick Guide to Unix Commands 11.7.1 cd 11.7.2 pwd 11.7.3 ls 11.7.4 Hidden Files and Folders 11.7.5 Dots 11.7.6 open 11.7.7 mkdir 11.7.8 touch 11.7.9 mv 11.7.10 cp 11.7.11 rm 11.7.12 Removing a Folder 11.7.13 The Mouse and the Command Line 11.7.14 Arrow Keys 11.7.15 Tab Completion 11.8 Why Abbreviations? Chapter 12 Text Editor 12.1 You Don\u2019t Need an IDE 12.2 Which Text Editor 12.2.1 Install Atom 12.2.2 Other Choices 12.2.3 How To Use a Text Editor 12.3 Editor Shell Command Chapter 13 Learn Ruby 13.1 Ruby Language Literacy 13.2 Resources for Learning Ruby 13.2.1 Collaborative Learning 13.2.2 Online Tutorials 13.2.3 Books 13.2.4 Newsletters 13.2.5 Screencasts Chapter 14 Crossing the Chasm 14.1 Facing the Gap 14.2 Bridging the Gap With a Strategy 14.3 Bridging the Gap With Social Practice 14.3.1 Making an Effort 14.3.2 Conversation Starters 14.3.3 Pay It Forward 14.4 Finding a Mentor 14.5 Creating Mentorship Moments 14.5.1 Online 14.5.2 GitHub 14.5.3 Meetups 14.5.4 Workshops and Classes 14.5.5 On the Job 14.6 What\u2019s Next 14.6.1 Entrepreneurs 14.6.2 Lifestyle Businesses and Personal Projects 14.7 Build Applications Chapter 15 Level Up 15.1 What to Learn Next 15.1.1 Databases 15.1.2 Testing 15.1.3 Authentication and Sessions 15.1.4 Authorization 15.1.5 JavaScript 15.1.6 Other Topics 15.1.7 Curriculum Guides 15.2 Places to Learn 15.2.1 Code Camps 15.2.2 Other Classrooms 15.2.3 Online Courses 15.2.4 Videos 15.2.5 Books 15.3 A Final Word Chapter 16 Version Notes 16.1 Version 4.0.0 16.2 Version 3.0.0 16.3 Version 2.2.2 16.4 Version 2.2.1 16.5 Version 2.2.0 16.6 Version 2.1.6 16.7 Version 2.1.5 16.8 Version 2.1.4 16.9 Version 2.1.3 16.10 Version 2.1.2 16.11 Version 2.1.1 16.12 Version 2.1.0 16.13 Version 2.0.2 16.14 Version 2.0.1 16.15 Version 2.0.0 16.16 Version 1.19 16.17 Version 1.18 16.18 Version 1.17 Chapter 17 Credits and Comments 17.1 Credits 17.1.1 Financial Backers 17.1.2 Editors and Proofreaders 17.1.3 Photos 17.2 Comments Chapter 1 Free Offer and More You are reading Book One, which introduces basic concepts and gives you the background you need to succeed. Book One is 99 cents on Amazon and free on my own site. I\u2019ll also tell you how to get Book Two plus videos and advanced tutorials. 1.1 Get Book Two In Book Two, you\u2019ll build a useful web application, for hands-on learning. You should get started with Book Two right away, for hands-on learning. Read Book Two when you are at your computer; read Book One for background when you are away from the computer. The two books go together, which is why I want you to have both books. 1.2 Get the Videos You can watch videos as you read the book. A subscription is only $19 per month (there\u2019s also a discount when you get the video series plus advanced tutorials). You\u2019ll get Book Two when you get the videos: Get Book Two plus the Videos You can also get Book Two when you buy the advanced Capstone Rails Tutorials, which you\u2019ll want after you finish this book series: Get Book Two plus the Videos and Advanced Tutorials With the videos and the advanced tutorials, I promise there is no better way to learn Rails. 1.3 The Online and Ebook Versions I\u2019ve created an online version of this book at learn-rails.com . You\u2019ll also find PDF, Epub (iBooks), and Mobi (Kindle) versions available for download. Look for the link \u201cFree Online Edition\u201d when you visit the site. It\u2019s free: learn-rails.com I\u2019ll ask you to provide your email address when you sign up to get free access. I work hard to keep the books up to date, incorporating improvements and fixing errors as readers report issues. I update the books often and I send email to notify of updates. If you bought the book from Amazon or another retailer, email is the only way to learn about updates. Get the ebook version you prefer, get Book Two when you are ready, and let\u2019s get started. Chapter 2 Introduction Welcome. This is a first step on your path to learn Ruby on Rails. This book contains the background that\u2019s missing from other tutorials. Here you\u2019ll learn key concepts so you\u2019ll have a solid foundation for continued study. Whether you choose to continue with another book in this series, a video course, or a code school, everything will make sense when you start here. You can read this book anywhere, at your leisure, on your phone or tablet. Use this book to gain background understanding when you are not at your computer. With Book Two, the next in the series, you\u2019ll need a computer at hand so you can build your first web application. In Book Two, you\u2019ll build a working web application so you\u2019ll gain hands-on experience. Along the way, you\u2019ll practice techniques used by professional Rails developers. And I\u2019ll help you\u2019ll understand why Rails is a popular choice for web development. You can start with Book Two before finishing this book if you\u2019re eager to get started building your first application. In fact, I recommend it, because the hands-on learning in Book Two reinforces the concepts you learn in this book. Figure 2.1: The application you will build in Book Two. 2.1 Is It for You? If you\u2019ve built simple websites using HTML, you\u2019ll quickly progress to building websites with Rails. Or, if you have experience in a language such as PHP or Java, you\u2019ll make the jump to the Rails framework. But I promise you don\u2019t need to be a programmer to succeed with this book or the next. You\u2019ll be surprised how quickly you become familiar with the Unix command line interface and the Ruby programming language even if you\u2019ve never tried programming before. My books are ideal if you are: a student a startup founder making a career change If you are starting a business, and hiring developers, or working alongside developers as a manager or developer, this book will help you talk with developers. However, the true purpose of my book is to help you become you a Rails developer yourself. I want to help you launch a startup or begin a new career. 2.2 What To Expect There is deep satisfaction in building an application and making it run. With this book and the next, I\u2019ll give you everything you need to build a real-world Rails application. More importantly, I\u2019ll explain everything you build, so you understand how it works. When you\u2019ve completed this tutorial, you will be ready for more advanced self-study, including the Capstone Rails Tutorials , textbook introductions to Rails, or workshops and code camps that provide intensive training in Ruby on Rails. Other curriculums often skip the basics. With this tutorial you\u2019ll have a solid grounding in key concepts. You won\u2019t feel overwhelmed or frustrated as you continue your studies. I think you\u2019ll also have fun! This book and the next are good preparation for: textbooks such as Michael Hartl\u2019s Ruby on Rails Tutorial introductory workshops from RailsBridge or Rails Girls intensive training with immersive code camps Capstone Rails Tutorials from the RailsApps Project We are blessed with many textbooks, workshops, and classroom programs that teach Ruby on Rails. I believe this book is unique in covering the basics while introducing the tools and techniques of professional Rails development. 2.2.1 What\u2019s in Book One Book One is a self-help book that can change your life, though here you won\u2019t find any inspirational quotes or magical thinking. I explain the culture and practices of the Rails community. I introduce the basic concepts you\u2019ll need to understand web application development. You\u2019ll learn how to be a successful learner and how to get help when you need it. I also provide a plan for study so you can learn more when you need it. There\u2019s so much to learn, it helps to have a map so you know where to go next. Programming can be frustrating and Rails isn\u2019t easy for beginners. The chapter, \u201cRails Challenges,\u201d describes many of the problems learners encounter. It\u2019s natural to get discouraged so take a look when you begin to feel overwhelmed. Two chapters, \u201cCrossing the Chasm\u201d, and \u201cLevel Up\u201d, will help you after you put the book down. Many learners feel stranded if their only experience is step-by-step tutorials. These chapters are designed to give you a strategy for building an application on your own. 2.2.2 What\u2019s in Book Two You\u2019ll start coding in Book Two. It\u2019s a hands-on tutorial that will lead you through the code needed to build a real-world web application. Don\u2019t skip around in Book Two. The tutorial is designed to unfold in steps, one section leading to another, until you reach the \u201cTesting\u201d chapter. You can complete Book Two in one long weekend, though it will take concentration and stamina. If you work through the book over a longer timespan, try to set aside uninterrupted blocks of two hours or more for reading and coding, as it takes time to focus and concentrate. Feel free to start Book Two before you finish this book. Begin coding with Book Two while you get background knowledge from this book at your leisure. Visit tutorials.railsapps.org to learn how to get Book Two. 2.2.3 A Warning About Links My books are densely packed with links to background reading. If you click every link, you\u2019ll be a well-informed student, but you may never finish the book! It\u2019s up to you to master your curiosity. Follow the links only when you want to dive deeper. 2.2.4 What Comes Next The best way to learn is by doing; when it comes to code, that means building applications. Hands-on learning with actual Rails applications is the key to absorbing and retaining knowledge. After you read this book, you\u2019ll be able to work with the example applications from the RailsApps Project . The project provides open source example applications for Rails developers, for free. Each application is accompanied by a tutorial in the Capstone Rails Tutorials series, so there\u2019s no mystery code. Each application can be generated in a few minutes with the Rails Composer tool, which professional developers use to create starter applications. The RailsApps Project is solely supported by sales of the books, videos, and advanced tutorials. If you make a purchase, you\u2019ll keep the project going. And you\u2019ll have my sincere appreciation for your support. 2.2.5 Versions Book One is relevant and useful for any version of Rails. Book Two requires a specific version of Rails (the newest at the time it was revised) and shows how to install the latest version of Rails. 2.2.6 Staying In Touch If you obtained this book from Amazon or another retailer, take a moment to get on the mailing list for the book. I\u2019ll let you know when I release updates to the book. Get on the mailing list for the book 2.2.7 A Note to Reviewers and Teachers This book approaches the subject differently than most introductions to Rails. It introduces concepts of product planning, project management, and website analytics to place development within a larger context of product development and marketing. In Book Two, rather than show the student how to use scaffolding, I introduce the model-view-controller design pattern by creating the components manually. Lastly, though every other Rails tutorial shows how to use a database, Book Two doesn\u2019t, because I want the book to be a short introduction and I believe the basic principles of a web application stand out more clearly without adding a database to the application. Though this tutorial is not a typical Rails introduction, I hope you\u2019ll agree that it does a good job in preparing Rails beginners for continued study, whether it is a course or more advanced books. 2.2.8 Using the Book in the Classroom If you\u2019ve organized a workshop, course, or code camp, and would like to assign the book as recommended reading, contact me at [email protected] to arrange access to the book for your students. The book is available at no charge to students enrolled in qualified workshops or classes. 2.2.9 Let\u2019s Get Started In the next chapter, we\u2019ll start with basic concepts. Chapter 3 Concepts This chapter provides the background, or big picture, you will need to understand Rails. These are the key concepts you\u2019ll need to know before you try to use Rails. In the following two chapters, you\u2019ll gain a deeper understanding of Rails, including its history, the guiding principles of Rails, and reasons for its popularity. First, let\u2019s consider how the web works. 3.1 How the Web Works We start with absolute basics, as promised. When you \u201cvisit a website on the Internet\u201d you use a web browser such as Safari, Chrome, Firefox, or Internet Explorer. Web browsers are applications (software programs) that work by reading files . Compare a word processing program with a web browser . Both word processing programs and web browsers read files. Microsoft Word reads files that are stored on your computer to display documents. A web browser retrieves files from remote computers called servers to display web pages. Simply put, the World Wide Web is nothing more than files delivered to web browsers by web servers. Web browsers make requests to web servers. Every web address, or URL , is a request to a web server. A web server responds by sending one or more files. We call this the request-response cycle . Everything displayed by a web browser comes from four kinds of files: HTML - structure (layout) and content (text) CSS - stylesheets to set visual appearance JavaScript - programming to alter the page Multimedia - images, video, or other media files At a minimum, a web page requires an HTML file. HTML files contain the words you see on a web page, along with markup tags that indicate headlines, paragraphs, and other types of text such as lists. If a web browser receives only an HTML file, it will display text, with default styles for headlines and paragraphs supplied by the browser. Because it is the World Wide Web, HTML files also contain hypertext links to other web pages. Sometimes links appear in the form of a button or an image. Sometimes a web page contains a form with a button that sends information to the web server. Links are web addresses, or URLs, and (you guessed it), they return files. If the page is always the same, every time it is displayed by the web browser, we say it is static . Webmasters don\u2019t need software such as Rails to deliver static documents; they just create files for delivery by an ordinary web server program. When you learn HTML and create simple web pages, you learn to upload files to a hosting service that provides web servers that deliver your HTML files to web browsers. In principle, you can run a web server delivering web pages from your computer at home but, in practice, most people want a web server that runs 24 hours a day and is located in a data center that has fast and reliable connections to the Internet. Static websites are ideal for particle-physics papers (which was the original use of the World Wide Web). But most sites on the web, especially those that allow a user to sign in, post comments, or order products and services, generate web pages dynamically . When you see a form with a button, you probably are looking at a page that makes a request to a web application. Dynamic websites often combine web pages with information from a database. A database stores information such as a user\u2019s name, comments, advertisements, or any other repetitive, structured data. A database query can provide a selection of data that customizes a webpage for a particular user or changes the web page so it varies with each visit. Dynamic websites use a programming language such as Ruby to assemble HTML, CSS, and JavaScript files on the fly from component files or a database. A software program written in Ruby and organized using the Rails development framework is a Rails web application . A web server program that runs Rails applications to generate dynamic web pages is an application server (but usually we just call it a web server). Software such as Rails can access a database, combining the results of a database query with static content to be delivered to a web browser as HTML, CSS, and JavaScript files. Keep in mind that the web browser only receives ordinary HTML, CSS, and JavaScript files; the files themselves are assembled dynamically by the Rails application running on the server. Even if you are not going to use a database, there are good reasons to generate a website using a programming language. For example, if you are creating several web pages, it often makes sense to assemble an HTML file from smaller components. For example, you might make a small file that will be included on every page to make a footer (Rails calls these \u201cpartials\u201d). Just as importantly, if you are using Rails, you can add features to your website with code that has been developed and tested by other people so you don\u2019t have to build everything yourself. The widespread practice of sharing code with other developers for free, and collaborating with strangers to build applications or tools, is known as open source software development. Rails is at the heart of a vibrant open source development community, which means you leverage the work of tens of thousands of skilled developers when you build a Rails application. When Ruby code is packaged up for others to share, the package is called a gem . The name is apt because shared code is valuable, like a gem. Ruby is a programming language. Rails is a development framework. Rails is software code written in the Ruby language. It is a library or collection of gems that we add to the core Ruby language. More importantly, Rails is a set of structures and conventions for building a web application using the Ruby language. By using Rails, you get well-tested code that implements many of the most-needed features of a dynamic website. When you need additional features, you can add additional gems. With Rails, you will be using shared standard practices that make it easier to collaborate with others and maintain your application. As an example, consider the code that is used to access a database. Using Ruby without the Rails framework, or using another language such as PHP, you could mix the complex programming code that accesses the database with the code that generates HTML. With the insight of years of developers\u2019 collective experience in maintaining and debugging such code, Rails provides a library of code that segregates database access from the code that displays pages, enforcing separation of concerns , and making more modular, maintainable programs. In a nutshell, that\u2019s how the web works, and why Rails is useful. For more on the history of Rails, and an explanation of why it is popular, see the next chapters. But before we dive into Rails, let\u2019s look at the increasingly complex world of web development, particularly the difference between front-end and back-end applications, and the programming languages we use, Ruby and JavaScript. 3.2 Programming Languages JavaScript and Ruby are both general-purpose programming languages. Developers use other popular programming languages such as C, Python, and Java. And developers like to talk about newer languages such as Elixir and Go, often comparing the popularity of programming languages. Most developers use only one or two popular languages on the job such as Ruby and JavaScript but hardcore programmers love to try new languages. Just a note: Java and JavaScript are unrelated, except by name. Java is a general-purpose language used in large enterprises, such as banking, where large teams of developers build applications. JavaScript is a language that was developed for use in web browsers. It was named \u201cJavaScript\u201d to take advantage of the popularity of Java but has little in common with Java except for the name. And a further note: HTML, the Hypertext Markup Language, is not a programming language. It is a markup language that uses tags to add structure and links to text. It doesn\u2019t allow conditional execution such as if... then... else which is key to programming. If you know HTML you can be a \u201ccoder,\u201d writing HTML code, but you are not really a programmer. 3.3 Ruby and JavaScript Ruby is the programming language you\u2019ll use when creating web applications that run on your local computer or a remote server using the Rails web application development framework. JavaScript is the programming language that controls every web browser. The companies that build web browsers (Google, Apple, Microsoft, Mozilla, and others) agreed to use JavaScript as the standard browser programming language. You might imagine an alternative universe in which Ruby was the browser programming language. That\u2019s not the real world; plus it would be boring, as learning more than one language makes us smarter and better programmers. 3.4 JavaScript and JQuery Though most of the code in Rails applications is written in Ruby, developers add JavaScript to Rails applications to implement features such as browser-based visual effects and user interaction. For simple Rails applications, you only need to learn Ruby. For more sophisticated web applications, you\u2019ll need to know both Ruby and JavaScript. JavaScript was first used on websites to add little features to the browser. For example, JavaScript can be used to display the current date and time on a web page. Or JavaScript can be used to pop up an annoying window when you try to leave a web page. There was little consistent structure to early JavaScript programs. And because JavaScript is an older language without a built-on package manager, there were no package libraries like Ruby gems to add functionality. Instead, web developers shared scripts or snippets of code to add commonly-implemented features. 3.4.1 JQuery In 2006, a group of developers released jQuery , a robust collection of scripts that are a foundation for most of the simple interactive user features found on websites today. Rails includes jQuery as part of any Rails application. You\u2019ll find jQuery on 65% of websites. To understand jQuery, you need to know that every web browser takes an intermediate step between receiving an HTML file and displaying a web page. After a web browser receives a file from a web server, it creates code in the computer\u2019s memory that describes the web page, complete with text and formatting, which we call the Document Object Model , or DOM. JQuery scripts manipulate the DOM, which is the web browser\u2019s internal representation of web page. JQuery commands make changes to the DOM. For example, you can write Javascript that replaces words on the page with different words. Or you can hide and reveal sections of the page. Many Rails applications use jQuery or pure JavaScript to add interactive browser features. Though it is easy to add JavaScript to web pages generated by Rails, the result is often \u201cJavaScript gravy\u201d or \u201csoup:\u201d a sloppy mix of JavaScript snippets and jQuery plugins poured over Rails views. After seeing applications built with JavaScript soup, developers often get an urge to adopt a framework like Rails for JavaScript, with standard structures and conventions to organize code. We\u2019ll look at JavaScript frameworks later in this chapter. But first, consider a universe where JavaScript is the only language you need to know. Not all developers use Rails; some use full-stack JavaScript. 3.4.2 Full-Stack JavaScript In the last few years, developers have been improving the JavaScript language so it can be used for server-side development as well as development of applications that run in the browser. System administrators can install the Node.js code library to enable servers to run JavaScript. Server-side JavaScript web application frameworks are available, such as Express and Meteor , but none are as popular as Ruby on Rails. Some code schools are now teaching \u201cfull stack JavaScript\u201d using the \u201cMEAN Stack,\u201d which combines four popular JavaScript technologies; MongoDB, Express, AngularJS, and Node.js. There are at least a dozen popular languages that developers use to build web applications. This will continue to be true. Full-stack JavaScript is now an option but Rails is not going away. For now, the Rails ecosystem is better known with more resources for building web applications and learning development. There will always be jobs for Rails developers. Startups will always be able to find developers who have experience with Rails. Your effort in learning Rails will continue to be worthwhile. However, it is important to learn JavaScript as well. 3.5 Front and Back Ends We often talk about \u201cfront-end\u201d and \u201cback-end\u201d development. The architecture of the web, split between web browsers running on local computers and web application programs running on remote servers, is inherently client-server . When we write applications for both the front end and back end, we are full-stack developers. Full-stack developers handle it all, including connections to database servers, server-side web applications, JavaScript for web browsers, and system administration of Unix servers. Increasingly, as web development gets more complex, there are fewer full-stack developers and more specialists. If you are building a web application for your own business, you may need to be a full-stack developer. But if you look for a job, you may choose to specialize as a front-end or back-end developer. Front-end developers have some design skill, worry a lot about user experience, and develop expertise with JavaScript. Back-end developers don\u2019t worry as much about design. They focus on the architecture of applications, database structure, and application performance using Ruby. Rails was originally created for full-stack development. Its model-view-controller architecture manages both connections to databases and display of web pages, requiring nothing more than the Ruby language and the Rails software library. JavaScript was originally created for front-end development. Some developers now use JavaScript for full-stack development but it is still primarily used for adding interactive features to web pages. Rails is popular for both the front end and the back end. The conventions of building Rails applications are widely known and a developer can leverage the work of tens of thousands of other developers by including open-source gems. A Rails back end can connect to thousands of different services and efficiently handle traffic for any average website. If your business is so successful that you must deal with problems of scale, you\u2019ll find many Rails experts able to help. For these reasons, developers continue to use Rails to build web applications, even as full-stack JavaScript grows in popularity. JavaScript is becoming more popular but developers will continue to build full-stack Rails applications where complex JavaScript user interfaces are not required. This could be quick \u201cminimal viable product\u201d (MVP) tests of business ideas or any project where it is too costly to invest in separate front-end and back-end development. If you are going to quickly build a web application, and launch a business, just build it with Rails and don\u2019t worry about implementing features in JavaScript. If you want a complex front end that uses JavaScript extensively, you may still want to use Rails for the back end. 3.6 Rails 5 Rails 5.0 is the newest version of Rails. Rails 5 recognizes the increasing use of Rails for back-end development. Rails 5 offers an option to build back-end-only applications that don\u2019t generate browser views. Instead, a stripped-down Rails 5 application returns data that can be consumed and displayed by another application. With this approach, you can have Rails on the back end and a JavaScript web browser application, or a mobile application, on the front end. With Rails 5, you can build a back-end application that just delivers data to a front-end application. Before Rails 5, most Rails applications generated entire web pages containing the results from a database query. Now with Rails 5, Rails developers have begun to build web applications that deliver just data, in the JSON (JavaScript Object Notation) format. With this approach, the Rails application provides an API, or application programming interface , that provides standardized responses to requests from an application in the hands of a user, which could be an IOS or Android application on a phone, or a JavaScript application running in a web browser. Now that you\u2019ve learned about the differences between front-end and back-end applications, let\u2019s learn about popular JavaScript frameworks. 3.7 JavaScript Frameworks I\u2019ve described Rails as a web development framework that uses the Ruby language. You can also find web development frameworks that use the JavaScript language. JavaScript frameworks were first developed so developers could build SPAs, single-page applications . Early examples of SPAs, such as Apple\u2019s MobileMe or iWork in 2008, were attempts to use JavaScript to build desktop-like applications to run in the web browser. The goal was to create RIAs, rich Internet applications, with similarities to software applications installed on the Mac or Windows, using JavaScript. Of course, no one really wants desktop applications anymore. We browse web pages to get information. We install mobile apps to get access to services. Sometimes we want access to services in web browsers. But we don\u2019t really want desktop applications in a web browser. 3.7.1 AngularJS and Ember.js AngularJS and Ember.js are the most popular JavaScript frameworks used to build single-page applications. They provide the structure and conventions that developers want for maintainable code. For complex, richly interactive web applications, these frameworks get rid of the \u201cJavaScript soup\u201d that is common in Rails applications. Unlike Rails, which is hugely popular, none of these JavaScript frameworks have achieved hegemony or dominance among developers. For a learner, these frameworks require more programming experience than Rails. All of these frameworks break the familiar request-response cycle of the web. Just one URL delivers the entire single-page application. There are no web pages, only views that change completely or partially in response to user actions. Drawbacks to single-page applications are a slow initial load of the application, difficulty using analytics tools such as Google Analytics which rely on new pages loading in the browser, and views that won\u2019t show up in Google search results. For all these reasons, single-page applications are best used to deliver services, not information, and require advanced skills to develop. 3.7.2 React There\u2019s a newer framework that can be used to dry up JavaScript soup. It\u2019s React , a JavaScript framework developed by engineers at Facebook. It can be used for single-page applications or to organize JavaScript for interactive features in ordinary Rails applications. Unlike AngularJS or Ember.js, React only manages views, not connections to databases or routing of requests, so it is not a full-stack framework, just a framework for the view layer. React\u2019s approach to building web pages is abstract and complex. But React is a good choice for complex interactive features, if you\u2019re determined to avoid JavaScript soup in your Rails application. Ultimately, your decision to use JavaScript, and how much, depends on the kind of web application you want to build. If you want to build a product catalog, with many simple pages populated by a database, a full-stack Rails application may be all you need, perhaps with a few jQuery plugins. If your application is like Facebook, with lots of interactive features and many different pages, React may be a good choice as part of a full-stack Rails application. If you want to deliver a service such as live stock-market charts, you may want to build a complex single-page application using AngularJS or Ember.js, plus IOS and Android apps, connected to a Rails API server. If you\u2019re going to use JavaScript, either full-stack, or combined with Rails, use a JavaScript framework to avoid JavaScript soup. React could be a good place to start. You\u2019ll have a better idea of the importance of Rails if you understand \u201cWhat is Rails?\u201d Let\u2019s look at that next. Chapter 4 What is Rails? Rails is a library , or collection of code, plus structures and conventions for building a web application. Technically, it is a package library (a RubyGem), that is installed using the operating system command-line interface, and adds functionality to the Ruby language. Rails provides structures and conventions for web development, so less code is required to build a web application. All Rails applications use the same structures, providing consistency among applications. Common and well-known conventions make it easy for developers to collaborate on Rails applications and share improvements and add-on code libraries with a wide community. The structures and conventions of Rails are codified as the Rails API (the application programming interface , or directives that control the code). The Rails API is documented online and described in books, articles, and blog posts. Learning Rails means learning how to use the Rails conventions and its API. 4.1 Rails as a Community Rails, in a larger sense, is more than a software library and an API. Rails is the central project of a vast community that produces software libraries that simplify the task of building complex websites. Members of the Rails community share many core values, often use the same tools, and support each other with an informal network that is built on volunteerism. Overlapping the informal community is an economic network that includes jobs, recruiters, consulting firms, conferences, businesses that build websites with Rails, and investors that fund startups. Rails is popular among web startups, significantly because the pool of open source software libraries (RubyGems, or \u201cgems\u201d) makes it possible to build complex sites quickly. This, then, is Rails: a software library and an API, plus a community of enthusiastic developers. But to learn to use Rails, you\u2019ll need to consider it from additional points of view. 4.2 Six Perspectives on Rails To really understand Rails, and succeed in building Rails applications, we need to consider Rails from six additional perspectives. A parable from the Indian subcontinent describes six blind men who encounter an elephant. The blind man who feels a leg says the elephant is like a pillar; the one who feels the tail says the elephant is like a rope; the one who feels the belly says the elephant is like a wall; and so on. Like six blind men encountering an elephant, it can be difficult to understand Rails unless you look at it from multiple points of view. Here are six different ways of looking at Rails. 4.2.1 Web Browser Perspective From the perspective of the web browser , Rails is simply a program that generates HTML, CSS, and JavaScript files. These files are generated dynamically. You can\u2019t see the files on the server side but you can view these files by using the web developer tools that are built in to every browser. Later you\u2019ll examine these files when you learn to troubleshoot a Rails application. 4.2.2 Programmer Perspective From the perspective of a programmer , Rails is a set of files organized with a specific structure. The structure is the same for every Rails application; this makes it easy to collaborate with other Rails developers. We use text editors to edit these files to make a web application. 4.2.3 Software Architect Perspective From the perspective of a software architect , Rails is a structure of abstractions that enable programmers to collaborate and organize their code. Thinking in abstractions means we group things in categories and analyze relationships. Conceptual categories and relationships can be made \u201creal\u201d in code. Software programs are built of \u201cconcepts made real\u201d that are the moving parts of a software machine. Notice that we are talking about abstractions, using language like a philosopher. Most tutorials give you step-by-step instructions, like following a recipe. You\u2019ll get that in Book Two in this series. But to really understand programming, you should grasp that we are working with \u201cabstractions made real.\u201d The area of your brain that follows instructions is distinct from the area that thinks abstractly. To be a programmer, you\u2019ll need both parts of the brain working together. Don\u2019t worry; I\u2019ll explain the abstractions in terms anyone can understand. To a software architect, classes are the basic parts of a software machine. A class can represent something in the physical world as a collection of various attributes or properties (for example, a User with a name, password, and email address). Or a class can describe another abstraction, such as a Number, with attributes such as quantity, and behavior, such as \u201ccan be added and subtracted.\u201d You\u2019ll get a better grasp of classes in Book Two when you learn \u201cJust Enough Ruby.\u201d To a software architect, Rails is a pre-defined set of classes that are organized into a higher level of abstraction known as an API, or application programming interface . The Rails API is organized to conform to certain widely known software design patterns . You\u2019ll become familiar with these abstractions as you build a Rails application. In Book Two, you\u2019ll learn about the model\u2013view\u2013controller design pattern. As a beginner, you will see the MVC design pattern reflected in the file structure of a Rails application. That\u2019s where you will first see \u201cabstractions made real.\u201d If you\u2019ve subscribed to the video series or purchased the advanced tutorials, this eight minute video introduces the model\u2013view\u2013controller concept: Model View Controller in Rails 4.2.4 Gem Hunter Perspective We can look at Rails from the perspective of a gem hunter . Rails is popular because developers have written and shared many software libraries (RubyGems, or \u201cgems\u201d) that provide useful features for building websites. We can think of a Rails application as a collection of gems that provide basic functionality, plus custom code that adds unique features for a particular website. Some gems are required by every Rails application. For example, database adaptors enable Rails to connect to databases. Other gems are used to make development easier, for example, gems for testing that help programmers find bugs. Still other gems add functionality to the website, such as gems for logging in users or processing credit cards. Knowing what gems to use, and why, is an important aspect of learning Rails. You don\u2019t need a subscription to view this free video introducing RubyGems: Free Video Lesson: What Are RubyGems 4.2.5 Time Traveler Perspective We can also look at Rails from the perspective of a time traveler in order to understand the importance of software version control . Specifically, we use the Git revision control system to record a series of snapshots of your project\u2019s filesystem. Git makes it easy to back up and recover files; more importantly, Git lets you make exploratory changes, trying out code you may decide to discard, without disturbing work you\u2019ve done earlier. You can use Git with GitHub , a popular \u201csocial coding\u201d website, for remote backup of your projects and community collaboration. Git can keep multiple versions (\u201cbranches\u201d) of your local code in sync with a remote GitHub repository, making it possible to collaborate with others on open source or proprietary projects. Strictly speaking, Git and GitHub are not part of Rails (they are tools that can be used on any development project). And there are several other version control systems that are used in open source development. But a professional Rails developer uses Git and GitHub constantly on any real-world Rails project. 4.2.6 Tester Perspective Finally, we can consider a Rails application from the perspective of a tester . Software testing is part of Rails culture; Rails is the first web development platform to make testing an integrated part of development. Before Rails, automated testing was rarely part of web development. A web application would be tested by users and (maybe) a QA team. If automated tests were used, the tests were often written after the web application was largely complete. Rails introduced the discipline of Test-Driven Development (TDD) to the wider web development community. With TDD, tests are often written before any implementation coding. It may seem odd to write tests first, but for a skilled TDD practitioner, it brings coherence to the programming process. First, the developer will give thought to what needs to be accomplished and think through alternatives and edge cases. Second, the developer will have complete test coverage for the project. With good test coverage, it is easier to refactor , rearranging code to be more elegant or efficient. Running a test suite after refactoring provides assurance that nothing inadvertently broke after the changes. TDD is seen as a necessary skill of an experienced Rails developer. Book Two will introduce you to the basic concepts of test-driven development and show you how to write simple tests. You\u2019ve seen Rails from six different perspectives. You understand Rails is a software library plus an API, as well as a community of developers. Now let\u2019s dive deeper and consider how Rails fits in to a larger technology stack and how it can vary within the stack. 4.3 Understanding Stacks To understand Rails from the perspective of a professional Rails developer, you\u2019ll need to grasp the idea of a technology stack and recognize that Rails can have more than one stack. 4.3.1 Full Stack A technology stack is a set of technologies or software libraries that are used to develop an application or deliver web pages. \u201cStack\u201d is a term that is used loosely and descriptively. It is a collection of technologies that fit together, interacting with each other, and providing different types of services. We say \u201cstack\u201d because we use different software systems or software libraries as if they were building blocks or bricks deployed in layers. Often we consider a stack as layers added to the operating system. For a web application, we need a web server, a database, a programming language, and perhaps additional software libraries. Earlier we learned that full-stack developers have skills to work with operating systems, web servers, databases, web applications, and JavaScript programs in a web browser. That\u2019s a formidable stack of technologies. There is no organization that tells you what building blocks you must use. As a technologist, your choice of stack reflects your experience, values, and personal preference, just like religion or favorite beverage. For example, Mark Zuckerberg developed Facebook in 2004 using the LAMP application stack: Linux (operating system) Apache (web server) MySQL (database) PHP (programming language) Zuckerberg chose an operating system, a web server, a database, and a programming language with which he was comfortable. In 2004, Rails was not well known and Zuckerberg chose to implement his ideas using PHP without any additional web application software library. For this tutorial, your application stack will be: MacOS, Linux, or Windows Puma (web server) SQLite (database) Ruby on Rails (language and framework) You\u2019ll use an operating system that\u2019s familiar to you, a basic web server that comes with Ruby, a database that\u2019s preinstalled with Mac or Linux operating system, the Ruby language, and the Rails web application software library. 4.3.2 Rails Stacks Sometimes when we talk about a stack, we only care about part of a larger stack. For example, a Rails stack includes the gems we choose to add features to a website or make development easier. When we select the gems we\u2019ll use for a Rails application, we\u2019re choosing a stack or layers of services we need just for a web application. Sometimes the choice of components is driven by the requirements of an application. At other times, the stack is a matter of personal preference. Just as craftsmen and aficionados debate the merits of favorite tools and techniques in any profession, Rails developers avidly dispute what\u2019s the best Rails stack for development. The company 37signals , where the creator of Rails works, uses this Rails stack: ERB for view templates MySQL for databases Minitest for testing It is not important (at this point) to know what the acronyms mean (we\u2019ll learn later). Another stack is more popular among Rails developers: Haml for view templates PostgreSQL for databases RSpec for testing We\u2019ll learn later what the terms mean. For now, just recognize that parts of the Rails framework can be swapped out, just like making substitutions when you order from a menu at a restaurant. The Rails stack can vary, and it is part of a larger stack that includes an operating system, web server, and database. You can learn much about Rails by following the experts\u2019 debates about the merits of a favorite stack. The debates are a source of much innovation and improvement for the Rails framework. In the end, the power of the crowd prevails; usually the best components in the Rails stack are the most popular. The proliferation of choices for the Rails stack can make learning difficult, particularly because the components used by many leading Rails developers are not the components used in many beginner tutorials. In this tutorial, we stick to solid ground where there is no debate. In the advanced Capstone Rails Tutorials , we\u2019ll explore stack choices and choose components that are most often used by professional developers. Chapter 5 Why Rails? Before you start building an application with Rails, it may help to know why developers like using Rails. This chapter looks at the history of Rails, its organizing principles, and the reasons for its popularity. First, though, we\u2019ll consider Ruby, the language used for Rails. 5.1 Why Ruby? Ruby is a programming language, created 20 years ago by Yukihiro \u201cMatz\u201d Matsumoto. By most measures of programming language popularity, Ruby ranks among the top ten , though usually as tenth (or so) in popularity, and largely due to the popularity of Rails. Like Java or the C language, Ruby is a general-purpose programming language, though it is best known for its use in web programming. In a podcast from This Developer\u2019s Life and in an interview from 2005 , David Heinemeier Hansson, the creator of Rails, describes building an online project management application named BaseCamp in 2004. He had been using the PHP programming language because he could get things done quickly but was frustrated because of a lack of abstraction and frequently repetitive code that made PHP \u201cdirty.\u201d Hansson wanted to use the \u201cclean\u201d software enginering abstractions supported in the Java programming language but found development in Java was cumbersome. He tried Ruby and was excited about the ease of use (he calls it pleasure) he found in the Ruby language. Ruby is known among programmers for a terse, uncluttered syntax that doesn\u2019t require a lot of extra punctuation. Compared to Java, Ruby is streamlined, with less code required to create basic structures such as data fields. Ruby is a modern language that makes it easy to use high-level abstractions such as metaprogramming. In particular, metaprogramming makes it easy to develop a \u201cdomain specific language\u201d that customizes Ruby for a particular set of uses (Rails and many gems use this \u201cDSL\u201d capability). Ruby\u2019s key advantage is RubyGems, the package manager that makes it easy to create and share software libraries (gems) that extend Ruby. RubyGems provides a simple system to install gems. Anyone can upload a gem to the central RubyGems website, making the gem immediately available for installation by anyone. The RubyGems website is where you\u2019ll obtain the most recent version of Rails. And it is where you will obtain all the gems that help you build complex websites. Ruby has several disadvantages (at least when programmers want to argue). Its processing performance is slow relative to C++ or Java. The execution speed of a language is seldom important, though, relative to the benefits gained by programmer productivity and the general level of performance required by most websites. For websites that require lots of simultaneous activity, Ruby is not well-suited to the sophisticated software engineering required to execute simultaneous activity efficiently (standard Ruby lacks \u201cparallelism\u201d, though some versions support it). Lastly, some programmers complain that Ruby programs (and especially Rails) contain \u201ctoo much magic\u201d (that is, complex operations that are hidden behind simple directives). These concerns haven\u2019t stopped Rails from becoming a popular web development platform. 5.2 Why Rails? Rails is popular and widely used because its conventions are pervasive and astute. Any web application has complex requirements that include basic functions such as generating HTML, processing form submissions, or accessing a database. Without a web application development framework, a programmer has a mammoth task to implement all the required infrastructure. Even with a web application development framework, a programmer can take an idiosyncratic approach, building something that no one else can easily take apart and understand. The singular virtue of Rails is that Heinemeier Hansson, and the core team that joined him, decided that there is one best way to implement much of the infrastructure required by a web application. Many of the implementation decisions appear arbitrary. In fact, though Heinemeier Hansson is often lambasted as autocratic in his approach to improving Rails, the Rails API reflects deep experience and intelligence in implementing the requirements of a web application development framework. The benefit is that every developer who learns the \u201cRails way\u201d produces a web application that any other Rails developer can unravel and understand more quickly than if they encountered idiosyncratic code without as many conventions. That means collaboration is easier, development is quicker, and there\u2019s a larger pool of open source libraries to enhance Rails. The advantage of establishing conventions might seem obvious, but when Rails was released in 2004, web development was dominated by PHP, which lent itself to idiosyncratic code produced by solo webmasters, and Java frameworks such as Struts, which were often seen as burdened by an excess of structure. Other frameworks, such as Apple\u2019s WebObjects, Adobe\u2019s ColdFusion, and Microsoft\u2019s .NET Framework, were in wide use but the frameworks were products controlled by the companies and built by small teams, which tended to restrict innovation. Today PHP, Java frameworks, and .NET remain popular, largely among solo webmasters (PHP), enterprise teams (Java), and Windows aficionados (.NET) but Rails has become very popular and has influenced development of other server-side frameworks. The design decisions that went into the first version of Rails anchored a virtuous circle that led to Rails\u2019s growth. Within the first year, Rails caught the attention of prominent software engineers, notably Martin Fowler and Dave Thomas (proponents of agile software development methodologies). Rails is well-matched to the practices of agile software development , particular in its emphasis on software testing and \u201cconvention over configuration.\u201d The interest and advocacy of opinion leaders from the agile camp led to greater visibility in the wider open source community, culminating in a keynote lecture by Heinemeier Hansson at the 2005 O\u2019Reilly Open Source Convention. Because Rails was adopted by software engineers who are influencers and trend setters, it is often said that Rails is favored by \u201cthe cool kids.\u201d If that is so, it is largely because Rails is well-suited to software engineering practices that are promoted by thought leaders like Fowler and Thomas. 5.3 Rails Guiding Principles The popularity of Rails is an outgrowth of the Rails \u201cphilosophy\u201d or guiding principles. If you read blogs by Rails developers, you\u2019ll often see references to these principles. Understanding these principles will help you make sense of Rails or, at least, some of the debates on developer blogs. 5.3.1 Rails is Opinionated In the mid-1990s, web applications were often written in Perl, a programming language that promised, \u201cThere\u2019s more than one way to do it.\u201d Perl is a prime example of \u201cnon-opinionated\u201d software; there\u2019s no \u201cright way\u201d or \u201cbest way\u201d to solve programming problems in Perl. Famously, Perl\u2019s documentation states, \u201cIn general, [Perl\u2019s built-in functions] do what you want, unless you want consistency.\u201d In contrast, Rails is said to be \u201copinionated.\u201d There is a \u201cRails way\u201d for many of the problems that must be solved by a web application developer. If you follow the Rails conventions, you\u2019ll have fewer decisions to make and you\u2019ll find more of what you need is already built. The benefit is faster development, improved collaboration, and easier maintenance. 5.3.2 Rails is Omakase Omakase is a Japanese phrase that means \u201cI\u2019ll leave it to you.\u201d Customers at sushi restaurants can order omakase, entrusting the chef to make a pleasing selection instead of making their own \u00e0 la carte choices. In a famous essay Heinemeier Hansson declared Rails is Omakase , and said, \u201cA team of chefs picked out the ingredients, designed the APIs, and arranged the order of consumption on your behalf according to their idea of what would make for a tasty full-stack framework\u2026. When we, or in some cases I \u2014 as the head chef of the omakase experience that is Rails \u2014 decide to include a dish, it\u2019s usually based on our distilled tastes and preferences. I\u2019ve worked in this establishment for a decade. I\u2019ve poured well in the excess of ten thousand hours into Rails. This doesn\u2019t make my tastes right for you, but it certainly means that they\u2019re well formed.\u201d Understanding that Rails is omakase means accepting that many of the opinions enshrined in the Rails API are the decisions of a Benevolent Dictator for Life , informed by discussion with other developers who have made significant contributions to the Rails code base. For the most part, Heinemeier Hansson\u2019s \u201copinions\u201d will serve you well. 5.3.3 Convention Over Configuration \u201cConvention over configuration\u201d is an example of Rails as \u201copinionated software.\u201d It is an extension of the concept of a default, a setting or value automatically assigned without user intervention. Some software systems, notably Java web application frameworks, need multiple configuration files, each with many settings. For example, a configuration file might specify that a database table named \u201csales\u201d corresponds to a class named \u201cSales.\u201d The configuration file permits flexibility (a developer can easily change the setting if the table is named \u201citems_sold\u201d). Instead of relying on extensive configuration files, Rails makes assumptions. By convention, if you create a model object in Rails named \u201cUser,\u201d it will save data to a database table named \u201cusers\u201d without any configuration required. Rails will also assume the table name is plural if the class name is singular. \u201cConvention over configuration\u201d means you\u2019ll be productive. You won\u2019t spend time setting up configuration files. You\u2019ll spend less time thinking about where things go and what names to assign. And, because other developers have learned the same conventions, it is easier to collaborate. 5.3.4 Don\u2019t Repeat Yourself Known by the acronym DRY, \u201cDon\u2019t Repeat Yourself\u201d is a principle of software development formulated by Andy Hunt and Dave Thomas and widely advocated among Rails developers. In its simplest form, it is an admonition to avoid duplication. When code is duplicated, an application becomes more complex, making it more difficult to maintain and more vulnerable to unintended behavior (bugs). The DRY principle can be extended to development processes as well as code. For example, manual testing is repetititive; automated testing is DRY. Software design patterns that introduce abstraction or indirection can make code more DRY; for example, by eliminating repetitive if-then logic. Code reuse is a fundamental technique in software development. It existed long before Andy Hunt and Dave Thomas promoted the DRY principle. Rails takes advantage of Ruby\u2019s metaprogramming features to not just reuse code but eliminate code where possible. With a knowledge of Rails conventions, it\u2019s possible to create entire simple web applications with only a few lines of code. 5.4 Where Rails Gets Complicated It helps to understand the guiding principles of Rails. But it\u2019s even more helpful to know how (and why) Rails is complicated by departures from the guiding principles. 5.4.1 When Rails has No Opinion As you gain experience with Rails, you may encounter areas where Rails doesn\u2019t state an opinion. For example, for years there was no \u201cofficial\u201d approach to queueing background jobs. (Tasks that take time, such as contacting a remote server, are best handled as \u201cbackground jobs\u201d that won\u2019t delay display of a web page.) Fortunately, by 2015, the Rails core maintainers released the ActiveJob feature which implemented queueing. Much of the lively debate that drives development of new versions of Rails is focused on thrashing out the \u201copinions\u201d that eventually will be enshrined in the Rails API. 5.4.2 Omakase But Substitutions Are Allowed Implicit in the notion of \u201cRails is omakase\u201d is an understanding that \u201csubstitutions are allowed.\u201d Most of Heinemeier Hansson\u2019s preferences are accepted by all Rails developers. However, many experienced developers substitute items on the menu at the Rails caf\u00e9. This has led to the notion that Rails has Two Default Stacks , as described in an essay by Steve Klabnik. Professional developers often substitute an alternative testing framework or use a different syntax for creating page views than the \u201cofficial\u201d version chosen by Heinemeier Hansson. This complicates learning because introductory texts often focus on the omakase selections but you\u2019ll encounter alternatives in blog posts and example code. 5.4.3 Conventions or Magic? One of the joys of programming is knowing that everything that happens in an application is explained by the code. If you know where to look, you\u2019ll see the source of any behavior. For a skilled programmer, \u201cconvention over configuration\u201d adds obscurity. Without a configuration file, there is no obvious code that reveals that data from a class named \u201cPerson\u201d is saved to a datatable named \u201cpeople.\u201d As a beginner, you\u2019ll simply accept the magic and not confound yourself trying to find how it works. It\u2019s not always easy to learn the conventions. For example, you may have a User object and a \u201cusers\u201d datatable. Rails will also expect you to create a \u201ccontroller object.\u201d Should it be named \u201cUserController\u201d (singular) or \u201cUsersController\u201d (plural)? You\u2019ll only know if you let Rails generate the code or you pay close attention to tutorials and example code. 5.4.4 DRY to Obscurity The risk that \u201cconvention over configuration\u201d leads to obscurity is compounded by the \u201cDon\u2019t Repeat Yourself\u201d principle. To avoid repetitive code, Rails often will offer default behavior that looks like magic because the underlying implementation is hidden in the depths of the Rails code library. You can implement a simple web application with only a few lines of custom code but you may wonder where all the behavior comes from. This can be frustrating when, as a beginner, you attempt to customize your application to do more than what\u2019s shown in simple tutorials. In the next chapter, we\u2019ll consider some of the challenges that make it difficult to learn and use Rails. Chapter 6 Rails Challenges Rails is popular. Rails is powerful. But Rails isn\u2019t easy to learn. You may have heard of a psychological phenomenon called \u201cresistance.\u201d When we struggle with something new, or must adapt to the unfamiliar, we resist. We get discouraged. We complain. Sometimes we feel we should quit. This chapter is here to help with your resistance. Its purpose is to acknowledge that, yes, Rails can be difficult . Tens of thousands of people are successfully using Rails. I\u2019ll hazard a guess that none are significantly smarter, more motivated, or a better student than you. Perhaps some of them had more time to study or better access to mentors, but these factors simply accelerate the speed of learning Rails. If you get discouraged, or think Rails is too hard, recognize that you are encountering your own resistance, not any genuine limitation. Take a break, set aside your learning materials, and come back when your natural curiosity and eagerness has returned. Sometimes resistance attaches to imaginary problems (like \u201cI\u2019m not smart enough\u201d). Just as often, resistance attaches to real problems, but magnifies them into insurmountable obstacles (\u201cRails is impossible to use on Windows!\u201d). The best way to overcome these obstacles is to acknowledge the resistance, investigate the obstacle, and seek support from peers. This chapter describes some of things that make Rails difficult. These Rails challenges are obstacles, but other people overcame them. You can, too. 6.1 A List of Challenges This list is incomplete. If you\u2019ve encountered a Rails challenge that isn\u2019t listed here, email me at [email protected] and I will add your suggestion to the next revision of the book. 6.1.1 It is difficult to install Ruby. The installation process for Ruby on Rails is more difficult than downloading and installing any consumer software applications. You are setting up a development environment and you need system software as well as Ruby. Depending on what you\u2019ve done before, you may have altered your system, introducing potentials for conflicts. Book Two provides links to good installation guides in the \u201cGet Started\u201d chapter. But installation instructions can\u2019t accommodate the specific configuration of your computer. Sometimes you just have to look for someone to help. You can also use a hosted development environment, such as Cloud9 . 6.1.2 Rails is a nightmare on Windows. Windows is very popular, so why is it difficult to develop with Rails on Windows? It seems the Rails community has a bias against Windows. It does, and there\u2019s a reason. Rails is an open source project. Most open source developers use Unix-based system tools. It is difficult and time-consuming to convert Unix-based system tools to the Microsoft Windows operating system. Open source developers prefer to spend their time maintaining and improving their Unix-based projects. And expert Windows developers are seldom interested in porting Unix-based system tools to Windows. So system utilities such as RVM are not available for Windows. And developers who create gems are seldom interested in spending time to solve the problems that arise when code has to be adapted for the idiosyncrasies of the Windows platform. This situation is not going to change, so you have to make a choice. Stay with Windows or get comfortable with Unix-based systems. 6.1.3 Why do I have to learn Git? It is difficult. Real software development requires version control and Git is the standard tool for Rails developers. If all you do is build applications as a classroom exercise, you don\u2019t need to learn Git. You can skip all the parts of the book that mention Git. But sooner or later, if you start doing real projects, you\u2019ll need Git. Simple Git commands are not difficult to learn. When you\u2019ve developed your skills and confidence you can learn the more advanced Git functions, such as branching. 6.1.4 Why worry about versions? For simple projects you don\u2019t need version management. My books introduce version management and prepare you to handle version conflicts. As you tackle more complex projects, and as new versions of Rails are released, you\u2019ll face version issues and version management will be helpful. 6.1.5 Do I really need to learn about testing? For student projects, no, you don\u2019t need to learn about testing. But as soon as money or reputation is at stake on a project, you\u2019ll need to begin using test-driven development. Book Two introduces TDD but you\u2019ll need intermediate-level tutorials to develop proficiency. Once you\u2019ve grasped the basics, testing will become easy, and it actually is fun and satisfying. 6.1.6 Rails error reporting is cryptic. Actually, Rails error reporting is quite good. Stack traces are detailed and error messages are descriptive. Beginners have a problem because the stack traces and error messages provide a technical analysis of a problem in terms that an experienced developer can understand. If error reporting was \u201csimplified\u201d it might not be as intimidating but it would not as accurate. It\u2019s up to you to gain enough knowledge to understand the error messages. Finally, the error reporting mechanism can point you to the line in your code that triggers a problem, but it can\u2019t know what you trying to do, or describe the error in anything but technical terms. 6.1.7 There is too much magic. The Rails \u201cconvention over configuration\u201d principle leads to obscurity. Default behavior often looks like magic because the underlying implementation is hidden in the depths of the Rails code library. If you like to know how things work, this can be frustrating. You really have only two choices when you encounter Rails magic. You can take time to dig into the source code. If you do so, you\u2019ll encounter frustration as you encounter complex and sophisticated code, but you may also improve your understanding and skill as a Ruby programmer. Or you can take on faith that \u201cit just works.\u201d Often, you just need to use the convention several times in different projects to get comfortable with the magic and stop worrying that you don\u2019t fully understand it. 6.1.8 It is difficult to grasp MVC and REST. Even if you learn that the acronyms mean model-view-controller and representational state transfer , MVC and REST are abstract concepts. If you simply follow a tutorial, the author will show you how to build an application that uses MVC or REST, but you won\u2019t see any alternative, or understand why MVC or REST are best practices. When it is time to build your own application, if you don\u2019t understand the importance of separation of concerns you won\u2019t be sure how to structure your application. Understanding software architecture requires abstract reasoning, imagination, and experience, which takes time. It is difficult to grasp but approach it with curiosity, seek explanations, and you\u2019ll grasp it soon enough. 6.1.9 Rails contains lots of things I don\u2019t understand. If you look at the Rails directory structure, you\u2019ll see many files and folders. If you look at the Rails API, or pick up a Ruby tutorial, you\u2019ll also see code that is unfamiliar. Book Two describes some of what you see. As you build more applications, you will gain proficiency and master more of Rails and Ruby. Yet even as you gain mastery of Rails, there will be aspects that remain unfamiliar. Don\u2019t let the sheer complexity stop you. The truth is, you don\u2019t have to know \u201call\u201d of Rails or Ruby to build web applications. 6.1.10 There is too much to learn. Very true. To be a full-stack web developer you need to know HTML, JavaScript, CSS, Ruby, testing, databases, and much, much more. You might think that developers who started ten years ago have an advantage because there wasn\u2019t as much to learn when they started. But today there are many more high-quality tutorials and educational programs to accelerate your learning. And resources like Google and Stack Overflow have many more answers to questions. As the knowledge domain has grown, so have the learning resources. You don\u2019t have to learn everything. Get a foundation in the basics and then dive deep as a specialist in an area that appeals to you. 6.1.11 It is difficult to find up-to-date advice. Rails has been around since 2004 with major new versions released every two years. Chances are, answers to questions you find on Stack Overflow or Google were written for an older version of Rails. There is no easy way to determine if the answer is out of date. A particular aspect of Rails may have changed\u2014or not. Even worse, the answer may work, but there may be a better way that reflects current best practices. To filter the outdated in Google, use the \u201cSearch Tools\u201d options for specifying a timeframe. Look closely at the date of a blog posting or Stack Overflow answer. Try to find a newer answer. Usually, if there are a series of answers and things have changed, you\u2019ll see the current best answer. If you\u2019re uncertain, don\u2019t be shy about posting your question to Stack Overflow. More importantly, make it your business to keep up with the community, reading Peter Cooper\u2019s Ruby Weekly email newsletter or his daily RubyFlow site. 6.1.12 It is difficult to know what gems to use. There are so many gems available for Rails. Some add useful features, like tagging or a mailing list API. Some are basic, such as gems for a database or front-end framework. Even among basic gems, Rails offers choices. Which are best? The Ruby Toolbox can help, but mostly you will find guidance from looking at example projects and noticing what other developers are using. There\u2019s wisdom in the crowd. If you\u2019ve subscribed to the video series or purchased the advanced tutorials, this three minute video explains: How to Find Rubygems 6.1.13 Rails changes too often. If you look at the Ruby on Rails Release History you\u2019ll see there is a new major release approximately every 1.5 years. Each major release is well tested and relatively free of bugs. But new features or new approaches often require rewrites of older applications. Commercial software products often make a priority of keeping the API consistent over time. That\u2019s not Rails. Rails is an open source project and the core team embraces innovation. The maintainers expect that you\u2019ll keep up with changes. 6.1.14 It is difficult to transition from tutorials to building real applications. Copying and pasting from tutorials is a good way to begin learning Rails. But you\u2019ll only become a skilled Rails developer when you build something that is not shown in a tutorial. The first few hours (or days) when you start building a custom application can be very difficult. Focus on the basics that are described in this book. Start with user stories. Build pieces that you know how to do. Look for code samples on blogs or GitHub or Stack Overflow. Try \u201cspikes,\u201d little experiments that test ideas for implementation. Seek advice from peers or mentors. At first it will be slow going. But you will pick up momentum. The chapter, \u201cCrossing the Chasm,\u201d will provide specific strategies to help. 6.1.15 I\u2019m not sure where the code goes. If you follow tutorials, you\u2019ll learn \u201cwhere the code goes\u201d with the model\u2013view\u2013controller design pattern. With a sense of the request-response cycle, RESTful actions in the controller, and a few guidelines such as \u201cskinny controller, fat model\u201d you\u2019ll be able to build intermediate-level Rails applications. Front-end code, particularly JavaScript, can be difficult because not a lot has been published about Rails best practices. In particular, the Rails asset pipeline can be confusing for anyone who has done front-end development without Rails. If you don\u2019t know what you\u2019re supposed to do, do whatever works, then look for someone who can help you by providing a code review. 6.1.16 People like me don\u2019t go into programming. Until recently in most countries, most Rails developers have been young men with an engineering background. For people who don\u2019t fit the stereotypical profile, it can be hard to find role models or peers who demonstrate that Rails is something everyone can learn. The challenge can be subtle, as when you have the feeling that maybe if you were different you\u2019d find it easier to make progress. Or the challenge can be overt, when behavior of fellow students or co-workers is disturbing or hurtful (often they don\u2019t even know!). Lack of diversity, and the cluelessness that accompanies it, is unfortunate in the Rails community. But many people are working to make the community more welcoming and inclusive. Organizations such as Rails Girls and Railsbridge are creating more diversity in the community. You may find support from peers there to affirm that you, too, are entitled to knowledge and success. These are some of the challenges you will face in learning and using Rails. Next, we will look at how to get help. Chapter 7 Get Help When You Need It Sometimes I\u2019m asked, \u201cWhere\u2019s the Rails manual?\u201d There isn\u2019t one. No single document tells you how to use Rails. Instead, there\u2019s a wealth of documentation that describes various aspects of Rails. Let\u2019s consider where to look for help when you are working on your own Rails projects. 7.1 Getting Help With Rails If you\u2019ve subscribed to the video series or purchased the advanced tutorials, this six minute video gives some guidance: Get Help with Rails What will you do when you get stuck? \u201cGoogle it,\u201d of course. But here\u2019s a trick to keep in mind. Google has options under \u201cSearch tools\u201d to show only recent results from the past year. Use it to filter out stale advice that pertains only to older versions of Rails. Stack Overflow is as important as Google for finding answers to programming problems. Stack Overflow answers are often included in Google search results, but you can go directly to Stack Overflow to search for answers to your questions. Like Google, answers from Stack Overflow are helpful if you check carefully to make sure the answers are recent. Also be sure to compare answers to similar questions; the most popular answer is not always the correct answer to your particular problem. Requests for advice (especially anything that provokes opinions) are often rejected on Stack Overflow. Instead, try Reddit for advice or recommendations. You\u2019ll find discussion forums (\u201csubreddits\u201d) devoted to Rails and Ruby . You can also visit the Quora question-and-answer site for topics devoted to Rails and Ruby . 7.2 References Here are suggestions for the most important references. If you feel overwhelmed by all the links, remember that you can use Book Two to build the tutorial application without any additional resources. Right now, it\u2019s important to know additional help is available when you need it. 7.2.1 RailsGuides The Rails Guides are Rails\u2019s official documentation, written for intermediate-level developers who already have experience writing web applications. The Rails Guides are an excellent reference if you want to check the correct syntax for Rails code. You\u2019ll be able to use the Rails Guides after completing this tutorial. 7.2.2 Cheatsheets Tobias Pfeiffer has created a useful Rails Beginner Cheat Sheet that provides a good overview of Rails syntax and commands. Even better than a cheatsheet, for Mac users, is an application named Dash that offers fingertip access to reference documentation for Ruby, Rails, HTML, CSS, JavaScript, and many other languages and frameworks. 7.2.3 API Documentation The API documentation for Ruby and Rails shows every class and method. These are extremely technical documents (the only thing more technical is reading the source code itself). The documents offer very little help for beginners, as each class and method is considered in isolation, but there are times when checking the API documentation is the only way to know for certain how something works. Rails Documentation - official API docs apidock.com/rails - Rails API docs with usage notes apidock.com/ruby - Ruby API docs with usage notes I recommend Dash as a tool to look up classes, modules, and methods in Ruby and Rails. Dash is a macOS app; use Zeal on Linux. Dash and Zeal run offline (they don\u2019t need an Internet connection) so you can use them anywhere. 7.3 Meetups, Hack Nights, and Workshops I\u2019d like to urge you to find ways you can work with others who are learning Rails. Peer support is really important when you face a challenge and want to overcome obstacles. Most large urban areas have meetups or user group meetings for Rails developers. Try Meetup.com or google \u201cruby rails (my city)\u201d. The community of Rails developers is friendly and eager to help beginners. If you are near a Rails meetup, it is really worthwhile to connect to other developers for help and support. You may find a group that meets weekly for beginners who study together. Local user groups often sponsor hack nights or hackathons which can be evening or weekend collaborative coding sessions. You don\u2019t have to be an expert. Beginners are welcome. You can bring your own project which can be as simple as completing a tutorial. You will likely find a study partner at your level or a mentor to help you learn. If you are a woman learning Rails, look for one of the free workshops from RailsBridge or Rails Girls . These are not exclusively for women; everyone considered a \u201cminority\u201d in the tech professions is encouraged to participate; and men are included when invited by a woman colleague or friend. 7.4 Pair Programming Learning to code is challenging, especially if you do it alone. Make it social and you\u2019ll learn faster and have more fun. There\u2019s a popular trend in the workplace for programmers to work side-by-side on the same code, sharing a keyboard and screen. It\u2019s effective, both to increase productivity and to share knowledge, and many coders love it. When programmers are not in the same office, they share a screen remotely and communicate with video chat. Look for opportunities to pair program. It\u2019s the best way to learn to code, even if your pairing partner is only another beginner. Learn more about pair programming on the site pairprogramwith.me and find a pairing partner at codermatch.me or letspair.net . Remote pair programming requires tools for screen sharing and video chat. Pairing sessions often use: Google+ Hangouts Screenhero Floobits Cloud9 IDE More tools are emerging as remote pair programming becomes popular. 7.5 Pairing With a Mentor By far, the best way to learn is to have a mentor at your side as you undertake a project. That is an opportunity that is seldom available, unless you\u2019ve been hired to be part of a team in a company that encourages pair programming. You can try RailsMentors , a network of volunteer mentors offering free help. If you can pay for help, find a mentor using HackHands or AirPair . Market rates are expensive for a student, obviously, but if you are learning on the job or building an application for your own business, connecting online with a mentor might be a godsend. AirPair connects developers for real-time help using video chat and screen sharing. Experts set their own rate and the site matches you according to your budget. Expect to pay market rates for consulting ranging from USD $40 per hour to $150 per hour or more. HackHands promises to instantly connect you with a qualified expert at a cost of one dollar per minute for mentorship using video chat and screen sharing. 7.6 Code Review Code review is an essential part of the development process. There\u2019s always more than one way to implement a feature, and some ways are better than others, but you may not know it unless you ask someone to look at your code. When you pair with a mentor, you get the benefit of code review. But even if you don\u2019t have a mentor, you can get code review online. StackExchange, the parent of StackOverflow, has a free site for code review: codereview.stackexchange.com Expert code review will accelerate your learning faster than anything else. Knowing where to go for help is important; it is just as important to stay current. 7.7 Staying Up-to-Date Rails changes frequently and its community is very active. Changes to Rails, expert blog articles, and new gems can impact your projects, even if you don\u2019t work full-time as a Rails developer. Consequently, I urge you to stay up-to-date with news from the community. I suggest signing up for two weekly email newsletters: Ruby Weekly Green Ruby News Another weekly email newsletter is more technical, and focused on code arriving in the next version of Rails: This Week in Rails For daily news about Rails, check Peter Cooper\u2019s RubyFlow site which lists new blog posts from Rails developers each day. Also take a look at this list of top blogs for Rails developers: 45 Ruby Blogs If you like podcasts, check out Ruby Rogues and Envy Labs\u2019s Ruby5 . Finally, you can follow @rails_apps on Twitter for news about the RailsApps project. Chapter 8 Plan Your Product Tutorials from other authors focus only on coding. But Rails developers do more than code. Software development is a process that begins with planning and ends with analysis and review. Coding, testing, and deployment is at the core but you\u2019ll need to learn about the entire process to succeed professionally. That\u2019s why we look at product planning and project management. For this beginning tutorial, we\u2019ll introduce concepts about product planning and project management that you will encounter as a Rails developer. 8.1 Product Owner On your project, who is the product owner ? The product owner is the advocate for the customer, making sure that the team creates value for the users. If you are a solo operator, you are the one who will decide what features and functionality will be included in your application. But if you\u2019re part of a team, either in a startup, as a consultant, or in a corporate setting, it may not be clear who has responsibility for looking at the application from the point of view of the application user. Someone must decide which features and functionality are essential and which must be left out. We call this managing scope and combating feature creep . It\u2019s important to assign a product owner. Without a product owner in charge, tasks remain vague and developers have difficulty making progress. In large organizations, a product owner may be a product manager or a project manager . A product owner usually is not a management executive (though there will likely be an executive sponsor ). Everyone on the team \u2014 including management, developers, and stakeholders \u2014 should agree to designate a product owner and give that person authority to define features and requirements. 8.2 User Stories A product owner\u2019s principal tool for product planning is the user story . In the past, when software engineering primarily served government or large corporations, product planning started with requirements gathering defined as use cases , and culminated in a requirements specification . User stories are a faster, more flexible approach to product planning that originated with an approach called Agile software development . User stories are a way to discuss and describe the requirements for a software application. The process of writing user stories helps a product owner identify all the features that are needed for an application. Breaking down the application\u2019s functionality into discrete user stories helps organize the work and track progress toward completion. User stories are often expressed in the following format: As a I want In order to Here is an example: *Join Mailing List* As a visitor to the website I want to join a mailing list In order to receive news and announcements A typical application has dozens of user stories, from basic sign-in requirements to the particular functionality that makes the application unique. You don\u2019t need special software to write user stories. Just use index cards or a Word document. In the next chapter, we\u2019ll see how you can enter user stories as tasks in a to-do list. Here\u2019s the format: Figure 8.1: A user story. Just like Rails provides a structure for building a web application, user stories provide a structure for organizing your product plan. 8.3 Wireframes and Mockups Often, before writing user stories, a product owner will make rough sketches of various web pages. Sketching is a phase where you try out ideas to clarify your vision for the application. Sketching can lead to a wireframe or a mockup. These terms are often used interchangeably but there are differences in meaning. A wireframe is a drawing showing all functional elements of a web page. It should not depict a proposed graphic design for a website, rather it should be a diagram of a web page, without color or graphics. A mockup adds graphic design to a wireframe; including branding devices, color, and placeholder content. A mockup gives an impression of the website\u2019s \u201cpersonality\u201d as well as proposed functionality. One of the most popular tools for creating wireframes is Balsamiq Mockups (despite the name, it produces wireframes, not mockups). There are dozens of others listed in the article Rails and Product Planning . As a product owner, writing user stories or sketching wireframes will help you refine product requirements. Some people like a visual approach with wireframes; others prefer words and narrative. Either approach will work; both are good. 8.4 Graphic Design Very few people have skills as both a visual designer and a programmer. The tools are different; graphic designers typically use Adobe Photoshop, though web-savvy designers often create designs directly in HTML and CSS, while developers write code. If you\u2019re lucky, you will work with a skilled graphic designer as you build your web application. If you are very lucky, you may work with someone who is a user experience (UX) designer or interaction designer (IxD). Interaction design is a demanding, sophisticated discipline that requires the mindset of an anthropologist and the eye of a visual artist to find not just the most pleasing, but the most effective visual design for an application user interface. You can find interaction designers discussing their concerns on the IxDA website, including the differences between interaction design and UX design. If you\u2019re working with a graphic designer you might collaborate on a moodboard or a design brief to define the look and feel of your application. If the designer works in Photoshop, you\u2019ll face the challenge of converting design layouts from Photoshop to HTML and CSS. There are service firms that do this for a fee but obviously it\u2019s easier to work with a designer who can implement a layout directly in HTML and CSS. Rails can be particularly challenging when it comes to integrating graphic design with code. Rails uses a hybrid of HTML markup mixed with Ruby programming code in its view files (depending on the stack you\u2019ve selected, the view files can use ERB, Haml, or other syntaxes for mixing HTML and Ruby). Few designers are comfortable with Ruby code mixed with HTML so you may end up doing integration yourself. If you don\u2019t have a skilled graphic designer available to help, you can use Bootstrap or other front-end frameworks such as Zurb Foundation to quickly add an attractive design to your application. In a later chapter that covers HTML and CSS, you\u2019ll learn about templates and themes for Bootstrap that provide a beginning point for page design. 8.5 Software Development Process Product planning is the initial phase of a larger software development process. You can approach this casually, and start coding with curiosity and ambition, finding your own best way to the end product, by trial and error. Most hobbyist and student developers need no other approach. When money or reputation is at stake, casual approaches to software development are risky. Compared to other forms of engineering, software development is peculiarly prone to failure. As recently as 2003, IBM stated , \u201cMost software projects fail. In fact, the Standish group reports that over 80% of projects are unsuccessful either because they are over budget, late, missing function, or a combination. Moreover, 30% of software projects are so poorly executed that they are canceled before completion.\u201d Professional software developers, being intelligent and reflexive, and driven by a desire to become more efficient, or wanting to avoid the wrath of bosses and clients, frequently look for ways to reduce risk and improve the software development process. In recent years they\u2019ve succeeded in improving the success rate of software engineering, largely due to the adoption of software development methodologies that improve the business process of producing software. If you\u2019re a hobbyist or casual programmer, you don\u2019t need to learn about software development methodologies. If you are going to be held accountable for the success or failure of a project, you should learn more about software development methodologies. If you\u2019re going to be interviewing for a job as a programmer, it pays to recognize some of the names of software development methodologies and ask whether your employer has adopted a particular approach, especially if you\u2019d like to work for a company that prides itself on being well-organized and supportive of staff development. Hiring managers may say, \u201cwe\u2019ve synthesized several methodologies,\u201d which may mean they don\u2019t have a good answer for the question, or it may mean they are prepared to thoughtfully discuss the merits of various approaches to software development. Managers who can discuss software development methodologies are more likely to be concerned about the welfare of their team. Here are some software development methodologies you may hear about, with some notable characteristics: waterfall process - an old and disparaged approach Agile software development - an iterative and incremental approach Scrum - known for \u201csprints\u201d and daily standup meetings Extreme Programming (XP) - pair programming and test-driven development Agile, Scrum, and XP are all related, and often mixed in practice. As you mature as a software developer, take time to think about the process of building software and learn more about software development methodologies. 8.6 Behavior-Driven Development There is one prominent software development approach that is important for product planning. It is called Behavior-Driven Development (BDD), or sometimes, Behavior-Driven Design. BDD takes user stories and turns them into detailed scenarios that are accompanied by tests. Here\u2019s a screenshot from a consultant\u2019s web application that shows how a user story can be extended from a \u201cfeature\u201d to include detailed \u201cscenarios.\u201d Figure 8.2: Feature and scenario. Rails developers turn these scenarios into tests using either a software tool named Cucumber or RSpec to run automated test suites. Most developers write scenarios using a simple text editor. With automated tests, a product owner can determine if developers have succeeded in implementing the required features. This process is called acceptance testing . Automated tests also make it easy for developers to determine if the application still works as they add features, fix bugs, or reorganize code. This process is called regression testing . On a small project like our tutorial application, you won\u2019t use BDD. It\u2019s easy enough to manually test the features before you deploy your application. For an introductory book, BDD is an advanced topic. But on a project where money and reputation is at stake, BDD can be very important. Every time an application is deployed, there\u2019s a chance that something could be broken. Software development is plagued with \u201cfix one thing, accidentally break another\u201d as code is refactored or improved. Manual testing can\u2019t be expected to reveal every bug. That\u2019s why automated testing, providing coverage of every significant user-facing feature, is the only way to know if you\u2019ve deployed without known bugs. In Book Two, a \u201cTesting\u201d chapter will introduce you to the terminology and concepts of automated testing. You won\u2019t have to worry about testing when we build the tutorial application, but afterward you\u2019ll learn enough about testing to be prepared for more advanced tutorials. Chapter 9 Manage Your Project How do you know you\u2019re making progress? Are you taking care of everything that needs to be done? These questions are at the center of project management. Whether you are working alone or as part of a team, you need to define your tasks and track progress toward your goal. The previous chapter on product planning showed how user stories can be used to break down an application into discrete features. User stories can be the basis for a list of tasks. 9.1 To-Do List You can track your tasks with a simple to-do list. Some entrepreneurs like the discipline of the GTD system ( Getting Things Done ) for personal productivity and time management. Our article on Rails and Project Management offers a list of popular to-do list applications, either for personal task management or team-oriented task management. 9.2 Kanban Kanban is a method of managing projects that has been adapted from lean manufacturing for use in software development. In Japanese, \u201cKan\u201d means visual, and \u201cban\u201d means card or board. Imagine putting a big whiteboard on your wall and creating columns for a series of to-do lists. The columns, called swimlanes , are labelled: Backlog, Ready, Coding, Testing, Done. Each swimlane contains index cards that describe a user story or other task. To plan your work and track progress, you\u2019ll move the index cards across the board from column to column. To stay focused and avoid becoming overwhelmed, you\u2019ll only pick the most important user stories or tasks from the backlog column and you\u2019ll limit the number of items in each column to what can be realistically accomplished in the time available. That\u2019s the essence of kanban as it is used for software development. See the article on Rails and Project Management for a list of kanban web applications. Trello is particularly popular for task management. 9.3 Agile Methodologies For a solo project or a small team, you\u2019ll do fine with a simple to-do list or (even better) a kanban web application for managing your software development process. If you\u2019ve got enough people to need to hire a project manager, you should look at project management software that supports teams using Agile software development methodologies. Pivotal Tracker is the best known tool but there are many other agile tools . Learn more about Agile if you\u2019re going to hire developers for a startup or if you are going to work for an established company. In most successful companies, Agile processes have replaced the much-maligned waterfall process that was once the norm for software development. Chapter 10 Mac, Linux, or Windows This is a book for every beginner, so I\u2019ll explain how we use a text editor and terminal application for development. First, though, let\u2019s ask, \u201cmacOS, Linux, or Windows?\u201d 10.1 Your Computer You can develop web applications with Rails on computers running Mac OS X, Linux, or Microsoft Windows operating systems. Most Rails developers use macOS or Linux because the underlying Unix operating system has long been the basis for open source programming. Later in this chapter, I\u2019ll give links to installation instructions for macOS and Linux. For Windows users, I have to say, installing Rails on Windows is frustrating and painful. Readers and workshop students often tell me that they\u2019ve given up on learning Rails because installation of Ruby on Windows is difficult and introduces bugs or creates configuration issues. Even when you succeed in getting Rails to run on Windows, you will encounter gems you cannot install. For these reasons, I urge you to use Cloud9, a browser-based development environment, on your Windows laptop. 10.2 Hosted Computing If you are using Windows, or have difficulty installing Ruby on your computer, try using Cloud9. Cloud9 provides a hosted development environment. That means you set up an account and then access a remote computer from your web browser. The Cloud9 service is free for ordinary use. There is no credit card required to set up an account. You\u2019ll only be charged if you add extra computer memory or disk space (which you don\u2019t need for ordinary Rails development). The Cloud9 service gives you everything you need for Rails development, including a Unix shell with Ruby pre-installed, plus a browser-based file manager and text editor. Any device that runs a web browser will give you access to Cloud9, including a tablet or smartphone, though you need a broadband connection, a sizable screen, and a keyboard to be productive. 10.3 Installing Ruby Your first challenge in learning Rails is installing Ruby on your computer. Frankly, this can be the most difficult step in learning Rails because no tutorial can sort out the specific configuration of your computer. Get over this hump and everything else becomes easy. The focus of this book is the background you need to understand Rails. In Book Two, you\u2019ll build a real-world Rails application. Before you can build the application, you\u2019ll need to install the latest versions of the Ruby language and the Rails gem. You can get started now, with the links provided below, or you can wait until you have started reading Book Two. You\u2019ll spend at least an hour installing Ruby and Rails, so defer the task until you have sufficient time at your computer. 10.3.1 MacOS See this article for macOS installation instructions: Install Ruby on Rails - macOS 10.3.2 Ubuntu Linux See this article for Ubuntu installation instructions: Install Ruby on Rails - Ubuntu 10.3.3 Hosted Computing Cloud9 is a browser-based development environment. Cloud9 is free for small projects. If you have a fast broadband connection to the Internet, this is your best choice for developing Rails on Windows. And it is a good option if you have any trouble installing Ruby on Mac or Linux because the Cloud9 hosted environment provides everything you need, including a Unix shell with Ruby and RVM pre-installed, plus a browser-based file manager and text editor. Using a hosted development environment is unconventional but leading developers do so and it may be the wave of the future. See this article for Cloud9 installation instructions: Install Ruby on Rails - Cloud9 The article shows how to get started with Cloud9. 10.3.4 Windows Here are your choices for Windows: Use the Cloud9 hosted development environment Install the Railsbridge Virtual Machine Use RubyInstaller for Windows Cloud9 is ideal if you have a fast Internet connection. If not, download the Railsbridge Virtual Machine to create a virtual Linux computer with Ruby 2.2 and Rails 4.2 using Vagrant . Other tutorials may suggest using RailsInstaller , but it will not provide an up-to-date version of Ruby or Rails. Also, RVM does not run on Windows. Chapter 11 Terminal Unix You\u2019ll need to use the Terminal application and Unix commands to develop Rails applications. If you\u2019ve subscribed to the video series or purchased the advanced tutorials, you can watch this four minute video: UNIX Commands Basics Most people use a graphical user interface (GUI) to interact with their computers, tablets, or phones. As a developer, instead of using the GUI, you\u2019ll get \u201cunder the hood\u201d and work directly with the engine that controls your computer, the operating system. This is what makes software programming look intimidating to learners. You won\u2019t use menus or buttons as you work. Instead, you\u2019ll type commands, line by line, into a window that looks like a computer interface from the 1970s. In fact, the terminal, or console, is a direct legacy of computers that were developed even earlier, in the 1960s. The terminal continues to be the fundamental tool of software development. 11.1 The Terminal The Terminal application or console gives us access to the Unix command line, or shell. We call the command line the shell because it is the outer layer of the operating system\u2019s internal mechanisms (which we call the kernel ). On macOS, you can use the Terminal application . Experienced developers often upgrade to the more powerful iTerm2 application but you can start with the installed Terminal application. Look for the Terminal in the following places: MacOS: Applications > Utilities > Terminal Linux: Applications > Accessories > Terminal Windows: Taskbar Start Button > Command Prompt On the Mac, search for the macOS Terminal application by pressing the Command-Spacebar combination (which Apple calls \u201cSpotlight Search\u201d) and searching for \u201cTerminal.\u201d The magnifying glass in the upper right corner of your screen will also launch \u201cSpotlight Search.\u201d Or look in the Applications/Utilities/ folder for the Terminal application. You\u2019ll need to click the name of the application to launch the Terminal. If you are using Linux then you likely know how to find the Terminal. Look through the menu for your window manager for \u201cShell\u201d or \u201cTerminal.\u201d If you have your computer in front of you, launch your terminal application now. Try out the terminal application by entering a shell command. $ whoami Don\u2019t type the $ character. We call it \u201cthe prompt.\u201d The $ character is a cue that you should enter a shell command. This is a longtime convention that indicates you should enter a command in the terminal application or console. The Unix shell command whoami returns your username. $ whoami danielkehoe Instead, you might see: command not found: $ which indicates you typed the $ character by mistake. If you are new to programming, using a text editor and the shell will seem primitive compared to the complexity and sophistication of Microsoft Word or Photoshop. Software developers edit files with simple text editors and run programs in the shell. That\u2019s all we do. We have to remember the commands we need (or consult a cheatsheet) because there are no graphical menus or toolbars. Yet with nothing more than a text editor and the command line interface, programmers have created everything that you use on your computer. 11.2 Unix Commands Explained Unix commands seem cryptic at first. They are a shorthand that\u2019s familiar to experienced developers. If a Unix command is mysterious, you can look it up with Google. But a better approach is to use the website: explainshell.com Try it out. Visit the website and enter ls -1p . It\u2019s a Unix command we\u2019ll use often in Book Two. The site will explain that the command \u201clists directory contents, one file per line, with a slash appended to directories.\u201d Now that you know about explainshell.com, here\u2019s no need to ever be mystified by a Unix command. 11.3 Getting Fancy With the Prompt If you watch experienced developers at work, you may see their consoles are colorful, with lots of information shown in the prompt. You\u2019ll see Git status, current directory, and RVM gemset or Ruby version. Many developers replace the standard Bash shell with the Z shell and Oh-my-zsh . You don\u2019t have to install the Z shell to get a fancy prompt; the Bash-it utility is easy to install and gives you much of the functionality. A fancy prompt is helpful but requires some Unix skills to install. Don\u2019t worry about getting fancy now; you can try it down the road. 11.4 Learning Unix Commands You can follow the tutorial in Book Two without learning any Unix commands in advance. Everything you need to know is given at each step. If time is short, and you want to get started, you can jump into the Book Two tutorial without learning Unix commands. Eventually, you\u2019ll realize you\u2019ve learned quite a few basic Unix commands without making an effort. But if you have time, you\u2019ll feel more confident if you spend some time watching a few videos or reading books that teach the Unix command line basics. If you haven\u2019t used the computer\u2019s command line interface (CLI) before, I recommend either Learn Enough Command Line to Be Dangerous or Zed Shaw\u2019s free Command Line Crash Course to gain confidence with Unix shell commands. If you don\u2019t have time for the books recommended above, continue reading this chapter for an introduction to command line basics. 11.5 Exit Gracefully Before you learn about Unix commands, learn how to exit a command line software program. It is the most important Unix skill you\u2019ll need. If you don\u2019t learn it now, you\u2019ll get stuck inside Unix programs and panic when you can\u2019t return to the command line prompt. If you\u2019re keeping a notebook for things you learn, write this down: To EXIT FROM UNIX commands, type: Control-c If that doesn't work, try: q exit Control-d Control-z If nothing works: CLOSE THE TERMINAL WINDOW To type Control-c , hold down the \u201cControl\u201d key while pressing the c key on your keyboard. There is no universal command to exit a Unix program. Any of these exit techniques might work. None do harm to your computer, so if you get stuck, try them all. Software developers don\u2019t usually say, \u201cI\u2019m running a Unix program.\u201d Usually they say, \u201cI\u2019ve launched a Unix process.\u201d As you learn more about Unix, you\u2019ll learn about the difference between Control-c , which \u201ckills a process,\u201d and Control-z , which \u201csuspends a process.\u201d Right now, you don\u2019t need to learn about processes or what it means to kill or suspend them. 11.6 Structure of Unix Commands Unix commands are cryptic if you\u2019ve never seen them before. But there\u2019s a common pattern you\u2019ll begin to recognize. $ command -option argument Notice there are spaces between each part of a Unix command. 11.6.1 Prompt The $ character is the prompt. Sometimes you\u2019ll see extra information before the prompt: My-MacBook:~ danielkehoe$ The prompt can be customized to provide useful information, such as the name of the current folder or the current user. Some people change the $ character to a different character, such as the > character. Don\u2019t be confused by a custom prompt and don\u2019t worry about customizing your prompt right now. Just remember that when you see a $ character on the command line, the computer is waiting for you to enter a command. 11.6.2 Command $ command -option argument Each Unix command is a tiny software program that is already installed on your computer. Each command does a few simple things, such as list the contents of a folder or create an empty file. There are dozens of Unix commands but you only need to learn a few to develop a Rails application. Entering a command at the prompt and pressing \u201cReturn\u201d (or \u201cEnter\u201d) will result in either of two things. The computer will respond \u201ccommand not found\u201d or it will run the command and return a result to the terminal window (\u201cthe console\u201d). Sometimes a command is not found because it is not a built-in command and it is not installed on your computer. More often, you\u2019ve made an error in typing the command. Unix doesn\u2019t like capital letters (\u201cuppercase\u201d) so unless there is a capital letter in a filename, you probably will need to type lowercase characters. 11.6.3 Option $ command -option argument Most Unix commands have a default response. Many commands have options for different responses if you set an option \u201cflag\u201d or \u201cswitch.\u201d You indicate an option with a - character. Most people call that character a hyphen or dash. You may hear programmers call it the \u201cminus\u201d character. Sometimes an option is set with \u2013 , that you might describe as \u201cdash dash\u201d or \u201cminus minus.\u201d It\u2019s difficult to see on the typeset page of this book, but to get the - character you type the \u201cdash\u201d character once. In this book, \u2013 , which appears as a slightly longer dash, is actually typed as two dashes. Two options are common among Unix commands: \u2013help and \u2013version (with double dashes). There are also abbreviated versions: -h and -v (with a single dash). If you have a terminal window open on your computer, try typing: $ man -v man, version 1.6c If I was coaching a beginner, I would say, \u201cType man space minus v. Don\u2019t forget the space and be sure to type \u2018Enter.\u2019\u201d The computer returns the version number of the current installed man Unix command. The Unix man command provides online documentation for every Unix command. Try: $ man man . . . You\u2019ll see the \u201cman pages\u201d that show exactly what to do with the man command. You can type man followed by the name of a command to see the documentation for the command. It is nice to know that every Unix command comes with complete instructions for use. But try reading some man pages and you\u2019ll understand why most developers never look at man pages. Instead they use Google to search online for instructions about how to use Unix commands. Man pages suffer from the worst features of technical documentation. They are complete to the point of obscurity, providing massive detail without highlighting the most common use cases. You\u2019re better off googling for examples of how to use Unix commands. You\u2019ll be stuck inside the man pages after you enter man man . Refer to your notes about how to exit a Unix program. To get out of the man program, type q to quit. 11.6.4 Argument $ command -option argument The term \u201cargument\u201d is borrowed from mathematics . Many Unix commands like a good argument. It is information that will be processed by a Unix command. Often it is a filename, if the command will operate on a file or output to a file. For example, we can create a file with the Unix touch command or remove a file with the Unix rm command: $ touch myfile $ rm myfile In both cases, we must supply a filename as an argument. 11.7 Quick Guide to Unix Commands As you learn Unix commands, it is a good idea to write notes for yourself or prepare a personal cheatsheet. The act of taking notes will help you remember the commands. Ultimately, the commands will become second nature through sheer repetition as you develop Rails applications. Here are the Unix commands you will use most often. 11.7.1 cd Computers use file systems to control how data is stored and retrieved using s storage system such as a hard drive. By separating the data into individual pieces, and giving each piece a name, the information is easily separated and identified. In offices in the 20th century, documents were grouped together as files and kept in file folders in filing cabinets. Computers don\u2019t really need to organize information as files but early computer users apparently thought of computer storage as electronic file cabinets. In Unix, you are always expected to be somewhere in the filing cabinet. The folders, or directories, are hierarchical, so a root folder contains multiple folders, which each contains many more folders and files. One set of nested folders contains the programs and utilities which make up the operating system and system utilities. Another set of nested folders contain folders for every user who can sign in to use the computer. Unix systems can have more than one user account. Each user is given a home directory that contains the files needed by any software programs he or she will use. Unix expects you to always be somewhere in your computer\u2019s file system. If you get confused or lost, you can always return to your home directory. Unix programmers like cryptic shortcuts that use unique keys from the keyboard. To get to your home directory, you can enter the directory name, which is your user name, or just type the \u201ctilde\u201d or \u201csquiggle\u201d character. On most keyboards, it is the uppercase (shift key) character to the left of the numeral 1. Look at the typeset character ~ in this book. It may look like a smudged dash, but if you look closely, you\u2019ll see the squiggle. Use the cd (change directory) command to go to your home directory: $ cd ~ The computer will not return a response to the terminal window, but you\u2019ll be positioned in your home directory. That means Unix commands will look for files in your home directory or save files in your home directory unless you specify another location. 11.7.2 pwd Discover where you are by asking for the \u201cpresent working directory.\u201d $ pwd /Users/danielkehoe The Unix pwd command will show the file path of your current directory. It is easy to get confused and not be sure where you are. When you feel lost, use the pwd command. 11.7.3 ls Use the pwd command to figure out where you are. Then look around with the ls command. The ls command lists the files and folders that are contained in your present working directory. $ cd ~ $ ls Applications Documents Movies Pictures Downloads Music Public Desktop Library The response shows a list of files and folders. Your list will be different. You can use options for many different lists of files and folders. For example, you can see a list of files and folders in a single column with ls -1 : $ ls -1 Applications Desktop Documents Downloads Library Movies Music Pictures Public Using ls -1p , you can see a single column list with slash characters marking the folders: $ ls -1p Applications/ Desktop/ Documents/ Downloads/ Library/ Movies/ Music/ Pictures/ Public/ It seems there are no files in my home directory. But is that true? 11.7.4 Hidden Files and Folders The Unix operating system allows filenames and folder names that start with a dot. These files are hidden unless you use an a option to view them. $ ls -la total 400 drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 . drwxr-xr-x 6 root admin 204 Dec 8 2014 .. [email protected] 1 danielkehoe staff 16388 Dec 8 05:52 .DS_Store drwx------ 4 danielkehoe staff 136 Dec 8 13:13 .Trash -rw------- 1 danielkehoe staff 98661 Dec 12 09:00 .bash_history [email protected] 1 danielkehoe staff 4926 Nov 20 22:10 .bash_profile [email protected] 1 danielkehoe staff 792 Sep 2 2013 .bashrc drwx------ 6 danielkehoe staff 204 Jun 26 20:24 Applications drwx------+ 5 danielkehoe staff 170 Dec 7 08:33 Desktop drwx------+ 12 danielkehoe staff 408 Dec 7 08:06 Documents drwx------+ 9 danielkehoe staff 306 Dec 12 10:57 Downloads [email protected] 57 danielkehoe staff 1938 Aug 30 20:27 Library drwx------+ 3 danielkehoe staff 102 Jul 28 2013 Movies drwx------+ 5 danielkehoe staff 170 Sep 21 2014 Music drwx------+ 22 danielkehoe staff 748 Nov 26 20:57 Pictures drwxr-xr-x+ 5 danielkehoe staff 170 Aug 11 2013 Public Now the response is very detailed, showing hidden files as well as information about file permissions, owner name, groups that have access permissions, file size, and creation date. Hidden files are often files that contain configuration settings or user preferences. In the example above, the .DS_Store file is created by the Mac operating system to store the screen position of a Finder window. The .bashrc file contains configuration settings for the Unix shell program named bash. Box 11.1. Hidden Files in Cloud9 If you\u2019re using Cloud9, you must change preferences to see hidden files. In the window that contains the file list, there is a gear icon (dark in color and difficult to see). Clicking the gear option will give you options: Show Root File System Show Home in Favorites Show Hidden Files You must select all three options to see the hidden files. 11.7.5 Dots You might notice that the response lists two files that have dots for names: $ ls -la drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 . drwxr-xr-x 6 root admin 204 Dec 8 2014 .. These are not really files. These are Unix shortcuts for navigating the file system. The single dot \u201cfile\u201d refers to the present working directory. The double dot \u201cfile\u201d is a shortcut for navigating up one level in the file system hierarchy. Dot files make Unix commands even more mysterious but they are convenient. 11.7.6 open On a Mac, you can enter a command in the terminal that opens a Mac Finder file browser window. The command and argument open . (open space dot) opens the present working directory. Try it: $ open . You should see files and folders listed in the Finder window that are the same as those displayed in the terminal window. Whether you use the Mac Finder graphical user interface or the terminal, you are looking at the same file system. On the Mac, you can point and click to move around the file system. If you want to move or delete a file, and you don\u2019t remember the appropriate Unix command, you can use open to open a Finder window and make changes the Macintosh way. 11.7.7 mkdir You can create a new folder with the Unix mkdir command. Let\u2019s be sure you are in your home directory by using the pwd command. Then create a workspace folder. $ cd ~ $ pwd /Users/danielkehoe $ mkdir workspace $ cd workspace $ pwd /Users/danielkehoe/workspace After creating the workspace folder, we cd into the folder and check where we are with the pwd command. 11.7.8 touch You can create a new file with the Unix touch command. Often it is easier to use a text editor to create and save a new file. But we\u2019ll use the touch command here to create a file we\u2019ll remove later. It is called the touch command because its intended purpose is update the timestamp on files or folders by \u201ctouching\u201d the file or folder. But the command is also useful for creating new files. If you haven\u2019t done anything since entering the previous commands, you\u2019ll still be in your workspace folder. But let\u2019s enter a command to move you to the workspace folder, just in case you are elsewhere. First we cd using a filepath that contains the ~ \u201ctilde\u201d shortcut for the home directory. In essence, we are saying, \u201cmove to the workspace folder contained in the home directory.\u201d $ cd ~/workspace $ pwd /Users/danielkehoe/workspace $ touch myfile.txt $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:11 myfile.txt You\u2019ve created a file myfile.txt inside the workspace folder. Then we list the contents of the folder so we can see the new file. 11.7.9 mv Unix provides the mv command to rename files and folders. It\u2019s an abbreviation for \u201cmove\u201d and was originally intended to move a file from one directory to another. You can use it to move files and folders. And you can use it to \u201cmove\u201d the name of the file as well. Let\u2019s rename myfile.txt : $ mv myfile.txt my_file.txt $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:11 my_file.txt We\u2019ve changed the name of the file by adding an underscore character. The underscore character is commonly used as a substitute for a space between words in a filename. The Mac operating system can accommodate spaces in filenames but it is bad practice to use spaces in filenames when you work on the command line. You can work with filenames that contain spaces by surrounding the filename with single quote characters (like \u2018my file.txt\u2019) but it is inconvenient and most developers simply avoid spaces in filenames. 11.7.10 cp You can copy a file with cp command. You must enter two filenames as arguments: the name of the original file and the name you want for the copied file. $ cp my_file.txt my_file_2.txt $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:11 my_file.txt -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:16 my_file_2.txt The ls response shows we have two files. The cp command requires flags if we want to copy a folder. We\u2019ll use the mkdir command to create a folder: $ mkdir myfolder $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:13 myfolder Let\u2019s try to copy it: $ cp myfolder myfolder2 cp: myfolder is a directory (not copied). The error message indicates we cannot copy a directory. Let\u2019s try it with the -r flag to recursively copy contents from one folder to another: $ cp -r myfolder myfolder2 $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:13 myfolder drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:21 myfolder2 With the added flag, we are able to copy a folder. 11.7.11 rm Let\u2019s remove the files we just created. Unix provides rm , the \u201cremove\u201d command. First, let\u2019s check that you are still in the workspace folder. $ pwd /Users/danielkehoe/workspace $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:11 my_file.txt -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:16 my_file_2.txt Then enter the rm command, providing the filename as an argument: $ rm my_file.txt $ rm my_file_2.txt $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. The ls command shows the files are gone. When you delete a file using the Mac Finder file browser, the file is moved to a Trash folder. When you use the Unix rm command, the file is gone forever. There is no Trash folder for recovering a file when you use the rm command. 11.7.12 Removing a Folder Let\u2019s remove a folder. We\u2019ll assume you are in the workspace folder and the folders you created earlier are still there. $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:21 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:13 myfolder drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:21 myfolder2 The ls command shows we have folders myfolder and myfolder2 . We can\u2019t remove a folder with the ordinary rm command: $ rm myfolder rm: myfolder: is a directory $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:13 myfolder drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:21 myfolder2 We get an error message and the ls command shows the file is still there. This can be frustrating for someone who is not skilled with Unix. You\u2019ll need to \u201cset a flag\u201d (use an option) to remove a folder using the rm command. $ rm -rf myfolder $ rm -rf myfolder2 $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. Now the ls command shows the folders are gone. We use the r option to remove the contents of the folder recursively. And the f option to force the removal without asking for confirmation. 11.7.13 The Mouse and the Command Line The mouse belongs to the graphical user interface. That\u2019s why it doesn\u2019t work as expected on the command line. Try entering a command at the prompt: $ rm -rf notmyfolder If you want to edit the argument and change \u201cnotmyfolder\u201d to \u201cmyfolder,\u201d you can try clicking with your mouse at the point where you wish to change the text. But your mouse click will be ignored. It seems you must use the delete key to back up from end of the line to retype the argument. But there\u2019s a trick that works on most computers. If you press \u201cOption\u201d and click with the mouse, you can edit the command and argument as you would expect. You can also move around on the command line with Ctrl-a to go to the beginning of a line, Ctrl-e to move to the end of the line, and Ctrl-u to delete everything on the command line. If you can\u2019t remember these shortcuts, don\u2019t worry, you can just use the delete key to move backward and retype when you need to make changes to commands. 11.7.14 Arrow Keys The most useful trick for typing text on the command line is the \u201cup arrow\u201d key, which scrolls through a list of previous commands. The \u201cdown arrow\u201d key scrolls the history of commands in the opposite direction (forward if you\u2019ve moved backward). With Unix, you only need to type a command once and then you can scroll back to it with the \u201cup arrow\u201d key. It is a real timesaver. 11.7.15 Tab Completion There\u2019s another trick developers use to save time when entering commands and arguments in the terminal. If you are entering a filename, and the file already exists in the present working directory, you can press the \u201ctab\u201d key to autocomplete the filename after typing a few unique letters of the filename. If there is more than one filename with the same initial letters, the Unix shell will balk and beep. Pressing tab again will list all the matching filenames. Continue typing a few more letters until the Unix shell can identify one unique filename and autocomplete. 11.8 Why Abbreviations? Our quick introduction to Unix commands taught you about ls , cp , rm and other common Unix commands. If the commands were spelled out as \u201clist,\u201d \u201ccopy,\u201d or \u201cremove\u201d they might be easier to remember. Some old-timers say Unix was designed to be efficient on slow teletype terminals. That may be true, but I believe the abbreviations persist because programmers are lazy and want to type as few characters as possible. Unix commands may seem obscure but with repetition they will become familiar. Until then, keep a personal cheatsheet as your reference. As you learn Rails and develop applications, you\u2019ll gain experience with Unix commands. What you\u2019ve learned so far is enough to get started. Chapter 12 Text Editor You\u2019ll need a text editor for writing code and editing files. Word processing programs, such as Microsoft Word, will not work because they introduce hidden formatting codes into text files. Programmers\u2019 text editors provide syntax highlighting , making software code more readable and programmers more productive. Simple text editors such as TextEdit for macOS, or WordPad for Microsoft Windows, provide no syntax highlighting and should be avoided. 12.1 You Don\u2019t Need an IDE Programmers who come to Rails from other platforms, such as Java or C++, often ask for recommendations for an IDE, or an integrated development environment . These are software applications that combine a text editor with built-in tools such as a debugger. Some Rails developers use JetBrains RubyMine , Aptana Studio , or Komodo but most Rails developers use only a text editor and terminal application. You don\u2019t need an IDE unless you\u2019re in the habit of using one. For a beginner, they are cumbersome and add little additional value. 12.2 Which Text Editor Old-timers and hardcore technologists use text editors that run in the terminal window: vim Emacs There is a long-time rivalry between fans of Emacs and vim (and its predecessor vi). Between the two, vim is more popular. Emacs and vi are popular among skilled programmers because there\u2019s no need to leave the terminal window to edit a file. Programmers keep their fingers on the keyboard and don\u2019t need to reach for a mouse to use the text editor. That makes programmers more productive. In the long run, learning vim or Emacs will make you more productive as well as impressing your colleagues with your technical skill. Both vim and Emacs are difficult to learn. If you\u2019re a beginner, don\u2019t attempt to learn vim or Emacs if you\u2019re short on time. Most beginners will use a text editor with a graphical user interface (GUI). You\u2019re likely to encounter one of these: Atom Sublime Text TextMate Atom and Sublime Text are available for macOS, Windows, or Linux. 12.2.1 Install Atom Atom is an open-source text editor, developed by a team at GitHub. It is the newest of the text editors. If you have not yet installed a text editor, I recommend getting Atom. It can be downloaded and used for free. If you don\u2019t have a text editor yet, download and install Atom now. 12.2.2 Other Choices Sublime Text has been popular since 2008, particularly among developers who began learning Rails in the last seven years. Developers are expected to pay $70 USD for use of Sublime Text, which removes a nagging popup that reminds users to pay for Sublime Text. Textmate has been around since 2004 and remains popular among a small group of veteran Rails developers who have never bothered to learn vim or switch to Sublime Text or Atom. It is a commercial product priced at $56 USD. 12.2.3 How To Use a Text Editor You can find tutorials for these text editors on YouTube. Or skim the Atom documentation or Sublime Text documentation . For a book with tips and tricks about using a text editor efficiently, see Learn Enough Text Editor to Be Dangerous . 12.3 Editor Shell Command Carefully follow the instructions for installing your text editor. Installation is like any other desktop application; however, there is an unusual and important final step. Developers want to launch a text editor and open a file for editing by typing a command in the terminal window. If you\u2019ve installed Atom, click the \u201cInstall shell commands\u201d item under the \u201cAtom\u201d menu to enable the atom command. If you do so, you can open a file in Atom from the command line: $ atom myfile.txt Sublime Text has a similar configuration option for the Mac, though it takes more fiddling to set up. The Sublime Text documentation explains how. If you need more help, see Olivier Lacan\u2019s blog post, Launch Sublime Text 3 from the Command Line . After you\u2019ve completed the configuration, you can open a file in Sublime Text from the command line: $ subl myfile.txt Opening a file from the command line is a big win for productivity. It\u2019s even more useful to open an entire folder from the command line. In the \u201cTerminal Unix\u201d chapter, you learned that Unix has a \u201cdot file\u201d that represents the present working directory. To open an entire folder in Atom, try: $ atom . The text editor window will display a \u201ctree view\u201d of files and folders in a window pane. Click on any file to open it. It is very convenient to see an entire project at a glance in your text editor. Chapter 13 Learn Ruby Experienced Rails developers debate whether beginners should study Ruby before learning Rails. Most experienced Rails developers recommend that you study Ruby before attempting to learn Rails. Most code camps teach a week or two of Ruby before introducing web development with Rails. Given that Rails is based on the Ruby programming language, it seems logical to teach Ruby as a prerequisite to learning Rails. There are several flaws with this approach. Every \u201clearn Ruby\u201d book, video, or online course teaches Ruby with a series of classroom exercises. A concept is introduced, followed by examples, and then a programming puzzle or quiz, much like the way arithmetic was taught to children in the 1950s. If you are academically gifted, you can learn the basics of Ruby with this approach. But many people become frustrated and don\u2019t learn well this way. Though experienced Rails developers think a beginner should learn Ruby this way, many actually knew other programming languages already, and learned Ruby by skimming a language reference to notice differences, and googled for help when they needed to figure out how to write something in Ruby. They improved their skills by reading blogs or watching screencasts such as Avdi Grimm\u2019s Ruby Tapas . But mostly they learned Ruby by working on real-world problems that required skill with Ruby. The fact is, though you can get oriented to the basics of Ruby in a week, it takes a year or more of regular use of the language to gain proficiency. Rubyists develop their skill with Ruby over years, not weeks. That\u2019s true of most general purpose programming languages. Learning Ruby is a lifelong education program, not a short course. Does that mean you\u2019ll never learn Rails? On the contrary. Despite what experienced Rails developers will say, you can begin building Rails applications without developing Ruby proficiency. Rails is largely a DSL, or domain specific language , with its own keywords and directives built using Ruby, and following the Ruby language syntax. Many developers started learning Rails by following tutorials to build Rails applications without first studying Ruby. You will pick it up as you go along. Before my colleagues lambast me for leading newbies astray, let me say that trying to learn Rails without making an effort to learn Ruby is inefficient and counter productive. As you follow a Rails tutorial, make a parallel effort to learn Ruby. One will support the other. By building real applications with Ruby and Rails, and making an effort to learn more about Ruby at the same time, you\u2019ll be motivated to learn Ruby and you\u2019ll retain more knowledge of Ruby. And you\u2019ll be a better Rails developer. 13.1 Ruby Language Literacy In this book series, I\u2019ve taken a realistic approach. In Book Two, you will get started building a real-world Rails application. You will gain familiarity with the syntax of the Ruby language by studying the code that is needed to build the application. After you\u2019ve been exposed to real-world Rails code, you\u2019ll read a short chapter to learn about the basic features of the Ruby language. The goal of the chapter is to develop Ruby language literacy. With a grounding in real-world Rails code, and a short introduction to the Ruby language, you\u2019ll have a solid basis to develop your Ruby knowledge plus motivation to do so. What you need, more than anything, when you start working with Rails, is reading knowledge of Ruby. With a reading knowledge of Ruby you\u2019ll avoid feeling overwhelmed or lost when you encounter code examples or work through a tutorial. Later, as you tackle complex projects and write original code, you\u2019ll need to know enough of the Ruby language to implement the features you need. But as a student, you\u2019ll be following tutorials that give you all the Ruby you need. Your job is to recognize the language keywords and use the correct syntax when you type Ruby code in your text editor. Your hardest challenge will be to learn the names of the structures you see in code examples. This is why it is helpful to work your way through a short introduction to Ruby. You\u2019ll need to be able to recognize when you are looking at an array or a hash. You should recognize when you are looking at an iterator or the Ruby block syntax. Eventually, you\u2019ll recognize more exotic Ruby formulations such as the lambda. It is okay if you can\u2019t write a lambda function or even know when to use one; many Rails developers start work before learning Ruby thoroughly. By all means, if you love the precision and order of programming languages, dive into the study of Ruby from the beginning. It\u2019s good advice, just not for everyone. If you\u2019ve got the time and inclination, get started with these recommended books and videos before you read Book Two. If you can, study them at the same time you work on the project in Book Two. At the very least, look at these resources after you finish Book Two and before you start another tutorial. You\u2019ll be glad you did. 13.2 Resources for Learning Ruby 13.2.1 Collaborative Learning The best way to learn Ruby is to actually use it. That\u2019s the concept behind this site: Exercism.io With Exercism, you\u2019ll work though code exercises and get feedback from other learners. 13.2.2 Online Tutorials TryRuby.org - free browser-based interactive tutorial from Code School Codecademy Ruby Track - free browser-based interactive tutorials from Codecademy Ruby Koans - free browser-based interactive exercises from Jim Weirich and Joe O\u2019Brien Ruby in 100 Minutes - free tutorial from JumpstartLab Code Like This - free tutorials by Alex Chaffee RailsBridge Ruby - basic introduction to Ruby CodeSchool Ruby Track - instructional videos with in-browser coding exercises 13.2.3 Books Learn To Program - free ebook by Chris Pine Learn To Program - expanded $18.50 ebook by Chris Pine Learn Ruby the Hard Way - free from Zed Shaw and Rob Sobers Beginning Ruby - by Peter Cooper Programming Ruby - by Dave Thomas, Andy Hunt, and Chad Fowler Eloquent Ruby - by Russ Olsen Books by Avdi Grimm , including Confident Ruby and Objects on Rails . 13.2.4 Newsletters Practicing Ruby - over 90 helpful articles on Ruby RubySteps - weekly lessons by email from Pat Maddox 13.2.5 Screencasts RubyTapas - $9/month for access to over 100 screencasts on Ruby Chapter 14 Crossing the Chasm In my books, you learn how programming is actually done in practice. In this book, you learn about the culture of Rails beyond the code. In Book Two, you\u2019ll follow step-by-step instructions to build and deploy a real Rails application. This chapter is here to help you surmount the problems that come after you finish my books. You can wait and read it later, after you\u2019ve built applications using tutorials, or you can read it now and learn to overcome the challenges you\u2019ll face when you are done reading tutorials. What comes next partly depends on your goals. You may be eager to launch a startup, you may want a job as a developer, or you may have a project to tackle at work or in your spare time. Whatever you choose to do, you\u2019ll face the challenge of building an application without instructions. Here I\u2019ll give you ideas about overcoming that challenge. 14.1 Facing the Gap There\u2019s a name for the obstacle that lies in wait for beginners who teach themselves to code by following a tutorial. I call it the \u201ctutorial gap.\u201d It\u2019s the yawning chasm you face when it is time to build a custom application of your own. Even though you\u2019ve just built and deployed a working application, the moment you are without instructions, the chasm will open wide. You\u2019ll feel it most acutely when you realize you don\u2019t know where to start. Should you search for a gem? Should you start by building a view, a model, or a controller? Should you do test-first development and write a test? What should you test if you don\u2019t know where to start? A similar problem lies in wait for beginners the first day on the job. You\u2019ll hear it called the \u201cjunior gap.\u201d The term refers to the chasm between the time a developer is hired and becomes a \u201cjunior dev.\u201d A \u201cjunior dev\u201d is a team member who is more-or-less self-sufficient, learning new skills without being a burden for other developers, and able to contribute to a company at a level that increases team productivity. Whether self-taught, hired after graduation from a university, or from a 9 or 12 week code camp, new staff members seldom have the skills to be fully productive members of a team. Your success at a new job depends on how quickly you overcome the junior gap. The \u201ctutorial gap\u201d and the \u201cjunior gap\u201d are versions of the same chasm. You\u2019ll cross the chasm each time you build an application. The more applications you build, the narrower the chasm becomes, and the less help you need, until you\u2019ve crossed the chasm so many times that panic is replaced by delight when someone asks you to implement something you\u2019ve never encountered before. That\u2019s the point when you\u2019ve become a self-sufficient and productive developer. If you assume that becoming a successful developer depends on acquiring technical skills, the chasm may thwart you. The chasm cannot be crossed with technical knowledge, no matter how much you learn about Ruby, Rails, JavaScript or any other technology. Crossing the chasm requires \u201csoft skills,\u201d including cultivating your own problem-solving abilities, and realizing that software development is fundamentally a social activity. In this chapter, I\u2019m going to describe two ways to cross the chasm. First, I\u2019ll give you a technique to jump start work on a custom application. It\u2019s a strategy that will enhance your problem-solving abilities. After that I\u2019ll suggest how to get help from a mentor, focusing on the social practice that is at the heart of software development. 14.2 Bridging the Gap With a Strategy When you start work on a custom application, you\u2019re like a writer who has to write an essay and faces a blank screen. If you\u2019ve been taught to write an essay, you probably learned to make an outline and start with a topic sentence or introductory statement. Not every writer starts that way, but it\u2019s a strategy to get started. You can use a similar strategy to get started with custom application development. Here\u2019s a process you can use: Ask: Why will someone want to use your application? Write a product description. Ask: What will a visitor first see and do? Write a user story for the home page. If you like to think visually, create wireframes for some of the important features. Create user stories for some of the important features. Generate a starter application with rails new or Rails Composer . Pick any user story. Make a static page using HTML to mock up what the user will see. Write a feature test to verify the content on your static page. This is your first code. Create a model. Use the model to set a variable containing some string from the static page. Create a controller. Give it the same name as the model. Create a route for the controller. Replace the static page with a dynamic page. Use the controller to set an instance variable and render a view. Does your feature test still pass? Modify your feature test if necessary. Ask: How will data displayed on the page get into the model? From a third-party API? A user-submitted form? Replace the hard-coded string in the model with dynamic data obtained from a user or an API. Check your feature test. Does it still pass? Do you need to change the test to use the model? Ask: Have you implemented the user story? Do you need to revise the user story? Commit your work to Git. Then throw it away if you\u2019re not satisfied. You can always \u201cdo over\u201d later. Ask: Is there another user story you can implement? Get started again. You may have to repeat this process many times before you have something you can keep. Each time, you will discover what you don\u2019t know. Perhaps you haven\u2019t expressed a user story well and you need to rethink your feature. Or you\u2019ve reached the limit of your technical knowledge and you need to do some research and further study. Each time you repeat this process you are practicing crossing the chasm. Not every writer starts an essay the same way, and not every developer will use the strategy detailed above. If you\u2019ve ever faced writers\u2019 block, you may have heard this advice from teachers: Write something, anything, just to get started. It\u2019s the same with software code: Just begin, anywhere. If you follow the strategy described above, you\u2019ll have a place to get started. It is a process you can repeat when you start any application. If you need more help, see the book Practicing Rails by Justin Weiss, which provides advice and exercises to overcome the tutorial gap. 14.3 Bridging the Gap With Social Practice Let\u2019s consider the social aspect of software development. If you work on your own, trying to master the art of software development, it will take you a very long time, you\u2019ll need extraordinary patience and tenacity, and you won\u2019t become a very good software developer. To accelerate the process, and improve your skill, you must reach out to others. If you\u2019re shy and introverted, this will be hard; if you\u2019re bossy or reluctant to reveal your shortcomings, it may also be difficult. However, you must make the effort if you want to cross the chasm. Software development often looks like a solo activity but it is not. Developers talk to users to improve the user interface and product features. Open source libraries, whether gems or full frameworks like Rails, are developed collaboratively. Code reviews are an opportunity to ask others to help you improve your implementation. Pairing is an intense and effective way to write better code and share knowledge. You\u2019ll learn more, and faster, from both experienced developers and inexperienced peers, when you work with others. 14.3.1 Making an Effort It is important to have a strategy to get started on your own, as described above. You must make an initial effort, even if picking yourself up by your bootstraps doesn\u2019t get you very far. No one, particularly software developers, wants to help someone who can\u2019t show they\u2019ve made a best effort on their own. You may surprise yourself when you make an initial effort; you\u2019ll find out what you know and identify what you need to learn. Start a list of topics you need to research or questions you need to answer. Do research. If no clear answer emerges, list the possibilities and show them to someone else. Even if you think you\u2019ve found the answer on Stack Overflow or a blog, show someone your initial problem and the solution you\u2019ve found. Find out if your colleague agrees or has another perspective. Showing someone your research shows you\u2019ve made an effort and it will make it easier to ask for help when research doesn\u2019t provide a solution. (Refer to the \u201cGet Help When You Need It\u201d chapter if you\u2019re not sure where to do research.) 14.3.2 Conversation Starters You can ask people to answer questions online, on Stack Overflow , Reddit , Quora , mailing lists, forums, IRC channels, or even by directly sending email to developers. This counts as social activity but it is inherently limited. Open-ended interaction is better, either in person or through video chat. Prime the pump with to-the-point questions, as you would on Stack Overflow, but allow the conversation to meander. Make sure your conversation includes conversation helpers like these: What do you think? How would you do this? Is there a better way? What do you think I should look at next? Ask the kind of questions that elicit opinions that you can\u2019t ask on Stack Overflow. Never forget to acknowledge the gift you\u2019re receiving of time and knowledge. Express your thanks, state clearly how the conversation has benefited you, and offer to report back on how the collaboration has helped your progress. 14.3.3 Pay It Forward Don\u2019t be shy about asking for help. If you\u2019ve made a best effort to solve a problem on your own, and you\u2019re willing to help others in the future, you\u2019ll get all the help you need, and more. There\u2019s an unwritten rule of the open source movement. It applies whenever you ask a stranger for help, whether opening an issue on GitHub or asking for help with a project. You are not entitled to anything , whether its software code, a bug fix, or just help, if you\u2019re only consuming . Open source is free for the taking but you\u2019re not welcome if you\u2019re a mooch. Luckily for all of us, causality rules do not apply (or at least there\u2019s no temporal causality). That means, if you contribute something in the future, help will be forthcoming, sometimes more profusely than you\u2019ve asked for. You must contribute in kind, of course. If you offer to pay money to have a bug fixed, you\u2019re violating the spirit of open source, and you can expect either grumpiness, a hefty consulting fee, or both. If you indicate you\u2019re willing to help with documentation or code, you\u2019ll be welcomed even if you\u2019re currently incapable of contributing. This applies in an interesting way to beginners. If you show you\u2019ve tried to solve a problem on your own, and ask for help, many developers will help without any compensation other than the conviction that someday you\u2019ll help someone in a similar situation. Software development relies on a booming pay it forward economy. 14.4 Finding a Mentor Now that you\u2019ve given some thought to the social aspect of software development, let\u2019s consider where to go for help. When career advisors talk about closing the junior gap, they\u2019ll often point to the importance of mentorship as the key element in becoming a skilled software developer. It\u2019s just as important when you\u2019re developing software for a startup or a personal project. Mentorship will help you cross the chasm. You may ask, how can I find a mentor? In your mind\u2019s eye, you may be imagining the mentor that will help you become a skilled Rails developer. He or she is a few years older than yourself, has a great job leading a team at a successful startup, probably contributes to several well-known open source gems, and takes a break every Saturday for a few hours to teach you how to code. Sorry, that is not likely to happen. The mentors who will help you will not fit the picture of a wise sage or crone, no more than Prince Charming or Princess Buttercup will ever be anyone\u2019s spouse. In most situations, the mentorship relationship will be unacknowledged. The seeds of mentorship lie in any interaction where you ask for help and receive guidance. Mentorship is a relationship you must cultivate, much like friendship. And, like friendship, you will seldom ever ask someone to be your mentor. Most people would balk at the awkwardness, either because they don\u2019t see themselves as qualified, or because it suggests an open-ended commitment and responsibility that is intrusive. Like making new friends, it is your job to seek out mentoring moments, ensure the experience is mutually rewarding, and suggest the possibility of repeating the experience. Mentorship is a relationship built from a series of successful mentoring interactions. Repeat the interactions and you have mentorship. 14.5 Creating Mentorship Moments In the chapter \u201cGet Help When You Need It,\u201d you learned where to look for help. Let\u2019s consider where you can look for opportunities to experience mentorship moments. 14.5.1 Online When you ask for help on Stack Overflow , Reddit , or Quora , the answers will be most useful when you focus narrowly on a specific question. Mentorship comes from open-ended interaction, when a conversation can move in unanticipated directions, so most online interactions seldom turn into mentorship moments. Online interactions may help you find people who can coach you. Clicking on a user\u2019s name on a site such as Stack Overflow, Reddit, or Quora will show you a user\u2019s profile. When someone is helpful or knowledgeable, check if they show their geographic location in their profile. If they don\u2019t, perhaps they\u2019ve provided a link to their website or Twitter account. If not, you may be able to send a private message. Reach out and ask where they are located, if they have time to meet to answer more questions, or can suggest anyone in your city who might be helpful. It is worth checking to see if someone is local even though most people online are not nearby. 14.5.2 GitHub GitHub is a special case. Interactions on GitHub are at the core of the Rails community. It\u2019s where open source software gets built. Collaboration on GitHub leads to mentorship, friendships, and business partnerships. That\u2019s why it is so important to build a credible GitHub profile by uploading the projects you build while learning, to show that you are working steadily at becoming a better programmer. When you look at a repository on GitHub, look at the account of the person who maintains the project. Look at the commits and the issues. Click through to the profiles of the people who\u2019ve made the commits or commented on the issues. Experienced developers often show their location in their profile and provide their email address. If you find someone in your city, make contact. Of course, don\u2019t ask a stranger point-blank to be a mentor! Tell them about your experience and what interests you. Ask where you can meet developers locally. You may learn about a meetup or user group meeting. If your contact is helpful, you may have an opportunity to meet for coffee. 14.5.3 Meetups Meetups are a prime place to cultivate in-person mentorship moments. All large metro areas have active meetups for web developers, Rails developers, programmers, or startup entrepreneurs. If you\u2019re in a rural area, make the drive once a month to the big city to connect with the community. To find the meetups, search Meetup.com or google \u201cruby rails (my city)\u201d. If you\u2019re near a university campus, check for activity on the campus. If you\u2019re in a tech hub such as San Francisco, there\u2019s a meetup almost every night of the week. Smaller cities have relevant meetups monthly. If you can\u2019t find a meetup, start one! When you visit a meetup, remember that mentorship can be hidden in anyone. Like any public event, you\u2019ll meet people who are flakey, bigoted, garrulous, prone to halitosis or innumerable personality quirks, as well as a minority who are fascinating and obviously knowledgeable. Don\u2019t dismiss anyone. You\u2019ll find mentorship moments where you least expect them. 14.5.4 Workshops and Classes You may be surprised that workshops and classes are not the ideal place to find a mentor. Obviously, given a good instructor and a relevant curriculum, a workshop or class is a great place to learn. However, it is very unlikely that a teacher will become an ongoing mentor. The instructor\u2019s goal is to share knowledge with a group of people, so any focus on you as an individual has to be limited. Furthermore, the instructor is probably not available outside of the class or on an ongoing basis. Don\u2019t sign up for a class hoping the instructor will become your mentor. However, a workshop or class is an ideal place to connect with peers. There is no other place where you\u2019ll easily find other people who want to learn the same things as you. When I teach, I\u2019m surprised how often people come to a class expecting their education will end as soon as the class is over. If you take a class, seize the opportunity to make one new friend who will be your study partner after the class ends. Better yet, organize a study group to continue after the class is over. If you have only one new study partner, he or she can flake out. Instead, get together with three or four other learners once a week. Support each other, share your excitement, and invite mentors to come speak to your study group. Peer learning has much in common with mentorship. The leading code camps recognize that collaborative problem-solving skills are as important as technical skills. When students team up to work through exercises or build applications, there\u2019s a natural give-and-take as each takes turns making discoveries and sharing knowledge. You don\u2019t have to enroll in code camp to be part of a peer learning environment; you can create it yourself in a study group. This isn\u2019t a relationship of mentorship, but it is an opportunity to experience mentorship moments. 14.5.5 On the Job You are most likely to find a commitment to mentorship on the job. If you\u2019ve been hired to work as a Rails developer, at a company with Rails developers on the team, you\u2019re in an ideal environment to learn. Not everyone has the skills to be a good mentor and you may struggle if you are stuck with a senior developer who is a know-it-all or assumes you know more than you do. Still, you have immediate access to developers with knowledge and the company has every reason to encourage you to learn. Unless the company has an explicit program to assign coaches to new hires, you will probably not call someone your mentor. Instead, recognize that you can cultivate mentorship moments by asking for guidance beyond the immediate assignment. In a stressful environment where your team is delivering code against deadlines, not everyone may be able to devote time to teaching. You should seek mentorship moments where you can. Some companies are committed to building a culture of mentorship. When you are looking for a job, make it your priority to seek a job offer from companies where you will find mentors. For a first job as a developer, the opportunity to learn on the job is far more valuable than any other benefits. When you interview, ask if the company encourages pair programming. Ask if you will have time to work on a pet project to learn new skills, and if it will be acceptable to ask your teammates to answer questions or provide a code review for your pet project. Ask if the company encourages team presentations about new technologies. Ask if anyone from the company volunteers to teach at workshops or gives presentations at meetups or conferences. Some hiring managers will be proud to describe the company\u2019s commitment to developer education. If they\u2019re not, it\u2019s a red flag that the company may not be a good fit for you. Small startups are not a good place to look for mentorship, if the runway is short and the founders are trying to launch before funding runs out. Companies that have closed a Series A round (the first release of stock to venture capital firms and other private equity investors) will still be tightly focused on getting a product to market, with no time to coach new hires. As a company takes additional rounds of investment, beyond the Series B round, the company will have grown beyond an initial two or three engineers and may recognize the value of hiring and coaching inexperienced developers. To some companies, mentorship is part of a strategy to develop their technical depth. These are the companies that are ideal for new developers. 14.6 What\u2019s Next If your goal is to start a career as a Rails developer, your objective should be to find a job at company that is committed to mentorship. You\u2019ll need to learn more than what is offered in this book and the next, but you can continue learning while you \u201cgo social\u201d to cultivate mentorship moments and meet people who can introduce you to companies that are hiring Rails developers. Going to meetups, collaborating on code, and participating in a study group will help you find mentors and help you find a job. If you are eager to launch a startup, or plan to work on a personal project, your next step will be different. Let\u2019s consider what you should do after finishing this book if you\u2019re an entrepreneur, developing a lifestyle business, or working on a personal \u201cside project.\u201d 14.6.1 Entrepreneurs If you want to launch a startup, stop and ask yourself what your priorities should be. Startup success depends on asking yourself every day, \u201cWhat is the most important task I need to accomplish today?\u201d Chances are, it is not learning to code. Working through my books, you\u2019ll learn enough to work with a skilled developer, whether a cofounder, an employee, or contractors. Your most important task is to determine the product/market fit for your business idea. You must develop a Minimum Viable Product (MVP) and start the process of acquiring customers who can tell you if your product has value. Anything else defers the day of judgment when real customers will tell you whether they are willing to spend money on your product. If you are pursuing your own business vision, you\u2019ll only delay judgment day if your priority is to learn Rails. If you haven\u2019t already, start looking for a technical cofounder or people you can hire (if you have your own funds). Angel investors and venture capitalists are reluctant to fund a solo founder, even when an entrepreneur is highly skilled technically. Investors place more importance on the ability and track record of the team than on a business idea; obviously, a skilled team is a better investment risk than a solo founder who just started learning Rails. In today\u2019s investment climate, you won\u2019t be seeking investment if you don\u2019t yet have an MVP and customer traction. But you should start recruiting your team. The good news is that you\u2019ve learned enough about web development to have credibility when approaching a potential technical cofounder. Among developers, there is no one more ridiculed than the non-technical founder who makes no effort to learn to code and expects someone else to do all the technical work. You\u2019re not that guy or girl. You could build your web application yourself, given enough time. But in the best interests of your business, you should look for a partner who will be your technical mentor, guide, and helpmate as you become a better coder and build out your MVP. You can seek a technical cofounder in the same way you seek mentorship moments. Your agenda will be larger; anyone who is a mentor or peer may be a potential business partner. Look for help to improve your technical proficiency. As you build a personal relationship with a mentor or peer, you may have an opportunity to introduce someone to your business vision. It is very unlikely you can build a business on your own, so start looking for a partner while you continue to learn to code and develop your MVP. You won\u2019t be having meetings with potential partners every day. On days when you are not looking for a partner, work on the user stories that will define the requirements for your MVP. You don\u2019t need anything more than you\u2019ve learned in this book to develop your user stories and plan your product. Work on wireframes and show your ideas to anyone who will listen. Take a break from product planning to work on your coding skills. Try tackling one or two user stories and see if you can implement a basic feature you need for your MVP. There\u2019s no better way to learn to code than building the product that you need for your business, especially if you get help and feedback along the way. 14.6.2 Lifestyle Businesses and Personal Projects Don\u2019t let anyone discourage you if you have an idea for a web application that will supplement your earnings from a job, or even let you quit your job to enjoy a \u201clifestyle.\u201d The investment community disdains lifestyle businesses that have limited \u201cupside\u201d (the revenue growth that rewards investors). Personally, I think lifestyle businesses are great. Without the pressure from investors, and with income from an existing job, you can take your time to learn to code, enjoying the process of learning application development with your goal in mind. It is still worthwhile to seek out a mentor, but you can continue to pursue learning on your own with all the resources we list in the next chapter. Personal projects can become lifestyle businesses when they begin to generate revenue. Of course, there are many personal projects that are not intended to be moneymakers, for example, a web application for a faith group or a charity, or just a side project that helps you learn to code. Again, seek mentorship moments, or work in a group that learns together, and you\u2019ll develop your skills faster. Play around with user stories and wireframes to see if it helps you organize your project. Try writing feature tests. You may not need to write tests for a personal project but you may discover a feeling of competence and confidence that goes with testing. With a personal project, the journey is the reward. Indulge in the luxury of learning for its own sake and focus on the satisfaction of seeing applications run that you\u2019ve built with technologies that are new to you. 14.7 Build Applications If you want to become a skilled Rails developer, nothing is more important than building applications. As you\u2019ll see in the next chapter, there is so much to learn about web application development that you can (and likely will) continue to learn until the web goes dark. Don\u2019t try to learn it all. Start building applications now. Building applications puts everything you learn in practical context. The features you want to build will set the priorities for what you learn next. If you want users to sign in to an application, you\u2019ll learn about authentication. If you want want to show stock prices or sports scores, you\u2019ll learn about JavaScript and charts. There\u2019s no better way to learn than by building. Build simple applications at first, with only one small feature. Take them all the way from user stories to deployment. Use Rails Composer if you want to get started fast so you can focus on your custom features. Commit your projects to your GitHub account, no matter how trivial or broken. Putting your projects on GitHub will show that are working hard and gaining experience. If you\u2019re going on job interviews, employers probably won\u2019t have time to look at your GitHub account, but you\u2019ll gain points in a job interview if you can point to a GitHub repository to show something you\u2019ve built, or when you answer a question like, \u201cWhat is the hardest problem you\u2019ve had to solve?\u201d Some beginners set a goal, such as building one new application every week. That\u2019s a great plan. When your applications get more complex, they will make take more than a week to build, but keep on building. If you don\u2019t have any ideas for what to build, ask for ideas on Reddit or Quora and the indefatigable commenters will gladly answer. At a minimum, you should build (and thoroughly understand) each of the starter applications you can build with Rails Composer . With every application you build, the chasm of the \u201ctutorial gap\u201d will narrow and you will broaden your ability to tackle unfamiliar problems and challenges. In the next chapter, we\u2019ll consider specific technical skills and I\u2019ll make recommendations for books and tutorials that will increase your technical proficiency, Chapter 15 Level Up With this book, you\u2019re on the way to becoming a successful Rails developer. You\u2019ve learned about basic concepts and discovered where to go for help. But there\u2019s much more to learn about Rails and web application development. This chapter will suggest the next steps on your path to learning Rails. 15.1 What to Learn Next In Book Two, you\u2019ll build a simple web application. It will cover the basics: Rails directory structure using Git installing gems configuring an application the request-response cycle model-view-controller architecture application layout and views front-end frameworks forms sending mail connecting to external services deploying an application analytics for traffic and usage In addition, you\u2019ll get an introduction to the Ruby language and the basics of testing. Visit tutorials.railsapps.org to learn how to get Book Two. Here are topics you should study after Book Two: Databases Testing Sessions and Authentication Authorization JavaScript I\u2019ll explain each topic and suggest where to learn more. 15.1.1 Databases Book Two will explain how to create a model, a software object that represents data in a database. When you create a model, you create an object that handles data only for the brief life of the request-response cycle, when it is active in a computer\u2019s working memory. You\u2019ll want data to persist beyond the brief request-response cycle, after objects disappear from working memory. Rails does not include a built-in database. It offers the flexibility of using several different industrial-grade database systems. Relational database management systems such as SQLite , PostgreSQL , MySQL , and Oracle all use Structured Query Language (SQL) as an interface to store and retrieve data. These databases run separately from a web application, requiring their own database servers. Rails provides a component, named Active Record , that connects to these database servers. Active Record is a framework for Object-Relational Mapping (ORM), connecting application models to database tables in a relational database management system (DBMS). Active Record makes it possible to save model data as a record in an external database, preserving complex relationships among the data. Application development would be easy if we could just use spreadsheets to save our data. However, some data, such as a document, is too large to fit in the columns and rows of a spreadsheet. More significantly, database management systems are designed to accommodate relationships among the data. That\u2019s why they are called relational database management systems. For example, an ecommerce application might have a Customer model and an Order model. Active Record allows developers to use the Rails API to describe associations among models and interact with a database. For example, you can make sure that an order is not created unless it is associated with a customer. Additionally, Active Record provides a query interface. You can use the query interface to find all orders associated with a particular customer. Where to Learn For a focused, fast introduction to Rails and databases, you should read the book: Easy Active Record for Rails Developers by Jason Gilmore ($29 USD) It is my recommended follow-on to learn more about databases. 15.1.2 Testing You learned about the basic concepts and terminology of testing in Book Two. If you\u2019re working on a personal project or your own startup, you can learn more about Minitest to gain the skill you need to write robust tests. If you expect to work with other Rails developers professionally, you\u2019ll need to learn to use RSpec for testing. Where to Learn Every intermediate-level Rails book talks about testing, without any introduction to the terminology and concepts of testing. Review the \u201cTesting\u201d chapter in Book Two, then learn to set up and use RSpec with a tutorial I\u2019ve written, The RSpec Tutorial , which is part of the Capstone Rails Tutorials series. To learn more about RSpec, read these two excellent books: Everyday Rails Testing with RSpec by Aaron Sumner ($19 USD) Rails 4 Test Prescriptions by Noel Rappin ($25 USD) You don\u2019t have to read these books immediately, but be sure to add them to your reading list. 15.1.3 Authentication and Sessions Most web applications need a way for users to sign in, permitting access to some features of the application only for signed-in users. The popular gem Devise is used to add authentication for users who register with an email address and password. OmniAuth is a gem for authentication using a service such as Facebook, Twitter, or GitHub. Most Rails developers will use these gems because they are robust and well-tested. To understand how authentication works, you\u2019ll need to learn about sessions in a web application. The web, as originally built, was stateless . A server simply responded to a request by delivering a file. To enable ecommerce applications, cookies were adopted in 1997 as a way to preserve state. Each time the browser makes a request, it will send a cookie. A web application will check the value of the cookie and, if the value remains the same, the application will recognize the requests as a sequence of actions or a session . A session begins with the first request from a browser to a web application and continues until the browser is closed. Cookie-based sessions give us a way to manage data through multiple browser requests. Rails does all the work of setting up an encrypted, tamperproof session. The data we most often want to persist throughout a session is an object that represents the user. Where to Learn To get started quickly with either Devise or OmniAuth, I\u2019ve written two tutorials which are part of the Capstone Rails Tutorials series: Devise Quickstart Guide OmniAuth Tutorial As a learning exercise, it is worthwhile to build authentication from scratch without Devise or OmniAuth. Michael Hartl\u2019s popular book shows how to build authentication from scratch: Ruby on Rails Tutorial by Michael Hartl (free online) 15.1.4 Authorization We use authentication to verify a user\u2019s registered identity, so we know the person signing in is the same person who signed up earlier. We use authorization to limit access to pages of a web application. Authorization is typically restricted by role, so users are assigned roles with differing access privileges. In the simplest implementation, we check if a user has a specific role (such as administrator) and either allow access or redirect with an \u201cAccess Denied\u201d message. Roles are attributes associated with a user account, and often implemented in a User model. There are no standard conventions for implementing roles and authorization in Rails. Developers often implement roles from scratch and use gems such as Pundit or CanCanCan to implement authorization. For most web applications, you\u2019ll need to learn how to implement roles and authorization. Where to Learn To learn about authorization, start with a free article I\u2019ve written on Rails Authorization . I\u2019ve also written two tutorials which are part of the Capstone Rails Tutorials series: Role-Based Authorization Pundit Quickstart Guide These tutorials explain the code from the rails-devise-roles and rails-devise-pundit example applications, which you can generate with Rails Composer as starter applications. 15.1.5 JavaScript JavaScript is a general-purpose programming language (like Ruby). It is the language used to manipulate web pages within a browser. Every web developer needs to know JavaScript. For a Rails application, you might develop application features such as auto-complete search forms using a combination of jQuery and AJAX techniques. For more sophisticated web applications, such as a single-page application (SPA) that loads in the browser as a single web page and offers a fluid user experience similar to a desktop application, you\u2019ll need to learn to use a JavaScript framework such as Ember.js , AngularJS , React , or Backbone.js . If you intend to specialize as a front-end developer, focusing on user interaction and the browser interface, you\u2019ll need to become an expert in JavaScript. Where to Learn There are many resources for JavaScript, more than for learning Ruby or Rails. Here are good curriculum guides: Learn JavaScript by Mozilla The Odin Project: JavaScript and jQuery The JavaScript course from Codecademy is universally recommended, as is the book Eloquent JavaScript . 15.1.6 Other Topics There is much more to learn before you gain full proficiency as a Rails developer. Here\u2019s an illustration: Figure 15.1: Rails Competencies. The graphic above is from a blog post, This is Why Learning Rails is Hard , by Brook Riggio of the Code Fellows code camp in Seattle. You can see the graphic in detail . The first time I saw it, I felt despair. It is a mind map of all the topics a skilled developer should know. The branches on the right side are topics that are specific to Rails, as well as general skills required of a Rails developer, such as Git, the Ruby language, and software engineering competencies. The branches on the left are general areas of knowledge that would be understood by any web developer, such as the Unix command line, web fundamentals, deployment, testing, and SQL. Brook Riggio says, \u201cIf this looks intimidating to you, you\u2019re not alone\u2026. Learning Rails is hard because there are many independent concepts to learn.\u201d I recommend you spend half an hour each day googling each topic listed on Brook Riggio\u2019s map. In three months, you\u2019ll have a \u201cbig picture\u201d of the knowledge areas that are important to a Rails developer. You can\u2019t learn everything at once, so dive further into the topics that interest you. As you tackle new projects, you\u2019ll learn more, and you\u2019ll add depth to your understanding of each topic on the map. 15.1.7 Curriculum Guides Brook Riggio\u2019s map gives you a list of topics for learning. But it is helpful to tackle the topics in a sequence that makes sense. You\u2019ll also need recommendations for the best learning materials. For a curriculum that organizes the topics you need to become a web developer, I recommend: The Odin Project It is a unique community-driven curriculum, organized by Erik Trautman, the founder of Viking Code School , that gives you a roadmap of what to learn, and where to learn it. 15.2 Places to Learn What\u2019s your preferred learning mode? Books, classrooms, videos, online courses? I guess you\u2019re comfortable with books, so I\u2019ll recommend the best ones for further study. But first let\u2019s consider other modes of learning. 15.2.1 Code Camps Starting in New York City with General Assembly in 2011, and Dev Bootcamp in San Francisco in 2012, the market for developer education has been booming. Right now, in San Francisco, there are a dozen organizations offering immersive code camps, and dozens more in large cities worldwide. These organizations offer eight- to twelve-week courses, priced around $10,000 to $12,000 USD. For a list of code camps, see these websites: Course Report Switch Techendo Reviews Code camps are a great way to become a developer, if you can afford the cost, and intend to recover the cost by finding a high-paying job as a developer. The best code camps create an environment of peer-based learning, where you pair with other students to solve technical problems and build applications, just as you would in the workplace. Code camps also provide relentless pressure to learn, from teachers and peers, but primarily from yourself. The quality and depth of technical knowledge you\u2019ll acquire varies greatly depending on the code camp curriculum and the individual instructors they\u2019ve hired. All code camps provide the motivation and social context for accelerated learning, delivering self-confidence that comes from the encouragement and feedback of teachers and peers. If you don\u2019t have money to pay for code camp, all is not lost. You can teach yourself Rails with books and, with effort, you\u2019ll be good enough to start a web-based business or look for a job. I recommend that you build your self-confidence by developing applications on your own. And certainly, find other learners and study together. Most Rails developers are self-taught, at least within the domain of web application development, so code camps or university programs are wonderful, if you can afford the cost, but not essential. 15.2.2 Other Classrooms It\u2019s unusual to find a university or community college that offers classes in web development with Rails. In the US, university computer science programs focus on analytical reasoning and the conceptual underpinnings required for advanced research in the field. Some community colleges teach web development but it is difficult for the schools to find experienced Rails instructors, especially given the disparity in salaries between teaching and software engineering. However, universities or community colleges are good places to meet other students and form a study group, to provide social support for learning. Classes taught in the community, often free or low-cost, are surprisingly good places to learn. Teachers and organizers are highly motivated and may be experienced Rails developers giving back to the community. Community-based classes or workshops are often poorly publicized, so you\u2019ll have to search hard for these courses. Women have a good chance of finding peer organizations that teach programming and web development with Rails. Start by looking at the course schedules for these organizations: Rails Girls RailsBridge Girl Develop It Women Who Code These organizations only offer introductory classes, so you\u2019ll have to study on your own for deeper knowledge. Short courses such as weekend workshops are valuable because you can find other students who want to start a study group. 15.2.3 Online Courses It\u2019s no longer necessary to go to a classroom to go to school. Online courses range from online code camps that provide videos and one-on-one coaching, to websites that offer a selection of pre-recorded videos packaged as a course, to MOOCs ( massive open online courses ) offered by consortiums of universities. Chasing the runaway success of classroom-based code camps, you\u2019ll find a number of companies that offer code schools delivered online. Here are a few that combine videos with personal coaching: Flatiron School Online Campus Bloc.io CareerFoundry Code Union Launch School (formerly Tealeaf Academy) The Firehose Project Thinkful Thoughtbot Upcase Viking Code School The online code schools provide some of the benefits, specifically curriculum and coaching, of the classroom-based code camps, at a fraction of the cost. Videos, homework projects, and online mentors can\u2019t reproduce the intense peer-based learning of the classroom code camps. But you don\u2019t have to quit your job or move to a another city. MOOCs provide university-level education online. You can search a database of MOOCs at the Class Central website. I recommend the edX course: CS169.1x Engineering Software as a Service It is a nine week class, it is free, and it is taught four times a year. It is based on a software engineering class taught at the University of California, Berkeley. The professors have written their own textbook to accompany the class, Engineering Software as a Service: An Agile Approach Using Cloud Computing . The class is very worthwhile, if you have the time and it fits your schedule. 15.2.4 Videos Online code camps and MOOCs provide supervised learning, combining videos with access to coaches or instructors. If you want self-paced study, without access to a coach, you\u2019ll find hundreds of videos online, varying greatly in quality. There\u2019s one big problem with videos: The ones that are easiest to find are often outdated. It is very difficult for producers to revise videos and, as you know, Rails changes often. Michael Hartl, author of the Ruby on Rails Tutorial , a book I recommend, offers screencasts to accompany the book. The cost is $149 USD. Go Rails offers dozens of intermediate and advanced screencasts. Chris Oliver started producing the videos in mid-2014, so they are newer than most Rails screencasts you\u2019ll find on the web. These are task-focused videos, good for supplementing a book or course. Some are free, some are available with a $19 USD subscription. RailsCasts seems to always be recommended by Rails developers, and these screencasts were once among the best ways to learn about Rails. RailsCasts creator Ryan Bates left the community in mid-2013 and, unfortunately, many of the screencasts are no longer current or relevant. Still, they are worth a look. Lynda.com offers a Ruby on Rails 4 Essential Training 12 hour video series at a cost of $25 USD for a monthly subscription. It covers Rails 4.0 and is an adequate introduction at a very low cost. Thoughtbot Upcase , formerly known as ThoughtBot Learn Prime, is a program from the respected ThoughtBot consulting firm that provides videos for $49 USD monthly, with coding exercises and a personal coach at a higher price. You can see the Upcase curriculum for an overview. The program is well-regarded. Code School is famous for its Rails for Zombies course, and the company offers a dozen additional courses that cover both Ruby and Rails. The courses combine instructional videos with in-browser coding exercises at a cost of $29 USD per month. The quality is high, the videos are current, and the company tries to make the topics entertaining. Pragmatic Studio , publishers of many high-quality Rails books, offers a series of 26 videos for $179 USD. The course is a solid introduction to Rails. Baserails.com is a video series, available with a $25 USD monthly subscription, that shows you how to build an application. It\u2019s good if you want practice before building something on your own. One Month Rails is an 8 hour video series aimed at beginners. It\u2019s priced at $99 (though you can find discount codes if you search). If you\u2019ve read Book Two, you should skip One Month Rails and focus on intermediate-level books and courses. Treehouse is a subscription site ($25 USD per month) with a big budget and many course offerings. The courses on Ruby and Rails don\u2019t provide enough depth to take you beyond a beginner level. Tuts+ offers several Rails courses. Some are out of date. Codecademy offers a series of courses that combine videos with interactive quizzes on Ruby and JavaScript . The course on JavaScript is often recommended. However, the format is very much classroom-oriented without practical context. Udemy offers a range of video courses on Ruby and Rails. This is crowd-sourced content (like YouTube) and the quality varies greatly. If you\u2019ve found a great course on Udemy, email me and I\u2019ll list it here in the next version of the book. Skillshare is another source of crowd-sourced video courses. Many offerings on Ruby and Rails are out of date. As you can see from the long list, videos are plentiful. Avoid the old ones. 15.2.5 Books At the beginning of this chapter, I recommended Easy Active Record for Rails Developers by Jason Gilmore because it is focused on databases and Rails, the next thing you need to study. Other books deserve mention. One book stands out among all: Ruby on Rails Tutorial by Michael Hartl (free online) More Rails developers read, and recommend, Michael Hartl\u2019s book than any other. For you, after reading this book and Easy Active Record for Rails Developers , Michael Hartl\u2019s book will be a review of what you\u2019ve learned. I hope you will breeze through it, given the fundamental concepts you\u2019ve already learned. Two other books on Rails are notable: Agile Web Development with Rails 5 by Sam Ruby The Rails 5 Way by Obie Fernandez Both are dense, comprehensive, and authoritative. In my opinion, you should start building Rails applications before digging into these books. As you begin building applications, dip into any of these books for further explanation and insight. I recommend the book by Justin Weiss, Practicing Rails: Learn Rails Without Being Overwhelmed . The book provides useful technical tips and tricks, such as techniques for debugging, but the focus of the book is overcoming challenges that new developers commonly face. You\u2019ll find advice about keeping up with the Rails community and managing time and motivation when learning Rails, as well as overcoming \u201cthe tutorial gap\u201d to begin building your own applications. Several other books should be on your reading list to improve your skill: Rebuilding Rails by Noah Gibbs. If you like to discover how things work, you\u2019ll gain a deep insight into Rails from Noah Gibbs\u2019s book, as he shows you how to build a framework like Rails from scratch. Practical Object-Oriented Design in Ruby by Sandi Metz. A must-read that teaches the techniques of master programmers. In addition to the books listed here, I recommended several books to help you learn the Ruby programming language at the the end of the chapter, \u201cJust Enough Ruby.\u201d 15.3 A Final Word Keep in mind the reason you\u2019re here. You\u2019re learning Rails so that you can build applications. I\u2019ve given you a book that is dense with links and recommendations for further resources. I\u2019ve met many students who are overwhelmed with all these resources. Some people postpone building anything because there is so much more to learn. Don\u2019t be that person. Skip everything I\u2019ve recommended in this chapter and just get started building. When you need to learn more, you can come back and dig deeper. Good luck with building the application in Book Two. I hope you like my approach and writing style so that you\u2019ll continue with the Capstone Rails Tutorials . Chapter 16 Version Notes If you\u2019ve gotten this book directly from my website, you have the most recent version of the book. If you\u2019ve gotten your copy of the book elsewhere, you may have an older version that doesn\u2019t have the newest updates. You\u2019ll find the version number and release date on the first page of this book (under the book title). Check the learn-rails GitHub repository to find out if you have the newest version of the book. The README page on the GitHub repo always shows the most recent version number for the book and the tutorial application. Here are the changes I\u2019ve made. 16.1 Version 4.0.0 Version 4.0.0 was released November 25, 2016 Revisions throughout. Fixed broken links. Added links to videos. Removed references to Nitrous.io because Nitrous.io is out of business. 16.2 Version 3.0.0 Version 3.0.0 was released January 14, 2016 Extensive revision throughout the book, and the length of the book increased, so the book is now two books. Book One contains the introductory and self-help chapters and can be read without access to a computer. Book Two contains the step-by-step tutorial and requires use of a computer. 16.3 Version 2.2.2 Version 2.2.2 was released October 30, 2015 In the \u201cFront-End Framework\u201d chapter, updated filename to 1st_load_framework.css.scss from framework_and_overrides.css.scss to reflect a change in the rails_layout gem. 16.4 Version 2.2.1 Version 2.2.1 was released September 19, 2015 Updated references to Ruby from version 2.2.0 to 2.2.3. Updated references to Rails 4.2.0 to Rails 4.2.4. Updated Visitor model subscribe method for the new Gibbon 2.0 API. Recommending Cloud9 instead of Nitrous.io because Nitrous.io is no longer free. 16.5 Version 2.2.0 Version 2.2.0 was released June 6, 2015 For Amazon customers, added an offer to access the online version or download a PDF at learn-rails.com . Google now requires use of OAuth 2.0 for application access to Google Drive. The implementation is considerably more complex than the previous implementation using a Gmail address and password. I\u2019ve dropped the \u201cSpreadsheet Connection\u201d chapter. Minor clarification in the \u201cLayout and Views\u201d chapter. 16.6 Version 2.1.6 Version 2.1.6 was released March 17, 2015 Remove references to the Thin web server in the \u201cDeploy\u201d chapter. Correct version number for gem \u2019sass-rails\u2019 in various Gemfile listings. Fixes issue 49 and an error \u201cSass::SyntaxError - Invalid CSS\u201d when the Foundation front-end framework is used. In the \u201cTesting\u201d chapter, the file test/integration/home_page_test.rb was missing require \u2019test_helper\u2019 . Updated \u201cRails Composer\u201d chapter to describe new options. Minor improvements and corrections of typos. 16.7 Version 2.1.5 Version 2.1.5 was released March 4, 2015 Use the Ruby 1.9 hash syntax in the validates_format_of :email statement. Minor improvements and corrections of typos. 16.8 Version 2.1.4 Version 2.1.4 was released January 3, 2015 Updated references to Ruby from version 2.1.5 to 2.2.0. Specify the \u201cv0\u201d version of the google_drive gem in the \u201cSpreadsheet Connection\u201d chapter. 16.9 Version 2.1.3 Version 2.1.3 was released December 25, 2014 Updated references to Rails 4.1.8 to Rails 4.2.0. 16.10 Version 2.1.2 Version 2.1.2 was released December 4, 2014 Released for sale as a Kindle book on Amazon, with new cover art (same cat, though). RailsApps Tutorials now named the Capstone Rails Tutorials . Updated references to Ruby from version 2.1.3 to 2.1.5. Updated references to Rails 4.1.6 to Rails 4.1.8 (minor releases with bug and security fixes). Removed link to the (now defunct?) Lowdown web application in the \u201cPlan Your Product\u201d chapter. Changes to the \u201cAsynchronous Mailing\u201d section of \u201cSend Mail\u201d chapter to describe Active Job in Rails 4.2. Minor improvements to the \u201cDynamic Home Page,\u201d \u201cDeploy,\u201d \u201cConfigure,\u201d \u201cTroubleshoot,\u201d and \u201cCreate the Application\u201d chapters. 16.11 Version 2.1.1 Version 2.1.1 was released October 22, 2014 Minor rewriting for clarity. Updated \u201cPrecompile Assets\u201d section of the \u201cDeploy\u201d chapter. Mentioned explainshell.com in the \u201cGet Started\u201d chapter. Mentioned Zeal as a Linux alternative to Dash . Recommended book Practicing Rails by Justin Weiss. 16.12 Version 2.1.0 Version 2.1.0 was released October 12, 2014 Updated references to Ruby from version 2.1.1 to 2.1.3. Updated references to Rails 4.1.1 to Rails 4.1.6 (minor releases with bug and security fixes). Four new chapters: \u201cTesting\u201d \u201cRails Composer\u201d \u201cCrossing the Chasm\u201d \u201cLevel Up\u201d Use ActiveModel instead of the activerecord-tableless gem. In the \u201cConfiguration\u201d chapter, add a note to use spaces (not tabs) in the config/secrets.yml file. Updated \u201cGems\u201d chapter to add a troubleshooting note to the \u201cInstall the Gems\u201d section (about errors with the Nokogiri gem). Added a section on \u201cMultiple Terminal Windows\u201d to the \u201cCreate the Application\u201d chapter. In the \u201cGet Help When You Need It\u201d chapter, updated the list of recommended newsletters, replaced rubypair.com with codermatch.me , and added a section on code review. Removed reference to defunct Rails Development Directory . 16.13 Version 2.0.2 Version 2.0.2 was released May 6, 2014 Updated references to Rails 4.1.0 to Rails 4.1.1 (a minor release with a security fix). For Nitrous.io users, clarify that \u201chttp://localhost:3000/\u201d means the Preview browser window. Update \u201cGems\u201d chapter, section \u201cWhere Do Gems Live?\u201d to add more explanation. Minor change to code in the \u201cMailing List\u201d chapter, setting \u2018mailchimp_api_key\u2019 explicitly when instantiating Gibbon, for easier troubleshooting. 16.14 Version 2.0.1 Version 2.0.1 was released April 16, 2014 Minor updates for Rails 4.1.0. Mostly small changes to the \u201cConfigure\u201d and \u201cFront-End Framework\u201d chapters. Added an explanation that, in the config/secrets.yml file, domain_name doesn\u2019t have to be kept secret and set as a Unix environment variable. Added a hint about passwords that use punctuation marks (plus a completely irrelevant note about profanitype). Replaced Rails.application.secrets.gmail_username with Rails.application.secrets.email_provider_username . Also replaced gmail_password with email_provider_password . Just trying to make things a little more generic in case Gmail is not used as a provider. Added a section explaining the horrid details of the config.assets.precompile configuration setting in the config/application.rb file. Please convey my displeasure to those responsible for subjecting beginners to this travesty. In the \u201cDeploy\u201d chapter, restored RAILS_ENV=production rake assets:precompile because Rails 4.1.0 no longer barfs on this. Added resources to the \u201cGet Help When You Need It\u201d chapter. Minor rewriting of the introduction. 16.15 Version 2.0.0 Version 2.0.0 was released April 8, 2014 Updated references to Ruby from version 2.1.0 to 2.1.1. Updated the book to Rails 4.1. The application name is no longer used in the config/routes.rb file. Rails 4.1 changes the app/assets/stylesheets/application.css.scss file. Updated the \u201cFront-End Framework\u201d chapter. Also expanded the explanation of the Foundation grid. In Rails 4.1, configuration variables are set in the config/secrets.yml file. The Figaro gem is dropped, along with the config/application.yml file. Updated the \u201cConfigure\u201d chapter and references to configuration variables throughout the book. In the \u201cDeploy\u201d chapter, changed RAILS_ENV=production rake assets:precompile to rake assets:precompile to avoid the error \u201cdatabase configuration does not specify adapter.\u201d Updated \u201cThe Parking Structure\u201d chapter with comments about \u201cFolders of Future Importance\u201d that experienced developers often use: test/ , spec/ , features/ , policies/ , and services/ . Updated the \u201cSpreadsheet Connection\u201d chapter to mention service-oriented architectures (SOA). Extended the section on \u201cLimitations of Metaphors\u201d in the \u201cJust Enough Ruby\u201d chapter to include the example of gender when modeling a person. Minor rewriting for clarity throughout. 16.16 Version 1.19 Version 1.19 was released February 1, 2014 Updated the book to use Foundation 5.0. Foundation 5.0.3 was released January 15, 2014 (earlier versions 5.0.1 and 5.0.2 were incompatible with Rails Turbolinks and the Rails asset pipeline). Changed the Gemfile to remove gem \u2019compass-rails\u2019 and replace gem \u2019zurb-foundation\u2019 with gem \u2019foundation-rails\u2019 . Updated a line in the \u201cFront-End Framework\u201d chapter for Foundation 5.0: $ rails generate layout foundation5 --force The files navigation.html.erb and application.html.erb are changed for Foundation 5.0. The Bootstrap front-end framework is now independent of Twitter, so I call it \u201cBootstrap\u201d not \u201cTwitter Bootstrap.\u201d Revised the chapter \u201cJust Enough Ruby\u201d to incorporate suggestions from technical editor Pat Shaughnessy. Revised the chapter \u201cRequest and Response\u201d to incorporate suggestions from technical editor Kirsten Jones. Minor rewriting for clarity throughout. 16.17 Version 1.18 Version 1.18 was released January 10, 2014 Updated references to Ruby from version 2.0.0 to 2.1.0. Changed one line in the \u201cFront-End Framework\u201d chapter to accommodate a change in the rails_layout gem version 1.0.1. The command was: $ rails generate layout foundation4 \u2014force Changed to: $ rails generate layout:install foundation4 \u2014force Updated the \u201cConfigure\u201d chapter to add ActionMailer configuration values to the file config/environments/development.rb . 16.18 Version 1.17 Version 1.17 was released December 21, 2013 Updated Rails version from 4.0.1 to 4.0.2 . Changed Gemfile to remove gem \u2019compass-rails\u2019, \u2019> 2.0.alpha.0\u2019 and replace it with gem \u2019compass-rails\u2019, \u2019> 1.1.2\u2019 . The 2.0.alpha.0 version was yanked from the RubyGems server. The compass-rails gem is needed for Foundation 4.3. It will not be needed for Foundation 5.0. Changed Gemfile to replace gem \u2019zurb-foundation\u2019 with gem \u2019zurb-foundation\u2019, \u2019> 4.3.2\u2019 . Foundation 5.0 will require gem \u2019foundation-rails\u2019 but we can\u2019t use it until an incompatibility with Turbolinks is resolved. So we will stick with Foundation 4.3.2 for now. Revised code in the \u201cAnalytics\u201d chapter. Using ready page:change instead of page:load to accommodate Turbolinks. Updated the segmentio.js file to use a new tracking script from Segment.io. Updated instructions for setting up Google Analytics tracking on Segment.io. Added concluding paragraphs \u201cMaking Mr. Kadigan Happy\u201d to the \u201cAnalytics\u201d chapter. Minor clarification in the \u201cFront-End Framework\u201d chapter to explain that the navigation bar won\u2019t show a dropdown menu until the next chapter, when we add navigation links. Minor clarification in the \u201cSpreadsheet Connection\u201d chapter to explain that Google may block access if you attempt access from a new and different computer (including Nitrous.io). Added cat names in the \u201cCredits and Comments\u201d chapter. Revised \u201cGetting Help\u201d chapter and added \u201cVersion Notes\u201d chapter. Minor clarifications, plus fixes for various typos and insignificant errors. Chapter 17 Credits and Comments Was the book useful to you? Follow @rails_apps on Twitter and tweet some praise. I\u2019d love to know you were helped out by the tutorial. You can find me on Facebook or Google+ . I\u2019m happy to connect if you want to stay in touch. If you\u2019d like to recommend the book to others, the landing page for the book is here: http://learn-rails.com/learn-ruby-on-rails.html I\u2019d love it if you mention the book online, whether it is a blog post, Twitter, Facebook, or online forums. Recommending the book with a link makes it easier for people to find the book. 17.1 Credits The book was created with the encouragement, financial support, and editorial assistance of hundreds of people in the Rails community. Daniel Kehoe wrote the book and implemented the application. 17.1.1 Financial Backers The following individuals provided financial contributions of over $50 to help launch the book. Please join me in thanking them for their encouragement and support. Al Zimmerman, Alan W. Smith, Alberto A. Col\u00f3n Viera, Andrew Terry, Avi Flombaum, Brian Hays, Charles Treece, Dave Doolin, Denzil Villarico, Derek Rockwell, Eito Katagiri, Evan Sparkman, Frank Castle, Fred Dixon, Fred Schoeneman, Gant Laborde, Gardner Monks, Gerard de Brieder, GoodWorksOnEarth.org, Hanspeter Leupin, Harald Lazardzig, Harsh Patel, James Bond, Jared Koumentis, Jason Landry, Jeff Whitmire, Jesse House, Joe Wilmoth Jr., John Shannon, Joost Baaij, Juan Cristobal Pazos, Kathleen Sidenblad, Laird Hayward, Logan Hasson, Ludovic Kuty, Mark Gilbert, Matt Esterly, Mike Gilbert, Niko Roberts, Norman Cohen, Paul Philippov, Robert Nadar, Rogier Hof, Ross Kinney, Ruben Calzadilla, Stephane Moreau, Susan Wilson, Sven Fuchs, Thomas Nitsche, Tom Michel, Youn Shin Kang, Yuen Lock 17.1.2 Editors and Proofreaders Dozens of volunteers offered corrections and made suggestions, from fixing typos to advice about organizing the chapters. Alberto Dubois Rib\u00f3, Alex Finnarn, Alex Zielonko, Alexandru Muntean, Alexey Dotokin, Alexey Ershov, Andr\u00e9 Arko, Andreas Basurto, Ben Swee, Brandon Schabel, Cam Skene, Daniella Zimmermann, Dapo Babatunde, Dave Levine, Dave Mox, David Kim, Duany Dreyton Bezerra Sousa, Erik Trautman, Erin Nedza, Flavio Bordoni, Fritz Rodriguez Jr, Hendri Firmana, Ishan Shah, James Hamilton, Jasna Vukovic, Jeremy Schneider, Joanne Daudier, Joel Dezenzio, Jonah Ruiz, Jonathan Lai, Jonathan Miller, Jordan Stone, Joreal Whitfield, Josh Morrow, Joyce Hsu, Julia Mokus, Julie Hamwood, Jutta Frieden, Laura Pierson Wadden, Marc Ignacio, Mark D. Blackwell, Mark Everhart, Michael Wong, Miguel Herrera, Mike Janicki, Miran Omanovic, Neha Jain, Norman Cohen, Oana Sipos, Peter Rangelov, Richard Afolabi, Robin Paul, Roderick Silva, Sakib Ash, Sebastian Lobato Genco, Silvia Obajdin, Stas Su\u0219cov, Stefan Streichsbier, Sven Fuchs, Tam Eastley, Tim Goshinski, Timothy Jones, Tom Connolly, Tom Michel, Tomas Olivares, Verena Brodbeck, Will Schive, William Yorgan, Zachary Davy 17.1.3 Photos Images provided by the lorempixel.com service are used under the Creative Commons license . Visit the Flickr accounts of the photographers to learn more about their work: photo of a white cat by Tomi Tapio photo of a cat by Steve Garner photo of a cat by Ian Barbour The photo of a fluffy white cat by Tomi Tapio is used in the application. 17.2 Comments I regularly update the book. Your comments and suggestions for improvements are welcome. Feel free to email me directly at [email protected] . Are you stuck with code that won\u2019t work? Stack Overflow provides a question-and-answer forum for readers of this book. Use the tag \u201clearn-ruby-on-rails\u201d or \u201crailsapps\u201d when you post your question. Found a bug in the tutorial application? Please create an issue on GitHub.","title":"Learn Ruby on Rails Book One"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#learn-ruby-on-rails-book-one","text":"","title":"Learn Ruby on Rails: Book One"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#version-400-25-november-2016","text":"","title":"Version 4.0.0, 25 November 2016"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#daniel-kehoe","text":"","title":"Daniel Kehoe"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#contents","text":"Chapter 1 Free Offer and More 1.1 Get Book Two 1.2 Get the Videos 1.3 The Online and Ebook Versions Chapter 2 Introduction 2.1 Is It for You? 2.2 What To Expect 2.2.1 What\u2019s in Book One 2.2.2 What\u2019s in Book Two 2.2.3 A Warning About Links 2.2.4 What Comes Next 2.2.5 Versions 2.2.6 Staying In Touch 2.2.7 A Note to Reviewers and Teachers 2.2.8 Using the Book in the Classroom 2.2.9 Let\u2019s Get Started Chapter 3 Concepts 3.1 How the Web Works 3.2 Programming Languages 3.3 Ruby and JavaScript 3.4 JavaScript and JQuery 3.4.1 JQuery 3.4.2 Full-Stack JavaScript 3.5 Front and Back Ends 3.6 Rails 5 3.7 JavaScript Frameworks 3.7.1 AngularJS and Ember.js 3.7.2 React Chapter 4 What is Rails? 4.1 Rails as a Community 4.2 Six Perspectives on Rails 4.2.1 Web Browser Perspective 4.2.2 Programmer Perspective 4.2.3 Software Architect Perspective 4.2.4 Gem Hunter Perspective 4.2.5 Time Traveler Perspective 4.2.6 Tester Perspective 4.3 Understanding Stacks 4.3.1 Full Stack 4.3.2 Rails Stacks Chapter 5 Why Rails? 5.1 Why Ruby? 5.2 Why Rails? 5.3 Rails Guiding Principles 5.3.1 Rails is Opinionated 5.3.2 Rails is Omakase 5.3.3 Convention Over Configuration 5.3.4 Don\u2019t Repeat Yourself 5.4 Where Rails Gets Complicated 5.4.1 When Rails has No Opinion 5.4.2 Omakase But Substitutions Are Allowed 5.4.3 Conventions or Magic? 5.4.4 DRY to Obscurity Chapter 6 Rails Challenges 6.1 A List of Challenges 6.1.1 It is difficult to install Ruby. 6.1.2 Rails is a nightmare on Windows. 6.1.3 Why do I have to learn Git? It is difficult. 6.1.4 Why worry about versions? 6.1.5 Do I really need to learn about testing? 6.1.6 Rails error reporting is cryptic. 6.1.7 There is too much magic. 6.1.8 It is difficult to grasp MVC and REST. 6.1.9 Rails contains lots of things I don\u2019t understand. 6.1.10 There is too much to learn. 6.1.11 It is difficult to find up-to-date advice. 6.1.12 It is difficult to know what gems to use. 6.1.13 Rails changes too often. 6.1.14 It is difficult to transition from tutorials to building real applications. 6.1.15 I\u2019m not sure where the code goes. 6.1.16 People like me don\u2019t go into programming. Chapter 7 Get Help When You Need It 7.1 Getting Help With Rails 7.2 References 7.2.1 RailsGuides 7.2.2 Cheatsheets 7.2.3 API Documentation 7.3 Meetups, Hack Nights, and Workshops 7.4 Pair Programming 7.5 Pairing With a Mentor 7.6 Code Review 7.7 Staying Up-to-Date Chapter 8 Plan Your Product 8.1 Product Owner 8.2 User Stories 8.3 Wireframes and Mockups 8.4 Graphic Design 8.5 Software Development Process 8.6 Behavior-Driven Development Chapter 9 Manage Your Project 9.1 To-Do List 9.2 Kanban 9.3 Agile Methodologies Chapter 10 Mac, Linux, or Windows 10.1 Your Computer 10.2 Hosted Computing 10.3 Installing Ruby 10.3.1 MacOS 10.3.2 Ubuntu Linux 10.3.3 Hosted Computing 10.3.4 Windows Chapter 11 Terminal Unix 11.1 The Terminal 11.2 Unix Commands Explained 11.3 Getting Fancy With the Prompt 11.4 Learning Unix Commands 11.5 Exit Gracefully 11.6 Structure of Unix Commands 11.6.1 Prompt 11.6.2 Command 11.6.3 Option 11.6.4 Argument 11.7 Quick Guide to Unix Commands 11.7.1 cd 11.7.2 pwd 11.7.3 ls 11.7.4 Hidden Files and Folders 11.7.5 Dots 11.7.6 open 11.7.7 mkdir 11.7.8 touch 11.7.9 mv 11.7.10 cp 11.7.11 rm 11.7.12 Removing a Folder 11.7.13 The Mouse and the Command Line 11.7.14 Arrow Keys 11.7.15 Tab Completion 11.8 Why Abbreviations? Chapter 12 Text Editor 12.1 You Don\u2019t Need an IDE 12.2 Which Text Editor 12.2.1 Install Atom 12.2.2 Other Choices 12.2.3 How To Use a Text Editor 12.3 Editor Shell Command Chapter 13 Learn Ruby 13.1 Ruby Language Literacy 13.2 Resources for Learning Ruby 13.2.1 Collaborative Learning 13.2.2 Online Tutorials 13.2.3 Books 13.2.4 Newsletters 13.2.5 Screencasts Chapter 14 Crossing the Chasm 14.1 Facing the Gap 14.2 Bridging the Gap With a Strategy 14.3 Bridging the Gap With Social Practice 14.3.1 Making an Effort 14.3.2 Conversation Starters 14.3.3 Pay It Forward 14.4 Finding a Mentor 14.5 Creating Mentorship Moments 14.5.1 Online 14.5.2 GitHub 14.5.3 Meetups 14.5.4 Workshops and Classes 14.5.5 On the Job 14.6 What\u2019s Next 14.6.1 Entrepreneurs 14.6.2 Lifestyle Businesses and Personal Projects 14.7 Build Applications Chapter 15 Level Up 15.1 What to Learn Next 15.1.1 Databases 15.1.2 Testing 15.1.3 Authentication and Sessions 15.1.4 Authorization 15.1.5 JavaScript 15.1.6 Other Topics 15.1.7 Curriculum Guides 15.2 Places to Learn 15.2.1 Code Camps 15.2.2 Other Classrooms 15.2.3 Online Courses 15.2.4 Videos 15.2.5 Books 15.3 A Final Word Chapter 16 Version Notes 16.1 Version 4.0.0 16.2 Version 3.0.0 16.3 Version 2.2.2 16.4 Version 2.2.1 16.5 Version 2.2.0 16.6 Version 2.1.6 16.7 Version 2.1.5 16.8 Version 2.1.4 16.9 Version 2.1.3 16.10 Version 2.1.2 16.11 Version 2.1.1 16.12 Version 2.1.0 16.13 Version 2.0.2 16.14 Version 2.0.1 16.15 Version 2.0.0 16.16 Version 1.19 16.17 Version 1.18 16.18 Version 1.17 Chapter 17 Credits and Comments 17.1 Credits 17.1.1 Financial Backers 17.1.2 Editors and Proofreaders 17.1.3 Photos 17.2 Comments","title":"Contents"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-1-free-offer-and-more","text":"You are reading Book One, which introduces basic concepts and gives you the background you need to succeed. Book One is 99 cents on Amazon and free on my own site. I\u2019ll also tell you how to get Book Two plus videos and advanced tutorials.","title":"Chapter 1 Free Offer and More"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#11-get-book-two","text":"In Book Two, you\u2019ll build a useful web application, for hands-on learning. You should get started with Book Two right away, for hands-on learning. Read Book Two when you are at your computer; read Book One for background when you are away from the computer. The two books go together, which is why I want you to have both books.","title":"1.1 Get Book Two"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#12-get-the-videos","text":"You can watch videos as you read the book. A subscription is only $19 per month (there\u2019s also a discount when you get the video series plus advanced tutorials). You\u2019ll get Book Two when you get the videos: Get Book Two plus the Videos You can also get Book Two when you buy the advanced Capstone Rails Tutorials, which you\u2019ll want after you finish this book series: Get Book Two plus the Videos and Advanced Tutorials With the videos and the advanced tutorials, I promise there is no better way to learn Rails.","title":"1.2 Get the Videos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#13-the-online-and-ebook-versions","text":"I\u2019ve created an online version of this book at learn-rails.com . You\u2019ll also find PDF, Epub (iBooks), and Mobi (Kindle) versions available for download. Look for the link \u201cFree Online Edition\u201d when you visit the site. It\u2019s free: learn-rails.com I\u2019ll ask you to provide your email address when you sign up to get free access. I work hard to keep the books up to date, incorporating improvements and fixing errors as readers report issues. I update the books often and I send email to notify of updates. If you bought the book from Amazon or another retailer, email is the only way to learn about updates. Get the ebook version you prefer, get Book Two when you are ready, and let\u2019s get started.","title":"1.3 The Online and Ebook Versions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-2-introduction","text":"Welcome. This is a first step on your path to learn Ruby on Rails. This book contains the background that\u2019s missing from other tutorials. Here you\u2019ll learn key concepts so you\u2019ll have a solid foundation for continued study. Whether you choose to continue with another book in this series, a video course, or a code school, everything will make sense when you start here. You can read this book anywhere, at your leisure, on your phone or tablet. Use this book to gain background understanding when you are not at your computer. With Book Two, the next in the series, you\u2019ll need a computer at hand so you can build your first web application. In Book Two, you\u2019ll build a working web application so you\u2019ll gain hands-on experience. Along the way, you\u2019ll practice techniques used by professional Rails developers. And I\u2019ll help you\u2019ll understand why Rails is a popular choice for web development. You can start with Book Two before finishing this book if you\u2019re eager to get started building your first application. In fact, I recommend it, because the hands-on learning in Book Two reinforces the concepts you learn in this book. Figure 2.1: The application you will build in Book Two.","title":"Chapter 2 Introduction"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#21-is-it-for-you","text":"If you\u2019ve built simple websites using HTML, you\u2019ll quickly progress to building websites with Rails. Or, if you have experience in a language such as PHP or Java, you\u2019ll make the jump to the Rails framework. But I promise you don\u2019t need to be a programmer to succeed with this book or the next. You\u2019ll be surprised how quickly you become familiar with the Unix command line interface and the Ruby programming language even if you\u2019ve never tried programming before. My books are ideal if you are: a student a startup founder making a career change If you are starting a business, and hiring developers, or working alongside developers as a manager or developer, this book will help you talk with developers. However, the true purpose of my book is to help you become you a Rails developer yourself. I want to help you launch a startup or begin a new career.","title":"2.1 Is It for You?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#22-what-to-expect","text":"There is deep satisfaction in building an application and making it run. With this book and the next, I\u2019ll give you everything you need to build a real-world Rails application. More importantly, I\u2019ll explain everything you build, so you understand how it works. When you\u2019ve completed this tutorial, you will be ready for more advanced self-study, including the Capstone Rails Tutorials , textbook introductions to Rails, or workshops and code camps that provide intensive training in Ruby on Rails. Other curriculums often skip the basics. With this tutorial you\u2019ll have a solid grounding in key concepts. You won\u2019t feel overwhelmed or frustrated as you continue your studies. I think you\u2019ll also have fun! This book and the next are good preparation for: textbooks such as Michael Hartl\u2019s Ruby on Rails Tutorial introductory workshops from RailsBridge or Rails Girls intensive training with immersive code camps Capstone Rails Tutorials from the RailsApps Project We are blessed with many textbooks, workshops, and classroom programs that teach Ruby on Rails. I believe this book is unique in covering the basics while introducing the tools and techniques of professional Rails development.","title":"2.2 What To Expect"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#221-whats-in-book-one","text":"Book One is a self-help book that can change your life, though here you won\u2019t find any inspirational quotes or magical thinking. I explain the culture and practices of the Rails community. I introduce the basic concepts you\u2019ll need to understand web application development. You\u2019ll learn how to be a successful learner and how to get help when you need it. I also provide a plan for study so you can learn more when you need it. There\u2019s so much to learn, it helps to have a map so you know where to go next. Programming can be frustrating and Rails isn\u2019t easy for beginners. The chapter, \u201cRails Challenges,\u201d describes many of the problems learners encounter. It\u2019s natural to get discouraged so take a look when you begin to feel overwhelmed. Two chapters, \u201cCrossing the Chasm\u201d, and \u201cLevel Up\u201d, will help you after you put the book down. Many learners feel stranded if their only experience is step-by-step tutorials. These chapters are designed to give you a strategy for building an application on your own.","title":"2.2.1 What\u2019s in Book One"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#222-whats-in-book-two","text":"You\u2019ll start coding in Book Two. It\u2019s a hands-on tutorial that will lead you through the code needed to build a real-world web application. Don\u2019t skip around in Book Two. The tutorial is designed to unfold in steps, one section leading to another, until you reach the \u201cTesting\u201d chapter. You can complete Book Two in one long weekend, though it will take concentration and stamina. If you work through the book over a longer timespan, try to set aside uninterrupted blocks of two hours or more for reading and coding, as it takes time to focus and concentrate. Feel free to start Book Two before you finish this book. Begin coding with Book Two while you get background knowledge from this book at your leisure. Visit tutorials.railsapps.org to learn how to get Book Two.","title":"2.2.2 What\u2019s in Book Two"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#223-a-warning-about-links","text":"My books are densely packed with links to background reading. If you click every link, you\u2019ll be a well-informed student, but you may never finish the book! It\u2019s up to you to master your curiosity. Follow the links only when you want to dive deeper.","title":"2.2.3 A Warning About Links"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#224-what-comes-next","text":"The best way to learn is by doing; when it comes to code, that means building applications. Hands-on learning with actual Rails applications is the key to absorbing and retaining knowledge. After you read this book, you\u2019ll be able to work with the example applications from the RailsApps Project . The project provides open source example applications for Rails developers, for free. Each application is accompanied by a tutorial in the Capstone Rails Tutorials series, so there\u2019s no mystery code. Each application can be generated in a few minutes with the Rails Composer tool, which professional developers use to create starter applications. The RailsApps Project is solely supported by sales of the books, videos, and advanced tutorials. If you make a purchase, you\u2019ll keep the project going. And you\u2019ll have my sincere appreciation for your support.","title":"2.2.4 What Comes Next"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#225-versions","text":"Book One is relevant and useful for any version of Rails. Book Two requires a specific version of Rails (the newest at the time it was revised) and shows how to install the latest version of Rails.","title":"2.2.5 Versions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#226-staying-in-touch","text":"If you obtained this book from Amazon or another retailer, take a moment to get on the mailing list for the book. I\u2019ll let you know when I release updates to the book. Get on the mailing list for the book","title":"2.2.6 Staying In Touch"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#227-a-note-to-reviewers-and-teachers","text":"This book approaches the subject differently than most introductions to Rails. It introduces concepts of product planning, project management, and website analytics to place development within a larger context of product development and marketing. In Book Two, rather than show the student how to use scaffolding, I introduce the model-view-controller design pattern by creating the components manually. Lastly, though every other Rails tutorial shows how to use a database, Book Two doesn\u2019t, because I want the book to be a short introduction and I believe the basic principles of a web application stand out more clearly without adding a database to the application. Though this tutorial is not a typical Rails introduction, I hope you\u2019ll agree that it does a good job in preparing Rails beginners for continued study, whether it is a course or more advanced books.","title":"2.2.7 A Note to Reviewers and Teachers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#228-using-the-book-in-the-classroom","text":"If you\u2019ve organized a workshop, course, or code camp, and would like to assign the book as recommended reading, contact me at [email protected] to arrange access to the book for your students. The book is available at no charge to students enrolled in qualified workshops or classes.","title":"2.2.8 Using the Book in the Classroom"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#229-lets-get-started","text":"In the next chapter, we\u2019ll start with basic concepts.","title":"2.2.9 Let\u2019s Get Started"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-3-concepts","text":"This chapter provides the background, or big picture, you will need to understand Rails. These are the key concepts you\u2019ll need to know before you try to use Rails. In the following two chapters, you\u2019ll gain a deeper understanding of Rails, including its history, the guiding principles of Rails, and reasons for its popularity. First, let\u2019s consider how the web works.","title":"Chapter 3 Concepts"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#31-how-the-web-works","text":"We start with absolute basics, as promised. When you \u201cvisit a website on the Internet\u201d you use a web browser such as Safari, Chrome, Firefox, or Internet Explorer. Web browsers are applications (software programs) that work by reading files . Compare a word processing program with a web browser . Both word processing programs and web browsers read files. Microsoft Word reads files that are stored on your computer to display documents. A web browser retrieves files from remote computers called servers to display web pages. Simply put, the World Wide Web is nothing more than files delivered to web browsers by web servers. Web browsers make requests to web servers. Every web address, or URL , is a request to a web server. A web server responds by sending one or more files. We call this the request-response cycle . Everything displayed by a web browser comes from four kinds of files: HTML - structure (layout) and content (text) CSS - stylesheets to set visual appearance JavaScript - programming to alter the page Multimedia - images, video, or other media files At a minimum, a web page requires an HTML file. HTML files contain the words you see on a web page, along with markup tags that indicate headlines, paragraphs, and other types of text such as lists. If a web browser receives only an HTML file, it will display text, with default styles for headlines and paragraphs supplied by the browser. Because it is the World Wide Web, HTML files also contain hypertext links to other web pages. Sometimes links appear in the form of a button or an image. Sometimes a web page contains a form with a button that sends information to the web server. Links are web addresses, or URLs, and (you guessed it), they return files. If the page is always the same, every time it is displayed by the web browser, we say it is static . Webmasters don\u2019t need software such as Rails to deliver static documents; they just create files for delivery by an ordinary web server program. When you learn HTML and create simple web pages, you learn to upload files to a hosting service that provides web servers that deliver your HTML files to web browsers. In principle, you can run a web server delivering web pages from your computer at home but, in practice, most people want a web server that runs 24 hours a day and is located in a data center that has fast and reliable connections to the Internet. Static websites are ideal for particle-physics papers (which was the original use of the World Wide Web). But most sites on the web, especially those that allow a user to sign in, post comments, or order products and services, generate web pages dynamically . When you see a form with a button, you probably are looking at a page that makes a request to a web application. Dynamic websites often combine web pages with information from a database. A database stores information such as a user\u2019s name, comments, advertisements, or any other repetitive, structured data. A database query can provide a selection of data that customizes a webpage for a particular user or changes the web page so it varies with each visit. Dynamic websites use a programming language such as Ruby to assemble HTML, CSS, and JavaScript files on the fly from component files or a database. A software program written in Ruby and organized using the Rails development framework is a Rails web application . A web server program that runs Rails applications to generate dynamic web pages is an application server (but usually we just call it a web server). Software such as Rails can access a database, combining the results of a database query with static content to be delivered to a web browser as HTML, CSS, and JavaScript files. Keep in mind that the web browser only receives ordinary HTML, CSS, and JavaScript files; the files themselves are assembled dynamically by the Rails application running on the server. Even if you are not going to use a database, there are good reasons to generate a website using a programming language. For example, if you are creating several web pages, it often makes sense to assemble an HTML file from smaller components. For example, you might make a small file that will be included on every page to make a footer (Rails calls these \u201cpartials\u201d). Just as importantly, if you are using Rails, you can add features to your website with code that has been developed and tested by other people so you don\u2019t have to build everything yourself. The widespread practice of sharing code with other developers for free, and collaborating with strangers to build applications or tools, is known as open source software development. Rails is at the heart of a vibrant open source development community, which means you leverage the work of tens of thousands of skilled developers when you build a Rails application. When Ruby code is packaged up for others to share, the package is called a gem . The name is apt because shared code is valuable, like a gem. Ruby is a programming language. Rails is a development framework. Rails is software code written in the Ruby language. It is a library or collection of gems that we add to the core Ruby language. More importantly, Rails is a set of structures and conventions for building a web application using the Ruby language. By using Rails, you get well-tested code that implements many of the most-needed features of a dynamic website. When you need additional features, you can add additional gems. With Rails, you will be using shared standard practices that make it easier to collaborate with others and maintain your application. As an example, consider the code that is used to access a database. Using Ruby without the Rails framework, or using another language such as PHP, you could mix the complex programming code that accesses the database with the code that generates HTML. With the insight of years of developers\u2019 collective experience in maintaining and debugging such code, Rails provides a library of code that segregates database access from the code that displays pages, enforcing separation of concerns , and making more modular, maintainable programs. In a nutshell, that\u2019s how the web works, and why Rails is useful. For more on the history of Rails, and an explanation of why it is popular, see the next chapters. But before we dive into Rails, let\u2019s look at the increasingly complex world of web development, particularly the difference between front-end and back-end applications, and the programming languages we use, Ruby and JavaScript.","title":"3.1 How the Web Works"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#32-programming-languages","text":"JavaScript and Ruby are both general-purpose programming languages. Developers use other popular programming languages such as C, Python, and Java. And developers like to talk about newer languages such as Elixir and Go, often comparing the popularity of programming languages. Most developers use only one or two popular languages on the job such as Ruby and JavaScript but hardcore programmers love to try new languages. Just a note: Java and JavaScript are unrelated, except by name. Java is a general-purpose language used in large enterprises, such as banking, where large teams of developers build applications. JavaScript is a language that was developed for use in web browsers. It was named \u201cJavaScript\u201d to take advantage of the popularity of Java but has little in common with Java except for the name. And a further note: HTML, the Hypertext Markup Language, is not a programming language. It is a markup language that uses tags to add structure and links to text. It doesn\u2019t allow conditional execution such as if... then... else which is key to programming. If you know HTML you can be a \u201ccoder,\u201d writing HTML code, but you are not really a programmer.","title":"3.2 Programming Languages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#33-ruby-and-javascript","text":"Ruby is the programming language you\u2019ll use when creating web applications that run on your local computer or a remote server using the Rails web application development framework. JavaScript is the programming language that controls every web browser. The companies that build web browsers (Google, Apple, Microsoft, Mozilla, and others) agreed to use JavaScript as the standard browser programming language. You might imagine an alternative universe in which Ruby was the browser programming language. That\u2019s not the real world; plus it would be boring, as learning more than one language makes us smarter and better programmers.","title":"3.3 Ruby and JavaScript"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#34-javascript-and-jquery","text":"Though most of the code in Rails applications is written in Ruby, developers add JavaScript to Rails applications to implement features such as browser-based visual effects and user interaction. For simple Rails applications, you only need to learn Ruby. For more sophisticated web applications, you\u2019ll need to know both Ruby and JavaScript. JavaScript was first used on websites to add little features to the browser. For example, JavaScript can be used to display the current date and time on a web page. Or JavaScript can be used to pop up an annoying window when you try to leave a web page. There was little consistent structure to early JavaScript programs. And because JavaScript is an older language without a built-on package manager, there were no package libraries like Ruby gems to add functionality. Instead, web developers shared scripts or snippets of code to add commonly-implemented features.","title":"3.4 JavaScript and JQuery"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#341-jquery","text":"In 2006, a group of developers released jQuery , a robust collection of scripts that are a foundation for most of the simple interactive user features found on websites today. Rails includes jQuery as part of any Rails application. You\u2019ll find jQuery on 65% of websites. To understand jQuery, you need to know that every web browser takes an intermediate step between receiving an HTML file and displaying a web page. After a web browser receives a file from a web server, it creates code in the computer\u2019s memory that describes the web page, complete with text and formatting, which we call the Document Object Model , or DOM. JQuery scripts manipulate the DOM, which is the web browser\u2019s internal representation of web page. JQuery commands make changes to the DOM. For example, you can write Javascript that replaces words on the page with different words. Or you can hide and reveal sections of the page. Many Rails applications use jQuery or pure JavaScript to add interactive browser features. Though it is easy to add JavaScript to web pages generated by Rails, the result is often \u201cJavaScript gravy\u201d or \u201csoup:\u201d a sloppy mix of JavaScript snippets and jQuery plugins poured over Rails views. After seeing applications built with JavaScript soup, developers often get an urge to adopt a framework like Rails for JavaScript, with standard structures and conventions to organize code. We\u2019ll look at JavaScript frameworks later in this chapter. But first, consider a universe where JavaScript is the only language you need to know. Not all developers use Rails; some use full-stack JavaScript.","title":"3.4.1 JQuery"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#342-full-stack-javascript","text":"In the last few years, developers have been improving the JavaScript language so it can be used for server-side development as well as development of applications that run in the browser. System administrators can install the Node.js code library to enable servers to run JavaScript. Server-side JavaScript web application frameworks are available, such as Express and Meteor , but none are as popular as Ruby on Rails. Some code schools are now teaching \u201cfull stack JavaScript\u201d using the \u201cMEAN Stack,\u201d which combines four popular JavaScript technologies; MongoDB, Express, AngularJS, and Node.js. There are at least a dozen popular languages that developers use to build web applications. This will continue to be true. Full-stack JavaScript is now an option but Rails is not going away. For now, the Rails ecosystem is better known with more resources for building web applications and learning development. There will always be jobs for Rails developers. Startups will always be able to find developers who have experience with Rails. Your effort in learning Rails will continue to be worthwhile. However, it is important to learn JavaScript as well.","title":"3.4.2 Full-Stack JavaScript"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#35-front-and-back-ends","text":"We often talk about \u201cfront-end\u201d and \u201cback-end\u201d development. The architecture of the web, split between web browsers running on local computers and web application programs running on remote servers, is inherently client-server . When we write applications for both the front end and back end, we are full-stack developers. Full-stack developers handle it all, including connections to database servers, server-side web applications, JavaScript for web browsers, and system administration of Unix servers. Increasingly, as web development gets more complex, there are fewer full-stack developers and more specialists. If you are building a web application for your own business, you may need to be a full-stack developer. But if you look for a job, you may choose to specialize as a front-end or back-end developer. Front-end developers have some design skill, worry a lot about user experience, and develop expertise with JavaScript. Back-end developers don\u2019t worry as much about design. They focus on the architecture of applications, database structure, and application performance using Ruby. Rails was originally created for full-stack development. Its model-view-controller architecture manages both connections to databases and display of web pages, requiring nothing more than the Ruby language and the Rails software library. JavaScript was originally created for front-end development. Some developers now use JavaScript for full-stack development but it is still primarily used for adding interactive features to web pages. Rails is popular for both the front end and the back end. The conventions of building Rails applications are widely known and a developer can leverage the work of tens of thousands of other developers by including open-source gems. A Rails back end can connect to thousands of different services and efficiently handle traffic for any average website. If your business is so successful that you must deal with problems of scale, you\u2019ll find many Rails experts able to help. For these reasons, developers continue to use Rails to build web applications, even as full-stack JavaScript grows in popularity. JavaScript is becoming more popular but developers will continue to build full-stack Rails applications where complex JavaScript user interfaces are not required. This could be quick \u201cminimal viable product\u201d (MVP) tests of business ideas or any project where it is too costly to invest in separate front-end and back-end development. If you are going to quickly build a web application, and launch a business, just build it with Rails and don\u2019t worry about implementing features in JavaScript. If you want a complex front end that uses JavaScript extensively, you may still want to use Rails for the back end.","title":"3.5 Front and Back Ends"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#36-rails-5","text":"Rails 5.0 is the newest version of Rails. Rails 5 recognizes the increasing use of Rails for back-end development. Rails 5 offers an option to build back-end-only applications that don\u2019t generate browser views. Instead, a stripped-down Rails 5 application returns data that can be consumed and displayed by another application. With this approach, you can have Rails on the back end and a JavaScript web browser application, or a mobile application, on the front end. With Rails 5, you can build a back-end application that just delivers data to a front-end application. Before Rails 5, most Rails applications generated entire web pages containing the results from a database query. Now with Rails 5, Rails developers have begun to build web applications that deliver just data, in the JSON (JavaScript Object Notation) format. With this approach, the Rails application provides an API, or application programming interface , that provides standardized responses to requests from an application in the hands of a user, which could be an IOS or Android application on a phone, or a JavaScript application running in a web browser. Now that you\u2019ve learned about the differences between front-end and back-end applications, let\u2019s learn about popular JavaScript frameworks.","title":"3.6 Rails 5"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#37-javascript-frameworks","text":"I\u2019ve described Rails as a web development framework that uses the Ruby language. You can also find web development frameworks that use the JavaScript language. JavaScript frameworks were first developed so developers could build SPAs, single-page applications . Early examples of SPAs, such as Apple\u2019s MobileMe or iWork in 2008, were attempts to use JavaScript to build desktop-like applications to run in the web browser. The goal was to create RIAs, rich Internet applications, with similarities to software applications installed on the Mac or Windows, using JavaScript. Of course, no one really wants desktop applications anymore. We browse web pages to get information. We install mobile apps to get access to services. Sometimes we want access to services in web browsers. But we don\u2019t really want desktop applications in a web browser.","title":"3.7 JavaScript Frameworks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#371-angularjs-and-emberjs","text":"AngularJS and Ember.js are the most popular JavaScript frameworks used to build single-page applications. They provide the structure and conventions that developers want for maintainable code. For complex, richly interactive web applications, these frameworks get rid of the \u201cJavaScript soup\u201d that is common in Rails applications. Unlike Rails, which is hugely popular, none of these JavaScript frameworks have achieved hegemony or dominance among developers. For a learner, these frameworks require more programming experience than Rails. All of these frameworks break the familiar request-response cycle of the web. Just one URL delivers the entire single-page application. There are no web pages, only views that change completely or partially in response to user actions. Drawbacks to single-page applications are a slow initial load of the application, difficulty using analytics tools such as Google Analytics which rely on new pages loading in the browser, and views that won\u2019t show up in Google search results. For all these reasons, single-page applications are best used to deliver services, not information, and require advanced skills to develop.","title":"3.7.1 AngularJS and Ember.js"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#372-react","text":"There\u2019s a newer framework that can be used to dry up JavaScript soup. It\u2019s React , a JavaScript framework developed by engineers at Facebook. It can be used for single-page applications or to organize JavaScript for interactive features in ordinary Rails applications. Unlike AngularJS or Ember.js, React only manages views, not connections to databases or routing of requests, so it is not a full-stack framework, just a framework for the view layer. React\u2019s approach to building web pages is abstract and complex. But React is a good choice for complex interactive features, if you\u2019re determined to avoid JavaScript soup in your Rails application. Ultimately, your decision to use JavaScript, and how much, depends on the kind of web application you want to build. If you want to build a product catalog, with many simple pages populated by a database, a full-stack Rails application may be all you need, perhaps with a few jQuery plugins. If your application is like Facebook, with lots of interactive features and many different pages, React may be a good choice as part of a full-stack Rails application. If you want to deliver a service such as live stock-market charts, you may want to build a complex single-page application using AngularJS or Ember.js, plus IOS and Android apps, connected to a Rails API server. If you\u2019re going to use JavaScript, either full-stack, or combined with Rails, use a JavaScript framework to avoid JavaScript soup. React could be a good place to start. You\u2019ll have a better idea of the importance of Rails if you understand \u201cWhat is Rails?\u201d Let\u2019s look at that next.","title":"3.7.2 React"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-4-what-is-rails","text":"Rails is a library , or collection of code, plus structures and conventions for building a web application. Technically, it is a package library (a RubyGem), that is installed using the operating system command-line interface, and adds functionality to the Ruby language. Rails provides structures and conventions for web development, so less code is required to build a web application. All Rails applications use the same structures, providing consistency among applications. Common and well-known conventions make it easy for developers to collaborate on Rails applications and share improvements and add-on code libraries with a wide community. The structures and conventions of Rails are codified as the Rails API (the application programming interface , or directives that control the code). The Rails API is documented online and described in books, articles, and blog posts. Learning Rails means learning how to use the Rails conventions and its API.","title":"Chapter 4 What is Rails?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#41-rails-as-a-community","text":"Rails, in a larger sense, is more than a software library and an API. Rails is the central project of a vast community that produces software libraries that simplify the task of building complex websites. Members of the Rails community share many core values, often use the same tools, and support each other with an informal network that is built on volunteerism. Overlapping the informal community is an economic network that includes jobs, recruiters, consulting firms, conferences, businesses that build websites with Rails, and investors that fund startups. Rails is popular among web startups, significantly because the pool of open source software libraries (RubyGems, or \u201cgems\u201d) makes it possible to build complex sites quickly. This, then, is Rails: a software library and an API, plus a community of enthusiastic developers. But to learn to use Rails, you\u2019ll need to consider it from additional points of view.","title":"4.1 Rails as a Community"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#42-six-perspectives-on-rails","text":"To really understand Rails, and succeed in building Rails applications, we need to consider Rails from six additional perspectives. A parable from the Indian subcontinent describes six blind men who encounter an elephant. The blind man who feels a leg says the elephant is like a pillar; the one who feels the tail says the elephant is like a rope; the one who feels the belly says the elephant is like a wall; and so on. Like six blind men encountering an elephant, it can be difficult to understand Rails unless you look at it from multiple points of view. Here are six different ways of looking at Rails.","title":"4.2 Six Perspectives on Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#421-web-browser-perspective","text":"From the perspective of the web browser , Rails is simply a program that generates HTML, CSS, and JavaScript files. These files are generated dynamically. You can\u2019t see the files on the server side but you can view these files by using the web developer tools that are built in to every browser. Later you\u2019ll examine these files when you learn to troubleshoot a Rails application.","title":"4.2.1 Web Browser Perspective"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#422-programmer-perspective","text":"From the perspective of a programmer , Rails is a set of files organized with a specific structure. The structure is the same for every Rails application; this makes it easy to collaborate with other Rails developers. We use text editors to edit these files to make a web application.","title":"4.2.2 Programmer Perspective"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#423-software-architect-perspective","text":"From the perspective of a software architect , Rails is a structure of abstractions that enable programmers to collaborate and organize their code. Thinking in abstractions means we group things in categories and analyze relationships. Conceptual categories and relationships can be made \u201creal\u201d in code. Software programs are built of \u201cconcepts made real\u201d that are the moving parts of a software machine. Notice that we are talking about abstractions, using language like a philosopher. Most tutorials give you step-by-step instructions, like following a recipe. You\u2019ll get that in Book Two in this series. But to really understand programming, you should grasp that we are working with \u201cabstractions made real.\u201d The area of your brain that follows instructions is distinct from the area that thinks abstractly. To be a programmer, you\u2019ll need both parts of the brain working together. Don\u2019t worry; I\u2019ll explain the abstractions in terms anyone can understand. To a software architect, classes are the basic parts of a software machine. A class can represent something in the physical world as a collection of various attributes or properties (for example, a User with a name, password, and email address). Or a class can describe another abstraction, such as a Number, with attributes such as quantity, and behavior, such as \u201ccan be added and subtracted.\u201d You\u2019ll get a better grasp of classes in Book Two when you learn \u201cJust Enough Ruby.\u201d To a software architect, Rails is a pre-defined set of classes that are organized into a higher level of abstraction known as an API, or application programming interface . The Rails API is organized to conform to certain widely known software design patterns . You\u2019ll become familiar with these abstractions as you build a Rails application. In Book Two, you\u2019ll learn about the model\u2013view\u2013controller design pattern. As a beginner, you will see the MVC design pattern reflected in the file structure of a Rails application. That\u2019s where you will first see \u201cabstractions made real.\u201d If you\u2019ve subscribed to the video series or purchased the advanced tutorials, this eight minute video introduces the model\u2013view\u2013controller concept: Model View Controller in Rails","title":"4.2.3 Software Architect Perspective"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#424-gem-hunter-perspective","text":"We can look at Rails from the perspective of a gem hunter . Rails is popular because developers have written and shared many software libraries (RubyGems, or \u201cgems\u201d) that provide useful features for building websites. We can think of a Rails application as a collection of gems that provide basic functionality, plus custom code that adds unique features for a particular website. Some gems are required by every Rails application. For example, database adaptors enable Rails to connect to databases. Other gems are used to make development easier, for example, gems for testing that help programmers find bugs. Still other gems add functionality to the website, such as gems for logging in users or processing credit cards. Knowing what gems to use, and why, is an important aspect of learning Rails. You don\u2019t need a subscription to view this free video introducing RubyGems: Free Video Lesson: What Are RubyGems","title":"4.2.4 Gem Hunter Perspective"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#425-time-traveler-perspective","text":"We can also look at Rails from the perspective of a time traveler in order to understand the importance of software version control . Specifically, we use the Git revision control system to record a series of snapshots of your project\u2019s filesystem. Git makes it easy to back up and recover files; more importantly, Git lets you make exploratory changes, trying out code you may decide to discard, without disturbing work you\u2019ve done earlier. You can use Git with GitHub , a popular \u201csocial coding\u201d website, for remote backup of your projects and community collaboration. Git can keep multiple versions (\u201cbranches\u201d) of your local code in sync with a remote GitHub repository, making it possible to collaborate with others on open source or proprietary projects. Strictly speaking, Git and GitHub are not part of Rails (they are tools that can be used on any development project). And there are several other version control systems that are used in open source development. But a professional Rails developer uses Git and GitHub constantly on any real-world Rails project.","title":"4.2.5 Time Traveler Perspective"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#426-tester-perspective","text":"Finally, we can consider a Rails application from the perspective of a tester . Software testing is part of Rails culture; Rails is the first web development platform to make testing an integrated part of development. Before Rails, automated testing was rarely part of web development. A web application would be tested by users and (maybe) a QA team. If automated tests were used, the tests were often written after the web application was largely complete. Rails introduced the discipline of Test-Driven Development (TDD) to the wider web development community. With TDD, tests are often written before any implementation coding. It may seem odd to write tests first, but for a skilled TDD practitioner, it brings coherence to the programming process. First, the developer will give thought to what needs to be accomplished and think through alternatives and edge cases. Second, the developer will have complete test coverage for the project. With good test coverage, it is easier to refactor , rearranging code to be more elegant or efficient. Running a test suite after refactoring provides assurance that nothing inadvertently broke after the changes. TDD is seen as a necessary skill of an experienced Rails developer. Book Two will introduce you to the basic concepts of test-driven development and show you how to write simple tests. You\u2019ve seen Rails from six different perspectives. You understand Rails is a software library plus an API, as well as a community of developers. Now let\u2019s dive deeper and consider how Rails fits in to a larger technology stack and how it can vary within the stack.","title":"4.2.6 Tester Perspective"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#43-understanding-stacks","text":"To understand Rails from the perspective of a professional Rails developer, you\u2019ll need to grasp the idea of a technology stack and recognize that Rails can have more than one stack.","title":"4.3 Understanding Stacks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#431-full-stack","text":"A technology stack is a set of technologies or software libraries that are used to develop an application or deliver web pages. \u201cStack\u201d is a term that is used loosely and descriptively. It is a collection of technologies that fit together, interacting with each other, and providing different types of services. We say \u201cstack\u201d because we use different software systems or software libraries as if they were building blocks or bricks deployed in layers. Often we consider a stack as layers added to the operating system. For a web application, we need a web server, a database, a programming language, and perhaps additional software libraries. Earlier we learned that full-stack developers have skills to work with operating systems, web servers, databases, web applications, and JavaScript programs in a web browser. That\u2019s a formidable stack of technologies. There is no organization that tells you what building blocks you must use. As a technologist, your choice of stack reflects your experience, values, and personal preference, just like religion or favorite beverage. For example, Mark Zuckerberg developed Facebook in 2004 using the LAMP application stack: Linux (operating system) Apache (web server) MySQL (database) PHP (programming language) Zuckerberg chose an operating system, a web server, a database, and a programming language with which he was comfortable. In 2004, Rails was not well known and Zuckerberg chose to implement his ideas using PHP without any additional web application software library. For this tutorial, your application stack will be: MacOS, Linux, or Windows Puma (web server) SQLite (database) Ruby on Rails (language and framework) You\u2019ll use an operating system that\u2019s familiar to you, a basic web server that comes with Ruby, a database that\u2019s preinstalled with Mac or Linux operating system, the Ruby language, and the Rails web application software library.","title":"4.3.1 Full Stack"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#432-rails-stacks","text":"Sometimes when we talk about a stack, we only care about part of a larger stack. For example, a Rails stack includes the gems we choose to add features to a website or make development easier. When we select the gems we\u2019ll use for a Rails application, we\u2019re choosing a stack or layers of services we need just for a web application. Sometimes the choice of components is driven by the requirements of an application. At other times, the stack is a matter of personal preference. Just as craftsmen and aficionados debate the merits of favorite tools and techniques in any profession, Rails developers avidly dispute what\u2019s the best Rails stack for development. The company 37signals , where the creator of Rails works, uses this Rails stack: ERB for view templates MySQL for databases Minitest for testing It is not important (at this point) to know what the acronyms mean (we\u2019ll learn later). Another stack is more popular among Rails developers: Haml for view templates PostgreSQL for databases RSpec for testing We\u2019ll learn later what the terms mean. For now, just recognize that parts of the Rails framework can be swapped out, just like making substitutions when you order from a menu at a restaurant. The Rails stack can vary, and it is part of a larger stack that includes an operating system, web server, and database. You can learn much about Rails by following the experts\u2019 debates about the merits of a favorite stack. The debates are a source of much innovation and improvement for the Rails framework. In the end, the power of the crowd prevails; usually the best components in the Rails stack are the most popular. The proliferation of choices for the Rails stack can make learning difficult, particularly because the components used by many leading Rails developers are not the components used in many beginner tutorials. In this tutorial, we stick to solid ground where there is no debate. In the advanced Capstone Rails Tutorials , we\u2019ll explore stack choices and choose components that are most often used by professional developers.","title":"4.3.2 Rails Stacks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-5-why-rails","text":"Before you start building an application with Rails, it may help to know why developers like using Rails. This chapter looks at the history of Rails, its organizing principles, and the reasons for its popularity. First, though, we\u2019ll consider Ruby, the language used for Rails.","title":"Chapter 5 Why Rails?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#51-why-ruby","text":"Ruby is a programming language, created 20 years ago by Yukihiro \u201cMatz\u201d Matsumoto. By most measures of programming language popularity, Ruby ranks among the top ten , though usually as tenth (or so) in popularity, and largely due to the popularity of Rails. Like Java or the C language, Ruby is a general-purpose programming language, though it is best known for its use in web programming. In a podcast from This Developer\u2019s Life and in an interview from 2005 , David Heinemeier Hansson, the creator of Rails, describes building an online project management application named BaseCamp in 2004. He had been using the PHP programming language because he could get things done quickly but was frustrated because of a lack of abstraction and frequently repetitive code that made PHP \u201cdirty.\u201d Hansson wanted to use the \u201cclean\u201d software enginering abstractions supported in the Java programming language but found development in Java was cumbersome. He tried Ruby and was excited about the ease of use (he calls it pleasure) he found in the Ruby language. Ruby is known among programmers for a terse, uncluttered syntax that doesn\u2019t require a lot of extra punctuation. Compared to Java, Ruby is streamlined, with less code required to create basic structures such as data fields. Ruby is a modern language that makes it easy to use high-level abstractions such as metaprogramming. In particular, metaprogramming makes it easy to develop a \u201cdomain specific language\u201d that customizes Ruby for a particular set of uses (Rails and many gems use this \u201cDSL\u201d capability). Ruby\u2019s key advantage is RubyGems, the package manager that makes it easy to create and share software libraries (gems) that extend Ruby. RubyGems provides a simple system to install gems. Anyone can upload a gem to the central RubyGems website, making the gem immediately available for installation by anyone. The RubyGems website is where you\u2019ll obtain the most recent version of Rails. And it is where you will obtain all the gems that help you build complex websites. Ruby has several disadvantages (at least when programmers want to argue). Its processing performance is slow relative to C++ or Java. The execution speed of a language is seldom important, though, relative to the benefits gained by programmer productivity and the general level of performance required by most websites. For websites that require lots of simultaneous activity, Ruby is not well-suited to the sophisticated software engineering required to execute simultaneous activity efficiently (standard Ruby lacks \u201cparallelism\u201d, though some versions support it). Lastly, some programmers complain that Ruby programs (and especially Rails) contain \u201ctoo much magic\u201d (that is, complex operations that are hidden behind simple directives). These concerns haven\u2019t stopped Rails from becoming a popular web development platform.","title":"5.1 Why Ruby?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#52-why-rails","text":"Rails is popular and widely used because its conventions are pervasive and astute. Any web application has complex requirements that include basic functions such as generating HTML, processing form submissions, or accessing a database. Without a web application development framework, a programmer has a mammoth task to implement all the required infrastructure. Even with a web application development framework, a programmer can take an idiosyncratic approach, building something that no one else can easily take apart and understand. The singular virtue of Rails is that Heinemeier Hansson, and the core team that joined him, decided that there is one best way to implement much of the infrastructure required by a web application. Many of the implementation decisions appear arbitrary. In fact, though Heinemeier Hansson is often lambasted as autocratic in his approach to improving Rails, the Rails API reflects deep experience and intelligence in implementing the requirements of a web application development framework. The benefit is that every developer who learns the \u201cRails way\u201d produces a web application that any other Rails developer can unravel and understand more quickly than if they encountered idiosyncratic code without as many conventions. That means collaboration is easier, development is quicker, and there\u2019s a larger pool of open source libraries to enhance Rails. The advantage of establishing conventions might seem obvious, but when Rails was released in 2004, web development was dominated by PHP, which lent itself to idiosyncratic code produced by solo webmasters, and Java frameworks such as Struts, which were often seen as burdened by an excess of structure. Other frameworks, such as Apple\u2019s WebObjects, Adobe\u2019s ColdFusion, and Microsoft\u2019s .NET Framework, were in wide use but the frameworks were products controlled by the companies and built by small teams, which tended to restrict innovation. Today PHP, Java frameworks, and .NET remain popular, largely among solo webmasters (PHP), enterprise teams (Java), and Windows aficionados (.NET) but Rails has become very popular and has influenced development of other server-side frameworks. The design decisions that went into the first version of Rails anchored a virtuous circle that led to Rails\u2019s growth. Within the first year, Rails caught the attention of prominent software engineers, notably Martin Fowler and Dave Thomas (proponents of agile software development methodologies). Rails is well-matched to the practices of agile software development , particular in its emphasis on software testing and \u201cconvention over configuration.\u201d The interest and advocacy of opinion leaders from the agile camp led to greater visibility in the wider open source community, culminating in a keynote lecture by Heinemeier Hansson at the 2005 O\u2019Reilly Open Source Convention. Because Rails was adopted by software engineers who are influencers and trend setters, it is often said that Rails is favored by \u201cthe cool kids.\u201d If that is so, it is largely because Rails is well-suited to software engineering practices that are promoted by thought leaders like Fowler and Thomas.","title":"5.2 Why Rails?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#53-rails-guiding-principles","text":"The popularity of Rails is an outgrowth of the Rails \u201cphilosophy\u201d or guiding principles. If you read blogs by Rails developers, you\u2019ll often see references to these principles. Understanding these principles will help you make sense of Rails or, at least, some of the debates on developer blogs.","title":"5.3 Rails Guiding Principles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#531-rails-is-opinionated","text":"In the mid-1990s, web applications were often written in Perl, a programming language that promised, \u201cThere\u2019s more than one way to do it.\u201d Perl is a prime example of \u201cnon-opinionated\u201d software; there\u2019s no \u201cright way\u201d or \u201cbest way\u201d to solve programming problems in Perl. Famously, Perl\u2019s documentation states, \u201cIn general, [Perl\u2019s built-in functions] do what you want, unless you want consistency.\u201d In contrast, Rails is said to be \u201copinionated.\u201d There is a \u201cRails way\u201d for many of the problems that must be solved by a web application developer. If you follow the Rails conventions, you\u2019ll have fewer decisions to make and you\u2019ll find more of what you need is already built. The benefit is faster development, improved collaboration, and easier maintenance.","title":"5.3.1 Rails is Opinionated"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#532-rails-is-omakase","text":"Omakase is a Japanese phrase that means \u201cI\u2019ll leave it to you.\u201d Customers at sushi restaurants can order omakase, entrusting the chef to make a pleasing selection instead of making their own \u00e0 la carte choices. In a famous essay Heinemeier Hansson declared Rails is Omakase , and said, \u201cA team of chefs picked out the ingredients, designed the APIs, and arranged the order of consumption on your behalf according to their idea of what would make for a tasty full-stack framework\u2026. When we, or in some cases I \u2014 as the head chef of the omakase experience that is Rails \u2014 decide to include a dish, it\u2019s usually based on our distilled tastes and preferences. I\u2019ve worked in this establishment for a decade. I\u2019ve poured well in the excess of ten thousand hours into Rails. This doesn\u2019t make my tastes right for you, but it certainly means that they\u2019re well formed.\u201d Understanding that Rails is omakase means accepting that many of the opinions enshrined in the Rails API are the decisions of a Benevolent Dictator for Life , informed by discussion with other developers who have made significant contributions to the Rails code base. For the most part, Heinemeier Hansson\u2019s \u201copinions\u201d will serve you well.","title":"5.3.2 Rails is Omakase"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#533-convention-over-configuration","text":"\u201cConvention over configuration\u201d is an example of Rails as \u201copinionated software.\u201d It is an extension of the concept of a default, a setting or value automatically assigned without user intervention. Some software systems, notably Java web application frameworks, need multiple configuration files, each with many settings. For example, a configuration file might specify that a database table named \u201csales\u201d corresponds to a class named \u201cSales.\u201d The configuration file permits flexibility (a developer can easily change the setting if the table is named \u201citems_sold\u201d). Instead of relying on extensive configuration files, Rails makes assumptions. By convention, if you create a model object in Rails named \u201cUser,\u201d it will save data to a database table named \u201cusers\u201d without any configuration required. Rails will also assume the table name is plural if the class name is singular. \u201cConvention over configuration\u201d means you\u2019ll be productive. You won\u2019t spend time setting up configuration files. You\u2019ll spend less time thinking about where things go and what names to assign. And, because other developers have learned the same conventions, it is easier to collaborate.","title":"5.3.3 Convention Over Configuration"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#534-dont-repeat-yourself","text":"Known by the acronym DRY, \u201cDon\u2019t Repeat Yourself\u201d is a principle of software development formulated by Andy Hunt and Dave Thomas and widely advocated among Rails developers. In its simplest form, it is an admonition to avoid duplication. When code is duplicated, an application becomes more complex, making it more difficult to maintain and more vulnerable to unintended behavior (bugs). The DRY principle can be extended to development processes as well as code. For example, manual testing is repetititive; automated testing is DRY. Software design patterns that introduce abstraction or indirection can make code more DRY; for example, by eliminating repetitive if-then logic. Code reuse is a fundamental technique in software development. It existed long before Andy Hunt and Dave Thomas promoted the DRY principle. Rails takes advantage of Ruby\u2019s metaprogramming features to not just reuse code but eliminate code where possible. With a knowledge of Rails conventions, it\u2019s possible to create entire simple web applications with only a few lines of code.","title":"5.3.4 Don\u2019t Repeat Yourself"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#54-where-rails-gets-complicated","text":"It helps to understand the guiding principles of Rails. But it\u2019s even more helpful to know how (and why) Rails is complicated by departures from the guiding principles.","title":"5.4 Where Rails Gets Complicated"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#541-when-rails-has-no-opinion","text":"As you gain experience with Rails, you may encounter areas where Rails doesn\u2019t state an opinion. For example, for years there was no \u201cofficial\u201d approach to queueing background jobs. (Tasks that take time, such as contacting a remote server, are best handled as \u201cbackground jobs\u201d that won\u2019t delay display of a web page.) Fortunately, by 2015, the Rails core maintainers released the ActiveJob feature which implemented queueing. Much of the lively debate that drives development of new versions of Rails is focused on thrashing out the \u201copinions\u201d that eventually will be enshrined in the Rails API.","title":"5.4.1 When Rails has No Opinion"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#542-omakase-but-substitutions-are-allowed","text":"Implicit in the notion of \u201cRails is omakase\u201d is an understanding that \u201csubstitutions are allowed.\u201d Most of Heinemeier Hansson\u2019s preferences are accepted by all Rails developers. However, many experienced developers substitute items on the menu at the Rails caf\u00e9. This has led to the notion that Rails has Two Default Stacks , as described in an essay by Steve Klabnik. Professional developers often substitute an alternative testing framework or use a different syntax for creating page views than the \u201cofficial\u201d version chosen by Heinemeier Hansson. This complicates learning because introductory texts often focus on the omakase selections but you\u2019ll encounter alternatives in blog posts and example code.","title":"5.4.2 Omakase But Substitutions Are Allowed"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#543-conventions-or-magic","text":"One of the joys of programming is knowing that everything that happens in an application is explained by the code. If you know where to look, you\u2019ll see the source of any behavior. For a skilled programmer, \u201cconvention over configuration\u201d adds obscurity. Without a configuration file, there is no obvious code that reveals that data from a class named \u201cPerson\u201d is saved to a datatable named \u201cpeople.\u201d As a beginner, you\u2019ll simply accept the magic and not confound yourself trying to find how it works. It\u2019s not always easy to learn the conventions. For example, you may have a User object and a \u201cusers\u201d datatable. Rails will also expect you to create a \u201ccontroller object.\u201d Should it be named \u201cUserController\u201d (singular) or \u201cUsersController\u201d (plural)? You\u2019ll only know if you let Rails generate the code or you pay close attention to tutorials and example code.","title":"5.4.3 Conventions or Magic?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#544-dry-to-obscurity","text":"The risk that \u201cconvention over configuration\u201d leads to obscurity is compounded by the \u201cDon\u2019t Repeat Yourself\u201d principle. To avoid repetitive code, Rails often will offer default behavior that looks like magic because the underlying implementation is hidden in the depths of the Rails code library. You can implement a simple web application with only a few lines of custom code but you may wonder where all the behavior comes from. This can be frustrating when, as a beginner, you attempt to customize your application to do more than what\u2019s shown in simple tutorials. In the next chapter, we\u2019ll consider some of the challenges that make it difficult to learn and use Rails.","title":"5.4.4 DRY to Obscurity"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-6-rails-challenges","text":"Rails is popular. Rails is powerful. But Rails isn\u2019t easy to learn. You may have heard of a psychological phenomenon called \u201cresistance.\u201d When we struggle with something new, or must adapt to the unfamiliar, we resist. We get discouraged. We complain. Sometimes we feel we should quit. This chapter is here to help with your resistance. Its purpose is to acknowledge that, yes, Rails can be difficult . Tens of thousands of people are successfully using Rails. I\u2019ll hazard a guess that none are significantly smarter, more motivated, or a better student than you. Perhaps some of them had more time to study or better access to mentors, but these factors simply accelerate the speed of learning Rails. If you get discouraged, or think Rails is too hard, recognize that you are encountering your own resistance, not any genuine limitation. Take a break, set aside your learning materials, and come back when your natural curiosity and eagerness has returned. Sometimes resistance attaches to imaginary problems (like \u201cI\u2019m not smart enough\u201d). Just as often, resistance attaches to real problems, but magnifies them into insurmountable obstacles (\u201cRails is impossible to use on Windows!\u201d). The best way to overcome these obstacles is to acknowledge the resistance, investigate the obstacle, and seek support from peers. This chapter describes some of things that make Rails difficult. These Rails challenges are obstacles, but other people overcame them. You can, too.","title":"Chapter 6 Rails Challenges"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#61-a-list-of-challenges","text":"This list is incomplete. If you\u2019ve encountered a Rails challenge that isn\u2019t listed here, email me at [email protected] and I will add your suggestion to the next revision of the book.","title":"6.1 A List of Challenges"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#611-it-is-difficult-to-install-ruby","text":"The installation process for Ruby on Rails is more difficult than downloading and installing any consumer software applications. You are setting up a development environment and you need system software as well as Ruby. Depending on what you\u2019ve done before, you may have altered your system, introducing potentials for conflicts. Book Two provides links to good installation guides in the \u201cGet Started\u201d chapter. But installation instructions can\u2019t accommodate the specific configuration of your computer. Sometimes you just have to look for someone to help. You can also use a hosted development environment, such as Cloud9 .","title":"6.1.1 It is difficult to install Ruby."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#612-rails-is-a-nightmare-on-windows","text":"Windows is very popular, so why is it difficult to develop with Rails on Windows? It seems the Rails community has a bias against Windows. It does, and there\u2019s a reason. Rails is an open source project. Most open source developers use Unix-based system tools. It is difficult and time-consuming to convert Unix-based system tools to the Microsoft Windows operating system. Open source developers prefer to spend their time maintaining and improving their Unix-based projects. And expert Windows developers are seldom interested in porting Unix-based system tools to Windows. So system utilities such as RVM are not available for Windows. And developers who create gems are seldom interested in spending time to solve the problems that arise when code has to be adapted for the idiosyncrasies of the Windows platform. This situation is not going to change, so you have to make a choice. Stay with Windows or get comfortable with Unix-based systems.","title":"6.1.2 Rails is a nightmare on Windows."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#613-why-do-i-have-to-learn-git-it-is-difficult","text":"Real software development requires version control and Git is the standard tool for Rails developers. If all you do is build applications as a classroom exercise, you don\u2019t need to learn Git. You can skip all the parts of the book that mention Git. But sooner or later, if you start doing real projects, you\u2019ll need Git. Simple Git commands are not difficult to learn. When you\u2019ve developed your skills and confidence you can learn the more advanced Git functions, such as branching.","title":"6.1.3 Why do I have to learn Git? It is difficult."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#614-why-worry-about-versions","text":"For simple projects you don\u2019t need version management. My books introduce version management and prepare you to handle version conflicts. As you tackle more complex projects, and as new versions of Rails are released, you\u2019ll face version issues and version management will be helpful.","title":"6.1.4 Why worry about versions?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#615-do-i-really-need-to-learn-about-testing","text":"For student projects, no, you don\u2019t need to learn about testing. But as soon as money or reputation is at stake on a project, you\u2019ll need to begin using test-driven development. Book Two introduces TDD but you\u2019ll need intermediate-level tutorials to develop proficiency. Once you\u2019ve grasped the basics, testing will become easy, and it actually is fun and satisfying.","title":"6.1.5 Do I really need to learn about testing?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#616-rails-error-reporting-is-cryptic","text":"Actually, Rails error reporting is quite good. Stack traces are detailed and error messages are descriptive. Beginners have a problem because the stack traces and error messages provide a technical analysis of a problem in terms that an experienced developer can understand. If error reporting was \u201csimplified\u201d it might not be as intimidating but it would not as accurate. It\u2019s up to you to gain enough knowledge to understand the error messages. Finally, the error reporting mechanism can point you to the line in your code that triggers a problem, but it can\u2019t know what you trying to do, or describe the error in anything but technical terms.","title":"6.1.6 Rails error reporting is cryptic."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#617-there-is-too-much-magic","text":"The Rails \u201cconvention over configuration\u201d principle leads to obscurity. Default behavior often looks like magic because the underlying implementation is hidden in the depths of the Rails code library. If you like to know how things work, this can be frustrating. You really have only two choices when you encounter Rails magic. You can take time to dig into the source code. If you do so, you\u2019ll encounter frustration as you encounter complex and sophisticated code, but you may also improve your understanding and skill as a Ruby programmer. Or you can take on faith that \u201cit just works.\u201d Often, you just need to use the convention several times in different projects to get comfortable with the magic and stop worrying that you don\u2019t fully understand it.","title":"6.1.7 There is too much magic."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#618-it-is-difficult-to-grasp-mvc-and-rest","text":"Even if you learn that the acronyms mean model-view-controller and representational state transfer , MVC and REST are abstract concepts. If you simply follow a tutorial, the author will show you how to build an application that uses MVC or REST, but you won\u2019t see any alternative, or understand why MVC or REST are best practices. When it is time to build your own application, if you don\u2019t understand the importance of separation of concerns you won\u2019t be sure how to structure your application. Understanding software architecture requires abstract reasoning, imagination, and experience, which takes time. It is difficult to grasp but approach it with curiosity, seek explanations, and you\u2019ll grasp it soon enough.","title":"6.1.8 It is difficult to grasp MVC and REST."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#619-rails-contains-lots-of-things-i-dont-understand","text":"If you look at the Rails directory structure, you\u2019ll see many files and folders. If you look at the Rails API, or pick up a Ruby tutorial, you\u2019ll also see code that is unfamiliar. Book Two describes some of what you see. As you build more applications, you will gain proficiency and master more of Rails and Ruby. Yet even as you gain mastery of Rails, there will be aspects that remain unfamiliar. Don\u2019t let the sheer complexity stop you. The truth is, you don\u2019t have to know \u201call\u201d of Rails or Ruby to build web applications.","title":"6.1.9 Rails contains lots of things I don\u2019t understand."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#6110-there-is-too-much-to-learn","text":"Very true. To be a full-stack web developer you need to know HTML, JavaScript, CSS, Ruby, testing, databases, and much, much more. You might think that developers who started ten years ago have an advantage because there wasn\u2019t as much to learn when they started. But today there are many more high-quality tutorials and educational programs to accelerate your learning. And resources like Google and Stack Overflow have many more answers to questions. As the knowledge domain has grown, so have the learning resources. You don\u2019t have to learn everything. Get a foundation in the basics and then dive deep as a specialist in an area that appeals to you.","title":"6.1.10 There is too much to learn."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#6111-it-is-difficult-to-find-up-to-date-advice","text":"Rails has been around since 2004 with major new versions released every two years. Chances are, answers to questions you find on Stack Overflow or Google were written for an older version of Rails. There is no easy way to determine if the answer is out of date. A particular aspect of Rails may have changed\u2014or not. Even worse, the answer may work, but there may be a better way that reflects current best practices. To filter the outdated in Google, use the \u201cSearch Tools\u201d options for specifying a timeframe. Look closely at the date of a blog posting or Stack Overflow answer. Try to find a newer answer. Usually, if there are a series of answers and things have changed, you\u2019ll see the current best answer. If you\u2019re uncertain, don\u2019t be shy about posting your question to Stack Overflow. More importantly, make it your business to keep up with the community, reading Peter Cooper\u2019s Ruby Weekly email newsletter or his daily RubyFlow site.","title":"6.1.11 It is difficult to find up-to-date advice."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#6112-it-is-difficult-to-know-what-gems-to-use","text":"There are so many gems available for Rails. Some add useful features, like tagging or a mailing list API. Some are basic, such as gems for a database or front-end framework. Even among basic gems, Rails offers choices. Which are best? The Ruby Toolbox can help, but mostly you will find guidance from looking at example projects and noticing what other developers are using. There\u2019s wisdom in the crowd. If you\u2019ve subscribed to the video series or purchased the advanced tutorials, this three minute video explains: How to Find Rubygems","title":"6.1.12 It is difficult to know what gems to use."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#6113-rails-changes-too-often","text":"If you look at the Ruby on Rails Release History you\u2019ll see there is a new major release approximately every 1.5 years. Each major release is well tested and relatively free of bugs. But new features or new approaches often require rewrites of older applications. Commercial software products often make a priority of keeping the API consistent over time. That\u2019s not Rails. Rails is an open source project and the core team embraces innovation. The maintainers expect that you\u2019ll keep up with changes.","title":"6.1.13 Rails changes too often."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#6114-it-is-difficult-to-transition-from-tutorials-to-building-real-applications","text":"Copying and pasting from tutorials is a good way to begin learning Rails. But you\u2019ll only become a skilled Rails developer when you build something that is not shown in a tutorial. The first few hours (or days) when you start building a custom application can be very difficult. Focus on the basics that are described in this book. Start with user stories. Build pieces that you know how to do. Look for code samples on blogs or GitHub or Stack Overflow. Try \u201cspikes,\u201d little experiments that test ideas for implementation. Seek advice from peers or mentors. At first it will be slow going. But you will pick up momentum. The chapter, \u201cCrossing the Chasm,\u201d will provide specific strategies to help.","title":"6.1.14 It is difficult to transition from tutorials to building real applications."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#6115-im-not-sure-where-the-code-goes","text":"If you follow tutorials, you\u2019ll learn \u201cwhere the code goes\u201d with the model\u2013view\u2013controller design pattern. With a sense of the request-response cycle, RESTful actions in the controller, and a few guidelines such as \u201cskinny controller, fat model\u201d you\u2019ll be able to build intermediate-level Rails applications. Front-end code, particularly JavaScript, can be difficult because not a lot has been published about Rails best practices. In particular, the Rails asset pipeline can be confusing for anyone who has done front-end development without Rails. If you don\u2019t know what you\u2019re supposed to do, do whatever works, then look for someone who can help you by providing a code review.","title":"6.1.15 I\u2019m not sure where the code goes."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#6116-people-like-me-dont-go-into-programming","text":"Until recently in most countries, most Rails developers have been young men with an engineering background. For people who don\u2019t fit the stereotypical profile, it can be hard to find role models or peers who demonstrate that Rails is something everyone can learn. The challenge can be subtle, as when you have the feeling that maybe if you were different you\u2019d find it easier to make progress. Or the challenge can be overt, when behavior of fellow students or co-workers is disturbing or hurtful (often they don\u2019t even know!). Lack of diversity, and the cluelessness that accompanies it, is unfortunate in the Rails community. But many people are working to make the community more welcoming and inclusive. Organizations such as Rails Girls and Railsbridge are creating more diversity in the community. You may find support from peers there to affirm that you, too, are entitled to knowledge and success. These are some of the challenges you will face in learning and using Rails. Next, we will look at how to get help.","title":"6.1.16 People like me don\u2019t go into programming."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-7-get-help-when-you-need-it","text":"Sometimes I\u2019m asked, \u201cWhere\u2019s the Rails manual?\u201d There isn\u2019t one. No single document tells you how to use Rails. Instead, there\u2019s a wealth of documentation that describes various aspects of Rails. Let\u2019s consider where to look for help when you are working on your own Rails projects.","title":"Chapter 7 Get Help When You Need It"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#71-getting-help-with-rails","text":"If you\u2019ve subscribed to the video series or purchased the advanced tutorials, this six minute video gives some guidance: Get Help with Rails What will you do when you get stuck? \u201cGoogle it,\u201d of course. But here\u2019s a trick to keep in mind. Google has options under \u201cSearch tools\u201d to show only recent results from the past year. Use it to filter out stale advice that pertains only to older versions of Rails. Stack Overflow is as important as Google for finding answers to programming problems. Stack Overflow answers are often included in Google search results, but you can go directly to Stack Overflow to search for answers to your questions. Like Google, answers from Stack Overflow are helpful if you check carefully to make sure the answers are recent. Also be sure to compare answers to similar questions; the most popular answer is not always the correct answer to your particular problem. Requests for advice (especially anything that provokes opinions) are often rejected on Stack Overflow. Instead, try Reddit for advice or recommendations. You\u2019ll find discussion forums (\u201csubreddits\u201d) devoted to Rails and Ruby . You can also visit the Quora question-and-answer site for topics devoted to Rails and Ruby .","title":"7.1 Getting Help With Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#72-references","text":"Here are suggestions for the most important references. If you feel overwhelmed by all the links, remember that you can use Book Two to build the tutorial application without any additional resources. Right now, it\u2019s important to know additional help is available when you need it.","title":"7.2 References"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#721-railsguides","text":"The Rails Guides are Rails\u2019s official documentation, written for intermediate-level developers who already have experience writing web applications. The Rails Guides are an excellent reference if you want to check the correct syntax for Rails code. You\u2019ll be able to use the Rails Guides after completing this tutorial.","title":"7.2.1 RailsGuides"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#722-cheatsheets","text":"Tobias Pfeiffer has created a useful Rails Beginner Cheat Sheet that provides a good overview of Rails syntax and commands. Even better than a cheatsheet, for Mac users, is an application named Dash that offers fingertip access to reference documentation for Ruby, Rails, HTML, CSS, JavaScript, and many other languages and frameworks.","title":"7.2.2 Cheatsheets"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#723-api-documentation","text":"The API documentation for Ruby and Rails shows every class and method. These are extremely technical documents (the only thing more technical is reading the source code itself). The documents offer very little help for beginners, as each class and method is considered in isolation, but there are times when checking the API documentation is the only way to know for certain how something works. Rails Documentation - official API docs apidock.com/rails - Rails API docs with usage notes apidock.com/ruby - Ruby API docs with usage notes I recommend Dash as a tool to look up classes, modules, and methods in Ruby and Rails. Dash is a macOS app; use Zeal on Linux. Dash and Zeal run offline (they don\u2019t need an Internet connection) so you can use them anywhere.","title":"7.2.3 API Documentation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#73-meetups-hack-nights-and-workshops","text":"I\u2019d like to urge you to find ways you can work with others who are learning Rails. Peer support is really important when you face a challenge and want to overcome obstacles. Most large urban areas have meetups or user group meetings for Rails developers. Try Meetup.com or google \u201cruby rails (my city)\u201d. The community of Rails developers is friendly and eager to help beginners. If you are near a Rails meetup, it is really worthwhile to connect to other developers for help and support. You may find a group that meets weekly for beginners who study together. Local user groups often sponsor hack nights or hackathons which can be evening or weekend collaborative coding sessions. You don\u2019t have to be an expert. Beginners are welcome. You can bring your own project which can be as simple as completing a tutorial. You will likely find a study partner at your level or a mentor to help you learn. If you are a woman learning Rails, look for one of the free workshops from RailsBridge or Rails Girls . These are not exclusively for women; everyone considered a \u201cminority\u201d in the tech professions is encouraged to participate; and men are included when invited by a woman colleague or friend.","title":"7.3 Meetups, Hack Nights, and Workshops"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#74-pair-programming","text":"Learning to code is challenging, especially if you do it alone. Make it social and you\u2019ll learn faster and have more fun. There\u2019s a popular trend in the workplace for programmers to work side-by-side on the same code, sharing a keyboard and screen. It\u2019s effective, both to increase productivity and to share knowledge, and many coders love it. When programmers are not in the same office, they share a screen remotely and communicate with video chat. Look for opportunities to pair program. It\u2019s the best way to learn to code, even if your pairing partner is only another beginner. Learn more about pair programming on the site pairprogramwith.me and find a pairing partner at codermatch.me or letspair.net . Remote pair programming requires tools for screen sharing and video chat. Pairing sessions often use: Google+ Hangouts Screenhero Floobits Cloud9 IDE More tools are emerging as remote pair programming becomes popular.","title":"7.4 Pair Programming"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#75-pairing-with-a-mentor","text":"By far, the best way to learn is to have a mentor at your side as you undertake a project. That is an opportunity that is seldom available, unless you\u2019ve been hired to be part of a team in a company that encourages pair programming. You can try RailsMentors , a network of volunteer mentors offering free help. If you can pay for help, find a mentor using HackHands or AirPair . Market rates are expensive for a student, obviously, but if you are learning on the job or building an application for your own business, connecting online with a mentor might be a godsend. AirPair connects developers for real-time help using video chat and screen sharing. Experts set their own rate and the site matches you according to your budget. Expect to pay market rates for consulting ranging from USD $40 per hour to $150 per hour or more. HackHands promises to instantly connect you with a qualified expert at a cost of one dollar per minute for mentorship using video chat and screen sharing.","title":"7.5 Pairing With a Mentor"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#76-code-review","text":"Code review is an essential part of the development process. There\u2019s always more than one way to implement a feature, and some ways are better than others, but you may not know it unless you ask someone to look at your code. When you pair with a mentor, you get the benefit of code review. But even if you don\u2019t have a mentor, you can get code review online. StackExchange, the parent of StackOverflow, has a free site for code review: codereview.stackexchange.com Expert code review will accelerate your learning faster than anything else. Knowing where to go for help is important; it is just as important to stay current.","title":"7.6 Code Review"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#77-staying-up-to-date","text":"Rails changes frequently and its community is very active. Changes to Rails, expert blog articles, and new gems can impact your projects, even if you don\u2019t work full-time as a Rails developer. Consequently, I urge you to stay up-to-date with news from the community. I suggest signing up for two weekly email newsletters: Ruby Weekly Green Ruby News Another weekly email newsletter is more technical, and focused on code arriving in the next version of Rails: This Week in Rails For daily news about Rails, check Peter Cooper\u2019s RubyFlow site which lists new blog posts from Rails developers each day. Also take a look at this list of top blogs for Rails developers: 45 Ruby Blogs If you like podcasts, check out Ruby Rogues and Envy Labs\u2019s Ruby5 . Finally, you can follow @rails_apps on Twitter for news about the RailsApps project.","title":"7.7 Staying Up-to-Date"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-8-plan-your-product","text":"Tutorials from other authors focus only on coding. But Rails developers do more than code. Software development is a process that begins with planning and ends with analysis and review. Coding, testing, and deployment is at the core but you\u2019ll need to learn about the entire process to succeed professionally. That\u2019s why we look at product planning and project management. For this beginning tutorial, we\u2019ll introduce concepts about product planning and project management that you will encounter as a Rails developer.","title":"Chapter 8 Plan Your Product"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#81-product-owner","text":"On your project, who is the product owner ? The product owner is the advocate for the customer, making sure that the team creates value for the users. If you are a solo operator, you are the one who will decide what features and functionality will be included in your application. But if you\u2019re part of a team, either in a startup, as a consultant, or in a corporate setting, it may not be clear who has responsibility for looking at the application from the point of view of the application user. Someone must decide which features and functionality are essential and which must be left out. We call this managing scope and combating feature creep . It\u2019s important to assign a product owner. Without a product owner in charge, tasks remain vague and developers have difficulty making progress. In large organizations, a product owner may be a product manager or a project manager . A product owner usually is not a management executive (though there will likely be an executive sponsor ). Everyone on the team \u2014 including management, developers, and stakeholders \u2014 should agree to designate a product owner and give that person authority to define features and requirements.","title":"8.1 Product Owner"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#82-user-stories","text":"A product owner\u2019s principal tool for product planning is the user story . In the past, when software engineering primarily served government or large corporations, product planning started with requirements gathering defined as use cases , and culminated in a requirements specification . User stories are a faster, more flexible approach to product planning that originated with an approach called Agile software development . User stories are a way to discuss and describe the requirements for a software application. The process of writing user stories helps a product owner identify all the features that are needed for an application. Breaking down the application\u2019s functionality into discrete user stories helps organize the work and track progress toward completion. User stories are often expressed in the following format: As a I want In order to Here is an example: *Join Mailing List* As a visitor to the website I want to join a mailing list In order to receive news and announcements A typical application has dozens of user stories, from basic sign-in requirements to the particular functionality that makes the application unique. You don\u2019t need special software to write user stories. Just use index cards or a Word document. In the next chapter, we\u2019ll see how you can enter user stories as tasks in a to-do list. Here\u2019s the format: Figure 8.1: A user story. Just like Rails provides a structure for building a web application, user stories provide a structure for organizing your product plan.","title":"8.2 User Stories"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#83-wireframes-and-mockups","text":"Often, before writing user stories, a product owner will make rough sketches of various web pages. Sketching is a phase where you try out ideas to clarify your vision for the application. Sketching can lead to a wireframe or a mockup. These terms are often used interchangeably but there are differences in meaning. A wireframe is a drawing showing all functional elements of a web page. It should not depict a proposed graphic design for a website, rather it should be a diagram of a web page, without color or graphics. A mockup adds graphic design to a wireframe; including branding devices, color, and placeholder content. A mockup gives an impression of the website\u2019s \u201cpersonality\u201d as well as proposed functionality. One of the most popular tools for creating wireframes is Balsamiq Mockups (despite the name, it produces wireframes, not mockups). There are dozens of others listed in the article Rails and Product Planning . As a product owner, writing user stories or sketching wireframes will help you refine product requirements. Some people like a visual approach with wireframes; others prefer words and narrative. Either approach will work; both are good.","title":"8.3 Wireframes and Mockups"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#84-graphic-design","text":"Very few people have skills as both a visual designer and a programmer. The tools are different; graphic designers typically use Adobe Photoshop, though web-savvy designers often create designs directly in HTML and CSS, while developers write code. If you\u2019re lucky, you will work with a skilled graphic designer as you build your web application. If you are very lucky, you may work with someone who is a user experience (UX) designer or interaction designer (IxD). Interaction design is a demanding, sophisticated discipline that requires the mindset of an anthropologist and the eye of a visual artist to find not just the most pleasing, but the most effective visual design for an application user interface. You can find interaction designers discussing their concerns on the IxDA website, including the differences between interaction design and UX design. If you\u2019re working with a graphic designer you might collaborate on a moodboard or a design brief to define the look and feel of your application. If the designer works in Photoshop, you\u2019ll face the challenge of converting design layouts from Photoshop to HTML and CSS. There are service firms that do this for a fee but obviously it\u2019s easier to work with a designer who can implement a layout directly in HTML and CSS. Rails can be particularly challenging when it comes to integrating graphic design with code. Rails uses a hybrid of HTML markup mixed with Ruby programming code in its view files (depending on the stack you\u2019ve selected, the view files can use ERB, Haml, or other syntaxes for mixing HTML and Ruby). Few designers are comfortable with Ruby code mixed with HTML so you may end up doing integration yourself. If you don\u2019t have a skilled graphic designer available to help, you can use Bootstrap or other front-end frameworks such as Zurb Foundation to quickly add an attractive design to your application. In a later chapter that covers HTML and CSS, you\u2019ll learn about templates and themes for Bootstrap that provide a beginning point for page design.","title":"8.4 Graphic Design"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#85-software-development-process","text":"Product planning is the initial phase of a larger software development process. You can approach this casually, and start coding with curiosity and ambition, finding your own best way to the end product, by trial and error. Most hobbyist and student developers need no other approach. When money or reputation is at stake, casual approaches to software development are risky. Compared to other forms of engineering, software development is peculiarly prone to failure. As recently as 2003, IBM stated , \u201cMost software projects fail. In fact, the Standish group reports that over 80% of projects are unsuccessful either because they are over budget, late, missing function, or a combination. Moreover, 30% of software projects are so poorly executed that they are canceled before completion.\u201d Professional software developers, being intelligent and reflexive, and driven by a desire to become more efficient, or wanting to avoid the wrath of bosses and clients, frequently look for ways to reduce risk and improve the software development process. In recent years they\u2019ve succeeded in improving the success rate of software engineering, largely due to the adoption of software development methodologies that improve the business process of producing software. If you\u2019re a hobbyist or casual programmer, you don\u2019t need to learn about software development methodologies. If you are going to be held accountable for the success or failure of a project, you should learn more about software development methodologies. If you\u2019re going to be interviewing for a job as a programmer, it pays to recognize some of the names of software development methodologies and ask whether your employer has adopted a particular approach, especially if you\u2019d like to work for a company that prides itself on being well-organized and supportive of staff development. Hiring managers may say, \u201cwe\u2019ve synthesized several methodologies,\u201d which may mean they don\u2019t have a good answer for the question, or it may mean they are prepared to thoughtfully discuss the merits of various approaches to software development. Managers who can discuss software development methodologies are more likely to be concerned about the welfare of their team. Here are some software development methodologies you may hear about, with some notable characteristics: waterfall process - an old and disparaged approach Agile software development - an iterative and incremental approach Scrum - known for \u201csprints\u201d and daily standup meetings Extreme Programming (XP) - pair programming and test-driven development Agile, Scrum, and XP are all related, and often mixed in practice. As you mature as a software developer, take time to think about the process of building software and learn more about software development methodologies.","title":"8.5 Software Development Process"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#86-behavior-driven-development","text":"There is one prominent software development approach that is important for product planning. It is called Behavior-Driven Development (BDD), or sometimes, Behavior-Driven Design. BDD takes user stories and turns them into detailed scenarios that are accompanied by tests. Here\u2019s a screenshot from a consultant\u2019s web application that shows how a user story can be extended from a \u201cfeature\u201d to include detailed \u201cscenarios.\u201d Figure 8.2: Feature and scenario. Rails developers turn these scenarios into tests using either a software tool named Cucumber or RSpec to run automated test suites. Most developers write scenarios using a simple text editor. With automated tests, a product owner can determine if developers have succeeded in implementing the required features. This process is called acceptance testing . Automated tests also make it easy for developers to determine if the application still works as they add features, fix bugs, or reorganize code. This process is called regression testing . On a small project like our tutorial application, you won\u2019t use BDD. It\u2019s easy enough to manually test the features before you deploy your application. For an introductory book, BDD is an advanced topic. But on a project where money and reputation is at stake, BDD can be very important. Every time an application is deployed, there\u2019s a chance that something could be broken. Software development is plagued with \u201cfix one thing, accidentally break another\u201d as code is refactored or improved. Manual testing can\u2019t be expected to reveal every bug. That\u2019s why automated testing, providing coverage of every significant user-facing feature, is the only way to know if you\u2019ve deployed without known bugs. In Book Two, a \u201cTesting\u201d chapter will introduce you to the terminology and concepts of automated testing. You won\u2019t have to worry about testing when we build the tutorial application, but afterward you\u2019ll learn enough about testing to be prepared for more advanced tutorials.","title":"8.6 Behavior-Driven Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-9-manage-your-project","text":"How do you know you\u2019re making progress? Are you taking care of everything that needs to be done? These questions are at the center of project management. Whether you are working alone or as part of a team, you need to define your tasks and track progress toward your goal. The previous chapter on product planning showed how user stories can be used to break down an application into discrete features. User stories can be the basis for a list of tasks.","title":"Chapter 9 Manage Your Project"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#91-to-do-list","text":"You can track your tasks with a simple to-do list. Some entrepreneurs like the discipline of the GTD system ( Getting Things Done ) for personal productivity and time management. Our article on Rails and Project Management offers a list of popular to-do list applications, either for personal task management or team-oriented task management.","title":"9.1 To-Do List"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#92-kanban","text":"Kanban is a method of managing projects that has been adapted from lean manufacturing for use in software development. In Japanese, \u201cKan\u201d means visual, and \u201cban\u201d means card or board. Imagine putting a big whiteboard on your wall and creating columns for a series of to-do lists. The columns, called swimlanes , are labelled: Backlog, Ready, Coding, Testing, Done. Each swimlane contains index cards that describe a user story or other task. To plan your work and track progress, you\u2019ll move the index cards across the board from column to column. To stay focused and avoid becoming overwhelmed, you\u2019ll only pick the most important user stories or tasks from the backlog column and you\u2019ll limit the number of items in each column to what can be realistically accomplished in the time available. That\u2019s the essence of kanban as it is used for software development. See the article on Rails and Project Management for a list of kanban web applications. Trello is particularly popular for task management.","title":"9.2 Kanban"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#93-agile-methodologies","text":"For a solo project or a small team, you\u2019ll do fine with a simple to-do list or (even better) a kanban web application for managing your software development process. If you\u2019ve got enough people to need to hire a project manager, you should look at project management software that supports teams using Agile software development methodologies. Pivotal Tracker is the best known tool but there are many other agile tools . Learn more about Agile if you\u2019re going to hire developers for a startup or if you are going to work for an established company. In most successful companies, Agile processes have replaced the much-maligned waterfall process that was once the norm for software development.","title":"9.3 Agile Methodologies"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-10-mac-linux-or-windows","text":"This is a book for every beginner, so I\u2019ll explain how we use a text editor and terminal application for development. First, though, let\u2019s ask, \u201cmacOS, Linux, or Windows?\u201d","title":"Chapter 10 Mac, Linux, or Windows"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#101-your-computer","text":"You can develop web applications with Rails on computers running Mac OS X, Linux, or Microsoft Windows operating systems. Most Rails developers use macOS or Linux because the underlying Unix operating system has long been the basis for open source programming. Later in this chapter, I\u2019ll give links to installation instructions for macOS and Linux. For Windows users, I have to say, installing Rails on Windows is frustrating and painful. Readers and workshop students often tell me that they\u2019ve given up on learning Rails because installation of Ruby on Windows is difficult and introduces bugs or creates configuration issues. Even when you succeed in getting Rails to run on Windows, you will encounter gems you cannot install. For these reasons, I urge you to use Cloud9, a browser-based development environment, on your Windows laptop.","title":"10.1 Your Computer"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#102-hosted-computing","text":"If you are using Windows, or have difficulty installing Ruby on your computer, try using Cloud9. Cloud9 provides a hosted development environment. That means you set up an account and then access a remote computer from your web browser. The Cloud9 service is free for ordinary use. There is no credit card required to set up an account. You\u2019ll only be charged if you add extra computer memory or disk space (which you don\u2019t need for ordinary Rails development). The Cloud9 service gives you everything you need for Rails development, including a Unix shell with Ruby pre-installed, plus a browser-based file manager and text editor. Any device that runs a web browser will give you access to Cloud9, including a tablet or smartphone, though you need a broadband connection, a sizable screen, and a keyboard to be productive.","title":"10.2 Hosted Computing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#103-installing-ruby","text":"Your first challenge in learning Rails is installing Ruby on your computer. Frankly, this can be the most difficult step in learning Rails because no tutorial can sort out the specific configuration of your computer. Get over this hump and everything else becomes easy. The focus of this book is the background you need to understand Rails. In Book Two, you\u2019ll build a real-world Rails application. Before you can build the application, you\u2019ll need to install the latest versions of the Ruby language and the Rails gem. You can get started now, with the links provided below, or you can wait until you have started reading Book Two. You\u2019ll spend at least an hour installing Ruby and Rails, so defer the task until you have sufficient time at your computer.","title":"10.3 Installing Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1031-macos","text":"See this article for macOS installation instructions: Install Ruby on Rails - macOS","title":"10.3.1 MacOS"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1032-ubuntu-linux","text":"See this article for Ubuntu installation instructions: Install Ruby on Rails - Ubuntu","title":"10.3.2 Ubuntu Linux"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1033-hosted-computing","text":"Cloud9 is a browser-based development environment. Cloud9 is free for small projects. If you have a fast broadband connection to the Internet, this is your best choice for developing Rails on Windows. And it is a good option if you have any trouble installing Ruby on Mac or Linux because the Cloud9 hosted environment provides everything you need, including a Unix shell with Ruby and RVM pre-installed, plus a browser-based file manager and text editor. Using a hosted development environment is unconventional but leading developers do so and it may be the wave of the future. See this article for Cloud9 installation instructions: Install Ruby on Rails - Cloud9 The article shows how to get started with Cloud9.","title":"10.3.3 Hosted Computing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1034-windows","text":"Here are your choices for Windows: Use the Cloud9 hosted development environment Install the Railsbridge Virtual Machine Use RubyInstaller for Windows Cloud9 is ideal if you have a fast Internet connection. If not, download the Railsbridge Virtual Machine to create a virtual Linux computer with Ruby 2.2 and Rails 4.2 using Vagrant . Other tutorials may suggest using RailsInstaller , but it will not provide an up-to-date version of Ruby or Rails. Also, RVM does not run on Windows.","title":"10.3.4 Windows"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-11-terminal-unix","text":"You\u2019ll need to use the Terminal application and Unix commands to develop Rails applications. If you\u2019ve subscribed to the video series or purchased the advanced tutorials, you can watch this four minute video: UNIX Commands Basics Most people use a graphical user interface (GUI) to interact with their computers, tablets, or phones. As a developer, instead of using the GUI, you\u2019ll get \u201cunder the hood\u201d and work directly with the engine that controls your computer, the operating system. This is what makes software programming look intimidating to learners. You won\u2019t use menus or buttons as you work. Instead, you\u2019ll type commands, line by line, into a window that looks like a computer interface from the 1970s. In fact, the terminal, or console, is a direct legacy of computers that were developed even earlier, in the 1960s. The terminal continues to be the fundamental tool of software development.","title":"Chapter 11 Terminal Unix"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#111-the-terminal","text":"The Terminal application or console gives us access to the Unix command line, or shell. We call the command line the shell because it is the outer layer of the operating system\u2019s internal mechanisms (which we call the kernel ). On macOS, you can use the Terminal application . Experienced developers often upgrade to the more powerful iTerm2 application but you can start with the installed Terminal application. Look for the Terminal in the following places: MacOS: Applications > Utilities > Terminal Linux: Applications > Accessories > Terminal Windows: Taskbar Start Button > Command Prompt On the Mac, search for the macOS Terminal application by pressing the Command-Spacebar combination (which Apple calls \u201cSpotlight Search\u201d) and searching for \u201cTerminal.\u201d The magnifying glass in the upper right corner of your screen will also launch \u201cSpotlight Search.\u201d Or look in the Applications/Utilities/ folder for the Terminal application. You\u2019ll need to click the name of the application to launch the Terminal. If you are using Linux then you likely know how to find the Terminal. Look through the menu for your window manager for \u201cShell\u201d or \u201cTerminal.\u201d If you have your computer in front of you, launch your terminal application now. Try out the terminal application by entering a shell command. $ whoami Don\u2019t type the $ character. We call it \u201cthe prompt.\u201d The $ character is a cue that you should enter a shell command. This is a longtime convention that indicates you should enter a command in the terminal application or console. The Unix shell command whoami returns your username. $ whoami danielkehoe Instead, you might see: command not found: $ which indicates you typed the $ character by mistake. If you are new to programming, using a text editor and the shell will seem primitive compared to the complexity and sophistication of Microsoft Word or Photoshop. Software developers edit files with simple text editors and run programs in the shell. That\u2019s all we do. We have to remember the commands we need (or consult a cheatsheet) because there are no graphical menus or toolbars. Yet with nothing more than a text editor and the command line interface, programmers have created everything that you use on your computer.","title":"11.1 The Terminal"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#112-unix-commands-explained","text":"Unix commands seem cryptic at first. They are a shorthand that\u2019s familiar to experienced developers. If a Unix command is mysterious, you can look it up with Google. But a better approach is to use the website: explainshell.com Try it out. Visit the website and enter ls -1p . It\u2019s a Unix command we\u2019ll use often in Book Two. The site will explain that the command \u201clists directory contents, one file per line, with a slash appended to directories.\u201d Now that you know about explainshell.com, here\u2019s no need to ever be mystified by a Unix command.","title":"11.2 Unix Commands Explained"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#113-getting-fancy-with-the-prompt","text":"If you watch experienced developers at work, you may see their consoles are colorful, with lots of information shown in the prompt. You\u2019ll see Git status, current directory, and RVM gemset or Ruby version. Many developers replace the standard Bash shell with the Z shell and Oh-my-zsh . You don\u2019t have to install the Z shell to get a fancy prompt; the Bash-it utility is easy to install and gives you much of the functionality. A fancy prompt is helpful but requires some Unix skills to install. Don\u2019t worry about getting fancy now; you can try it down the road.","title":"11.3 Getting Fancy With the Prompt"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#114-learning-unix-commands","text":"You can follow the tutorial in Book Two without learning any Unix commands in advance. Everything you need to know is given at each step. If time is short, and you want to get started, you can jump into the Book Two tutorial without learning Unix commands. Eventually, you\u2019ll realize you\u2019ve learned quite a few basic Unix commands without making an effort. But if you have time, you\u2019ll feel more confident if you spend some time watching a few videos or reading books that teach the Unix command line basics. If you haven\u2019t used the computer\u2019s command line interface (CLI) before, I recommend either Learn Enough Command Line to Be Dangerous or Zed Shaw\u2019s free Command Line Crash Course to gain confidence with Unix shell commands. If you don\u2019t have time for the books recommended above, continue reading this chapter for an introduction to command line basics.","title":"11.4 Learning Unix Commands"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#115-exit-gracefully","text":"Before you learn about Unix commands, learn how to exit a command line software program. It is the most important Unix skill you\u2019ll need. If you don\u2019t learn it now, you\u2019ll get stuck inside Unix programs and panic when you can\u2019t return to the command line prompt. If you\u2019re keeping a notebook for things you learn, write this down: To EXIT FROM UNIX commands, type: Control-c If that doesn't work, try: q exit Control-d Control-z If nothing works: CLOSE THE TERMINAL WINDOW To type Control-c , hold down the \u201cControl\u201d key while pressing the c key on your keyboard. There is no universal command to exit a Unix program. Any of these exit techniques might work. None do harm to your computer, so if you get stuck, try them all. Software developers don\u2019t usually say, \u201cI\u2019m running a Unix program.\u201d Usually they say, \u201cI\u2019ve launched a Unix process.\u201d As you learn more about Unix, you\u2019ll learn about the difference between Control-c , which \u201ckills a process,\u201d and Control-z , which \u201csuspends a process.\u201d Right now, you don\u2019t need to learn about processes or what it means to kill or suspend them.","title":"11.5 Exit Gracefully"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#116-structure-of-unix-commands","text":"Unix commands are cryptic if you\u2019ve never seen them before. But there\u2019s a common pattern you\u2019ll begin to recognize. $ command -option argument Notice there are spaces between each part of a Unix command.","title":"11.6 Structure of Unix Commands"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1161-prompt","text":"The $ character is the prompt. Sometimes you\u2019ll see extra information before the prompt: My-MacBook:~ danielkehoe$ The prompt can be customized to provide useful information, such as the name of the current folder or the current user. Some people change the $ character to a different character, such as the > character. Don\u2019t be confused by a custom prompt and don\u2019t worry about customizing your prompt right now. Just remember that when you see a $ character on the command line, the computer is waiting for you to enter a command.","title":"11.6.1 Prompt"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1162-command","text":"$ command -option argument Each Unix command is a tiny software program that is already installed on your computer. Each command does a few simple things, such as list the contents of a folder or create an empty file. There are dozens of Unix commands but you only need to learn a few to develop a Rails application. Entering a command at the prompt and pressing \u201cReturn\u201d (or \u201cEnter\u201d) will result in either of two things. The computer will respond \u201ccommand not found\u201d or it will run the command and return a result to the terminal window (\u201cthe console\u201d). Sometimes a command is not found because it is not a built-in command and it is not installed on your computer. More often, you\u2019ve made an error in typing the command. Unix doesn\u2019t like capital letters (\u201cuppercase\u201d) so unless there is a capital letter in a filename, you probably will need to type lowercase characters.","title":"11.6.2 Command"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1163-option","text":"$ command -option argument Most Unix commands have a default response. Many commands have options for different responses if you set an option \u201cflag\u201d or \u201cswitch.\u201d You indicate an option with a - character. Most people call that character a hyphen or dash. You may hear programmers call it the \u201cminus\u201d character. Sometimes an option is set with \u2013 , that you might describe as \u201cdash dash\u201d or \u201cminus minus.\u201d It\u2019s difficult to see on the typeset page of this book, but to get the - character you type the \u201cdash\u201d character once. In this book, \u2013 , which appears as a slightly longer dash, is actually typed as two dashes. Two options are common among Unix commands: \u2013help and \u2013version (with double dashes). There are also abbreviated versions: -h and -v (with a single dash). If you have a terminal window open on your computer, try typing: $ man -v man, version 1.6c If I was coaching a beginner, I would say, \u201cType man space minus v. Don\u2019t forget the space and be sure to type \u2018Enter.\u2019\u201d The computer returns the version number of the current installed man Unix command. The Unix man command provides online documentation for every Unix command. Try: $ man man . . . You\u2019ll see the \u201cman pages\u201d that show exactly what to do with the man command. You can type man followed by the name of a command to see the documentation for the command. It is nice to know that every Unix command comes with complete instructions for use. But try reading some man pages and you\u2019ll understand why most developers never look at man pages. Instead they use Google to search online for instructions about how to use Unix commands. Man pages suffer from the worst features of technical documentation. They are complete to the point of obscurity, providing massive detail without highlighting the most common use cases. You\u2019re better off googling for examples of how to use Unix commands. You\u2019ll be stuck inside the man pages after you enter man man . Refer to your notes about how to exit a Unix program. To get out of the man program, type q to quit.","title":"11.6.3 Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1164-argument","text":"$ command -option argument The term \u201cargument\u201d is borrowed from mathematics . Many Unix commands like a good argument. It is information that will be processed by a Unix command. Often it is a filename, if the command will operate on a file or output to a file. For example, we can create a file with the Unix touch command or remove a file with the Unix rm command: $ touch myfile $ rm myfile In both cases, we must supply a filename as an argument.","title":"11.6.4 Argument"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#117-quick-guide-to-unix-commands","text":"As you learn Unix commands, it is a good idea to write notes for yourself or prepare a personal cheatsheet. The act of taking notes will help you remember the commands. Ultimately, the commands will become second nature through sheer repetition as you develop Rails applications. Here are the Unix commands you will use most often.","title":"11.7 Quick Guide to Unix Commands"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1171-cd","text":"Computers use file systems to control how data is stored and retrieved using s storage system such as a hard drive. By separating the data into individual pieces, and giving each piece a name, the information is easily separated and identified. In offices in the 20th century, documents were grouped together as files and kept in file folders in filing cabinets. Computers don\u2019t really need to organize information as files but early computer users apparently thought of computer storage as electronic file cabinets. In Unix, you are always expected to be somewhere in the filing cabinet. The folders, or directories, are hierarchical, so a root folder contains multiple folders, which each contains many more folders and files. One set of nested folders contains the programs and utilities which make up the operating system and system utilities. Another set of nested folders contain folders for every user who can sign in to use the computer. Unix systems can have more than one user account. Each user is given a home directory that contains the files needed by any software programs he or she will use. Unix expects you to always be somewhere in your computer\u2019s file system. If you get confused or lost, you can always return to your home directory. Unix programmers like cryptic shortcuts that use unique keys from the keyboard. To get to your home directory, you can enter the directory name, which is your user name, or just type the \u201ctilde\u201d or \u201csquiggle\u201d character. On most keyboards, it is the uppercase (shift key) character to the left of the numeral 1. Look at the typeset character ~ in this book. It may look like a smudged dash, but if you look closely, you\u2019ll see the squiggle. Use the cd (change directory) command to go to your home directory: $ cd ~ The computer will not return a response to the terminal window, but you\u2019ll be positioned in your home directory. That means Unix commands will look for files in your home directory or save files in your home directory unless you specify another location.","title":"11.7.1 cd"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1172-pwd","text":"Discover where you are by asking for the \u201cpresent working directory.\u201d $ pwd /Users/danielkehoe The Unix pwd command will show the file path of your current directory. It is easy to get confused and not be sure where you are. When you feel lost, use the pwd command.","title":"11.7.2 pwd"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1173-ls","text":"Use the pwd command to figure out where you are. Then look around with the ls command. The ls command lists the files and folders that are contained in your present working directory. $ cd ~ $ ls Applications Documents Movies Pictures Downloads Music Public Desktop Library The response shows a list of files and folders. Your list will be different. You can use options for many different lists of files and folders. For example, you can see a list of files and folders in a single column with ls -1 : $ ls -1 Applications Desktop Documents Downloads Library Movies Music Pictures Public Using ls -1p , you can see a single column list with slash characters marking the folders: $ ls -1p Applications/ Desktop/ Documents/ Downloads/ Library/ Movies/ Music/ Pictures/ Public/ It seems there are no files in my home directory. But is that true?","title":"11.7.3 ls"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1174-hidden-files-and-folders","text":"The Unix operating system allows filenames and folder names that start with a dot. These files are hidden unless you use an a option to view them. $ ls -la total 400 drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 . drwxr-xr-x 6 root admin 204 Dec 8 2014 .. [email protected] 1 danielkehoe staff 16388 Dec 8 05:52 .DS_Store drwx------ 4 danielkehoe staff 136 Dec 8 13:13 .Trash -rw------- 1 danielkehoe staff 98661 Dec 12 09:00 .bash_history [email protected] 1 danielkehoe staff 4926 Nov 20 22:10 .bash_profile [email protected] 1 danielkehoe staff 792 Sep 2 2013 .bashrc drwx------ 6 danielkehoe staff 204 Jun 26 20:24 Applications drwx------+ 5 danielkehoe staff 170 Dec 7 08:33 Desktop drwx------+ 12 danielkehoe staff 408 Dec 7 08:06 Documents drwx------+ 9 danielkehoe staff 306 Dec 12 10:57 Downloads [email protected] 57 danielkehoe staff 1938 Aug 30 20:27 Library drwx------+ 3 danielkehoe staff 102 Jul 28 2013 Movies drwx------+ 5 danielkehoe staff 170 Sep 21 2014 Music drwx------+ 22 danielkehoe staff 748 Nov 26 20:57 Pictures drwxr-xr-x+ 5 danielkehoe staff 170 Aug 11 2013 Public Now the response is very detailed, showing hidden files as well as information about file permissions, owner name, groups that have access permissions, file size, and creation date. Hidden files are often files that contain configuration settings or user preferences. In the example above, the .DS_Store file is created by the Mac operating system to store the screen position of a Finder window. The .bashrc file contains configuration settings for the Unix shell program named bash. Box 11.1. Hidden Files in Cloud9 If you\u2019re using Cloud9, you must change preferences to see hidden files. In the window that contains the file list, there is a gear icon (dark in color and difficult to see). Clicking the gear option will give you options: Show Root File System Show Home in Favorites Show Hidden Files You must select all three options to see the hidden files.","title":"11.7.4 Hidden Files and Folders"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1175-dots","text":"You might notice that the response lists two files that have dots for names: $ ls -la drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 . drwxr-xr-x 6 root admin 204 Dec 8 2014 .. These are not really files. These are Unix shortcuts for navigating the file system. The single dot \u201cfile\u201d refers to the present working directory. The double dot \u201cfile\u201d is a shortcut for navigating up one level in the file system hierarchy. Dot files make Unix commands even more mysterious but they are convenient.","title":"11.7.5 Dots"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1176-open","text":"On a Mac, you can enter a command in the terminal that opens a Mac Finder file browser window. The command and argument open . (open space dot) opens the present working directory. Try it: $ open . You should see files and folders listed in the Finder window that are the same as those displayed in the terminal window. Whether you use the Mac Finder graphical user interface or the terminal, you are looking at the same file system. On the Mac, you can point and click to move around the file system. If you want to move or delete a file, and you don\u2019t remember the appropriate Unix command, you can use open to open a Finder window and make changes the Macintosh way.","title":"11.7.6 open"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1177-mkdir","text":"You can create a new folder with the Unix mkdir command. Let\u2019s be sure you are in your home directory by using the pwd command. Then create a workspace folder. $ cd ~ $ pwd /Users/danielkehoe $ mkdir workspace $ cd workspace $ pwd /Users/danielkehoe/workspace After creating the workspace folder, we cd into the folder and check where we are with the pwd command.","title":"11.7.7 mkdir"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1178-touch","text":"You can create a new file with the Unix touch command. Often it is easier to use a text editor to create and save a new file. But we\u2019ll use the touch command here to create a file we\u2019ll remove later. It is called the touch command because its intended purpose is update the timestamp on files or folders by \u201ctouching\u201d the file or folder. But the command is also useful for creating new files. If you haven\u2019t done anything since entering the previous commands, you\u2019ll still be in your workspace folder. But let\u2019s enter a command to move you to the workspace folder, just in case you are elsewhere. First we cd using a filepath that contains the ~ \u201ctilde\u201d shortcut for the home directory. In essence, we are saying, \u201cmove to the workspace folder contained in the home directory.\u201d $ cd ~/workspace $ pwd /Users/danielkehoe/workspace $ touch myfile.txt $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:11 myfile.txt You\u2019ve created a file myfile.txt inside the workspace folder. Then we list the contents of the folder so we can see the new file.","title":"11.7.8 touch"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1179-mv","text":"Unix provides the mv command to rename files and folders. It\u2019s an abbreviation for \u201cmove\u201d and was originally intended to move a file from one directory to another. You can use it to move files and folders. And you can use it to \u201cmove\u201d the name of the file as well. Let\u2019s rename myfile.txt : $ mv myfile.txt my_file.txt $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:11 my_file.txt We\u2019ve changed the name of the file by adding an underscore character. The underscore character is commonly used as a substitute for a space between words in a filename. The Mac operating system can accommodate spaces in filenames but it is bad practice to use spaces in filenames when you work on the command line. You can work with filenames that contain spaces by surrounding the filename with single quote characters (like \u2018my file.txt\u2019) but it is inconvenient and most developers simply avoid spaces in filenames.","title":"11.7.9 mv"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#11710-cp","text":"You can copy a file with cp command. You must enter two filenames as arguments: the name of the original file and the name you want for the copied file. $ cp my_file.txt my_file_2.txt $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:11 my_file.txt -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:16 my_file_2.txt The ls response shows we have two files. The cp command requires flags if we want to copy a folder. We\u2019ll use the mkdir command to create a folder: $ mkdir myfolder $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:13 myfolder Let\u2019s try to copy it: $ cp myfolder myfolder2 cp: myfolder is a directory (not copied). The error message indicates we cannot copy a directory. Let\u2019s try it with the -r flag to recursively copy contents from one folder to another: $ cp -r myfolder myfolder2 $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:13 myfolder drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:21 myfolder2 With the added flag, we are able to copy a folder.","title":"11.7.10 cp"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#11711-rm","text":"Let\u2019s remove the files we just created. Unix provides rm , the \u201cremove\u201d command. First, let\u2019s check that you are still in the workspace folder. $ pwd /Users/danielkehoe/workspace $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:11 my_file.txt -rw-r--r-- 1 danielkehoe staff 0 Dec 12 15:16 my_file_2.txt Then enter the rm command, providing the filename as an argument: $ rm my_file.txt $ rm my_file_2.txt $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. The ls command shows the files are gone. When you delete a file using the Mac Finder file browser, the file is moved to a Trash folder. When you use the Unix rm command, the file is gone forever. There is no Trash folder for recovering a file when you use the rm command.","title":"11.7.11 rm"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#11712-removing-a-folder","text":"Let\u2019s remove a folder. We\u2019ll assume you are in the workspace folder and the folders you created earlier are still there. $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:21 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:13 myfolder drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:21 myfolder2 The ls command shows we have folders myfolder and myfolder2 . We can\u2019t remove a folder with the ordinary rm command: $ rm myfolder rm: myfolder: is a directory $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:13 myfolder drwxr-xr-x 2 danielkehoe staff 68 Dec 13 05:21 myfolder2 We get an error message and the ls command shows the file is still there. This can be frustrating for someone who is not skilled with Unix. You\u2019ll need to \u201cset a flag\u201d (use an option) to remove a folder using the rm command. $ rm -rf myfolder $ rm -rf myfolder2 $ ls -la total 8 drwxr-xr-x 7 danielkehoe staff 238 Dec 12 15:11 . drwxr-xr-x+ 53 danielkehoe staff 1802 Sep 27 15:48 .. Now the ls command shows the folders are gone. We use the r option to remove the contents of the folder recursively. And the f option to force the removal without asking for confirmation.","title":"11.7.12 Removing a Folder"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#11713-the-mouse-and-the-command-line","text":"The mouse belongs to the graphical user interface. That\u2019s why it doesn\u2019t work as expected on the command line. Try entering a command at the prompt: $ rm -rf notmyfolder If you want to edit the argument and change \u201cnotmyfolder\u201d to \u201cmyfolder,\u201d you can try clicking with your mouse at the point where you wish to change the text. But your mouse click will be ignored. It seems you must use the delete key to back up from end of the line to retype the argument. But there\u2019s a trick that works on most computers. If you press \u201cOption\u201d and click with the mouse, you can edit the command and argument as you would expect. You can also move around on the command line with Ctrl-a to go to the beginning of a line, Ctrl-e to move to the end of the line, and Ctrl-u to delete everything on the command line. If you can\u2019t remember these shortcuts, don\u2019t worry, you can just use the delete key to move backward and retype when you need to make changes to commands.","title":"11.7.13 The Mouse and the Command Line"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#11714-arrow-keys","text":"The most useful trick for typing text on the command line is the \u201cup arrow\u201d key, which scrolls through a list of previous commands. The \u201cdown arrow\u201d key scrolls the history of commands in the opposite direction (forward if you\u2019ve moved backward). With Unix, you only need to type a command once and then you can scroll back to it with the \u201cup arrow\u201d key. It is a real timesaver.","title":"11.7.14 Arrow Keys"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#11715-tab-completion","text":"There\u2019s another trick developers use to save time when entering commands and arguments in the terminal. If you are entering a filename, and the file already exists in the present working directory, you can press the \u201ctab\u201d key to autocomplete the filename after typing a few unique letters of the filename. If there is more than one filename with the same initial letters, the Unix shell will balk and beep. Pressing tab again will list all the matching filenames. Continue typing a few more letters until the Unix shell can identify one unique filename and autocomplete.","title":"11.7.15 Tab Completion"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#118-why-abbreviations","text":"Our quick introduction to Unix commands taught you about ls , cp , rm and other common Unix commands. If the commands were spelled out as \u201clist,\u201d \u201ccopy,\u201d or \u201cremove\u201d they might be easier to remember. Some old-timers say Unix was designed to be efficient on slow teletype terminals. That may be true, but I believe the abbreviations persist because programmers are lazy and want to type as few characters as possible. Unix commands may seem obscure but with repetition they will become familiar. Until then, keep a personal cheatsheet as your reference. As you learn Rails and develop applications, you\u2019ll gain experience with Unix commands. What you\u2019ve learned so far is enough to get started.","title":"11.8 Why Abbreviations?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-12-text-editor","text":"You\u2019ll need a text editor for writing code and editing files. Word processing programs, such as Microsoft Word, will not work because they introduce hidden formatting codes into text files. Programmers\u2019 text editors provide syntax highlighting , making software code more readable and programmers more productive. Simple text editors such as TextEdit for macOS, or WordPad for Microsoft Windows, provide no syntax highlighting and should be avoided.","title":"Chapter 12 Text Editor"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#121-you-dont-need-an-ide","text":"Programmers who come to Rails from other platforms, such as Java or C++, often ask for recommendations for an IDE, or an integrated development environment . These are software applications that combine a text editor with built-in tools such as a debugger. Some Rails developers use JetBrains RubyMine , Aptana Studio , or Komodo but most Rails developers use only a text editor and terminal application. You don\u2019t need an IDE unless you\u2019re in the habit of using one. For a beginner, they are cumbersome and add little additional value.","title":"12.1 You Don\u2019t Need an IDE"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#122-which-text-editor","text":"Old-timers and hardcore technologists use text editors that run in the terminal window: vim Emacs There is a long-time rivalry between fans of Emacs and vim (and its predecessor vi). Between the two, vim is more popular. Emacs and vi are popular among skilled programmers because there\u2019s no need to leave the terminal window to edit a file. Programmers keep their fingers on the keyboard and don\u2019t need to reach for a mouse to use the text editor. That makes programmers more productive. In the long run, learning vim or Emacs will make you more productive as well as impressing your colleagues with your technical skill. Both vim and Emacs are difficult to learn. If you\u2019re a beginner, don\u2019t attempt to learn vim or Emacs if you\u2019re short on time. Most beginners will use a text editor with a graphical user interface (GUI). You\u2019re likely to encounter one of these: Atom Sublime Text TextMate Atom and Sublime Text are available for macOS, Windows, or Linux.","title":"12.2 Which Text Editor"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1221-install-atom","text":"Atom is an open-source text editor, developed by a team at GitHub. It is the newest of the text editors. If you have not yet installed a text editor, I recommend getting Atom. It can be downloaded and used for free. If you don\u2019t have a text editor yet, download and install Atom now.","title":"12.2.1 Install Atom"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1222-other-choices","text":"Sublime Text has been popular since 2008, particularly among developers who began learning Rails in the last seven years. Developers are expected to pay $70 USD for use of Sublime Text, which removes a nagging popup that reminds users to pay for Sublime Text. Textmate has been around since 2004 and remains popular among a small group of veteran Rails developers who have never bothered to learn vim or switch to Sublime Text or Atom. It is a commercial product priced at $56 USD.","title":"12.2.2 Other Choices"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1223-how-to-use-a-text-editor","text":"You can find tutorials for these text editors on YouTube. Or skim the Atom documentation or Sublime Text documentation . For a book with tips and tricks about using a text editor efficiently, see Learn Enough Text Editor to Be Dangerous .","title":"12.2.3 How To Use a Text Editor"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#123-editor-shell-command","text":"Carefully follow the instructions for installing your text editor. Installation is like any other desktop application; however, there is an unusual and important final step. Developers want to launch a text editor and open a file for editing by typing a command in the terminal window. If you\u2019ve installed Atom, click the \u201cInstall shell commands\u201d item under the \u201cAtom\u201d menu to enable the atom command. If you do so, you can open a file in Atom from the command line: $ atom myfile.txt Sublime Text has a similar configuration option for the Mac, though it takes more fiddling to set up. The Sublime Text documentation explains how. If you need more help, see Olivier Lacan\u2019s blog post, Launch Sublime Text 3 from the Command Line . After you\u2019ve completed the configuration, you can open a file in Sublime Text from the command line: $ subl myfile.txt Opening a file from the command line is a big win for productivity. It\u2019s even more useful to open an entire folder from the command line. In the \u201cTerminal Unix\u201d chapter, you learned that Unix has a \u201cdot file\u201d that represents the present working directory. To open an entire folder in Atom, try: $ atom . The text editor window will display a \u201ctree view\u201d of files and folders in a window pane. Click on any file to open it. It is very convenient to see an entire project at a glance in your text editor.","title":"12.3 Editor Shell Command"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-13-learn-ruby","text":"Experienced Rails developers debate whether beginners should study Ruby before learning Rails. Most experienced Rails developers recommend that you study Ruby before attempting to learn Rails. Most code camps teach a week or two of Ruby before introducing web development with Rails. Given that Rails is based on the Ruby programming language, it seems logical to teach Ruby as a prerequisite to learning Rails. There are several flaws with this approach. Every \u201clearn Ruby\u201d book, video, or online course teaches Ruby with a series of classroom exercises. A concept is introduced, followed by examples, and then a programming puzzle or quiz, much like the way arithmetic was taught to children in the 1950s. If you are academically gifted, you can learn the basics of Ruby with this approach. But many people become frustrated and don\u2019t learn well this way. Though experienced Rails developers think a beginner should learn Ruby this way, many actually knew other programming languages already, and learned Ruby by skimming a language reference to notice differences, and googled for help when they needed to figure out how to write something in Ruby. They improved their skills by reading blogs or watching screencasts such as Avdi Grimm\u2019s Ruby Tapas . But mostly they learned Ruby by working on real-world problems that required skill with Ruby. The fact is, though you can get oriented to the basics of Ruby in a week, it takes a year or more of regular use of the language to gain proficiency. Rubyists develop their skill with Ruby over years, not weeks. That\u2019s true of most general purpose programming languages. Learning Ruby is a lifelong education program, not a short course. Does that mean you\u2019ll never learn Rails? On the contrary. Despite what experienced Rails developers will say, you can begin building Rails applications without developing Ruby proficiency. Rails is largely a DSL, or domain specific language , with its own keywords and directives built using Ruby, and following the Ruby language syntax. Many developers started learning Rails by following tutorials to build Rails applications without first studying Ruby. You will pick it up as you go along. Before my colleagues lambast me for leading newbies astray, let me say that trying to learn Rails without making an effort to learn Ruby is inefficient and counter productive. As you follow a Rails tutorial, make a parallel effort to learn Ruby. One will support the other. By building real applications with Ruby and Rails, and making an effort to learn more about Ruby at the same time, you\u2019ll be motivated to learn Ruby and you\u2019ll retain more knowledge of Ruby. And you\u2019ll be a better Rails developer.","title":"Chapter 13 Learn Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#131-ruby-language-literacy","text":"In this book series, I\u2019ve taken a realistic approach. In Book Two, you will get started building a real-world Rails application. You will gain familiarity with the syntax of the Ruby language by studying the code that is needed to build the application. After you\u2019ve been exposed to real-world Rails code, you\u2019ll read a short chapter to learn about the basic features of the Ruby language. The goal of the chapter is to develop Ruby language literacy. With a grounding in real-world Rails code, and a short introduction to the Ruby language, you\u2019ll have a solid basis to develop your Ruby knowledge plus motivation to do so. What you need, more than anything, when you start working with Rails, is reading knowledge of Ruby. With a reading knowledge of Ruby you\u2019ll avoid feeling overwhelmed or lost when you encounter code examples or work through a tutorial. Later, as you tackle complex projects and write original code, you\u2019ll need to know enough of the Ruby language to implement the features you need. But as a student, you\u2019ll be following tutorials that give you all the Ruby you need. Your job is to recognize the language keywords and use the correct syntax when you type Ruby code in your text editor. Your hardest challenge will be to learn the names of the structures you see in code examples. This is why it is helpful to work your way through a short introduction to Ruby. You\u2019ll need to be able to recognize when you are looking at an array or a hash. You should recognize when you are looking at an iterator or the Ruby block syntax. Eventually, you\u2019ll recognize more exotic Ruby formulations such as the lambda. It is okay if you can\u2019t write a lambda function or even know when to use one; many Rails developers start work before learning Ruby thoroughly. By all means, if you love the precision and order of programming languages, dive into the study of Ruby from the beginning. It\u2019s good advice, just not for everyone. If you\u2019ve got the time and inclination, get started with these recommended books and videos before you read Book Two. If you can, study them at the same time you work on the project in Book Two. At the very least, look at these resources after you finish Book Two and before you start another tutorial. You\u2019ll be glad you did.","title":"13.1 Ruby Language Literacy"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#132-resources-for-learning-ruby","text":"","title":"13.2 Resources for Learning Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1321-collaborative-learning","text":"The best way to learn Ruby is to actually use it. That\u2019s the concept behind this site: Exercism.io With Exercism, you\u2019ll work though code exercises and get feedback from other learners.","title":"13.2.1 Collaborative Learning"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1322-online-tutorials","text":"TryRuby.org - free browser-based interactive tutorial from Code School Codecademy Ruby Track - free browser-based interactive tutorials from Codecademy Ruby Koans - free browser-based interactive exercises from Jim Weirich and Joe O\u2019Brien Ruby in 100 Minutes - free tutorial from JumpstartLab Code Like This - free tutorials by Alex Chaffee RailsBridge Ruby - basic introduction to Ruby CodeSchool Ruby Track - instructional videos with in-browser coding exercises","title":"13.2.2 Online Tutorials"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1323-books","text":"Learn To Program - free ebook by Chris Pine Learn To Program - expanded $18.50 ebook by Chris Pine Learn Ruby the Hard Way - free from Zed Shaw and Rob Sobers Beginning Ruby - by Peter Cooper Programming Ruby - by Dave Thomas, Andy Hunt, and Chad Fowler Eloquent Ruby - by Russ Olsen Books by Avdi Grimm , including Confident Ruby and Objects on Rails .","title":"13.2.3 Books"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1324-newsletters","text":"Practicing Ruby - over 90 helpful articles on Ruby RubySteps - weekly lessons by email from Pat Maddox","title":"13.2.4 Newsletters"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1325-screencasts","text":"RubyTapas - $9/month for access to over 100 screencasts on Ruby","title":"13.2.5 Screencasts"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-14-crossing-the-chasm","text":"In my books, you learn how programming is actually done in practice. In this book, you learn about the culture of Rails beyond the code. In Book Two, you\u2019ll follow step-by-step instructions to build and deploy a real Rails application. This chapter is here to help you surmount the problems that come after you finish my books. You can wait and read it later, after you\u2019ve built applications using tutorials, or you can read it now and learn to overcome the challenges you\u2019ll face when you are done reading tutorials. What comes next partly depends on your goals. You may be eager to launch a startup, you may want a job as a developer, or you may have a project to tackle at work or in your spare time. Whatever you choose to do, you\u2019ll face the challenge of building an application without instructions. Here I\u2019ll give you ideas about overcoming that challenge.","title":"Chapter 14 Crossing the Chasm"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#141-facing-the-gap","text":"There\u2019s a name for the obstacle that lies in wait for beginners who teach themselves to code by following a tutorial. I call it the \u201ctutorial gap.\u201d It\u2019s the yawning chasm you face when it is time to build a custom application of your own. Even though you\u2019ve just built and deployed a working application, the moment you are without instructions, the chasm will open wide. You\u2019ll feel it most acutely when you realize you don\u2019t know where to start. Should you search for a gem? Should you start by building a view, a model, or a controller? Should you do test-first development and write a test? What should you test if you don\u2019t know where to start? A similar problem lies in wait for beginners the first day on the job. You\u2019ll hear it called the \u201cjunior gap.\u201d The term refers to the chasm between the time a developer is hired and becomes a \u201cjunior dev.\u201d A \u201cjunior dev\u201d is a team member who is more-or-less self-sufficient, learning new skills without being a burden for other developers, and able to contribute to a company at a level that increases team productivity. Whether self-taught, hired after graduation from a university, or from a 9 or 12 week code camp, new staff members seldom have the skills to be fully productive members of a team. Your success at a new job depends on how quickly you overcome the junior gap. The \u201ctutorial gap\u201d and the \u201cjunior gap\u201d are versions of the same chasm. You\u2019ll cross the chasm each time you build an application. The more applications you build, the narrower the chasm becomes, and the less help you need, until you\u2019ve crossed the chasm so many times that panic is replaced by delight when someone asks you to implement something you\u2019ve never encountered before. That\u2019s the point when you\u2019ve become a self-sufficient and productive developer. If you assume that becoming a successful developer depends on acquiring technical skills, the chasm may thwart you. The chasm cannot be crossed with technical knowledge, no matter how much you learn about Ruby, Rails, JavaScript or any other technology. Crossing the chasm requires \u201csoft skills,\u201d including cultivating your own problem-solving abilities, and realizing that software development is fundamentally a social activity. In this chapter, I\u2019m going to describe two ways to cross the chasm. First, I\u2019ll give you a technique to jump start work on a custom application. It\u2019s a strategy that will enhance your problem-solving abilities. After that I\u2019ll suggest how to get help from a mentor, focusing on the social practice that is at the heart of software development.","title":"14.1 Facing the Gap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#142-bridging-the-gap-with-a-strategy","text":"When you start work on a custom application, you\u2019re like a writer who has to write an essay and faces a blank screen. If you\u2019ve been taught to write an essay, you probably learned to make an outline and start with a topic sentence or introductory statement. Not every writer starts that way, but it\u2019s a strategy to get started. You can use a similar strategy to get started with custom application development. Here\u2019s a process you can use: Ask: Why will someone want to use your application? Write a product description. Ask: What will a visitor first see and do? Write a user story for the home page. If you like to think visually, create wireframes for some of the important features. Create user stories for some of the important features. Generate a starter application with rails new or Rails Composer . Pick any user story. Make a static page using HTML to mock up what the user will see. Write a feature test to verify the content on your static page. This is your first code. Create a model. Use the model to set a variable containing some string from the static page. Create a controller. Give it the same name as the model. Create a route for the controller. Replace the static page with a dynamic page. Use the controller to set an instance variable and render a view. Does your feature test still pass? Modify your feature test if necessary. Ask: How will data displayed on the page get into the model? From a third-party API? A user-submitted form? Replace the hard-coded string in the model with dynamic data obtained from a user or an API. Check your feature test. Does it still pass? Do you need to change the test to use the model? Ask: Have you implemented the user story? Do you need to revise the user story? Commit your work to Git. Then throw it away if you\u2019re not satisfied. You can always \u201cdo over\u201d later. Ask: Is there another user story you can implement? Get started again. You may have to repeat this process many times before you have something you can keep. Each time, you will discover what you don\u2019t know. Perhaps you haven\u2019t expressed a user story well and you need to rethink your feature. Or you\u2019ve reached the limit of your technical knowledge and you need to do some research and further study. Each time you repeat this process you are practicing crossing the chasm. Not every writer starts an essay the same way, and not every developer will use the strategy detailed above. If you\u2019ve ever faced writers\u2019 block, you may have heard this advice from teachers: Write something, anything, just to get started. It\u2019s the same with software code: Just begin, anywhere. If you follow the strategy described above, you\u2019ll have a place to get started. It is a process you can repeat when you start any application. If you need more help, see the book Practicing Rails by Justin Weiss, which provides advice and exercises to overcome the tutorial gap.","title":"14.2 Bridging the Gap With a Strategy"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#143-bridging-the-gap-with-social-practice","text":"Let\u2019s consider the social aspect of software development. If you work on your own, trying to master the art of software development, it will take you a very long time, you\u2019ll need extraordinary patience and tenacity, and you won\u2019t become a very good software developer. To accelerate the process, and improve your skill, you must reach out to others. If you\u2019re shy and introverted, this will be hard; if you\u2019re bossy or reluctant to reveal your shortcomings, it may also be difficult. However, you must make the effort if you want to cross the chasm. Software development often looks like a solo activity but it is not. Developers talk to users to improve the user interface and product features. Open source libraries, whether gems or full frameworks like Rails, are developed collaboratively. Code reviews are an opportunity to ask others to help you improve your implementation. Pairing is an intense and effective way to write better code and share knowledge. You\u2019ll learn more, and faster, from both experienced developers and inexperienced peers, when you work with others.","title":"14.3 Bridging the Gap With Social Practice"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1431-making-an-effort","text":"It is important to have a strategy to get started on your own, as described above. You must make an initial effort, even if picking yourself up by your bootstraps doesn\u2019t get you very far. No one, particularly software developers, wants to help someone who can\u2019t show they\u2019ve made a best effort on their own. You may surprise yourself when you make an initial effort; you\u2019ll find out what you know and identify what you need to learn. Start a list of topics you need to research or questions you need to answer. Do research. If no clear answer emerges, list the possibilities and show them to someone else. Even if you think you\u2019ve found the answer on Stack Overflow or a blog, show someone your initial problem and the solution you\u2019ve found. Find out if your colleague agrees or has another perspective. Showing someone your research shows you\u2019ve made an effort and it will make it easier to ask for help when research doesn\u2019t provide a solution. (Refer to the \u201cGet Help When You Need It\u201d chapter if you\u2019re not sure where to do research.)","title":"14.3.1 Making an Effort"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1432-conversation-starters","text":"You can ask people to answer questions online, on Stack Overflow , Reddit , Quora , mailing lists, forums, IRC channels, or even by directly sending email to developers. This counts as social activity but it is inherently limited. Open-ended interaction is better, either in person or through video chat. Prime the pump with to-the-point questions, as you would on Stack Overflow, but allow the conversation to meander. Make sure your conversation includes conversation helpers like these: What do you think? How would you do this? Is there a better way? What do you think I should look at next? Ask the kind of questions that elicit opinions that you can\u2019t ask on Stack Overflow. Never forget to acknowledge the gift you\u2019re receiving of time and knowledge. Express your thanks, state clearly how the conversation has benefited you, and offer to report back on how the collaboration has helped your progress.","title":"14.3.2 Conversation Starters"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1433-pay-it-forward","text":"Don\u2019t be shy about asking for help. If you\u2019ve made a best effort to solve a problem on your own, and you\u2019re willing to help others in the future, you\u2019ll get all the help you need, and more. There\u2019s an unwritten rule of the open source movement. It applies whenever you ask a stranger for help, whether opening an issue on GitHub or asking for help with a project. You are not entitled to anything , whether its software code, a bug fix, or just help, if you\u2019re only consuming . Open source is free for the taking but you\u2019re not welcome if you\u2019re a mooch. Luckily for all of us, causality rules do not apply (or at least there\u2019s no temporal causality). That means, if you contribute something in the future, help will be forthcoming, sometimes more profusely than you\u2019ve asked for. You must contribute in kind, of course. If you offer to pay money to have a bug fixed, you\u2019re violating the spirit of open source, and you can expect either grumpiness, a hefty consulting fee, or both. If you indicate you\u2019re willing to help with documentation or code, you\u2019ll be welcomed even if you\u2019re currently incapable of contributing. This applies in an interesting way to beginners. If you show you\u2019ve tried to solve a problem on your own, and ask for help, many developers will help without any compensation other than the conviction that someday you\u2019ll help someone in a similar situation. Software development relies on a booming pay it forward economy.","title":"14.3.3 Pay It Forward"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#144-finding-a-mentor","text":"Now that you\u2019ve given some thought to the social aspect of software development, let\u2019s consider where to go for help. When career advisors talk about closing the junior gap, they\u2019ll often point to the importance of mentorship as the key element in becoming a skilled software developer. It\u2019s just as important when you\u2019re developing software for a startup or a personal project. Mentorship will help you cross the chasm. You may ask, how can I find a mentor? In your mind\u2019s eye, you may be imagining the mentor that will help you become a skilled Rails developer. He or she is a few years older than yourself, has a great job leading a team at a successful startup, probably contributes to several well-known open source gems, and takes a break every Saturday for a few hours to teach you how to code. Sorry, that is not likely to happen. The mentors who will help you will not fit the picture of a wise sage or crone, no more than Prince Charming or Princess Buttercup will ever be anyone\u2019s spouse. In most situations, the mentorship relationship will be unacknowledged. The seeds of mentorship lie in any interaction where you ask for help and receive guidance. Mentorship is a relationship you must cultivate, much like friendship. And, like friendship, you will seldom ever ask someone to be your mentor. Most people would balk at the awkwardness, either because they don\u2019t see themselves as qualified, or because it suggests an open-ended commitment and responsibility that is intrusive. Like making new friends, it is your job to seek out mentoring moments, ensure the experience is mutually rewarding, and suggest the possibility of repeating the experience. Mentorship is a relationship built from a series of successful mentoring interactions. Repeat the interactions and you have mentorship.","title":"14.4 Finding a Mentor"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#145-creating-mentorship-moments","text":"In the chapter \u201cGet Help When You Need It,\u201d you learned where to look for help. Let\u2019s consider where you can look for opportunities to experience mentorship moments.","title":"14.5 Creating Mentorship Moments"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1451-online","text":"When you ask for help on Stack Overflow , Reddit , or Quora , the answers will be most useful when you focus narrowly on a specific question. Mentorship comes from open-ended interaction, when a conversation can move in unanticipated directions, so most online interactions seldom turn into mentorship moments. Online interactions may help you find people who can coach you. Clicking on a user\u2019s name on a site such as Stack Overflow, Reddit, or Quora will show you a user\u2019s profile. When someone is helpful or knowledgeable, check if they show their geographic location in their profile. If they don\u2019t, perhaps they\u2019ve provided a link to their website or Twitter account. If not, you may be able to send a private message. Reach out and ask where they are located, if they have time to meet to answer more questions, or can suggest anyone in your city who might be helpful. It is worth checking to see if someone is local even though most people online are not nearby.","title":"14.5.1 Online"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1452-github","text":"GitHub is a special case. Interactions on GitHub are at the core of the Rails community. It\u2019s where open source software gets built. Collaboration on GitHub leads to mentorship, friendships, and business partnerships. That\u2019s why it is so important to build a credible GitHub profile by uploading the projects you build while learning, to show that you are working steadily at becoming a better programmer. When you look at a repository on GitHub, look at the account of the person who maintains the project. Look at the commits and the issues. Click through to the profiles of the people who\u2019ve made the commits or commented on the issues. Experienced developers often show their location in their profile and provide their email address. If you find someone in your city, make contact. Of course, don\u2019t ask a stranger point-blank to be a mentor! Tell them about your experience and what interests you. Ask where you can meet developers locally. You may learn about a meetup or user group meeting. If your contact is helpful, you may have an opportunity to meet for coffee.","title":"14.5.2 GitHub"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1453-meetups","text":"Meetups are a prime place to cultivate in-person mentorship moments. All large metro areas have active meetups for web developers, Rails developers, programmers, or startup entrepreneurs. If you\u2019re in a rural area, make the drive once a month to the big city to connect with the community. To find the meetups, search Meetup.com or google \u201cruby rails (my city)\u201d. If you\u2019re near a university campus, check for activity on the campus. If you\u2019re in a tech hub such as San Francisco, there\u2019s a meetup almost every night of the week. Smaller cities have relevant meetups monthly. If you can\u2019t find a meetup, start one! When you visit a meetup, remember that mentorship can be hidden in anyone. Like any public event, you\u2019ll meet people who are flakey, bigoted, garrulous, prone to halitosis or innumerable personality quirks, as well as a minority who are fascinating and obviously knowledgeable. Don\u2019t dismiss anyone. You\u2019ll find mentorship moments where you least expect them.","title":"14.5.3 Meetups"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1454-workshops-and-classes","text":"You may be surprised that workshops and classes are not the ideal place to find a mentor. Obviously, given a good instructor and a relevant curriculum, a workshop or class is a great place to learn. However, it is very unlikely that a teacher will become an ongoing mentor. The instructor\u2019s goal is to share knowledge with a group of people, so any focus on you as an individual has to be limited. Furthermore, the instructor is probably not available outside of the class or on an ongoing basis. Don\u2019t sign up for a class hoping the instructor will become your mentor. However, a workshop or class is an ideal place to connect with peers. There is no other place where you\u2019ll easily find other people who want to learn the same things as you. When I teach, I\u2019m surprised how often people come to a class expecting their education will end as soon as the class is over. If you take a class, seize the opportunity to make one new friend who will be your study partner after the class ends. Better yet, organize a study group to continue after the class is over. If you have only one new study partner, he or she can flake out. Instead, get together with three or four other learners once a week. Support each other, share your excitement, and invite mentors to come speak to your study group. Peer learning has much in common with mentorship. The leading code camps recognize that collaborative problem-solving skills are as important as technical skills. When students team up to work through exercises or build applications, there\u2019s a natural give-and-take as each takes turns making discoveries and sharing knowledge. You don\u2019t have to enroll in code camp to be part of a peer learning environment; you can create it yourself in a study group. This isn\u2019t a relationship of mentorship, but it is an opportunity to experience mentorship moments.","title":"14.5.4 Workshops and Classes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1455-on-the-job","text":"You are most likely to find a commitment to mentorship on the job. If you\u2019ve been hired to work as a Rails developer, at a company with Rails developers on the team, you\u2019re in an ideal environment to learn. Not everyone has the skills to be a good mentor and you may struggle if you are stuck with a senior developer who is a know-it-all or assumes you know more than you do. Still, you have immediate access to developers with knowledge and the company has every reason to encourage you to learn. Unless the company has an explicit program to assign coaches to new hires, you will probably not call someone your mentor. Instead, recognize that you can cultivate mentorship moments by asking for guidance beyond the immediate assignment. In a stressful environment where your team is delivering code against deadlines, not everyone may be able to devote time to teaching. You should seek mentorship moments where you can. Some companies are committed to building a culture of mentorship. When you are looking for a job, make it your priority to seek a job offer from companies where you will find mentors. For a first job as a developer, the opportunity to learn on the job is far more valuable than any other benefits. When you interview, ask if the company encourages pair programming. Ask if you will have time to work on a pet project to learn new skills, and if it will be acceptable to ask your teammates to answer questions or provide a code review for your pet project. Ask if the company encourages team presentations about new technologies. Ask if anyone from the company volunteers to teach at workshops or gives presentations at meetups or conferences. Some hiring managers will be proud to describe the company\u2019s commitment to developer education. If they\u2019re not, it\u2019s a red flag that the company may not be a good fit for you. Small startups are not a good place to look for mentorship, if the runway is short and the founders are trying to launch before funding runs out. Companies that have closed a Series A round (the first release of stock to venture capital firms and other private equity investors) will still be tightly focused on getting a product to market, with no time to coach new hires. As a company takes additional rounds of investment, beyond the Series B round, the company will have grown beyond an initial two or three engineers and may recognize the value of hiring and coaching inexperienced developers. To some companies, mentorship is part of a strategy to develop their technical depth. These are the companies that are ideal for new developers.","title":"14.5.5 On the Job"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#146-whats-next","text":"If your goal is to start a career as a Rails developer, your objective should be to find a job at company that is committed to mentorship. You\u2019ll need to learn more than what is offered in this book and the next, but you can continue learning while you \u201cgo social\u201d to cultivate mentorship moments and meet people who can introduce you to companies that are hiring Rails developers. Going to meetups, collaborating on code, and participating in a study group will help you find mentors and help you find a job. If you are eager to launch a startup, or plan to work on a personal project, your next step will be different. Let\u2019s consider what you should do after finishing this book if you\u2019re an entrepreneur, developing a lifestyle business, or working on a personal \u201cside project.\u201d","title":"14.6 What\u2019s Next"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1461-entrepreneurs","text":"If you want to launch a startup, stop and ask yourself what your priorities should be. Startup success depends on asking yourself every day, \u201cWhat is the most important task I need to accomplish today?\u201d Chances are, it is not learning to code. Working through my books, you\u2019ll learn enough to work with a skilled developer, whether a cofounder, an employee, or contractors. Your most important task is to determine the product/market fit for your business idea. You must develop a Minimum Viable Product (MVP) and start the process of acquiring customers who can tell you if your product has value. Anything else defers the day of judgment when real customers will tell you whether they are willing to spend money on your product. If you are pursuing your own business vision, you\u2019ll only delay judgment day if your priority is to learn Rails. If you haven\u2019t already, start looking for a technical cofounder or people you can hire (if you have your own funds). Angel investors and venture capitalists are reluctant to fund a solo founder, even when an entrepreneur is highly skilled technically. Investors place more importance on the ability and track record of the team than on a business idea; obviously, a skilled team is a better investment risk than a solo founder who just started learning Rails. In today\u2019s investment climate, you won\u2019t be seeking investment if you don\u2019t yet have an MVP and customer traction. But you should start recruiting your team. The good news is that you\u2019ve learned enough about web development to have credibility when approaching a potential technical cofounder. Among developers, there is no one more ridiculed than the non-technical founder who makes no effort to learn to code and expects someone else to do all the technical work. You\u2019re not that guy or girl. You could build your web application yourself, given enough time. But in the best interests of your business, you should look for a partner who will be your technical mentor, guide, and helpmate as you become a better coder and build out your MVP. You can seek a technical cofounder in the same way you seek mentorship moments. Your agenda will be larger; anyone who is a mentor or peer may be a potential business partner. Look for help to improve your technical proficiency. As you build a personal relationship with a mentor or peer, you may have an opportunity to introduce someone to your business vision. It is very unlikely you can build a business on your own, so start looking for a partner while you continue to learn to code and develop your MVP. You won\u2019t be having meetings with potential partners every day. On days when you are not looking for a partner, work on the user stories that will define the requirements for your MVP. You don\u2019t need anything more than you\u2019ve learned in this book to develop your user stories and plan your product. Work on wireframes and show your ideas to anyone who will listen. Take a break from product planning to work on your coding skills. Try tackling one or two user stories and see if you can implement a basic feature you need for your MVP. There\u2019s no better way to learn to code than building the product that you need for your business, especially if you get help and feedback along the way.","title":"14.6.1 Entrepreneurs"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1462-lifestyle-businesses-and-personal-projects","text":"Don\u2019t let anyone discourage you if you have an idea for a web application that will supplement your earnings from a job, or even let you quit your job to enjoy a \u201clifestyle.\u201d The investment community disdains lifestyle businesses that have limited \u201cupside\u201d (the revenue growth that rewards investors). Personally, I think lifestyle businesses are great. Without the pressure from investors, and with income from an existing job, you can take your time to learn to code, enjoying the process of learning application development with your goal in mind. It is still worthwhile to seek out a mentor, but you can continue to pursue learning on your own with all the resources we list in the next chapter. Personal projects can become lifestyle businesses when they begin to generate revenue. Of course, there are many personal projects that are not intended to be moneymakers, for example, a web application for a faith group or a charity, or just a side project that helps you learn to code. Again, seek mentorship moments, or work in a group that learns together, and you\u2019ll develop your skills faster. Play around with user stories and wireframes to see if it helps you organize your project. Try writing feature tests. You may not need to write tests for a personal project but you may discover a feeling of competence and confidence that goes with testing. With a personal project, the journey is the reward. Indulge in the luxury of learning for its own sake and focus on the satisfaction of seeing applications run that you\u2019ve built with technologies that are new to you.","title":"14.6.2 Lifestyle Businesses and Personal Projects"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#147-build-applications","text":"If you want to become a skilled Rails developer, nothing is more important than building applications. As you\u2019ll see in the next chapter, there is so much to learn about web application development that you can (and likely will) continue to learn until the web goes dark. Don\u2019t try to learn it all. Start building applications now. Building applications puts everything you learn in practical context. The features you want to build will set the priorities for what you learn next. If you want users to sign in to an application, you\u2019ll learn about authentication. If you want want to show stock prices or sports scores, you\u2019ll learn about JavaScript and charts. There\u2019s no better way to learn than by building. Build simple applications at first, with only one small feature. Take them all the way from user stories to deployment. Use Rails Composer if you want to get started fast so you can focus on your custom features. Commit your projects to your GitHub account, no matter how trivial or broken. Putting your projects on GitHub will show that are working hard and gaining experience. If you\u2019re going on job interviews, employers probably won\u2019t have time to look at your GitHub account, but you\u2019ll gain points in a job interview if you can point to a GitHub repository to show something you\u2019ve built, or when you answer a question like, \u201cWhat is the hardest problem you\u2019ve had to solve?\u201d Some beginners set a goal, such as building one new application every week. That\u2019s a great plan. When your applications get more complex, they will make take more than a week to build, but keep on building. If you don\u2019t have any ideas for what to build, ask for ideas on Reddit or Quora and the indefatigable commenters will gladly answer. At a minimum, you should build (and thoroughly understand) each of the starter applications you can build with Rails Composer . With every application you build, the chasm of the \u201ctutorial gap\u201d will narrow and you will broaden your ability to tackle unfamiliar problems and challenges. In the next chapter, we\u2019ll consider specific technical skills and I\u2019ll make recommendations for books and tutorials that will increase your technical proficiency,","title":"14.7 Build Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-15-level-up","text":"With this book, you\u2019re on the way to becoming a successful Rails developer. You\u2019ve learned about basic concepts and discovered where to go for help. But there\u2019s much more to learn about Rails and web application development. This chapter will suggest the next steps on your path to learning Rails.","title":"Chapter 15 Level Up"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#151-what-to-learn-next","text":"In Book Two, you\u2019ll build a simple web application. It will cover the basics: Rails directory structure using Git installing gems configuring an application the request-response cycle model-view-controller architecture application layout and views front-end frameworks forms sending mail connecting to external services deploying an application analytics for traffic and usage In addition, you\u2019ll get an introduction to the Ruby language and the basics of testing. Visit tutorials.railsapps.org to learn how to get Book Two. Here are topics you should study after Book Two: Databases Testing Sessions and Authentication Authorization JavaScript I\u2019ll explain each topic and suggest where to learn more.","title":"15.1 What to Learn Next"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1511-databases","text":"Book Two will explain how to create a model, a software object that represents data in a database. When you create a model, you create an object that handles data only for the brief life of the request-response cycle, when it is active in a computer\u2019s working memory. You\u2019ll want data to persist beyond the brief request-response cycle, after objects disappear from working memory. Rails does not include a built-in database. It offers the flexibility of using several different industrial-grade database systems. Relational database management systems such as SQLite , PostgreSQL , MySQL , and Oracle all use Structured Query Language (SQL) as an interface to store and retrieve data. These databases run separately from a web application, requiring their own database servers. Rails provides a component, named Active Record , that connects to these database servers. Active Record is a framework for Object-Relational Mapping (ORM), connecting application models to database tables in a relational database management system (DBMS). Active Record makes it possible to save model data as a record in an external database, preserving complex relationships among the data. Application development would be easy if we could just use spreadsheets to save our data. However, some data, such as a document, is too large to fit in the columns and rows of a spreadsheet. More significantly, database management systems are designed to accommodate relationships among the data. That\u2019s why they are called relational database management systems. For example, an ecommerce application might have a Customer model and an Order model. Active Record allows developers to use the Rails API to describe associations among models and interact with a database. For example, you can make sure that an order is not created unless it is associated with a customer. Additionally, Active Record provides a query interface. You can use the query interface to find all orders associated with a particular customer.","title":"15.1.1 Databases"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#where-to-learn","text":"For a focused, fast introduction to Rails and databases, you should read the book: Easy Active Record for Rails Developers by Jason Gilmore ($29 USD) It is my recommended follow-on to learn more about databases.","title":"Where to Learn"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1512-testing","text":"You learned about the basic concepts and terminology of testing in Book Two. If you\u2019re working on a personal project or your own startup, you can learn more about Minitest to gain the skill you need to write robust tests. If you expect to work with other Rails developers professionally, you\u2019ll need to learn to use RSpec for testing.","title":"15.1.2 Testing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#where-to-learn_1","text":"Every intermediate-level Rails book talks about testing, without any introduction to the terminology and concepts of testing. Review the \u201cTesting\u201d chapter in Book Two, then learn to set up and use RSpec with a tutorial I\u2019ve written, The RSpec Tutorial , which is part of the Capstone Rails Tutorials series. To learn more about RSpec, read these two excellent books: Everyday Rails Testing with RSpec by Aaron Sumner ($19 USD) Rails 4 Test Prescriptions by Noel Rappin ($25 USD) You don\u2019t have to read these books immediately, but be sure to add them to your reading list.","title":"Where to Learn"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1513-authentication-and-sessions","text":"Most web applications need a way for users to sign in, permitting access to some features of the application only for signed-in users. The popular gem Devise is used to add authentication for users who register with an email address and password. OmniAuth is a gem for authentication using a service such as Facebook, Twitter, or GitHub. Most Rails developers will use these gems because they are robust and well-tested. To understand how authentication works, you\u2019ll need to learn about sessions in a web application. The web, as originally built, was stateless . A server simply responded to a request by delivering a file. To enable ecommerce applications, cookies were adopted in 1997 as a way to preserve state. Each time the browser makes a request, it will send a cookie. A web application will check the value of the cookie and, if the value remains the same, the application will recognize the requests as a sequence of actions or a session . A session begins with the first request from a browser to a web application and continues until the browser is closed. Cookie-based sessions give us a way to manage data through multiple browser requests. Rails does all the work of setting up an encrypted, tamperproof session. The data we most often want to persist throughout a session is an object that represents the user.","title":"15.1.3 Authentication and Sessions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#where-to-learn_2","text":"To get started quickly with either Devise or OmniAuth, I\u2019ve written two tutorials which are part of the Capstone Rails Tutorials series: Devise Quickstart Guide OmniAuth Tutorial As a learning exercise, it is worthwhile to build authentication from scratch without Devise or OmniAuth. Michael Hartl\u2019s popular book shows how to build authentication from scratch: Ruby on Rails Tutorial by Michael Hartl (free online)","title":"Where to Learn"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1514-authorization","text":"We use authentication to verify a user\u2019s registered identity, so we know the person signing in is the same person who signed up earlier. We use authorization to limit access to pages of a web application. Authorization is typically restricted by role, so users are assigned roles with differing access privileges. In the simplest implementation, we check if a user has a specific role (such as administrator) and either allow access or redirect with an \u201cAccess Denied\u201d message. Roles are attributes associated with a user account, and often implemented in a User model. There are no standard conventions for implementing roles and authorization in Rails. Developers often implement roles from scratch and use gems such as Pundit or CanCanCan to implement authorization. For most web applications, you\u2019ll need to learn how to implement roles and authorization.","title":"15.1.4 Authorization"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#where-to-learn_3","text":"To learn about authorization, start with a free article I\u2019ve written on Rails Authorization . I\u2019ve also written two tutorials which are part of the Capstone Rails Tutorials series: Role-Based Authorization Pundit Quickstart Guide These tutorials explain the code from the rails-devise-roles and rails-devise-pundit example applications, which you can generate with Rails Composer as starter applications.","title":"Where to Learn"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1515-javascript","text":"JavaScript is a general-purpose programming language (like Ruby). It is the language used to manipulate web pages within a browser. Every web developer needs to know JavaScript. For a Rails application, you might develop application features such as auto-complete search forms using a combination of jQuery and AJAX techniques. For more sophisticated web applications, such as a single-page application (SPA) that loads in the browser as a single web page and offers a fluid user experience similar to a desktop application, you\u2019ll need to learn to use a JavaScript framework such as Ember.js , AngularJS , React , or Backbone.js . If you intend to specialize as a front-end developer, focusing on user interaction and the browser interface, you\u2019ll need to become an expert in JavaScript.","title":"15.1.5 JavaScript"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#where-to-learn_4","text":"There are many resources for JavaScript, more than for learning Ruby or Rails. Here are good curriculum guides: Learn JavaScript by Mozilla The Odin Project: JavaScript and jQuery The JavaScript course from Codecademy is universally recommended, as is the book Eloquent JavaScript .","title":"Where to Learn"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1516-other-topics","text":"There is much more to learn before you gain full proficiency as a Rails developer. Here\u2019s an illustration: Figure 15.1: Rails Competencies. The graphic above is from a blog post, This is Why Learning Rails is Hard , by Brook Riggio of the Code Fellows code camp in Seattle. You can see the graphic in detail . The first time I saw it, I felt despair. It is a mind map of all the topics a skilled developer should know. The branches on the right side are topics that are specific to Rails, as well as general skills required of a Rails developer, such as Git, the Ruby language, and software engineering competencies. The branches on the left are general areas of knowledge that would be understood by any web developer, such as the Unix command line, web fundamentals, deployment, testing, and SQL. Brook Riggio says, \u201cIf this looks intimidating to you, you\u2019re not alone\u2026. Learning Rails is hard because there are many independent concepts to learn.\u201d I recommend you spend half an hour each day googling each topic listed on Brook Riggio\u2019s map. In three months, you\u2019ll have a \u201cbig picture\u201d of the knowledge areas that are important to a Rails developer. You can\u2019t learn everything at once, so dive further into the topics that interest you. As you tackle new projects, you\u2019ll learn more, and you\u2019ll add depth to your understanding of each topic on the map.","title":"15.1.6 Other Topics"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1517-curriculum-guides","text":"Brook Riggio\u2019s map gives you a list of topics for learning. But it is helpful to tackle the topics in a sequence that makes sense. You\u2019ll also need recommendations for the best learning materials. For a curriculum that organizes the topics you need to become a web developer, I recommend: The Odin Project It is a unique community-driven curriculum, organized by Erik Trautman, the founder of Viking Code School , that gives you a roadmap of what to learn, and where to learn it.","title":"15.1.7 Curriculum Guides"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#152-places-to-learn","text":"What\u2019s your preferred learning mode? Books, classrooms, videos, online courses? I guess you\u2019re comfortable with books, so I\u2019ll recommend the best ones for further study. But first let\u2019s consider other modes of learning.","title":"15.2 Places to Learn"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1521-code-camps","text":"Starting in New York City with General Assembly in 2011, and Dev Bootcamp in San Francisco in 2012, the market for developer education has been booming. Right now, in San Francisco, there are a dozen organizations offering immersive code camps, and dozens more in large cities worldwide. These organizations offer eight- to twelve-week courses, priced around $10,000 to $12,000 USD. For a list of code camps, see these websites: Course Report Switch Techendo Reviews Code camps are a great way to become a developer, if you can afford the cost, and intend to recover the cost by finding a high-paying job as a developer. The best code camps create an environment of peer-based learning, where you pair with other students to solve technical problems and build applications, just as you would in the workplace. Code camps also provide relentless pressure to learn, from teachers and peers, but primarily from yourself. The quality and depth of technical knowledge you\u2019ll acquire varies greatly depending on the code camp curriculum and the individual instructors they\u2019ve hired. All code camps provide the motivation and social context for accelerated learning, delivering self-confidence that comes from the encouragement and feedback of teachers and peers. If you don\u2019t have money to pay for code camp, all is not lost. You can teach yourself Rails with books and, with effort, you\u2019ll be good enough to start a web-based business or look for a job. I recommend that you build your self-confidence by developing applications on your own. And certainly, find other learners and study together. Most Rails developers are self-taught, at least within the domain of web application development, so code camps or university programs are wonderful, if you can afford the cost, but not essential.","title":"15.2.1 Code Camps"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1522-other-classrooms","text":"It\u2019s unusual to find a university or community college that offers classes in web development with Rails. In the US, university computer science programs focus on analytical reasoning and the conceptual underpinnings required for advanced research in the field. Some community colleges teach web development but it is difficult for the schools to find experienced Rails instructors, especially given the disparity in salaries between teaching and software engineering. However, universities or community colleges are good places to meet other students and form a study group, to provide social support for learning. Classes taught in the community, often free or low-cost, are surprisingly good places to learn. Teachers and organizers are highly motivated and may be experienced Rails developers giving back to the community. Community-based classes or workshops are often poorly publicized, so you\u2019ll have to search hard for these courses. Women have a good chance of finding peer organizations that teach programming and web development with Rails. Start by looking at the course schedules for these organizations: Rails Girls RailsBridge Girl Develop It Women Who Code These organizations only offer introductory classes, so you\u2019ll have to study on your own for deeper knowledge. Short courses such as weekend workshops are valuable because you can find other students who want to start a study group.","title":"15.2.2 Other Classrooms"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1523-online-courses","text":"It\u2019s no longer necessary to go to a classroom to go to school. Online courses range from online code camps that provide videos and one-on-one coaching, to websites that offer a selection of pre-recorded videos packaged as a course, to MOOCs ( massive open online courses ) offered by consortiums of universities. Chasing the runaway success of classroom-based code camps, you\u2019ll find a number of companies that offer code schools delivered online. Here are a few that combine videos with personal coaching: Flatiron School Online Campus Bloc.io CareerFoundry Code Union Launch School (formerly Tealeaf Academy) The Firehose Project Thinkful Thoughtbot Upcase Viking Code School The online code schools provide some of the benefits, specifically curriculum and coaching, of the classroom-based code camps, at a fraction of the cost. Videos, homework projects, and online mentors can\u2019t reproduce the intense peer-based learning of the classroom code camps. But you don\u2019t have to quit your job or move to a another city. MOOCs provide university-level education online. You can search a database of MOOCs at the Class Central website. I recommend the edX course: CS169.1x Engineering Software as a Service It is a nine week class, it is free, and it is taught four times a year. It is based on a software engineering class taught at the University of California, Berkeley. The professors have written their own textbook to accompany the class, Engineering Software as a Service: An Agile Approach Using Cloud Computing . The class is very worthwhile, if you have the time and it fits your schedule.","title":"15.2.3 Online Courses"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1524-videos","text":"Online code camps and MOOCs provide supervised learning, combining videos with access to coaches or instructors. If you want self-paced study, without access to a coach, you\u2019ll find hundreds of videos online, varying greatly in quality. There\u2019s one big problem with videos: The ones that are easiest to find are often outdated. It is very difficult for producers to revise videos and, as you know, Rails changes often. Michael Hartl, author of the Ruby on Rails Tutorial , a book I recommend, offers screencasts to accompany the book. The cost is $149 USD. Go Rails offers dozens of intermediate and advanced screencasts. Chris Oliver started producing the videos in mid-2014, so they are newer than most Rails screencasts you\u2019ll find on the web. These are task-focused videos, good for supplementing a book or course. Some are free, some are available with a $19 USD subscription. RailsCasts seems to always be recommended by Rails developers, and these screencasts were once among the best ways to learn about Rails. RailsCasts creator Ryan Bates left the community in mid-2013 and, unfortunately, many of the screencasts are no longer current or relevant. Still, they are worth a look. Lynda.com offers a Ruby on Rails 4 Essential Training 12 hour video series at a cost of $25 USD for a monthly subscription. It covers Rails 4.0 and is an adequate introduction at a very low cost. Thoughtbot Upcase , formerly known as ThoughtBot Learn Prime, is a program from the respected ThoughtBot consulting firm that provides videos for $49 USD monthly, with coding exercises and a personal coach at a higher price. You can see the Upcase curriculum for an overview. The program is well-regarded. Code School is famous for its Rails for Zombies course, and the company offers a dozen additional courses that cover both Ruby and Rails. The courses combine instructional videos with in-browser coding exercises at a cost of $29 USD per month. The quality is high, the videos are current, and the company tries to make the topics entertaining. Pragmatic Studio , publishers of many high-quality Rails books, offers a series of 26 videos for $179 USD. The course is a solid introduction to Rails. Baserails.com is a video series, available with a $25 USD monthly subscription, that shows you how to build an application. It\u2019s good if you want practice before building something on your own. One Month Rails is an 8 hour video series aimed at beginners. It\u2019s priced at $99 (though you can find discount codes if you search). If you\u2019ve read Book Two, you should skip One Month Rails and focus on intermediate-level books and courses. Treehouse is a subscription site ($25 USD per month) with a big budget and many course offerings. The courses on Ruby and Rails don\u2019t provide enough depth to take you beyond a beginner level. Tuts+ offers several Rails courses. Some are out of date. Codecademy offers a series of courses that combine videos with interactive quizzes on Ruby and JavaScript . The course on JavaScript is often recommended. However, the format is very much classroom-oriented without practical context. Udemy offers a range of video courses on Ruby and Rails. This is crowd-sourced content (like YouTube) and the quality varies greatly. If you\u2019ve found a great course on Udemy, email me and I\u2019ll list it here in the next version of the book. Skillshare is another source of crowd-sourced video courses. Many offerings on Ruby and Rails are out of date. As you can see from the long list, videos are plentiful. Avoid the old ones.","title":"15.2.4 Videos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1525-books","text":"At the beginning of this chapter, I recommended Easy Active Record for Rails Developers by Jason Gilmore because it is focused on databases and Rails, the next thing you need to study. Other books deserve mention. One book stands out among all: Ruby on Rails Tutorial by Michael Hartl (free online) More Rails developers read, and recommend, Michael Hartl\u2019s book than any other. For you, after reading this book and Easy Active Record for Rails Developers , Michael Hartl\u2019s book will be a review of what you\u2019ve learned. I hope you will breeze through it, given the fundamental concepts you\u2019ve already learned. Two other books on Rails are notable: Agile Web Development with Rails 5 by Sam Ruby The Rails 5 Way by Obie Fernandez Both are dense, comprehensive, and authoritative. In my opinion, you should start building Rails applications before digging into these books. As you begin building applications, dip into any of these books for further explanation and insight. I recommend the book by Justin Weiss, Practicing Rails: Learn Rails Without Being Overwhelmed . The book provides useful technical tips and tricks, such as techniques for debugging, but the focus of the book is overcoming challenges that new developers commonly face. You\u2019ll find advice about keeping up with the Rails community and managing time and motivation when learning Rails, as well as overcoming \u201cthe tutorial gap\u201d to begin building your own applications. Several other books should be on your reading list to improve your skill: Rebuilding Rails by Noah Gibbs. If you like to discover how things work, you\u2019ll gain a deep insight into Rails from Noah Gibbs\u2019s book, as he shows you how to build a framework like Rails from scratch. Practical Object-Oriented Design in Ruby by Sandi Metz. A must-read that teaches the techniques of master programmers. In addition to the books listed here, I recommended several books to help you learn the Ruby programming language at the the end of the chapter, \u201cJust Enough Ruby.\u201d","title":"15.2.5 Books"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#153-a-final-word","text":"Keep in mind the reason you\u2019re here. You\u2019re learning Rails so that you can build applications. I\u2019ve given you a book that is dense with links and recommendations for further resources. I\u2019ve met many students who are overwhelmed with all these resources. Some people postpone building anything because there is so much more to learn. Don\u2019t be that person. Skip everything I\u2019ve recommended in this chapter and just get started building. When you need to learn more, you can come back and dig deeper. Good luck with building the application in Book Two. I hope you like my approach and writing style so that you\u2019ll continue with the Capstone Rails Tutorials .","title":"15.3 A Final Word"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-16-version-notes","text":"If you\u2019ve gotten this book directly from my website, you have the most recent version of the book. If you\u2019ve gotten your copy of the book elsewhere, you may have an older version that doesn\u2019t have the newest updates. You\u2019ll find the version number and release date on the first page of this book (under the book title). Check the learn-rails GitHub repository to find out if you have the newest version of the book. The README page on the GitHub repo always shows the most recent version number for the book and the tutorial application. Here are the changes I\u2019ve made.","title":"Chapter 16 Version Notes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#161-version-400","text":"Version 4.0.0 was released November 25, 2016 Revisions throughout. Fixed broken links. Added links to videos. Removed references to Nitrous.io because Nitrous.io is out of business.","title":"16.1 Version 4.0.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#162-version-300","text":"Version 3.0.0 was released January 14, 2016 Extensive revision throughout the book, and the length of the book increased, so the book is now two books. Book One contains the introductory and self-help chapters and can be read without access to a computer. Book Two contains the step-by-step tutorial and requires use of a computer.","title":"16.2 Version 3.0.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#163-version-222","text":"Version 2.2.2 was released October 30, 2015 In the \u201cFront-End Framework\u201d chapter, updated filename to 1st_load_framework.css.scss from framework_and_overrides.css.scss to reflect a change in the rails_layout gem.","title":"16.3 Version 2.2.2"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#164-version-221","text":"Version 2.2.1 was released September 19, 2015 Updated references to Ruby from version 2.2.0 to 2.2.3. Updated references to Rails 4.2.0 to Rails 4.2.4. Updated Visitor model subscribe method for the new Gibbon 2.0 API. Recommending Cloud9 instead of Nitrous.io because Nitrous.io is no longer free.","title":"16.4 Version 2.2.1"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#165-version-220","text":"Version 2.2.0 was released June 6, 2015 For Amazon customers, added an offer to access the online version or download a PDF at learn-rails.com . Google now requires use of OAuth 2.0 for application access to Google Drive. The implementation is considerably more complex than the previous implementation using a Gmail address and password. I\u2019ve dropped the \u201cSpreadsheet Connection\u201d chapter. Minor clarification in the \u201cLayout and Views\u201d chapter.","title":"16.5 Version 2.2.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#166-version-216","text":"Version 2.1.6 was released March 17, 2015 Remove references to the Thin web server in the \u201cDeploy\u201d chapter. Correct version number for gem \u2019sass-rails\u2019 in various Gemfile listings. Fixes issue 49 and an error \u201cSass::SyntaxError - Invalid CSS\u201d when the Foundation front-end framework is used. In the \u201cTesting\u201d chapter, the file test/integration/home_page_test.rb was missing require \u2019test_helper\u2019 . Updated \u201cRails Composer\u201d chapter to describe new options. Minor improvements and corrections of typos.","title":"16.6 Version 2.1.6"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#167-version-215","text":"Version 2.1.5 was released March 4, 2015 Use the Ruby 1.9 hash syntax in the validates_format_of :email statement. Minor improvements and corrections of typos.","title":"16.7 Version 2.1.5"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#168-version-214","text":"Version 2.1.4 was released January 3, 2015 Updated references to Ruby from version 2.1.5 to 2.2.0. Specify the \u201cv0\u201d version of the google_drive gem in the \u201cSpreadsheet Connection\u201d chapter.","title":"16.8 Version 2.1.4"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#169-version-213","text":"Version 2.1.3 was released December 25, 2014 Updated references to Rails 4.1.8 to Rails 4.2.0.","title":"16.9 Version 2.1.3"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1610-version-212","text":"Version 2.1.2 was released December 4, 2014 Released for sale as a Kindle book on Amazon, with new cover art (same cat, though). RailsApps Tutorials now named the Capstone Rails Tutorials . Updated references to Ruby from version 2.1.3 to 2.1.5. Updated references to Rails 4.1.6 to Rails 4.1.8 (minor releases with bug and security fixes). Removed link to the (now defunct?) Lowdown web application in the \u201cPlan Your Product\u201d chapter. Changes to the \u201cAsynchronous Mailing\u201d section of \u201cSend Mail\u201d chapter to describe Active Job in Rails 4.2. Minor improvements to the \u201cDynamic Home Page,\u201d \u201cDeploy,\u201d \u201cConfigure,\u201d \u201cTroubleshoot,\u201d and \u201cCreate the Application\u201d chapters.","title":"16.10 Version 2.1.2"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1611-version-211","text":"Version 2.1.1 was released October 22, 2014 Minor rewriting for clarity. Updated \u201cPrecompile Assets\u201d section of the \u201cDeploy\u201d chapter. Mentioned explainshell.com in the \u201cGet Started\u201d chapter. Mentioned Zeal as a Linux alternative to Dash . Recommended book Practicing Rails by Justin Weiss.","title":"16.11 Version 2.1.1"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1612-version-210","text":"Version 2.1.0 was released October 12, 2014 Updated references to Ruby from version 2.1.1 to 2.1.3. Updated references to Rails 4.1.1 to Rails 4.1.6 (minor releases with bug and security fixes). Four new chapters: \u201cTesting\u201d \u201cRails Composer\u201d \u201cCrossing the Chasm\u201d \u201cLevel Up\u201d Use ActiveModel instead of the activerecord-tableless gem. In the \u201cConfiguration\u201d chapter, add a note to use spaces (not tabs) in the config/secrets.yml file. Updated \u201cGems\u201d chapter to add a troubleshooting note to the \u201cInstall the Gems\u201d section (about errors with the Nokogiri gem). Added a section on \u201cMultiple Terminal Windows\u201d to the \u201cCreate the Application\u201d chapter. In the \u201cGet Help When You Need It\u201d chapter, updated the list of recommended newsletters, replaced rubypair.com with codermatch.me , and added a section on code review. Removed reference to defunct Rails Development Directory .","title":"16.12 Version 2.1.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1613-version-202","text":"Version 2.0.2 was released May 6, 2014 Updated references to Rails 4.1.0 to Rails 4.1.1 (a minor release with a security fix). For Nitrous.io users, clarify that \u201chttp://localhost:3000/\u201d means the Preview browser window. Update \u201cGems\u201d chapter, section \u201cWhere Do Gems Live?\u201d to add more explanation. Minor change to code in the \u201cMailing List\u201d chapter, setting \u2018mailchimp_api_key\u2019 explicitly when instantiating Gibbon, for easier troubleshooting.","title":"16.13 Version 2.0.2"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1614-version-201","text":"Version 2.0.1 was released April 16, 2014 Minor updates for Rails 4.1.0. Mostly small changes to the \u201cConfigure\u201d and \u201cFront-End Framework\u201d chapters. Added an explanation that, in the config/secrets.yml file, domain_name doesn\u2019t have to be kept secret and set as a Unix environment variable. Added a hint about passwords that use punctuation marks (plus a completely irrelevant note about profanitype). Replaced Rails.application.secrets.gmail_username with Rails.application.secrets.email_provider_username . Also replaced gmail_password with email_provider_password . Just trying to make things a little more generic in case Gmail is not used as a provider. Added a section explaining the horrid details of the config.assets.precompile configuration setting in the config/application.rb file. Please convey my displeasure to those responsible for subjecting beginners to this travesty. In the \u201cDeploy\u201d chapter, restored RAILS_ENV=production rake assets:precompile because Rails 4.1.0 no longer barfs on this. Added resources to the \u201cGet Help When You Need It\u201d chapter. Minor rewriting of the introduction.","title":"16.14 Version 2.0.1"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1615-version-200","text":"Version 2.0.0 was released April 8, 2014 Updated references to Ruby from version 2.1.0 to 2.1.1. Updated the book to Rails 4.1. The application name is no longer used in the config/routes.rb file. Rails 4.1 changes the app/assets/stylesheets/application.css.scss file. Updated the \u201cFront-End Framework\u201d chapter. Also expanded the explanation of the Foundation grid. In Rails 4.1, configuration variables are set in the config/secrets.yml file. The Figaro gem is dropped, along with the config/application.yml file. Updated the \u201cConfigure\u201d chapter and references to configuration variables throughout the book. In the \u201cDeploy\u201d chapter, changed RAILS_ENV=production rake assets:precompile to rake assets:precompile to avoid the error \u201cdatabase configuration does not specify adapter.\u201d Updated \u201cThe Parking Structure\u201d chapter with comments about \u201cFolders of Future Importance\u201d that experienced developers often use: test/ , spec/ , features/ , policies/ , and services/ . Updated the \u201cSpreadsheet Connection\u201d chapter to mention service-oriented architectures (SOA). Extended the section on \u201cLimitations of Metaphors\u201d in the \u201cJust Enough Ruby\u201d chapter to include the example of gender when modeling a person. Minor rewriting for clarity throughout.","title":"16.15 Version 2.0.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1616-version-119","text":"Version 1.19 was released February 1, 2014 Updated the book to use Foundation 5.0. Foundation 5.0.3 was released January 15, 2014 (earlier versions 5.0.1 and 5.0.2 were incompatible with Rails Turbolinks and the Rails asset pipeline). Changed the Gemfile to remove gem \u2019compass-rails\u2019 and replace gem \u2019zurb-foundation\u2019 with gem \u2019foundation-rails\u2019 . Updated a line in the \u201cFront-End Framework\u201d chapter for Foundation 5.0: $ rails generate layout foundation5 --force The files navigation.html.erb and application.html.erb are changed for Foundation 5.0. The Bootstrap front-end framework is now independent of Twitter, so I call it \u201cBootstrap\u201d not \u201cTwitter Bootstrap.\u201d Revised the chapter \u201cJust Enough Ruby\u201d to incorporate suggestions from technical editor Pat Shaughnessy. Revised the chapter \u201cRequest and Response\u201d to incorporate suggestions from technical editor Kirsten Jones. Minor rewriting for clarity throughout.","title":"16.16 Version 1.19"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1617-version-118","text":"Version 1.18 was released January 10, 2014 Updated references to Ruby from version 2.0.0 to 2.1.0. Changed one line in the \u201cFront-End Framework\u201d chapter to accommodate a change in the rails_layout gem version 1.0.1. The command was: $ rails generate layout foundation4 \u2014force Changed to: $ rails generate layout:install foundation4 \u2014force Updated the \u201cConfigure\u201d chapter to add ActionMailer configuration values to the file config/environments/development.rb .","title":"16.17 Version 1.18"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1618-version-117","text":"Version 1.17 was released December 21, 2013 Updated Rails version from 4.0.1 to 4.0.2 . Changed Gemfile to remove gem \u2019compass-rails\u2019, \u2019> 2.0.alpha.0\u2019 and replace it with gem \u2019compass-rails\u2019, \u2019> 1.1.2\u2019 . The 2.0.alpha.0 version was yanked from the RubyGems server. The compass-rails gem is needed for Foundation 4.3. It will not be needed for Foundation 5.0. Changed Gemfile to replace gem \u2019zurb-foundation\u2019 with gem \u2019zurb-foundation\u2019, \u2019> 4.3.2\u2019 . Foundation 5.0 will require gem \u2019foundation-rails\u2019 but we can\u2019t use it until an incompatibility with Turbolinks is resolved. So we will stick with Foundation 4.3.2 for now. Revised code in the \u201cAnalytics\u201d chapter. Using ready page:change instead of page:load to accommodate Turbolinks. Updated the segmentio.js file to use a new tracking script from Segment.io. Updated instructions for setting up Google Analytics tracking on Segment.io. Added concluding paragraphs \u201cMaking Mr. Kadigan Happy\u201d to the \u201cAnalytics\u201d chapter. Minor clarification in the \u201cFront-End Framework\u201d chapter to explain that the navigation bar won\u2019t show a dropdown menu until the next chapter, when we add navigation links. Minor clarification in the \u201cSpreadsheet Connection\u201d chapter to explain that Google may block access if you attempt access from a new and different computer (including Nitrous.io). Added cat names in the \u201cCredits and Comments\u201d chapter. Revised \u201cGetting Help\u201d chapter and added \u201cVersion Notes\u201d chapter. Minor clarifications, plus fixes for various typos and insignificant errors.","title":"16.18 Version 1.17"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#chapter-17-credits-and-comments","text":"Was the book useful to you? Follow @rails_apps on Twitter and tweet some praise. I\u2019d love to know you were helped out by the tutorial. You can find me on Facebook or Google+ . I\u2019m happy to connect if you want to stay in touch. If you\u2019d like to recommend the book to others, the landing page for the book is here: http://learn-rails.com/learn-ruby-on-rails.html I\u2019d love it if you mention the book online, whether it is a blog post, Twitter, Facebook, or online forums. Recommending the book with a link makes it easier for people to find the book.","title":"Chapter 17 Credits and Comments"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#171-credits","text":"The book was created with the encouragement, financial support, and editorial assistance of hundreds of people in the Rails community. Daniel Kehoe wrote the book and implemented the application.","title":"17.1 Credits"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1711-financial-backers","text":"The following individuals provided financial contributions of over $50 to help launch the book. Please join me in thanking them for their encouragement and support. Al Zimmerman, Alan W. Smith, Alberto A. Col\u00f3n Viera, Andrew Terry, Avi Flombaum, Brian Hays, Charles Treece, Dave Doolin, Denzil Villarico, Derek Rockwell, Eito Katagiri, Evan Sparkman, Frank Castle, Fred Dixon, Fred Schoeneman, Gant Laborde, Gardner Monks, Gerard de Brieder, GoodWorksOnEarth.org, Hanspeter Leupin, Harald Lazardzig, Harsh Patel, James Bond, Jared Koumentis, Jason Landry, Jeff Whitmire, Jesse House, Joe Wilmoth Jr., John Shannon, Joost Baaij, Juan Cristobal Pazos, Kathleen Sidenblad, Laird Hayward, Logan Hasson, Ludovic Kuty, Mark Gilbert, Matt Esterly, Mike Gilbert, Niko Roberts, Norman Cohen, Paul Philippov, Robert Nadar, Rogier Hof, Ross Kinney, Ruben Calzadilla, Stephane Moreau, Susan Wilson, Sven Fuchs, Thomas Nitsche, Tom Michel, Youn Shin Kang, Yuen Lock","title":"17.1.1 Financial Backers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1712-editors-and-proofreaders","text":"Dozens of volunteers offered corrections and made suggestions, from fixing typos to advice about organizing the chapters. Alberto Dubois Rib\u00f3, Alex Finnarn, Alex Zielonko, Alexandru Muntean, Alexey Dotokin, Alexey Ershov, Andr\u00e9 Arko, Andreas Basurto, Ben Swee, Brandon Schabel, Cam Skene, Daniella Zimmermann, Dapo Babatunde, Dave Levine, Dave Mox, David Kim, Duany Dreyton Bezerra Sousa, Erik Trautman, Erin Nedza, Flavio Bordoni, Fritz Rodriguez Jr, Hendri Firmana, Ishan Shah, James Hamilton, Jasna Vukovic, Jeremy Schneider, Joanne Daudier, Joel Dezenzio, Jonah Ruiz, Jonathan Lai, Jonathan Miller, Jordan Stone, Joreal Whitfield, Josh Morrow, Joyce Hsu, Julia Mokus, Julie Hamwood, Jutta Frieden, Laura Pierson Wadden, Marc Ignacio, Mark D. Blackwell, Mark Everhart, Michael Wong, Miguel Herrera, Mike Janicki, Miran Omanovic, Neha Jain, Norman Cohen, Oana Sipos, Peter Rangelov, Richard Afolabi, Robin Paul, Roderick Silva, Sakib Ash, Sebastian Lobato Genco, Silvia Obajdin, Stas Su\u0219cov, Stefan Streichsbier, Sven Fuchs, Tam Eastley, Tim Goshinski, Timothy Jones, Tom Connolly, Tom Michel, Tomas Olivares, Verena Brodbeck, Will Schive, William Yorgan, Zachary Davy","title":"17.1.2 Editors and Proofreaders"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#1713-photos","text":"Images provided by the lorempixel.com service are used under the Creative Commons license . Visit the Flickr accounts of the photographers to learn more about their work: photo of a white cat by Tomi Tapio photo of a cat by Steve Garner photo of a cat by Ian Barbour The photo of a fluffy white cat by Tomi Tapio is used in the application.","title":"17.1.3 Photos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20One/#172-comments","text":"I regularly update the book. Your comments and suggestions for improvements are welcome. Feel free to email me directly at [email protected] . Are you stuck with code that won\u2019t work? Stack Overflow provides a question-and-answer forum for readers of this book. Use the tag \u201clearn-ruby-on-rails\u201d or \u201crailsapps\u201d when you post your question. Found a bug in the tutorial application? Please create an issue on GitHub.","title":"17.2 Comments"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/","text":"Learn Ruby on Rails: Book Two - Roy Version 4.2.0, 2 August 2017 Daniel Kehoe Chapter 2 Introduction 2.2 What To Expect 2.2.1 About Book One Here\u2019s what is covered in Book One, in case you missed it. I introduce the basic concepts you\u2019ll need to understand web application development. Chapter 3 Get Help When You Need It 3.3 Getting Help With the Book Let\u2019s consider what to do if you encounter problems as you build the tutorial application in this book. If you are in a classroom, or studying in a group, ask a peer to look at your problem. Most problems are caused by simple typos or formatting errors. Your classmate may see what you overlooked. Stack Overflow provides a question-and-answer forum for readers of this book. As the author of this book, I can\u2019t solve your individual problems or help you directly by email. If I did, I would not have time to create the tutorials and videos that benefit so many people. However, I watch for questions on Stack Overflow. Everyone benefits when solutions are made public. tag your questions on Stack Overflow with railsapps for extra attention If your questions aren\u2019t answered on Stack Overflow, try the Reddit forum: /r/rails I sincerely hope you won\u2019t encounter obstacles as you build the tutorial application. Thousands of beginners have successfully completed the book and, unless a gem has recently changed, you should have no problem. Now let\u2019s consider where to look for help when you are working on your own Rails projects. 3.4 Getting Help With Rails 3.4.1 Video Option Watch the six minute video Get Help with Rails - Insider Tips - YouTube 3.4.2 Where To Go For Help? What will you do when you get stuck? \u201cGoogle it,\u201d of course. But here\u2019s a trick to keep in mind. Google has options under \u201cSearch tools\u201d to show only recent results from the past year. Use it to filter out stale advice that pertains only to older versions of Rails. Stack Overflow is as important as Google for finding answers to programming problems. Stack Overflow answers are often included in Google search results, but you can go directly to Stack Overflow to search for answers to your questions. Like Google, answers from Stack Overflow are helpful if you check carefully to make sure the answers are recent. Also be sure to compare answers to similar questions; the most popular answer is not always the correct answer to your particular problem. Requests for advice (especially anything that provokes opinions) are often rejected on Stack Overflow. Instead, try Reddit for advice or recommendations. You\u2019ll find discussion forums (\u201csubreddits\u201d) devoted to Rails and Ruby . You can also visit the Quora question-and-answer site for topics devoted to Rails and Ruby . 3.5 References Here are suggestions for the most important references. If you feel overwhelmed by all the links, remember that you can use this book to build the tutorial application without any additional resources. Right now, it\u2019s important to know additional help is available when you need it. 3.5.1 RailsGuides The Rails Guides are Rails\u2019s official documentation, written for intermediate-level developers who already have experience writing web applications. The Rails Guides are an excellent reference if you want to check the correct syntax for Rails code. You\u2019ll be able to use the Rails Guides after completing this tutorial. 3.5.2 Cheatsheets Tobias Pfeiffer has created a useful Rails Beginner Cheat Sheet that provides a good overview of Rails syntax and commands. Even better than a cheatsheet, for Mac users, is an application named Dash that offers fingertip access to reference documentation for Ruby, Rails, HTML, CSS, JavaScript, and many other languages and frameworks. I recommend Dash as a tool to look up classes, modules, and methods in Ruby and Rails. Dash is a macOS app; use Zeal on Linux. Dash and Zeal run offline (they don\u2019t need an Internet connection) so you can use them anywhere. Chapter 4 Accounts You May Need You\u2019ll need accounts with four services before you begin building the application in this book. This tutorial will show you how to save your work using GitHub . You can sign up for a GitHub account for free. Every experienced Rails developer has a GitHub account; it is where we collaborate on our code, both commercial and open source projects. We\u2019ll create a form that allows website visitors to \u201copt-in\u201d to a mailing list. You\u2019ll need a MailChimp account, which is free. If you send email to a mailing list, you will find it is useful to have an account with MailChimp or a similar service. We\u2019ll also send email from the application, which will require a SendGrid account. SendGrid is a transactional email service that lets you send email messages efficiently and reliably. SendGrid offers a free account that allows you to send 12,000 messages per month for free. Finally, we\u2019ll deploy the tutorial application to Heroku which provides Rails application hosting. It costs nothing to set up a Heroku account and deploy as many applications as you want. It is the easiest way to deploy a Rails application and most Rails developers use Heroku at some time in their careers. 4.1 GitHub Rails developers use GitHub for collaboration and remote backup of projects. For this tutorial, I suggest you get a free personal GitHub account if you don\u2019t already have one. As a developer, your GitHub account establishes your reputation in the open source community. If you\u2019re seeking a job as a developer, employers will look at your GitHub account. When you work with other developers, they may check to see what you\u2019ve worked on recently. Don\u2019t be reluctant to set up a GitHub account, even if you\u2019re a beginner. It shows you are serious about learning Rails. You\u2019ll be asked to provide a username. This can be a nickname or short version of your real name (for example, your Twitter username). You\u2019ll be asked to provide an email address. It\u2019s very important that you use the same email address for your GitHub account that you use to configure Git locally (there will be more about configuring Git later). If you create a Heroku account to deploy and host your Rails applications, you should use the same email address. After you create your GitHub account, log in and look for the button \u201cEdit Your Profile.\u201d Take a few minutes to add some public information to your account. It is really important to provide your real name and a public email address. Displaying your real name on your GitHub account makes it easy for people to associate you with your work when they meet you in real life, for example at a meetup, a hackathon, or a conference. Providing a public email address makes it possible for other developers to reach you if you ask questions or submit issues. If you can, provide a website address (even just your Twitter or Facebook page). In general, you won\u2019t be exposed to stalkers or spammers (except some recruiters) if you are open about yourself on GitHub. Later I\u2019ll show you how to set up and use Git and GitHub. 4.2 MailChimp This tutorial shows how website visitors can sign up to receive a newsletter provided by a MailChimp mailing list. MailChimp allows you to send up to 12,000 emails/month to a list of 2000 or fewer subscribers for free. There is no cost to set up an account. MailChimp will ask you to provide a website address and company details for your account. These details are included when email messages are sent to your subscribers. If you don\u2019t have your own website, you can enter the URL for your GitHub account for now. Use your own name for a company if you don\u2019t have one. After you have set up a MailChimp account, create a new mailing list where you can collect email addresses of visitors who have asked to subscribe to a newsletter. The MailChimp \u201cLists\u201d page has a button for \u201cCreate List.\u201d The list name and other details are up to you. If you get frustrated with the complex and confusing MailChimp interface, try to remember that the friendly MailChimp monkey is laughing with you, not at you. 4.3 SendGrid Earlier editions of this book showed how to use a Gmail account to send email from the application. Google has taken steps to make Gmail more secure and now it can be difficult to send email from a Rails application using Gmail. This tutorial provides instructions for SendGrid . SendGrid offers a free account that allows you to send 12,000 messages per month for free. Scroll to the bottom of the SendGrid pricing page to see details about the free plan. Click the \u201cTry for Free\u201d link to set up an account. No credit card is needed. Chapter 5 Get Started 5.2 Copying and Pasting Code In the next chapter you\u2019ll begin building a Rails application. You need to get the code from this tutorial into your computer. You could just read and imagine, but really, building a working application is the only way to learn. The most obvious way is to copy and paste from this tutorial into your text editor, assuming you are reading this on your computer (not a tablet or printed pages). It\u2019s a bit tedious and error-prone but you\u2019ll have a good opportunity to examine the code closely. Some students like to type in the code, character by character. If you have patience, it\u2019s a worthwhile approach because you\u2019ll become more familiar with the code than by copying and pasting. Don\u2019t feel shy about copying code; it\u2019s how you will learn. Working programmers spend a lot of time copying code from others. At first, you will copy a lot of code. As you gain proficiency, you will copy code and adapt it, more extensively as you gain confidence and skill. Only when you\u2019ve been working full-time as a coder for months or years will you find yourself writing code from scratch; even then, when you encounter new problems, you will still look for code examples to copy and adapt. 5.4 Try the Terminal Look for the Terminal application in the following places: MacOS: Applications - Utilities - Terminal Linux: Applications - Accessories - Terminal Windows: Taskbar Start Button - Command Prompt On the Mac, search for the macOS Terminal application by pressing the Command-Spacebar combination (which Apple calls \u201cSpotlight Search\u201d) and searching for \u201cTerminal.\u201d The magnifying glass in the upper right corner of your screen will also launch \u201cSpotlight Search.\u201d Or look in the Applications/Utilities/ folder for the Terminal application. You\u2019ll need to click the name of the application to launch the Terminal. For Linux or Windows, The Command Line Crash Course explains how to launch a terminal application . Launch your terminal application now. Try out the terminal application by entering a shell command. $ whoami Don\u2019t type the $ character. The $ character is a cue that you should enter a shell command. This is a longtime convention that indicates you should enter a command in the terminal application or console. The Unix shell command whoami returns your username. Don\u2019t type the $ prompt. You might see: command not found: $ which indicates you typed the $ character by mistake. If you are new to programming, using a text editor and the shell will seem primitive compared to the complexity and sophistication of Microsoft Word or Photoshop. Software developers edit files with simple text editors and run programs in the shell. That\u2019s all we do. We have to remember the commands we need (or consult a cheatsheet) because there are no graphical menus or toolbars. Yet with nothing more than a text editor and the command line interface, programmers have created everything that you use on your computer. 5.6 Your Workspace Take a moment to think about where on your computer you\u2019ll do your work and store your files. You may have a documents/ folder. You could make a similar folder named projects/ or code/ or workspace/ for your programming projects. Use the Unix mkdir command to create a folder or create it with your file browser. In this tutorial, the terms \u201cfolders\u201d and \u201cdirectories\u201d mean the same thing. Use the Unix cd command to change directories. When you enter the Unix command cd ~ , you\u2019ll move to your home (or \u201cuser\u201d) directory. The squiggly ~ \u201ctilde\u201d character is a Unix shortcut that indicates your home folder. The Unix pwd command shows the \u201cpresent working directory,\u201d where you are. The Unix mkdir command creates an empty folder and we move into it with the Unix cd command. 5.6.1 Video Option Watch the four minute video : Unix Commands Basics - All You Need to Know - YouTube 5.7 Understanding Version Numbers Rails follows a convention named semantic versioning : The first number denotes a major version (Rails 4) The second number denotes a minor release (Rails 4.2) The third number denotes a patch level (Rails 4.2.1) A major release includes new features, including changes which break backward compatibility. For example, switching from Rails 3.2 to Rails 4.0 required a significant rewrite of every Rails application. A minor release introduces new features but doesn\u2019t break anything. For example, Rails 3.2 added the asset pipeline, and Rails 4.2 added the Active Job feature for background processing. A patch release fixes bugs but doesn\u2019t introduce significant features. Usually this means you can change the version number in the Gemfile and run bundle update without making any other changes to your application. 5.8 Ruby and Rails Version Check Check that appropriate versions of Ruby and Rails are installed in your development environment. You\u2019ll need: The Ruby language (version 2.3 or newer) The Rails gem (version 5.1 or newer) Open your terminal application and enter: $ ruby -v You might see: ruby 2.4.1p0 (...) You\u2019ve got Ruby version 2.4.1, patch level \u201cp0\u201d (Ruby versions add an extra patch level to semantic versioning). If you\u2019ve got a newer version of Ruby, no problem; minor updates to Ruby don\u2019t affect Rails. Try: $ rails -v You might see: Rails 5.1.2 If you see: Rails is not currently installed on this system. If you\u2019ve got Rails 5.1.3 or newer, that\u2019s fine. Chapter 6 Create the Application In this chapter, we\u2019ll begin building the tutorial application. But first, let\u2019s consider the options you have for starter applications. 6.1 Starter Applications Rails provides a framework ; that is, a software library that provides utilities, conventions, and organizing principles to allow us to build complex web applications. Without a framework, we\u2019d have to code everything from scratch. Rails gives us the basics we need for many websites. Still, the framework doesn\u2019t give us all the features we need for many common types of websites. For example, we might want users to register for an account and log in to access the website (\u201cuser management and authentication\u201d). We might want to restrict portions of our website to just administrators (\u201cauthorization\u201d). We also might want to add gems that enhance Rails to aid development (gems for testing, for example) or improve the look and feel of our application (the Bootstrap or Foundation front-end frameworks). Developers often mix and match components to make a customized Rails stack. Developers often use a starter application instead of assembling an application from scratch. You might call this a \u201ctemplate\u201d but we use that term to refer to the view files that combine HTML with Ruby code to generate web pages. Most experienced developers have one or more starter applications that save time when beginning a new project. The RailsApps project was launched to provide open source starter applications so developers could collaborate on their starter applications and avoid duplicated effort. After you gain some skill with this tutorial, you might use the RailsApps starter apps to instantly generate a Rails application with features like authentication, authorization, and an attractive design. At the end of this book, you\u2019ll learn about Rails Composer , a tool for building starter applications. For now, we\u2019ll begin with the Rails default starter application. [6.2 Workspace Folder Are you in the folder named workspace/ you created earlier? $ pwd /Users/danielkehoe/workspace/ If you\u2019re not in your workspace folder, enter a Unix command to move to the folder: $ cd ~/workspace 6.3 Use \u201cRails New\u201d to Build the Application Let\u2019s go! We have selected a gemset, we have Rails installed, and we\u2019re in our workspace/ folder. Let\u2019s build a Rails application! This is your project directory. It is also called the application root directory. You\u2019ll spend all your time inside this folder. Box 6.1. Spring After creating a new Rails application, you may see a message to run a command: $ bundle exec spring binstub --all The command sets up Spring. Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don\u2019t need to stop and restart it when you make changes. After you change into the project directory, you can run the command. Type the ls command to show the folders and files in a directory. Soon we\u2019ll learn more about each of these folders and files. $ ls Gemfile Rakefile config lib test Gemfile.lock app config.ru log tmp README.md bin db public vendor 6.5 Test the Application You\u2019ve created a simple default web application. It\u2019s ready to run. 6.5.1 Launching the Web Server You can launch the application by entering the command: $ rails server Alternatively, to save typing, you can abbreviate the rails server command: $ rails s If you are using the Cloud9 hosted service, you\u2019ll need to enter bin/rails server -p $PORT -b $IP . You\u2019ll see: \\=> Booting Puma \\=> Rails 5.1.2 application starting in development on http://localhost:3000 \\=> Run \\`rails server -h\\` for more startup options \\=> Ctrl-C to shutdown server Puma starting in single mode... \\* Version 3.4.0 (ruby 2.4.1-p0), codename: Owl Bowl Brawl \\* Min threads: 5, max threads: 5 \\* Environment: development \\* Listening on tcp://localhost:3000 Use Ctrl-C to stop The rails server command launches the Puma web server that is provided with Rails. 6.5.4 Watch Log Messages Notice that messages scroll in the console window when your browser requests the Rails default web page. Open the file log/development.log and you\u2019ll see the same messages. When a browser sends requests to the Puma web server, diagnostic messages are written to the console and to the log/development.log file. These diagnostic messages are an important tool for troubleshooting when you are developing. 6.5.6 Stop the Web Server You can stop the server with Control-c to return to the command prompt. When we say Control-c, we mean hold down the Control key as you press the letter \u201cc\u201d. Most of the time you\u2019ll keep the web server running as you add or edit files in your project. Changes will automatically appear when you refresh the browser or request a new page. There is a tricky exception, however. If you make changes to the Gemfile, or changes to configuration files, the web server must be shut down and relaunched for changes to be activated. As a rule of thumb, files that produce web pages can be changed without a restart. This includes any file in the app/ folder which creates web pages, as well as the config/routes.rb file. Changes to files that create the environment for the web application, such as gems or configuration files, and are loaded at web server launch, won\u2019t be seen until the web server is restarted. Chapter 7 The Parking Structure We\u2019ve created the default Rails starter application. It is a parking structure for our code. Unlike an ordinary parking structure, where you park anywhere you like, this garage has assigned parking. You have to park your code in the right place. This is Rails, where convention brings order to the development process. As you develop a web application, you\u2019ll do all your work in the project directory. It is important to know your way around and understand the purpose of each folder and file. If you\u2019ve built simple websites with HTML and CSS, or built websites with unstructured platforms such as Perl or PHP, you\u2019ll be surprised at the complexity of the Rails project directory. Rails is a software machine with many moving parts; the project directory provides a structure to manage the complexity. The logic and order of the project directory structure is familiar to every Rails developer, and consistent for every Rails application, which makes it easy to collaborate, maintain an application, and create open source projects. 7.1 Video Option Watch the eleven minute video if you have subscribed: Rails Project Directory - Guided Explanation - YouTube 7.2 Project Directory Use the Unix ls command to list the contents of the project directory. For a one-column list that shows each subdirectory (marked with a slash), we\u2019ll add the -1p option to the command. $ ls -1p You\u2019ll see: Gemfile Gemfile.lock README.md Rakefile app/ bin/ config/ config.ru db/ lib/ log/ public/ tmp/ vendor/ Now is a good time to open a file browser window and look at the contents of the project directory. On the Mac, there\u2019s a command you can use to open the graphical file browser from the console. If you\u2019re in the project directory, type open . . The period (or \u201cdot\u201d) is a Unix symbol that means \u201cthe directory I\u2019m in.\u201d $ open . Figure 7.1: Rails directory structure. You\u2019ll learn more about each file and folder as you proceed through the tutorial. 7.3 Get to Know the Folders and Files To get you started, here are three tables. The first describes the files and folders that are important for every beginner. The second table describes the files and folders that you can ignore. The third table is a preview of things to come. 7.3.1 Important Folders and Files These folders and files are important to beginners. This is where you will spend your time in Rails. Gemfile Lists all the gems used by the application. Gemfile.lock Lists gem versions and dependencies. README.md A page for documentation. app/ Application folders and files. config/ Configuration folders and files. db/ Database folders and files. public/ Files for web pages that do not contain Ruby code, such as error pages. 7.3.2 Not-So-Important Folders and Files These folders and files are not important to beginners. Rakefile Scripts for the Rake utility program. bin/ Folder for binary (executable) programs. config.ru Configuration file for Rack (a software library for web servers). lib/ Folder for miscellaneous Ruby code. log/ Folder for application server logfiles. tmp/ Temporary files created when your application is running. vendor/ Folder for Ruby software libraries that are not gems. 7.3.3 Folders for Testing spec/ Folder for the popular RSpec testing framework. test/ Folder for the default Rails testing framework. The test/ folder is present in the default Rails starter app. You\u2019ll use the test/ folder when you learn about test-driven development. Many Rails developers use a different gem for testing, named RSpec, and your RSpec tests will go in a spec/ folder. 7.4 The App Directory Take time to drill down into the app/ folder in the project directory. This is easiest using the file browser. Figure 7.2: Rails app folder. You can also use your text editor to view the folder. Or do it with Unix commands: $ cd app $ ls -1p assets/ channels/ controllers/ helpers/ jobs/ mailers/ models/ views/ Whether you use the file browser, Unix commands, or your text editor, you are looking at the same file system. Most of the work of developing a Rails application happens in the app/ folder. Earlier we described Rails as \u201ca set of files organized with a specific structure.\u201d We said the structure is the same for every Rails application. The app/ directory is a good example. The folders in the app/ directory are the same in every Rails application. This makes it easy to collaborate with other Rails developers, providing consistency and predictability. assets channels controllers helpers jobs mailers models views You may recall our earlier description of Rails from the perspective of a software architect. In this folder, you\u2019ll see evidence of the model\u2013view\u2013controller design pattern. Three folders named models/ , views/ , and controllers/ enforce the software architect\u2019s \u201cseparation of concerns\u201d and impart structure to our code. As you build the application, we\u2019ll explain the role of the MVC components in greater detail. Five folders play supporting roles. The mailers folder is for code that sends email messages. The helpers folder is for Rails view helpers , snippets of reusable code that generate HTML. Later, when we learn more about views , we\u2019ll say view helpers are like \u201cmacros\u201d that expand a short command into a longer string of HTML tags and content. Rails 3.1 added the assets/ folder as a location for CSS and JavaScript files. The jobs/ folder is for background jobs built with the Rails ActiveJob feature. Rails 5.0 added the channels/ folder for the ActionCable feature which uses WebSockets for real-time communication between web server and browser. 7.4.1 Folders of Future Importance You won\u2019t encounter these when you are a beginner: policies/ Folder for code that controls access to features services/ Folder for code that reduces the complexity of models and controllers If you join a project to work on a large and complex Rails application, you may see folders such as these in the app/ directory. As an application grows in complexity, an experienced software architect may suggest reducing the size of models and controllers by moving code to \u201cPOROs\u201d ( plain old Ruby objects ). Code in any folder in the app/ directory is shared throughout a Rails application without any additional configuration (in contrast, code you add to the lib/ directory is only available with some extra work). Rails provides a basic model\u2013view\u2013controller framework but it is often necessary to extend it with code in a services/ folder. Similarly, a policies/ folder can be used to consolidate code that controls access to various features or pages of a web application. Use the cd .. command (\u201cchange directory dot dot\u201d) to return to the project directory. $ cd .. $ pwd /Users/danielkehoe/workspace/learn-rails As a Rails developer, you\u2019ll spend most of your time navigating the hierarchy of folders as you create and edit files. And because Rails provides a consistent structure, you\u2019ll quickly find your way on any unfamiliar project. Chapter 8 Time Travel with Git Now that we\u2019ve looked at our Rails project directory from the viewpoint of a programmer and software architect, let\u2019s consider the viewpoint of the time traveler. This chapter will introduce you to software source control , also called version control or revision control . The terms all have the same meaning. At first sight, the concept seems rather dull, like sorting your socks. But it makes professional software development possible and, at the core, it is essentially a form of time travel. To understand time travel, we need to understand state . It\u2019s a term you\u2019ll encounter often in software development. We know about states of matter. Water can be ice, liquid, or steam. Imagine a machine with a button that, each time it is pressed, changes water from one state to another. We call this a state machine . Almost every software program is a state machine. When a program receives an input, it transitions from one state to another. Like flipping a light switch, there\u2019s no in-between. Light or dark. Ice, liquid, or steam. Or, in a web application: logged in, logged out. When we write software code, there\u2019s a lot of in-between. We look things up, we think, we type errors and we make corrections. As humans, we spend a lot of time in a flow of undetermined state. We can save our work at any time, but we may be saving typos or unfinished code that doesn\u2019t work. Every so often, we get to a point where a task is finished; we\u2019ve fixed all our errors and our code runs. We want to preserve the state of our work. That\u2019s when we need a version control system. A version control system does more than a software application\u2019s \u201cSave\u201d command. Like a \u201cSave\u201d command, it preserves the current state of our files. It also allows us to add a short note that describes the work we\u2019ve done. More importantly, it archives a snapshot of the current state in a repository where it can be retrieved if needed. Here\u2019s where the time travel comes in. We can go back and recover the state of our work at any point where we committed a snapshot to the repository. In software development, travel to the past is essential because we often make mistakes or false starts and have to return to a point where we know things were working correctly. What about time travel to the future? Often we need to try out code we may decide to discard, without disturbing work we\u2019ve done earlier. Version control systems allow us to explore alternative futures by creating a branch for our work. If we like what we\u2019ve done in our branch, we can merge it into the main trunk of our software project. Unlike time travel in the movies, we can\u2019t travel back to any arbitrary point in the flow of time. We can only travel to past or future states we\u2019ve marked as significant by checking our work into the repository. 8.1 Git The dominant version control system among Rails developers is Git , created by the developer of the Linux operating system. Unlike earlier version control systems, Git is ideal for wide-scale distributed open source software development. Combined with GitHub , the \u201csocial coding\u201d website, Git makes it easy to share and merge code. When you work with others on a project, your Git commit messages (the notes that accompany your snapshot) offer a narrative about the progress of the project. Well-written commit messages describe your work to co-workers or open source collaborators. GitHub\u2019s support for forking (making your own copy of a repository) makes it possible to take someone else\u2019s project and modify it without impacting the original. That means you can customize an open source project for your own needs. You can also fix bugs or add a feature to an open source project and submit a pull request for the project maintainer to add your work to the original. Fixing bugs (large or small) and adding features to open source projects are how you build your reputation in the Rails community. Your GitHub account, which shows all your commits, both to public projects and your own projects, is more important than your resum\u00e9 when a potential employer considers hiring you because it shows the real work you have done. Collaboration is easy when you use a branch in Git. If you and a coworker are working on the same codebase, you can each make a branch before adding to the code or making changes. Git supports several kinds of merges , so you can integrate your branch with the trunk when your task is complete. If your changes collide with your coworker\u2019s changes, Git identifies the conflict so you can resolve the collision before completing the merge. All the power of Git comes at a price. Git is difficult for a beginner to learn, largely because many of its procedures have no real-world analog. Have you noticed how time travel movies require mental gymnastics, especially when you try to make sense of alternative futures and intersecting timelines? Git is a lot like that, mostly because we use it to do things we don\u2019t ordinarily do in the real world. In this tutorial, you won\u2019t encounter Git\u2019s advanced procedures, like resolving merges or reverting to earlier versions. We\u2019ll stick to the basics of archiving our work (and in one case, discarding work that we\u2019ve done for practice). You can build the tutorial project without using Git. But I urge you to use Git and a GitHub account for this project, for two reasons. First, with your tutorial application on GitHub, you\u2019ll show potential employers or collaborators that you\u2019ve successfully built a useful, functioning Rails application. More importantly, you must get to know Git if you plan to do any serious coding, either as a professional or a hobbyist. Before I show you Git commands, I want to mention that some people use graphical client applications to manage Git. MacOS has GitHub for Mac , Git Tower , and other Mac Git clients . Graphical applications for Git are useful for colleagues who don\u2019t use a Terminal application, such as graphic designers or writers. There\u2019s no need for you to install these applications. Every developer I\u2019ve met uses Git from the command line. It will take effort to master Git; the commands are not intuitive. But it is absolutely necessary to become familiar with Git basics. Before you do any work on the tutorial application, I\u2019ll show you the basics of setting up and using Git. 8.2 Is Git Installed? As a first step, make sure Git is installed on your computer: $ which git /usr/local/bin/git $ git version git version ... If Git is not found, install Git. See the article Rails with Git and GitHub for installation instructions. 8.3 Is Git Configured? Make sure Git knows who you are. Every time you update your Git repository with the git commit command, Git will identify you as the author of the changes. $ git config --get user.name $ git config --get user.email You should see your name and email address. If not, configure Git: $ git config --global user.name \"Real Name\" $ git config --global user.email \"[\\[email protected\\]](/cdn-cgi/l/email-protection)\" Use your real name so people will associate you with your work when they meet you in real life. There\u2019s no reason to use a clever name unless you have something to hide. And use your full name, not just your first name. Use the same email address for Git, your GitHub account, and Heroku to avoid headaches. 8.4 Create a Repository Now we\u2019ll add a Git repository to our project. It\u2019s a basic step you\u2019ll repeat every time you create a new Rails project. Extending the time traveler analogy, initializing a Git repository is equivalent to setting up the time machine. Be sure you are in your project directory, not your user home directory or somewhere else. Use the pwd command to check: $ pwd /Users/danielkehoe/workspace/learn-rails The git init command sets up a Git repository (a \u201crepo\u201d) in the project directory. We add the Unix symbol that indicates Git should be initialized in the current directory (git init dot): $ git init . Initialized empty Git repository in ... It creates a hidden folder named .git/ in the project directory. You can peek at the contents: $ ls -1p .git HEAD config description hooks/ info/ objects/ refs/ All Git commands operate on the hidden files. The hidden files record the changing state of your project files each time you run the git commit command. There is no reason to ever edit files inside the hidden .git/ folder (doing so could break your time machine). 8.5 GitIgnore The hidden .git/ folder contains the Git repository with all the snapshots of your changing project. The snapshots are highly compressed, only containing records of changes, so the repository takes up very little file space relative to the project as a whole. Not every file should be included in a Git snapshot. Here are some types of files that should be ignored: log files created by the web server database files configuration files that include passwords or API keys Git gives us an easy way to ignore files. A hidden file in the project directory named .gitignore can specify a list of files that are never seen by Git. The rails new command creates a .gitignore file with defaults that include log files and database files. Later, when we add configuration files that include secrets, we\u2019ll update the .gitignore file. Take a look at the contents of the .gitignore file. We use the Unix cat command to display the contents of the file: $ cat .gitignore # See https://help.github.com/articles/ignoring-files for more about ignoring files. # # If you find yourself ignoring temporary files generated by your text editor # or operating system, you probably want to add a global ignore instead: # git config --global core.excludesfile '~/.gitignore\\_global' # Ignore bundler config. /.bundle # Ignore the default SQLite database. /db/\\*.sqlite3 /db/\\*.sqlite3-journal # Ignore all logfiles and tempfiles. /log/\\* /tmp/\\* !/log/.keep !/tmp/.keep # Ignore Byebug command history file. .byebug\\_history For a .gitignore file that ignores more, see an example .gitignore file from the RailsApps project. 8.6 Git Workflow Your workflow with Git will move through four distinct phases as you add or edit files. 8.6.1 Untracked Files The first phase is a \u201cdirty\u201d state of untracked and changed files, before any snapshot. The git status command lists all folders or files that are not checked into the repository. $ git status On branch master Initial commit Untracked files: (use \"git add <file>...\" to include in what will be committed) .gitignore Gemfile Gemfile.lock README.md Rakefile app/ bin/ config.ru config/ db/ lib/ log/ public/ test/ tmp/ vendor/ nothing added to commit but untracked files present (use \"git add\" to track) In the online version of this book (the HTML version), the example above appears in green. In the terminal window on your computer, it will be red, showing you untracked files. Here the git status command tells us that we have many untracked files. We have created new files and they are saved on the computer\u2019s hard disk but nothing has been recorded in the Git repository. 8.6.2 Staging I call this step, \u201cPose for your snapshot.\u201d Recording files in the Git repository takes two steps: staging and committing. There will be times when you change many files at once. For example, you may fix a bug, add a new graphic, and change a form. You might think you\u2019d like to have Git automatically record all the changes as you save each file. But the story of your project would be confusing and overly detailed. Git requires you to mark one or more files (\u201cstaging\u201d) before recording the changes (\u201ccommitting\u201d). This gives you fine-grained control over the recorded history of your project. You can mark individual files to be staged: $ git add Gemfile Adding individual files allows you to selectively record the history of your project. For example, you might stage and commit a series of bug fixes before you stage and commit new features. Applying the time traveler analogy, it will be easier to travel back to look at bug fixes if they are not mixed in with new features. More often, you\u2019ll mark all the files to be staged. Do so now: $ git add -A Running git status will show you a long list of files that are staged and ready to commit. There are three forms of the git add command: git add foo.txt adds a file named foo.txt git add . adds all new files and changed files, except deleted files git add -A adds everything, including deletions If it seems nonsensical that the command git add -A \u201cadds deletions,\u201d don\u2019t worry. Like time travel, Git will stretch your understanding of what makes sense. Most often, you can simply use the git add -A form of the command. Now that you\u2019ve marked the files that will be committed to the repository, you\u2019ve told everyone to pose, and you\u2019re ready to take the snapshot. 8.6.3 Committing The previous step, the \u201cposing\u201d step, or staging, gives you an opportunity to select particular files before you commit. If you\u2019ve only worked on one feature, you\u2019ll likely stage and commit all your files. The next step is a \u201ccommit\u201d which I like to call, \u201cclicking the snapshot.\u201d When you \u201cmake a commit\u201d, you include a message that describes the work you\u2019ve done. For a time traveler, the \u201ccommit message\u201d is important; you are leaving a trail to help you find your way into the past. Google will show you dozens of blog posts about \u201cwriting better commit messages\u201d but common sense can be your guide. For example, writing \u201cfix registration form to catch blank email addresses\u201d will be more helpful than merely writing \u201cfix bugs.\u201d And if you wonder why commit messages are commonly written in the imperative not past tense (\u201cfix\u201d not \u201cfixed\u201d), it\u2019s a time traveler convention. Now commit your project to the repository: $ git commit -m \"Initial commit\" The -m flag lets you add a message for the commit. The pristine state of your new Rails application is now recorded in the repository on your local computer. Running git status will tell you \u201cnothing to commit, working directory clean.\u201d $ git status On branch master nothing to commit, working directory clean You\u2019ve recorded your snapshot locally. Next let\u2019s see a list of previous snapshots. Then we\u2019ll learn how to save your snapshots remotely to GitHub. 8.6.4 Git Log You can use the git log command to see your project history: $ git log commit 8da41eec9e864ed91b4a445d8cefdf7893e2faf6 Author: Daniel Kehoe < [email protected] > Date: Fri Dec 18 10:30:12 2015 +0700 Initial commit The long string of characters that follows \u201ccommit\u201d is an ID, or marker, that will help you travel back in time if you need to do so. If you get \u201cstuck\u201d in git log , type q to return to the command prompt. I like to use the git log command with an option for a compact listing: $ git log --oneline 8da41ee Initial commit Don\u2019t worry if your console doesn\u2019t show 8da41ee . The ID for your commit will be different. The listing is easier to review when it is displayed in a compact format. The commit ID is abbreviated but it is all you need to travel back in time. 8.6.5 Repositories When we talk about repositories, or \u201crepos,\u201d we mean the archive of our git commits. The local repo is located in the hidden folder named .git/ in the project directory. Of course, if your hard drive crashes, or your computer is lost or stolen, you\u2019ll lose your local repo along with your project. So it is wise to save your repository in the cloud. The GitHub site is a place to save repositories. GitHub is also a place for collaboration. Most Rails developers save their repositories to Github, as either a public repo for open source projects, or a private repo for proprietary projects. 8.6.6 Pushing to GitHub We\u2019ve seen three phases of the Git workflow: untracked , staged , and committed . A fourth stage is important when you work with others: pushing to GitHub. The repositories hosted on your GitHub account establish your reputation as a Rails developer for employers and developers you may work with. Even if your first project is copied from a tutorial, it shows you are serious about learning Rails and studying conscientiously. Did you create a GitHub account? Now would be a good time to add your repo to GitHub. Go to GitHub and create a new empty repository for your project. Name the repository \u201clearn-rails\u201d and give it a description. If the repository is public, hosting on GitHub is free. Don\u2019t be reluctant to go public with an unfinished or half-baked project; everyone expects projects on GitHub to be works in progress. Add GitHub as a remote repository for your project and push your local project to GitHub. Before you copy and paste the command, notice that you need to insert your own GitHub account name. In other words, change YOUR_GITHUB_ACCOUNT in the command shown below. Box 8.1. Warning STOP! Be sure to change YOUR_GITHUB_ACCOUNT to your GitHub user name. If you don\u2019t, you will create a mess that you have to fix with the instructions here . $ git remote add origin https://github.com/YOUR_GITHUB_ACCOUNT/learn-rails.git $ git push -u origin master The -u option sets up Git so you can use git push in the future without explicitly specifying GitHub as the destination. Now you can view your project repository on GitHub at: https://github.com/YOUR_GITHUB_ACCOUNT/learn-rails Obviously you must change YOUR_GITHUB_ACCOUNT in the web address to see your own repository. Take a look. It\u2019s an exact copy of the project on your local computer. If you haven\u2019t used GitHub before, take some time to explore. GitHub is absolutely essential to all open source Rails development. You may notice that the README.md file is automatically incorporated into the home page of the project repository on GitHub. For our next step, we\u2019ll update the README file, commit it to the local repo, and push it up to GitHub. It will be good practice for using Git. 8.7 The README Changing the README file is a good way to practice with Git. It\u2019s also a good habit to edit the README file whenever you create a new project. It\u2019s easy to neglect the README for little projects that you\u2019ve just started. But replacing a default README file shows you are a disciplined, conscientious developer who will be a good collaborator. The new README file can be brief. Just state your intentions and acknowledge any code you\u2019ve borrowed. For this project you could say, \u201cExcited to learn Rails with help from Daniel Kehoe\u2019s book!\u201d In your text editor, open the file README.md and replace the contents: Learning Rails Learning Rails with a tutorial from [learn-rails.com](http://learn-rails.com/). GitHub lets you add formatting using your choice of markup syntax, depending on the file extension you add to the filename: README.md uses the GitHub Flavored Markdown syntax README.textile uses the Textile syntax README.rdoc uses the rdoc syntax We\u2019ll use Markdown syntax by adding the # character before the first line of text to force a headline. And we\u2019ll add a link that leads to the learn-rails.com website. There\u2019s no requirement that you use Markdown syntax in your README file. Markdown simply is a popular way to add formatting to improve readability. Use git status to see what has changed: $ git status On branch master Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: README.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Here\u2019s our typical workflow. We\u2019ll stage and commit the change: $ git add -A $ git commit -m \"update README\" Then we\u2019ll push the change to GitHub: $ git push origin master If you decide not to use GitHub for this tutorial, you can skip this step (and skip it throughout the tutorial). Take a look at your GitHub repository (refresh the web page). Very cool! The README file has been updated. The git log command will display your project history: $ git log --oneline 69b9b6c update README 8da41ee Initial commit To learn more about Git, I recommend the book Learn Enough Git to Be Dangerous by my colleague Michael Hartl. An online version is available for free. Now that you\u2019re comfortable with Git, we can begin customizing our new Rails application. Chapter 9 Gems The art of selecting gems is at the heart of Rails development. I explained earlier that gems are packages of code, \u201csoftware libraries,\u201d that have been developed and tested by other developers. Some gems add functionality or features to a website. Other gems play a supporting role, making development easier or implementing basic infrastructure. Gems are open source. They are available at no charge and can be freely copied and modified. 9.1 Videos If you have subscribed, two short videos introduce gems: What Are Rubygems Find Rubygems 9.2 RubyGems It is a mark of honor to release a gem for public use, and a developer\u2019s reputation can be established when a gem becomes popular and widely used. Gems are often created when a developer has used the same code as a component in more than one web application. He or she will take time to release the code as a gem. That\u2019s how the Rails ecosystem was built, gem by gem since 2004. There is no evaluation or review process in publishing gems. Gems are hosted on a public server, rubygems.org . Gems are mostly text files (like any other Ruby code), organized in a particular format with some descriptive information (in a gemspec file), and compressed and archived as a single file. A single command, gem push , uploads a gem to the rubygems.org server for anyone to use. Over 50,000 gems have been released since rubygems.org was established. Some of these gems are used by one or two developers on their own projects. Many others have been neglected and abandoned due to lack of interest. Only a few thousand gems are popular and widely used. As a Rails developer, you must master the art of finding and evaluating gems so you can base your applications on the tried-and-true work of others. There is no single authoritative source of recommendations for gems. The Ruby Toolbox website categorizes and ranks many gems by popularity, and it is a good place to begin hunting for useful gems. Other than that, it is useful to study example applications and search for blog posts to find which gems are most often recommended. When you find an interesting gem, search Stack Overflow or Google to see what people are saying. Look at the gem\u2019s GitHub repository and check: How many issues are open? How many are closed? How recent are the commits of patches or updates? Is there a CHANGELOG file? Is the gem well-documented? How many \u201cstars\u201d (people favoriting) or \u201cforks\u201d (people hacking)? Popular gems are likely to have many reported issues, some of which are trivial problems or feature requests. Gems that are actively maintained will have many closed issues and, ideally, only a few open issues. When you find a gem that has many open issues and no recently closed issues, you\u2019ve probably found a gem that has been abandoned. Also look at the commit log, which you\u2019ll find on the GitHub project page in a tab at the top of the page. Regular and recent activity in the commit log indicates the gem is actively maintained. 9.3 Rails Gems Rails itself is a gem that, in turn, requires a collection of other gems. This becomes clear if you look at the summary page for Rails on the rubygems.org site. On that page, you\u2019ll see photos of the Rails core team. More importantly, you\u2019ll see a list of gems that are required to use Rails: actioncable - real-time communication using WebSockets actionmailer - framework for email delivery and testing actionpack - framework for routing and responding to web requests actionview - view templates and rendering activejob - queueing slow tasks to run in the background activemodel - architecture for model objects activerecord - framework for connections to databases activesupport - utility classes and Ruby library extensions bundler - utility to manage gems railties - console commands and generators sprockets-rails - support for the Rails asset pipeline These are the \u201cruntime dependencies\u201d for Rails. Each of these gems has its own dependencies as well. When you install Rails, a total of 63 gems are automatically installed in your development environment. 9.4 Gems for a Rails Default Application In addition to the Rails gem and its dependencies, a handful of other gems are included in every rails new default starter application: sqlite3 - adapter for the SQLite database puma - web application server sass-rails - enables use of the SCSS syntax for stylesheets uglifier - JavaScript compressor coffee-rails - enables use of the CoffeeScript syntax for JavaScript turbolinks - faster loading of webpages jbuilder - utility for encoding JSON data You may not need a SQLite database, SCSS for stylesheets, or the others, but many developers use these tools so they are included in the default starter application. 9.5 Where Do Gems Live? Gems are files saved in the computer\u2019s disk storage, containing someone else\u2019s code that you can use in your own application. When you run a Rails application, gems are loaded into the computer\u2019s working memory immediately before your own custom code is loaded. Gems are handled by the Ruby interpreter no differently than your own code. It\u2019s all Ruby code, whether you or someone else wrote it. When you are building an application in Rails, you don\u2019t need to think about where gems are stored in your file system. It\u2019s all handled automatically. Experienced programmers who have used software libraries in other languages might wonder how it works. Here\u2019s the technical explanation from the experts. Ruby has a require method that allows you to import software libraries into your programs. RubyGems extends the require method, adding gem directories to a $LOAD_PATH . When Rails loads, it will automatically require each of the gems listed in your Gemfile, finding the gems in the $LOAD_PATH directories. If you\u2019re a curious person, you might like to see where the gems live. You can run the gem env command to reveal the RubyGems environment details which are normally hidden from you: $ gem env RubyGems Environment: - RUBYGEMS VERSION: 2.6.4 - RUBY VERSION: 2.4.1 (2016-04-26 patchlevel 112) \\[x86\\_64-darwin14\\] - INSTALLATION DIRECTORY: /Users/danielkehoe/.rvm/gems/[\\[email protected\\]](/cdn-cgi/l/email-protection) - USER INSTALLATION DIRECTORY: /Users/danielkehoe/.gem/ruby/2.3.0 - RUBY EXECUTABLE: /Users/danielkehoe/.rvm/rubies/ruby-2.4.1/bin/ruby - EXECUTABLE DIRECTORY: /Users/danielkehoe/.rvm/gems/[\\[email protected\\]](/cdn-cgi/l/email-protection)/bin - SPEC CACHE DIRECTORY: /Users/danielkehoe/.gem/specs - SYSTEM CONFIGURATION DIRECTORY: /Users/danielkehoe/.rvm/rubies/ruby-2.4.1/etc - RUBYGEMS PLATFORMS: - ruby - x86\\_64-darwin-14 - GEM PATHS: - /Users/danielkehoe/.rvm/gems/[\\[email protected\\]](/cdn-cgi/l/email-protection) - /Users/danielkehoe/.rvm/gems/[\\[email protected\\]](/cdn-cgi/l/email-protection) . . . If you use RVM, gems are saved to a hidden .rvm folder in your user directory. A global subfolder contains the Bundler gem. If you\u2019ve followed the instructions in the \u201cGet Started\u201d chapter to install Rails, the project-specific learn-rails subfolder contains the Rails gem. If you use Chruby or Rbenv instead of RVM, your gems will be stored in a different location. Run the gem which command and you\u2019ll see where the gems live: $ gem which bundler /Users/danielkehoe/.rvm/gems/ [email protected] /gems/bundler-1.12.5/lib/bundler.rb $ gem which rails /Users/danielkehoe/.rvm/gems/ [email protected] /gems/railties-5.1.2/lib/rails.rb These are details you\u2019ll never need to know, because Ruby on Rails handles it for you. You\u2019ll never move or delete gems directly. Instead you\u2019ll manage gems using the Bundler utility. The key to Bundler is the Gemfile. 9.6 Gemfile Every Rails application has a Gemfile. Earlier, I described Rails from the viewpoint of the \u201cgem hunter,\u201d the developer who wants to assemble an application from the best open source components he or she can find. To the gem hunter, the Gemfile is the most important file in the application. It lists each gem that the developer wants to use. The Gemfile provides the information needed by the Bundler utility to manage gems. Bundler\u2019s bundle install command reads the Gemfile, then downloads and saves each listed gem to the hidden gem folder. Bundler checks to see if the gem is already installed and only downloads gems that are needed. Bundler checks for the newest gem version and records the version number in the Gemfile.lock file. Bundler also downloads any gem dependencies and records the dependencies in the Gemfile.lock file. Between the Gemfile, with its list of gems that will be used by the application, and the Gemfile.lock file, with its list of dependencies and version numbers, you have a complete specification of every gem required to run the application. More importantly, when other developers install your application, Bundler will automatically install all the gems (including dependencies and correct versions) needed to run the application. When you deploy the application to production for others to use, automated deployment scripts (such as those used by Heroku) install all the required gems. Bundler provides a bundle update command when we want to replace any gems with newer versions. If you run bundle update , any new gem versions will be downloaded and installed and the Gemfile.lock file will be updated. Be aware that updating gems can break your application, so only update gems when you have time to test and resolve any issues. You can run bundle outdated to see which gems are available in newer versions. If you want to prevent your fellow developers (or yourself) from accidentally updating gems, you can specify a gem version number for any gem in the Gemfile. The Gemfile gives fine-grained control over rules for updating: gem \u2019rails\u2019, \u20195.0.0\u2019 is \u201cabsolute\u201d only version 5.0.0 will be used gem \u2019rails\u2019, \u2019>= 5.0.0\u2019 is \u201coptimistic\u201d any version newer than 5.0.0 will be used gem \u2019rails\u2019, \u2019~> 5.0.0\u2019 is \u201cpessimistic\u201d \u201cPessimistic\u201d versioning needs some explanation. ~> 5.0.0 means use any version greater than 5.0.0 and less than 5.1 (any patch version can be used). ~> 5.0 means use any version greater than 5.0 and less than 6.0 (any minor version can be used). In general, during development we only lock down any gem versions in the Gemfile if we know newer versions introduce problems. Let\u2019s take a look at the Gemfile created by the rails new command. 9.7 Gemfile for a Rails Default Application Open the Gemfile with your text editor: source 'https://rubygems.org' git\\_source(:github) do |repo\\_name| repo\\_name \\= \"#{repo\\_name}/#{repo\\_name}\" unless repo\\_name.include?(\"/\") \"https://github.com/#{repo\\_name}.git\" end # Bundle edge Rails instead: gem 'rails', github: 'rails/rails' gem 'rails', '~> 5.1.2' # Use sqlite3 as the database for Active Record gem 'sqlite3' # Use Puma as the app server gem 'puma', '~> 3.7' # Use SCSS for stylesheets gem 'sass-rails', '~> 5.0' # Use Uglifier as compressor for JavaScript assets gem 'uglifier', '>= 1.3.0' # See https://github.com/rails/execjs#readme for more supported runtimes # gem 'therubyracer', platforms: :ruby # Use CoffeeScript for .coffee assets and views gem 'coffee-rails', '~> 4.2' # Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks gem 'turbolinks', '~> 5' # Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder gem 'jbuilder', '~> 2.5' # Use Redis adapter to run Action Cable in production # gem 'redis', '~> 3.0' # Use ActiveModel has\\_secure\\_password # gem 'bcrypt', '~> 3.1.7' # Use Capistrano for deployment # gem 'capistrano-rails', group: :development group :development, :test do # Call 'byebug' anywhere in the code to stop execution and get a debugger console gem 'byebug', platforms: \\[:mri, :mingw, :x64\\_mingw\\] # Adds support for Capybara system testing and selenium driver gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do # Access an IRB console on exception pages or by using <%= console %> anywhere in the code. gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # Windows does not include zoneinfo files, so bundle the tzinfo-data gem gem 'tzinfo-data', platforms: \\[:mingw, :mswin, :x64\\_mingw, :jruby\\] The file you see will be very similar. Some version numbers may be different if a newer Rails version was released since this was written. The first line, source \u2019https://rubygems.org\u2019 , directs Bundler to use the rubygems.org server as a source for any gems. Notice that the second uncommented line directs Bundler to use Rails and specifies a range of acceptable versions. In this case, the Gemfile indicates we can use any version between 5.1.2 and 5.2. In the Gemfile you\u2019ll see the gems for a Rails default application, such as the sqlite3 database gem, which we described earlier. Other gems are commented out (the lines begin with the # character). These are suggestions and we can ignore them or remove them. We won\u2019t use a database for our application but we\u2019ll keep the gem \u2019sqlite3\u2019 entry. Configuring Rails for no database is complicated; it is easier to keep the sqlite3 gem and not use it. If you are developing your application on a computer using the Linux operating system, you may need to uncomment and use the statement gem \u2019therubyracer\u2019, platforms: :ruby . Linux doesn\u2019t have a built-in JavaScript interpreter so you must install Node.js in your environment or else add the therubyracer gem to each project Gemfile. For help, see Install Ruby on Rails - Ubuntu . It\u2019s wise to specify the Ruby version we\u2019re using. This is needed for automated deployment scripts such as those used by Heroku. We can add that to the Gemfile: ruby '2.4.1' If you add the Ruby version and remove the extra clutter in the Gemfile it will look like this: source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: \\[:mri, :mingw, :x64\\_mingw\\] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end Try it now. Replace the Gemfile with the simplified code above. 9.8 Adding Gems I\u2019ve identified several gems that will be useful for our tutorial application. I learned about these gems from several places: Ruby Toolbox RubyFlow various blog posts example code and starter apps on GitHub recommendations from colleagues We\u2019re adding these gems at the beginning of our development process since we already know which gems we\u2019ll need. On a real project, you\u2019ll often discover useful gems and add them to the Gemfile during the ongoing process of development. Here are gems we\u2019ll add to the Gemfile: bootstrap-sass - front-end framework gibbon - access to the MailChimp API high_voltage - for static pages like \u201cabout\u201d jquery-rails - adds the jQuery JavaScript library Box 9.1. jQuery and Rails 5.1 Versions of Rails prior to Rails 5.1 included the jquery-rails gem by default. The gem was dropped from Rails 5.1. We\u2019ll add the jquery-rails gem because it is required by the Bootstrap front-end framework. We\u2019ll also add utilities that make development easier: better_errors - helps when things go wrong rails_layout - generates files for an application layout Open your Gemfile and replace the contents with the following: source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: \\[:mri, :mingw, :x64\\_mingw\\] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high\\_voltage' gem 'jquery-rails' group :development do gem 'better\\_errors' gem 'rails\\_layout' end Notice that we\u2019ve placed two gems inside a \u201cgroup.\u201d Specifying a group for development or testing ensures a gem is not loaded in production, reducing the application\u2019s memory footprint. Rails let you specify groups for development , test , or production . 9.10 Install the Gems Each time you edit the Gemfile, you will run bundle install and restart your web server. You\u2019ve edited the Gemfile. Install the required gems on your computer: $ bundle install The bundle install command will download the gems from the rubygems.org server and save them to a hidden directory that is managed by the RVM gemset you\u2019ve specified. We\u2019ll see all the gems and their dependencies: Fetching gem metadata from https://rubygems.org/ Fetching version metadata from https://rubygems.org/ Fetching dependency metadata from https://rubygems.org/ Resolving dependencies... Using rake 11.3.0 Using concurrent-ruby 1.0.2 Using i18n 0.7.0 Using minitest 5.9.1 . . . (many more gems not shown... you get the idea) . . . Bundle complete! 20 Gemfile dependencies, 73 gems now installed. Use \\`bundle show \\[gemname\\]\\` to see where a bundled gem is installed. You can use your text editor to view the contents of Gemfile.lock and you will see a detailed listing of every gem and each dependency, with version numbers. There\u2019s no reason to edit a Gemfile.lock file; if it is ever in error, delete it and run bundle install to recreate it. Run gem list to see all the gems that are loaded into the development environment: $ gem list The list of gems loaded in the environment is the same as the list specified in the Gemfile.lock file. Here\u2019s how it works. RVM makes a place for the gems to be stored (the RVM gemset); the Gemfile lists the gems you want to use; bundle install reads the Gemfile and installs the gems into the RVM gemset; the Gemfile.lock file records dependencies and version numbers; and gem list shows you the gems that are in the gemset and available for use. 9.10.1 Troubleshooting If your development environment is set up correctly, there should be no difficulty installing gems with the bundle install command. If your development environment is not set up correctly, you may see error messages when Bundler attempts to install the Nokogiri gem. Nokogiri is often needed by other gems (it is a dependency of some gems) and Nokogiri can become a problem to install. Unlike most gems that are written in pure Ruby, parts of Nokogiri are written in the C language and must be compiled using system tools that vary with different operating systems. If you get an error while installing gems, and the message says, \u201cAn error occurred while installing nokogiri,\u201d ask for help on Stack Overflow . 9.11 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add gems\" $ git push origin master After your first use of git push origin master , you can use the shortcut git push . If you get a message: fatal: Not a git repository (or any of the parent directories): .git It indicates you are in a folder that has not been initialized with Git. You are probably not in your project directory. Use the Unix command pwd to see where you are. If you get a message: fatal: 'origin' does not appear to be a git repository fatal: The remote end hung up unexpectedly It shows that you can\u2019t connect to GitHub to push the changes. To investigate, enter: $ git remote show origin It is not absolutely necessary to use GitHub for this tutorial. We\u2019re only using it so you\u2019ll be familiar with the workflow of professional development. We\u2019re ready to configure the application. Chapter 10 Configure Rails is known for its \u201cconvention over configuration\u201d guiding principle. As applied, the principle reduces the need for many configuration files. It\u2019s not possible to eliminate all configuration files, however. Many applications require configuration of settings such as email account credentials or API keys for external services. In our tutorial application, we\u2019ll need to store an API key to access MailChimp, which we\u2019ll use to add visitors\u2019 email addresses to a mailing list. We\u2019ll also need to store credentials so we can send email using the SendGrid transactional email service. Rails provides the config/secrets.yml file for our configuration settings. Any variable that is set in the config/secrets.yml file can be used elsewhere in our Rails application, providing a single location for all our configuration variables. 10.1 Configuration Security GitHub is a good place to store and share code. But when your repos are public, they are not a good place for secret account credentials. In fact, any shared Git repository, even a private repo, is a bad place to store email account credentials or private API keys. Operating systems (Linux, macOS, Windows) provide mechanisms to set local environment variables , as does Heroku and other deployment platforms. With a bit of Unix savvy, you can set environment variables using the Unix shell. Environment variables can be accessed from Rails applications and provide an ideal place to set configuration settings that must remain private. For the best security, set credentials as Unix environment variables and only use Unix environment variables in the config/secrets.yml file. The article Rails Environment Variables shows alternatives to using Unix environment variables, if for any reason you cannot set environment variables on your machine. 10.2 Videos If you have subscribed, now\u2019s a good time to watch: UNIX Environment Variables - On the Mac with Bash - YouTube Rails Environment Variables - Explanation and Tutorial - YouTube 10.3 About Environment Variables Unix environment variables are typically set in a file that is read when starting an interactive shell. The shell is the program that gives us the command line interface we see in the Terminal or console application. Unix gives you a choice of shell programs (with names like sh , bash , ksh , and zsh ); each has a slightly different way to set environment variables. The most common shell program is bash. Let\u2019s find out what shell you are using: $ echo $SHELL /bin/bash If you see /bin/bash , that\u2019s great! If not, you may have to do some research to find out how to set environment variables in your shell. You might be surprised to see a dollar sign in the command. You don\u2019t type the first dollar sign (it is just the convention that indicates you are entering a Unix command). You\u2019ll type echo $SHELL to ask the operating system to show the variable SHELL . The dollar sign in the command tells Unix to return a variable named SHELL . Try typing echo SHELL without the dollar sign and you\u2019ll see echo just displays what you type. When you open a console window, the bash shell reads a configuration file in your user home directory. You can use a Unix command to list all the files in your user home directory (the ~ \u201ctilde\u201d character represents your home directory): $ ls -1pa ~ . . . .bash\\_profile . . . On the Mac, you\u2019ll see .bash_profile . On Linux systems, you\u2019ll see .bashrc . 10.4 Viewing Hidden Files The files .bash_profile or .bashrc are hidden in the file browser. You can force the Mac to display hidden files by entering the following command in the Terminal application: defaults write com.apple.finder AppleShowAllFiles TRUE; killall Finder Hidden files will appear in gray in the Finder window. Use your text editor (Atom or Sublime) to open the .bash_profile or .bash_rc file. To open the .bash_profile file with Atom: $ atom ~/.bash\\_profile In Unix, the squiggle (tilde) character is a shortcut to your user home folder. Open either file and you\u2019ll likely find a command such as: export PATH=~/.bin:$PATH That is a command that sets the PATH environment variable. The command might not be exactly the same but it is likely you will see some export commands. You can add the environment variables anywhere in the file. For convenience, add the environment variables near the end of the file, above any existing EXPORT statement. You should use quotes to surround configuration values (credentials) in the .bash_profile or .bashrc files. If you don\u2019t have a .bash_profile or .bashrc file in your user home directory, you can create one. 10.5 Set Environment Variables You\u2019ll set the following environment variables in your .bashrc or .bash_profile file: * SENDGRID\\_USERNAME * SENDGRID\\_PASSWORD * MAILCHIMP\\_API\\_KEY * MAILCHIMP\\_LIST\\_ID * OWNER\\_EMAIL Here are details. 10.5.1 SendGrid You\u2019ll need your SendGrid username and password. The credentials are the same you use to sign in to the SendGrid website. Add your SendGrid username and password to your .bash_profile or .bashrc file: export SENDGRID\\_USERNAME=\"example\" export SENDGRID\\_PASSWORD=\"secret\" Obviously, change \u201cexample\u201d and \u201csecret\u201d to your own credentials. 10.5.2 MailChimp When visitors sign up to receive a newsletter, we\u2019ll add them to a MailChimp list. Add an environment variable for the MailChimp API key: MAILCHIMP_API_KEY . Sign in to MailChimp to get your API key. Click your name at the top of the navigation menu, then click \u201cAccount.\u201d Click \u201cExtras,\u201d then \u201cAPI keys.\u201d You have to generate an API key; MailChimp doesn\u2019t create one automatically. The MailChimp API key is a long string of characters like a secret code that works like a password. Enter it in your .bash_profile or .bashrc file: export MAILCHIMP\\_API\\_KEY=\"Your\\_MailChimp\\_API\\_Key\" You\u2019ll need to create a MailChimp mailing list in preparation for our \u201cMailing List\u201d chapter. Have you already created a MailChimp mailing list? If not, the MailChimp \u201cLists\u201d page has a button for \u201cCreate List.\u201d The list name and other details are up to you. We\u2019ll need the MAILCHIMP_LIST_ID for the mailing list you\u2019ve created. To find the list ID, on the MailChimp \u201cLists\u201d page, click the \u201cdown arrow\u201d for a menu and click \u201cSettings.\u201d At the bottom of the \u201cList Settings\u201d page, you\u2019ll find the unique ID for the mailing list. export MAILCHIMP\\_LIST\\_ID=\"Your\\_List\\_ID\" Your environment variables are set up to use MailChimp. 10.5.3 Owner Email You\u2019ll send email messages to this address when a visitor submits a contact request form. Set OWNER_EMAIL with an email address where you receive mail. export OWNER\\_EMAIL=\"[\\[email protected\\]](/cdn-cgi/l/email-protection)\" Enter an email address and your environment variables will be set up with the site owner email address. 10.5.4 Restart the Terminal Session Close and reopen your terminal to make sure the environment is updated with any recent changes. 10.5.5 Troubleshooting Check that the SendGrid user name is set in your Unix environment variables: $ echo \"$SENDGRID\\_USERNAME\" You should see your SendGrid user name in the console response. Make sure you\u2019ve used underscores consistently and you\u2019ve used SENDGRID_USERNAME not SENDGRID_USER_NAME . If you have trouble, remember to close and reopen your terminal to make sure the environment includes any recent changes. On Linux, if you\u2019ve entered the environment variables in your .bashrc file but they don\u2019t seem to work, try setting them in your .bash_profile file instead. If you\u2019ve set up Unix environment variables but echo \"$SENDGRID_USERNAME\" doesn\u2019t return the correct variable in the console, you may have a problem with the way you\u2019ve set Unix environment variables. Most computers use the bash shell and you can set environment variables in your .bash_profile or .bashrc files. But not every system is alike. If it seems Unix environment variables are not working, you may have to find a colleague who can help you troubleshoot. If you are having problems, you can continue with the tutorial and add the credentials directly to the config/secrets.yml file. 10.6 The Secrets File Use your text editor to add the Unix environment variables to the file config/secrets.yml : # Be sure to restart your server when you modify this file. # Your secret key is used for verifying the integrity of signed cookies. # If you change this key, all old signed cookies will become invalid! # Make sure the secret is at least 30 characters and all random, # no regular words or you'll be exposed to dictionary attacks. # You can use \\`rails secret\\` to generate a secure secret key. # Make sure the secrets in this file are kept private # if you're sharing your code publicly. # Shared secrets are available across all environments. # shared: # api\\_key: a1B2c3D4e5F6 # Environmental secrets are only available for that specific environment. development: email\\_provider\\_username: <%= ENV\\[\"SENDGRID\\_USERNAME\"\\] %> email\\_provider\\_password: <%= ENV\\[\"SENDGRID\\_PASSWORD\"\\] %> domain\\_name: example.com mailchimp\\_api\\_key: <%= ENV\\[\"MAILCHIMP\\_API\\_KEY\"\\] %> mailchimp\\_list\\_id: <%= ENV\\[\"MAILCHIMP\\_LIST\\_ID\"\\] %> owner\\_email: <%= ENV\\[\"OWNER\\_EMAIL\"\\] %> secret\\_key\\_base: very\\_long\\_random\\_string test: secret\\_key\\_base: very\\_long\\_random\\_string # Do not keep production secrets in the unencrypted secrets file. # Instead, either read values from the environment. # Or, use \\`bin/rails secrets:setup\\` to configure encrypted secrets # and move the \\`production:\\` environment over there. production: email\\_provider\\_username: <%= ENV\\[\"SENDGRID\\_USERNAME\"\\] %> email\\_provider\\_password: <%= ENV\\[\"SENDGRID\\_PASSWORD\"\\] %> domain\\_name: example.com mailchimp\\_api\\_key: <%= ENV\\[\"MAILCHIMP\\_API\\_KEY\"\\] %> mailchimp\\_list\\_id: <%= ENV\\[\"MAILCHIMP\\_LIST\\_ID\"\\] %> owner\\_email: <%= ENV\\[\"OWNER\\_EMAIL\"\\] %> secret\\_key\\_base: <%= ENV\\[\"SECRET\\_KEY\\_BASE\"\\] %> Be sure to use spaces, not tabs. Make sure there is a space after each colon and before the value for each entry or you will get a message \u201cInternal Server Error: mapping values are not allowed\u201d when you start the web server. You used quotes to surround configuration values in the **.bashrc** or **.bash\\_profile** files. Here, in the **config/secrets.yml** file, you don\u2019t need quotes when you are importing Unix environment variables. 10.6.1 Domain Name We\u2019ll need a domain name when we configure email for delivery in production. For development, use example.com . If you have your own domain name, you can use that instead. There\u2019s no need to keep the domain_name configuration variable secret, so we don\u2019t need to set it in a Unix environment variable. You can decide for yourself if the owner_email variable really needs to be secret. Just for caution, I\u2019m suggesting you set it as a Unix environment variable. 10.6.2 Securing the Secrets File Some developers take steps to prevent the config/secrets.yml file from being checked into Git. To prevent the file from being saved to your repo you could add the filename to the .gitignore file in your application root directory. However, you don\u2019t need to keep the config/secrets.yml file from being checked into Git if you\u2019ve used Unix environment variables in the config/secrets.yml file. If you only reveal the SECRET_KEY_BASE used for development or testing, and no one can access your development machine, no useful secrets will be revealed in your GitHub repo. When you deploy to Heroku, the config/secrets.yml file must be in your Git repository. For that reason, I suggest you save the file in your Git repo and keep your secrets safe by using environment variables. 10.6.3 Troubleshooting Remember, in YAML files (with the file extension .yml ), indentation is required (your application will break without it). Be sure to use spaces, not tabs. Make sure there is a space after each colon and before the value for each entry. If you have trouble setting Unix environment variables, you can add credentials directly to the config/secrets.yml file. If you do so, you should not check the file into Git until you\u2019ve deleted the secrets from the file. Replace the following if you are troubleshooting: development: email\\_provider\\_username: <%= ENV\\[\"SENDGRID\\_USERNAME\"\\] %> email\\_provider\\_password: <%= ENV\\[\"SENDGRID\\_PASSWORD\"\\] %> with: development: email\\_provider\\_username: example email\\_provider\\_password: 's#cr\\*t' In a YAML file, you do not need quotes unless your string contains special characters. If your password contains any of these characters you should surround the string with single quotes: : { } [ ] & * # ? | - < > = ! % @ \\ Again, DON\u2019T CHECK THE FILE INTO GIT if you\u2019ve hardcoded your credentials directly in the config/secrets.yml file. The article Rails Environment Variables shows alternatives to using Unix environment variables, if for any reason you cannot set environment variables on your machine. 10.7 Secret Key Base It\u2019s not necessary to set SECRET_KEY_BASE as an environment variable on the computer you use for development. Rails generates a unique SECRET_KEY_BASE in the config/secrets.yml file each time you create a new Rails application and you don\u2019t need to replace it. If someone sees the SECRET_KEY_BASE in the config/secrets.yml file in your GitHub repo, there isn\u2019t anything they can do with it, since they don\u2019t have access to your local machine. For your future reference, in case you want to change the SECRET_KEY_BASE , here\u2019s how. Go to your Rails application directory and create a new secret token: $ rails secret very\\_long\\_random\\_string And, if you wish, add it to your .bash_profile or .bashrc file: export SECRET\\_KEY\\_BASE=\"very\\_long\\_random\\_string\" You should always use the environment variable <%= ENV[\"SECRET_KEY_BASE\"] %> in the production section of your config/secrets.yml file, otherwise, someone who sees the secret token in your GitHub repo can gain access to your application in production. You\u2019ll set the environment variables for production when you deploy to Heroku. 10.8 Configure Email Email messages are visible in the console and the log file when you test the application. If you don\u2019t want to actually send email, you can skip this step. But it\u2019s more fun when your application can actually send email. You can learn more in the article Send Email with Rails . 10.8.1 Connect to an Email Server Web servers don\u2019t send email. Our Rails application has to connect to an email server (also known as a mail transfer agent or \u201cmail relay\u201d). In the early days of the Internet, an experienced system administrator could set up an SMTP server to distribute email. Now, because of efforts to reduce spam, it is necessary to use an established email service to ensure deliverability. In production, for high volume transactional email and improved deliverability, it is best to use a service such as SendGrid . Alternatives are: Amazon SES (Simple Email Service) Mailgun Mailjet Mandrill PostageApp Postmark SparkPost For our tutorial application, we\u2019ll connect to SendGrid to send email. For convenience during development, some developers use their own Gmail account to send email. Google has increased security measures for Gmail, so it is difficult to use Gmail to send email from a Rails application. SendGrid is easier to set up and you\u2019re more likely to use it for a real application. That\u2019s why we\u2019ll use it. In the file config/environments/development.rb , near the end of the file, find the statement: config.assets.debug \\= true Immediately following, add this: config.action\\_mailer.smtp\\_settings \\= { address: \"smtp.sendgrid.net\", port: 587, domain: Rails.application.secrets.domain\\_name, authentication: \"plain\", enable\\_starttls\\_auto: true, user\\_name: Rails.application.secrets.email\\_provider\\_username, password: Rails.application.secrets.email\\_provider\\_password } # ActionMailer Config config.action\\_mailer.default\\_url\\_options \\= { :host \\=> 'localhost:3000' } config.action\\_mailer.delivery\\_method \\= :smtp config.action\\_mailer.raise\\_delivery\\_errors \\= true # Send email in development mode? config.action\\_mailer.perform\\_deliveries \\= true You can use port 25, 587, or 2525 (some ISPs restrict connections on port 25). It\u2019s important to add these changes in the body of the configuration file, before the end keyword. The order isn\u2019t important but don\u2019t add the configuration statements after the end keyword. Notice that we are using configuration variables that are set in the config/secrets.yml file: Rails.application.secrets.email_provider_username Rails.application.secrets.email_provider_password We could \u201chard code\u201d a username and password here but that would expose confidential data if your GitHub repository is public. Using configuration variables that are set in the config/secrets.yml file keeps your secrets safe. Again, if you need to troubleshoot, you can enter the SendGrid username and password directly in this file instead of the configuration variables. But for security, don\u2019t commit to Git with the password hardcoded in this file. 10.8.2 Perform Deliveries in Development If you want to send real messages when you test the application in development mode, modify the file config/environments/development.rb . After the code you just added, add the statement: # Send email in development mode? config.action\\_mailer.perform\\_deliveries \\= true This changes the configuration to send email when you\u2019re working on the application. Make sure any code you\u2019ve added to the config/environments/development.rb file is placed before the final end keyword. If you add code after the final end keyword, your application will fail with errors when you start the web server. Later, after we add a contact form to the tutorial application, the application will be ready to send email messages. 10.9 Git Make sure you\u2019re in your application root directory. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add configuration\" $ git push We\u2019re ready to create a home page for the application. Chapter 11 Static Pages and Routing A Rails application can deliver static web pages just like an ordinary web server. The pages are delivered fast and no Ruby code is required. We\u2019ll look at simple static pages and learn about Rails routing before we explore the complexities of dynamic web pages in Rails. 11.1 Add a Home Page Make sure you are in your project directory. Start the application server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see the Rails default information page. For the next step, you\u2019ll need to know how to use a text editor such as Atom or Sublime Text . You can find free tutorials on YouTube. Or, if you prefer a book, try Michael Hartl\u2019s Learn Enough Text Editor to Be Dangerous . Use your text editor to create and save a file public/index.html : <h1>Hello World</h1> Refresh the browser window and you\u2019ll see the \u201cHello World\u201d message. The Rails application server looks for any pages in the public folder by default. If no filename is specified in the URL, the server will attempt to respond with a file named index.html . This is a convention that dates to 1993; if no filename was specified, one of the first web servers ever built (the NCSA httpd server) would return a list of all files in the directory, unless a file named index.html was present. Since then, index.html has been the default filename for a home page. 11.2 Routing Error What happens when no file matches the requested web address? Enter the URL http://localhost:3000/about.html in your browser. You\u2019ll see an error page that shows a routing error. If you are using Cloud9, add \u201c/about.html\u201d to the URL in the preview browser window. 11.3 Add an About Page Use your text editor to create and save a file public/about.html : <h1>About</h1> Visit the URL http://localhost:3000/about.html in your browser. You\u2019ll see the new \u201cAbout\u201d page. By the way, you\u2019ve just done test-driven development (TDD). 11.3.1 Introducing TDD With test-driven development, a developer tests behavior before implementing a feature, expecting to see an error condition. Then the developer implements the feature and sees a successful result to the test. That\u2019s exactly what you\u2019ve done, in the simplest way. Beginners tend to think TDD is scary and complicated. Now that you\u2019ve experienced a simple form of TDD, maybe it won\u2019t be intimidating. Real TDD means writing tests in Ruby before implementing features, but the principle is the same. 11.4 Introducing Routes The guiding principle of \u201cconvention over configuration\u201d governs Rails routing. If the web browser requests a page named \u201cindex.html\u201d, Rails will deliver the page from the public folder by default. No configuration is required. But what if you want to override the default behavior? Rails provides a configuration file to control web request routing. If you\u2019ve got only one terminal window open, you\u2019ll have to stop the Rails server with Control-c to get your terminal prompt. Here is where it is helpful to have two terminal sessions going in different tabs. Let\u2019s set the \u201cAbout\u201d page as the home page. Open the file config/routes.rb . Remove all the comments and replace the file with this: Rails.application.routes.draw do root to: redirect('/about.html') end This snippet of Rails routing code takes any request to the application root ( http://localhost:3000/ ) and redirects it to the about.html file (which is expected to be found in the public folder). There is no need to restart your application server to see the new behavior. If you need to start the server: $ rails server Visit the page http://localhost:3000/ . You\u2019ll see the \u201cAbout\u201d page. If you still see the \u201cHello World\u201d page, you didn\u2019t remove the the public/index.html file. Rails will use the index file in the public folder before it checks the routing file for a redirect. You\u2019ve just seen an example of Rails magic. Some developers complain that the \u201cconvention over configuration\u201d principle is black magic. It\u2019s not obvious why pages are delivered from the public folder; it just happens. If you don\u2019t know the convention, you could be left scratching your head and looking for the code that maps http://localhost:3000/ to the public/index.html file. The code is buried deep in the Rails framework. However, if you know the convention and the technique for overriding it, you have both convenience and power at your disposal. 11.5 Using the \u201cAbout\u201d Page We\u2019ve created an \u201cAbout\u201d page so we can learn about routing. For the next chapter, we\u2019ll use the static \u201cAbout\u201d page to investigate how a web application works. Later in the tutorial we\u2019ll create a new \u201cAbout\u201d page using a different approach. Chapter 12 Request and Response You\u2019ve configured the tutorial application, created static pages, and seen the magic of Rails routing. In this chapter, we\u2019ll investigate the web request-response cycle and look at the model-view-controller design pattern so you\u2019ll be prepared to build a dynamic home page. 12.1 Investigating the Request Response Cycle Remember, at its core, the World Wide Web is nothing more than web browsers that request files from web servers. Web browsers make requests . A web server responds to a request by sending an HTML file. Depending on the headers in the HTML file, the web browser may make additional requests and get additional CSS, JavaScript, and image files. The beauty and simplicity of the World Wide Web architecture, as conceived by Tim Berners-Lee in 1990, is that the web is nothing more than a request from a web browser and a response from a web server. Some web pages now include streaming video, or music, requiring an open \u201cpipe\u201d between the web server and the web browser, but even so, an initial request-response cycle delivers the page that sets up the stream. We can reduce the mystery of how the web works to its simplest components when we investigate the request-response cycle. We\u2019ll see that everything that happens in a web application takes place within the flow of the request-response cycle. Let\u2019s look at the request-response cycle. Figure 12.1: The request-response cycle. 12.1.1 Inside the Browser We can see the actual request, and the actual response, by using the diagnostic tools built into the web browser. Start the application server if it is not already running: $ rails server Developers use various web browsers during development. I\u2019ll provide instructions for Chrome, since it is the most popular. Even if you prefer Mozilla Firefox or Apple Safari, try this in Chrome, so you can follow along with the text. Start our investigation by putting Chrome into \u201cIncognito Mode\u201d with Command-Shift-N (on a Mac). On Linux, use Ctrl-Shift-N to get in incognito mode with Chrome. Alternatively, you can clear the browser cache. This clears any files that were previously cached by the browser. The Developer Tools view is your primary diagnostic tool for front-end (browser-based) development, including CSS and JavaScript. In Chrome on macOS, press Command-Option-I to open the Developer Tools View in a section of the browser window. Alternatively, you can find the menu item under View/Developer/Developer Tools. In Chrome on Windows or Linux platforms, press Shift-Ctrl-I or select Menu/Tools/Developer Tools. Initiate the request-response cycle by visiting the \u201cAbout\u201d page at http://localhost:3000/about.html . In the Developer Tools view, under the Network tab, you\u2019ll see files received by the browser from the web server. There is only one: \u201cabout.html\u201d. This is the file that the browser evaluates to display a web page. Figure 12.2: Viewing a request in the Developer Tools View. Be sure to select the Network tab in the Developer Tools view. Click the \u201cabout.html\u201d file icon. Then click the tab \u201cHeaders.\u201d The diagnostic window shows the entire request sent to the server and the entire response received by the browser. Figure 12.3: Viewing request headers in the Developer Tools View. Under the heading \u201cGeneral,\u201d you can see the request is composed of: request URL (http://localhost:3000/about.html) request method (GET) status code (200 OK or 304 Not Modified) You can also see request and response headers: request headers (including the User Agent identifier) response headers (including last-modified date/time) You can see the HTML sent to the browser by clicking the Preview or Response tabs in the view under the Network tab. Here\u2019s the point of the exercise: The browser\u2019s Developer Tools view shows all the data exchanged between the browser and server. You\u2019re looking at everything that passes through the plumbing. 12.1.2 Inside the Server The browser\u2019s Developer Tools view doesn\u2019t show you what happens on the server. For that, go to the server logs or the console window. Started GET \"/\" for ::1 at ... Notice how the diagnostic messages in the console window match the headers in the browser Developer Tools view. The browser\u2019s \u201cRequest Method:GET\u201d matches the server\u2019s \u201cStarted GET.\u201d Notice there are no console log messages for pages delivered from the public folder. Soon we\u2019ll see much more in the console window, after we\u2019ve built a dynamic web page that is assembled by the application server. 12.2 How the Browser Works What happens after the browser receives a response from the server? The response is not complete until all files are received (or the browser reaches a time-out limit). Modern browsers retrieve files asynchronously; the order and location of the files in the initial HTML file doesn\u2019t matter because the browser will try to load all the files before displaying the page. 12.2.1 Document Object Model When the web browser receives an HTML file, it creates an internal representation of the page in computer memory, called the Document Object Model (DOM). It provides a structural representation of the document. The DOM works like an API for HTML documents, allowing you to modify the content and visual presentation of the page by using JavaScript. Later in the tutorial, we\u2019ll see how a JavaScript library such as jQuery can be used to do things like hiding or revealing HTML elements on a page by manipulating the DOM. 12.2.2 Rendering Each time the DOM changes, the browser engine converts the DOM to a visual representation of the page and renders it in the browser window. Knowing about the DOM will help you understand what happens in the browser when it receives a web response. And understanding the DOM will help you work with JavaScript for front-end programming. But in this book, our focus is on building a server-side web application in Rails. Let\u2019s see how a Rails application responds to a web request. 12.3 How the Application Works Now that we\u2019ve investigated the request-response cycle, let\u2019s dig deeper to understand what happens inside the Rails application in response to a browser request. To do so, we\u2019ll need to understand the model\u2013view\u2013controller concept. 12.3.1 Video Option This eight minute video introduces the model\u2013view\u2013controller concept: Model View Controller in Rails - Best Explanation - YouTube 12.3.2 The Model View Controller Concept The model\u2013view\u2013controller concept is key to understanding how a Rails application responds to a browser request. Here is a diagram that shows what happens in the server during the request-response cycle. Figure 12.4: Model\u2013View\u2013Controller in Rails. You learned earlier that, from the perspective of a software architect, Rails is organized to conform to the model\u2013view\u2013controller software design pattern. This enforces \u201cseparation of concerns\u201d to keep code manageable and organized. The MVC design pattern is optimal for web applications and is a central organizing principle for Rails. The MVC design pattern originated in the design of desktop applications. \u201cModel\u201d classes manipulated data; \u201cview\u201d classes created the user interface; and a \u201ccontroller\u201d class responded to user interaction. Some computer scientists feel the architecture of web applications doesn\u2019t quite match the original MVC design pattern of desktop applications. We can see the reason for the quibble in the next diagram. The diagram shows the MVC architecture as part of the Rails software stack. At the base of the stack is the web browser. A request flows upward through the layers and encounters the router which dispatches the request to an appropriate controller. In a Rails application, there is a single routing file, config/routes.rb , and multiple controllers, models, and views. Figure 12.5: Model\u2013View\u2013Controller stack in Rails. Considering the importance of the router, perhaps we should call our Rails architecture the RCMV , or Routing-Controller-Model-View, pattern. Despite the quibble about nomenclature, the architecture is well understood and used by all Rails developers. Here\u2019s the step-by-step walk-through of what happens. When the web browser makes a request, a router component will check the config/routes.rb file and determine which controller should handle the request, based on the web address and HTTP protocol. The controller will obtain any needed data from a model . After obtaining data, the controller will render a response combining data from the model with a view component that provides markup and layout. The response is an HTML file that the controller assembles for the browser to display. The model, view, and controller are files you create containing Ruby code. Each file has a certain structure and syntax based on foundation model, view, and controller classes defined in the Rails framework. The model, view, and controller classes you create will inherit behavior from parent classes that are part of the framework, so you will have less code to write yourself. In most Rails applications, a model obtains data from a database, though some models obtain data from a remote connection to another server. For example, a User model might retrieve a user name and email address from a local database. A User model could also obtain a user\u2019s recent tweets from Twitter or a user\u2019s hometown from Facebook. The controller can obtain data from more than one model if necessary. A controller can have more than one action . For example, a User controller might have actions to display a list of users, or add or delete a user from a list. The config/routes.rb file matches a web request to a controller action. In the software architects\u2019 terminology, each action is a method of the controller class . We use the terms action and method interchangeably when we talk about a Rails controller; to be precise, controller actions are implemented as methods. In practice, Rails developers try to limit controllers to seven standard actions: index , show , new , create , edit , update and destroy actions. A controller that offers these actions is said to be \u201cRESTful\u201d (a term that refers to representational state transfer , another software design abstraction). It\u2019s not important to understand the abstract principles of RESTful design; recognizing the term and knowing that Rails controllers have seven standard actions is sufficient for beginners. A view file combines Ruby code with HTML markup. Typically there will be a view file associated with each controller action that displays a page. An index view might show a list of users. A \u201cshow\u201d view might provide details of a user\u2019s profile. View files look much like ordinary HTML files but typically contain data in the form of Ruby variables. Often you\u2019ll see Ruby statements such as blocks that iterate through lists to create tables. Following the \u201cseparation of concerns\u201d principle, it is considered good practice to limit Ruby code in view files to only displaying data; anything else belongs in a model. Not every controller action has its own view file. In many controllers, on completion, the destroy action will redirect to the index view, and create will redirect to either show or new . This conceptual overview will be easier to grasp when you actually see the code for a model, view, and controller. We\u2019ll create model, view, and controller files in the next chapter. 12.4 Remove the About Page We\u2019ve been using the static \u201cAbout\u201d page to investigate the request-response cycle. We\u2019re done, so delete the file public/about.html : $ rm public/about.html Earlier, we set up the config/routes.rb file. You can leave it in place. We\u2019ll change it in the next chapter. Now we\u2019ll look at ways to implement the home page using the full power of Rails. Chapter 13 Dynamic Home Page Earlier, we saw how Rails can deliver simple static web pages. Here we\u2019ll build a dynamic home page, illustrating basic concepts you\u2019ll need to understand Rails. 13.1 User Story We\u2019ll plan our work with a user story: *Birthday Countdown* As a visitor to the website I want to see the owner's name I want to see the owner's birthdate I want to see how many days until the owner's next birthday In order to send birthday greetings This silly home page will help us explore Rails and learn about the Ruby language. Our goal is to build a practical web application that you can really use. Later we\u2019ll replace this silly home page with a useful web page that encourages visitors to sign up for a mailing list. 13.2 Routes, Model, View, and Controller We\u2019ll use the model-view-controller design pattern as we build our new home page. First, we\u2019ll set up a route so a request URL gets directed to the appropriate controller. We\u2019ll set up a model so we obtain data we need for the home page. We\u2019ll set up a view that contains the HTML needed to display our home page. And finally, we\u2019ll create a controller that responds to the request, obtaining data from the model and rendering the view, sending a response to the web browser. We can create the routes, model, view, and controller in any order. All must exist before our web application will respond to a request for a home page. In this tutorial, I\u2019ve chosen to create the routes, model, view, and controller in an order that is convenient for learning. 13.3 The Name Game Much of the art of programming lies in choosing suitable names for our creations. We\u2019ll need a model as a source for data about the site owner. Choosing the most obvious name, we\u2019ll call it the Owner model: Owner - the file will be app/models/owner.rb What about a name for the controller that will render our home page? How about \u201cHome controller\u201d or \u201cWelcome controller?\u201d Those names are acceptable. But if we consider our user story, the name \u201cVisitors controller\u201d is best. A visitor is the actor, so \u201cVisitors controller\u201d is appropriate: VisitorsController - the file will be app/controllers/visitors_controller.rb Later we\u2019ll see this is a good choice because we\u2019ll create a Visitor model to handle data about the website visitor. In Rails, there is often a model with the same name as a controller (though a controller can use data from multiple models). 13.4 Naming Conventions Rails is picky about class names and filenames. That\u2019s because of the \u201cconvention over configuration\u201d principle. By requiring certain naming patterns, Rails avoids complex configuration files. Before we look at class and filename conventions, here\u2019s a note about typographic terminology: a string is a sequence of characters you\u2019re looking at an example of lowercase strings separated by spaces (words!) Titlecase means there is an Initial Capital Letter in a string CamelCase contains a capital letter in the middle of a string snake_case combines words with an underscore character instead of a space When you write code, you\u2019ll follow rules for class names: class Visitor - the model class name is capitalized and singular class VisitorsController < ApplicationController - for a controller, combine a pluralized model name with \u201cController\u201d in CamelCase Here are the rules for filenames. They are always lowercase, with words separated by underscores (snake_case): the model filename matches the model class name, but lowercase, for example app/models/visitor.rb the controller filename matches the controller class name, but snake_case, for example app/controllers/visitors_controller.rb the views folder matches the model class name, but plural and lowercase, for example app/views/visitors At first the rules may seem arbitrary, but with experience they will make sense. The rule about no capital letters or spaces in filenames has its origins in computer antiquity. If you stray from these naming conventions, you\u2019ll encounter unexpected problems and frustration. 13.5 Routing We\u2019ll create the route before we implement the model and controller. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do root to: 'visitors#new' end Any request to the application root ( http://localhost:3000/ ) will be directed to the VisitorsController new action. Don\u2019t be overly concerned about understanding the exact syntax of the code. It will become familiar soon and you can look up the details in the reference documentation, RailsGuides: Routing from the Outside In . In general, when you change a configuration file you must restart your application server. However, the config/routes.rb file is an exception. You don\u2019t need to restart the server after changing routes. If you need to start the server: $ rails server Visit the page http://localhost:3000/ . You\u2019ll see an error message because we haven\u2019t implemented the controller. The error message, \u201cuninitialized constant VisitorsController,\u201d means Rails is looking for a VisitorsController and can\u2019t find it. 13.6 Model Most Rails models obtain data from a database. When you use a database, you can use the rails generate model command to create a model that inherits from the ActiveRecord class and knows how to connect to a database. To keep things simple, our tutorial application doesn\u2019t need a database. Instead of inheriting from ActiveRecord, we create a Ruby class with methods that return the owner\u2019s name, birthdate, and days remaining until his birthday. This simple class provides an easy introduction to Ruby code. Create a file app/models/owner.rb (don\u2019t include the colon punctuation that follows): class Owner def name name \\= 'Foobar Kadigan' end def birthdate birthdate \\= Date.new(1990, 12, 22) end def countdown today \\= Date.today birthday \\= Date.new(today.year, birthdate.month, birthdate.day) if birthday \\> today countdown \\= (birthday \\- today).to\\_i else countdown \\= (birthday.next\\_year \\- today).to\\_i end end end This is your first close look at Ruby code. The oddest thing you\u2019ll see is the owner\u2019s name, \u201cFoobar Kadigan.\u201d Everything else will make sense with a bit of explanation. Keep in mind that we are using a text file to create an abstraction that we can manipulate in the computer\u2019s memory. Software architects call these abstractions objects . In Ruby, everything we create and manipulate is an object . To distinguish one object from another, we define it as a class , give it a class name , and add behavior in the form of methods . The first line class Owner defines the class and assigns a name. At the very end of the file, the end keyword completes the class definition. We define three methods, starting with def (for \u201cmethod definition\u201d) and ending with end . def name \u2026 end def birthdate \u2026 end def countdown \u2026 end Each method contains simple Ruby code that assigns data to a variable. Later, we\u2019ll retrieve the data for use in our view file by instantiating the class and calling a method. Don\u2019t be discouraged by the software architects\u2019 terminology; the concepts are simple and we\u2019ll soon see everything in action. Ruby makes it easy for a method to return data when called; the value assigned by the last statement will be delivered when the method is called. Looking more closely at the Ruby code inside the method definitions, you\u2019ll see Ruby uses the = (equals) sign to assign values to a variable. The variable is named on the left side of the equals sign; a value is assigned on the right side. We call the equals sign an assignment operator . We can assign any value to a variable, including a string (a series of characters that can be a word or name) such as \u201cFoobar Kadigan.\u201d Ruby recognizes a string when characters are enclosed in single or double quotes. Not surprisingly, a number also can be assigned to a variable, either a whole number (an integer ) or a decimal fraction (a float ). More interestingly, any Ruby object can be assigned to a variable. That helps us \u201cmove around\u201d any object very easily, giving us access to the object\u2019s class methods anywhere we use the variable. We can create our own objects, as we have by creating the Owner class. Or we can use the library of objects that are supplied with Ruby. Ruby\u2019s prefabricated objects are defined by the Ruby API ( application programming interface ); essentially the API is a catalog of prebuilt classes that are building blocks for any application. The Rails API gives us additional classes that are useful for web applications. Learning the syntax of Ruby code gets you started with Ruby programming; knowing the API classes leads to mastery of Ruby. The Date class is provided by the Ruby API. It is described in the Ruby API reference documentation . The Date class has a Date.new method which instantiates (creates) a new date when supplied with year, month, and day parameters . You can see this syntax when we assign Date.new(1990, 12, 22) to the birthdate variable. Note that Ruby has specific expectations about the syntax of numbers. The Date.new(...) method expects integers. Imagine a September birthday. You must use Date.new(1990, 9, 22) . If you enter a date in the format Date.new(1990, 09, 22) , you\u2019ll get a syntax error \u201cInvalid octal digit\u201d when you test the application. Ruby expects numbers that begin with zero to be octal numbers ; you\u2019ll get an error because octal numbers can\u2019t contain the digit \u201c9.\u201d Our countdown method contains the most complex code in the class. First, we set a variable today with today\u2019s date. The Date.today method creates an object that represents the current date. When the Date.today method is called, Ruby gets the current date from the computer\u2019s system clock. Next we create a birthday variable and assign a new date that combines today\u2019s year with the month and day of the birthdate . This gives us the date of Foobar Kadigan\u2019s birthday this year. The Date class can perform complex calendar arithmetic. The variables birthdate and today are instances of the Date class. We can use a greater-than operator to determine if Foobar Kadigan\u2019s birthday is in the future or the past. The if ... else ... end structure is a conditional statement . If the birthday is in the future, we subtract today from birthday to calculate the number of days remaining until the owner\u2019s birthday, which we assign to the countdown variable. If the birthday has already passed, we apply a next_year method to the birthday to get next year\u2019s birthday. Then we subtract today from birthday.next_year to calculate the number of days remaining until the owner\u2019s birthday, which we assign to the countdown variable. The result might be fractional so we use the utility method to_i to convert the result to a whole number (integer) before assigning it to the countdown variable. This shows you the power of programming in Ruby. Notice that I needed 16 paragraphs and over 600 words to explain 15 short lines of code. We used only seven Ruby abstractions but they represent thousands of lines of code in the Ruby language implementation. With knowledge of Ruby syntax and the Ruby API, a few short lines of code in a text file gives us amazing ability. In an upcoming chapter, we\u2019ll look more closely at the syntax and keywords of the Ruby language. But without knowing more than this, we can build a simple web application. Let\u2019s see how we can put this functionality to use on a web page. 13.7 View The Owner model provides the data we want to see on the Home page. We\u2019ll create the markup and layout in a View file and add variables that present the data. View files go in folders in the app/views/ directory. In a typical application, one controller can render multiple views, so we make a folder to match each controller. You can make a new folder using your file browser or text editor. Or use the Unix mkdir command: $ mkdir app/views/visitors Create a file app/views/visitors/new.html.erb (don\u2019t include the colon punctuation that follows): <h3>Home</h3> <p>Welcome to the home of <%= @owner.name %>.</p> <p>I was born on <%= @owner.birthdate %>.</p> <p>Only <%= @owner.countdown %> days until my birthday!</p> We\u2019ve created a visitors/ folder within the app/views/ directory. We have only a single new view but if we had more views associated with the Visitors controller, they\u2019d go in the app/views/visitors/ folder. We name our View file new.html.erb , adding the .erb file extension so that Rails will use the ERB templating engine to interpret the markup. There are several syntaxes that can be used for a view file. In this tutorial, we\u2019ll use the ERB syntax that is most commonly used by beginners. Some experienced developers prefer to add gems that provide the Haml or Slim templating engines. As you might guess, a View that uses the Haml templating syntax would be named new.html.haml . Our HTML markup is minimal, using only the <h3> and <p> tags. The only ERB markup we add are the <%= ... %> delimiters. This markup allows us to insert Ruby code which will be replaced by the result of evaluating the code. In other words, <%= @owner.name %> will appear on the page as Foobar Kadigan. You may have noticed that we refer to the Owner model with the variable @owner . It will be clear when we create the Visitors controller why we use this syntax (a variable name that begins with the @ character is called an instance variable ). Obviously, if all we wanted to do was include the owner\u2019s name on the page, it would be easier to simply write the text. The Rails implementation becomes useful if the name is retrieved from a database or created programmatically. We can better see the usefulness of the Owner model when we look at the use of <= @owner.countdown %> . There is no way to display a calculation using only static HTML, so Rails gives us a way to display the birthday countdown calculation. If you\u2019re a programmer, you might wonder why we only output the variable on the page. Since we can use ERB to embed any Ruby code, we could perform the calculation right on the page by embedding <%= (Date.new(today.year, @owner.birthdate.month, @owner.birthdate.day) - Date.today).to_i %> . If you\u2019ve used JavaScript or PHP, you may have performed calculations like this, right on the page. Rails would allow us to do so, but the practice violates the \u201cseparation of concerns\u201d principle that encourages us to perform complex calculations in a model and only display data in the view. Before we can display the home page, we need to create the Visitors controller. 13.8 Controller The Visitors controller is the glue that binds the Owner model with the VisitorsController#new view. Note: When we refer to a controller action, we use the notation \u201cVisitorsController#new,\u201d joining the controller class name with the action (method) that renders a page. In this context, the # character is only a documentation convention. Note: VisitorsController will be the class name and visitors_controller.rb will be the filename. The class name is written in camelCase (with a hump in the middle, like a camel) so we can combine two words without a space. Unix commands get messy when filenames include spaces so we create a filename that combines two words with an underscore (sometimes called \u201csnake_case\u201d). Create a file app/controllers/visitors_controller.rb (don\u2019t include the colon punctuation that follows): class VisitorsController < ApplicationController def new @owner \\= Owner.new end end We define the class and name it class VisitorsController , inheriting behavior from the ApplicationController class which is defined in the Rails API. We only need to define the new method. We create an instance variable named @owner and assign an instance of the Owner model. Any instance variables (variables named with the @ character) will be available in the corresponding view file. If we don\u2019t instantiate the Owner model, we\u2019ll get an error when the controller new action attempts to render the view because we use the @owner instance in the view file. Keep in mind the purpose of the controller. Each controller action (method) responds to a request by obtaining a model (if data is needed) and rendering a view. You\u2019ve already created a view file in the app/views/visitors folder. The new action of the VisitorsController renders the template app/views/visitors/new.html.erb . The new method is deceptively simple. Hidden behavior inherited from the ApplicationController does all the work of rendering the view. We can make the hidden code explicit if we wish to. It would look something like this: class VisitorsController < ApplicationController def new @owner \\= Owner.new render 'visitors/new' end end This is an example of Rails magic. Some developers complain this is black magic because the \u201cconvention over configuration\u201d principle leads to obscurity. Rails often offers default behavior that looks like magic because the underlying implementation is hidden in the depths of the Rails code library. This can be frustrating when, as a beginner, you want to understand what\u2019s going on. Revealing the hidden code, we see that invoking the new method calls a render method supplied by the ApplicationController parent class. The render method searches in the app/views/visitors directory for a view file named new (the file extension .html.erb is assumed by default). The code underlying the render method is complex. Fortunately, all we need to do is define the method and instantiate the Owner model. Rails takes care of the rest. As a beginner, simply accept the magic and don\u2019t confound yourself trying to find how it works. As you gain experience, you can dive into the Rails source code to unravel the magic. 13.9 Scaffolding This tutorial aims to give you a solid foundation in basic concepts. The model\u2013view\u2013controller pattern is one of the most important. I\u2019ve found the best way to understand model\u2013view\u2013controller architecture is to create and examine the model, view, and controller files. As you continue your study of Rails, you\u2019ll find other tutorials that use the scaffolding shortcut. For example, Rails Guides: Getting Started with Rails includes a section \u201cGetting Up and Running Quickly with Scaffolding\u201d which shows how to use the rails generate scaffold command to create model, view, and controller files in a single operation. Students often use scaffolding to create simple Rails applications. In practice, I\u2019ve observed that working Rails developers seldom use scaffolding. There\u2019s nothing wrong with it; it just seems that scaffolding doesn\u2019t offer much that can\u2019t be done as quickly by hand. 13.10 Test the Application We\u2019ve created a model, view, and controller. Now let\u2019s run the application. Enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see our new home page. Figure 13.1: Dynamic home page shows days until a birthday. It\u2019s a very simple web page but it uses Ruby to calculate the countdown to the birthday. And the underlying code conforms to the conventions and structure of Rails. 13.11 Git At this point, you might have the Rails server running in your console window. We\u2019re going to run a git command in the console now. You might think you have to enter Control-c to shut down the server and get the command prompt. But that\u2019s not necessary. You can open more than one console view. Your terminal application lets you open multiple windows or tabs. If you open multiple tabs, you can easily switch between console views without using a lot of screen real estate. If you haven\u2019t tried it, now is a good time. On the Mac, Command+t opens a new tab in the terminal application. It is convenient to have a console tab open for the server and another for various Unix commands. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"dynamic home page\" $ git push Now let\u2019s take a look at troubleshooting. Chapter 14 Troubleshoot In the last chapter, we built a dynamic home page and learned about the model\u2013view\u2013controller architecture of Rails. There was a lot to learn, but the code was simple, and I hope it worked the first time you tried it. Before we do any more work on our tutorial application, we need to learn about troubleshooting and debugging. As a software developer, you\u2019ll spend a lot of time with code that doesn\u2019t work. You\u2019ll need tools and techniques to diagnose problems. 14.1 Git In this chapter we\u2019ll make changes to the application just for troubleshooting. Before you get started, make sure the work you\u2019ve done is committed to your git repository. Use the git status command to check: $ git status You should see: On branch master nothing to commit, working directory clean If git status reports any uncommitted changes, go back to the last step in the previous chapter and commit your work to the git repository before continuing. At the end of this chapter, we\u2019re going to throw away the work we\u2019ve done in this chapter. We don\u2019t want to accidentally throw away work from the previous chapter so make sure it is committed to the repository. 14.2 Interactive Ruby Shell There will be times when you want to try a snippet of Ruby code just to see if it works. Your tool will be IRB, the Interactive Ruby shell. IRB is a Ruby interpreter that runs from the command line. It executes any Ruby code and provides an immediate response, allowing you to experiment in real-time. Let\u2019s try it. $ irb >> The command irb launches the program and displays a prompt that shows your Ruby version, a line number, and an arrow. I\u2019ll just show a simple prompt in the examples, instead. If you enter a valid Ruby expression, the interpreter will display the result of evaluating the expression. Try simple arithmetic: >> n \\= 2 => 2 >> n + 2 => 4 Wow! You are using your computer for simple math. Maybe you can delete the calculator app from your phone. IRB will evaluate any Ruby expression and helps you quickly determine if syntax and logic is correct. 14.2.1 IRB for Blocks of Code At first glance, it appears IRB works on just one line of code. Actually, IRB can handle multiple lines of code. Try it: >> n \\= 10 \\=> 10 >> if n < 10 >> puts \"small\" >> else ?> puts \"big\" >> end big \\=> nil >> Here we set n = 10 and then enter a conditional statement line-by-line. After we enter the final end , IRB interprets the code and outputs the result. You\u2019ll often enter more than one line of code in IRB. If you find yourself frustrated because you\u2019ve entered typos and had to enter the same code repeatedly, you can use IRB to load code you\u2019ve saved in a file: >> load './mytest.rb' 14.2.2 Quitting IRB It can be very frustrating to find you are stuck inside IRB. Unlike most shell commands, you can\u2019t quit with Control-c. Enter Control-d or type exit to quit IRB: $ irb >> exit 14.2.3 Learn More About IRB Here\u2019s an entertaining way to learn about IRB: Why\u2019s (Poignant) Guide to Ruby (with a Basic Introduction to IRB) Here\u2019s a more conventional way to learn about IRB: The Pragmatic Programmer\u2019s Guide 14.2.4 Beyond IRB If you ask experienced Rails developers for help with IRB, they\u2019ll often recommend you switch to Pry. Pry is a powerful alternative to the standard IRB shell for Ruby. As you gain experience, you might take a look at Pry to see what the enthusiasm is all about. But for now, as a beginner trying out a few lines of Ruby code, there\u2019s no need to learn Pry. 14.3 Rails Console IRB only evaluates expressions that are defined in the Ruby API. IRB doesn\u2019t know Rails. It\u2019d be great to have a tool like IRB that evaluates any expression defined in the Rails API. The tool exists; it\u2019s called the Rails console. It is particularly useful because it loads your entire Rails application. Your application will be running as if the application was waiting to respond to a web request. Then you can expose behavior of any pieces of the web application. $ rails console ... Loading development environment (Rails 5.x.x) >> The Rails console behaves like IRB but loads your Rails development environment. The prompt shows it is ready to evaluate an expression. Let\u2019s use the Rails console to examine our Owner model: >> myboss \\= Owner.new => # We\u2019ve created a variable named myboss and created a new instance of the Owner class. The Rails console responds by displaying the unique identifier it uses to track the object. The identifier is not particularly useful, except to show that something was created. If you\u2019re unsure about the difference between an instance and a class , we\u2019ve just seen that we can make one or more instances of a class by calling the Owner.new method. When we specify the Owner class, the class definition is loaded into the computer\u2019s working memory (our development environment) from the class definition file on disk. Then we can use the Owner.new method to make one or more instances of the Owner class. Each instance is a unique object with its own data attributes but the same behavior as other objects instantiated from its class. Let\u2019s assign the name of our boss to a variable called name : >> name \\= myboss.name => \"Foobar Kadigan\" Our variable myboss is an instance of an Owner class so it responds to the method Owner.name by returning the owner\u2019s name. We want to show respect to our boss so we\u2019ll perform some string manipulation : >> name \\= 'Mr. ' + name => \"Mr. Foobar Kadigan\" We\u2019re done for now. When we quit the Rails console or shut down the computer the Owner class definition remains stored on disk but the instances disappear. The bits that were organized to create the variable name will evaporate into the ether. Actually, the bits are still there, in the form of logic states in the computer\u2019s chips, but they have no meaning until another program uses them. Enter Control-d or type exit to quit the Rails console. The Rails console is a useful utility. It is like a handy calculator for your code. Use it when you need to experiment or try out short code snippets. 14.4 Rails Logger As you know, a Rails application sends output to the browser that makes a web request. On every request, it also sends diagnostic output to the server log file . Depending on whether the application is running in the development environment or in production, the log file is here: log/development.log log/production.log In development, everything written to the log file appears in the console window after you run the rails server command. Scrolling the console window is a good way to see diagnostics for every request. Here\u2019s what you see in the log after you visit the application home page: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML Rendering visitors/new.html.erb within layouts/application Rendered visitors/new.html.erb within layouts/application (6.6ms) Completed 200 OK in 650ms (Views: 634.4ms | ActiveRecord: 0.0ms) You may have more than one console window open in the terminal application. If you don\u2019t see your log output in your terminal, check if you have tabs with other windows. Here\u2019s the best part. You can add your own messages to the log output by using the Rails logger. Let\u2019s try it out. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name end end Visit the home page again and you\u2019ll see this in the console output: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application Rendered visitors/new.html.erb within layouts/application (1.1ms) Completed 200 OK in 81ms (Views: 72.2ms | ActiveRecord: 0.0ms) If you really needed to do so, you could add a logger statement at every step in the application. You could see how the application behaves, step by step. And you could \u201cprint\u201d the value of every variable at every step. You\u2019ll never need diagnostics at this level of detail in Rails, but the logger is extremely useful when you are trying to understand unexpected behavior. Let\u2019s add logger statements to the Owner model. Modify the file app/models/owner.rb : class Owner def name name \\= 'Foobar Kadigan' end def birthdate birthdate \\= Date.new(1990, 12, 22) end def countdown Rails.logger.debug 'DEBUG: entering Owner countdown method' today \\= Date.today birthday \\= Date.new(today.year, birthdate.month, birthdate.day) if birthday > today countdown \\= (birthday - today).to_i else countdown \\= (birthday.next_year - today).to_i end end end We added the Rails.logger.debug statement to the Owner.countdown method. Visit the home page and here\u2019s what you\u2019ll see in the console output: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application DEBUG: entering Owner countdown method Rendered visitors/new.html.erb within layouts/application (0.7ms) Completed 200 OK in 69ms (Views: 61.1ms | ActiveRecord: 0.0ms) You\u2019ll often need to \u201cget inside\u201d the model or controller to see what\u2019s happening. The Rails logger is the best tool for the job. Here are some tricks for the Rails logger. In a controller, you can use the method logger on its own. In a model, you have to write Rails.logger (both class and method). You can use any of the methods logger.debug , logger.info , logger.warn , logger.error , or logger.fatal to write log messages. By default, you\u2019ll see any of these messages in the development log. Log messages written with the logger.debug method will not be recorded in a production log file. If you want your log messages to stand out, you can add formating code for color: Rails.logger.debug \"\\033[1;34;40m[DEBUG]\\033[0m \" + 'will appear in bold blue' For more about the Rails logger, see the RailsGuide: Debugging Rails Applications . 14.5 Revisiting the Request-Response Cycle Earlier, when we investigated the request-response cycle, we looked in the server log to see the response to the web browser request. Now, with debug statements in the controller and model, we\u2019ll see messages showing the server\u2019s traverse of the model-view-controller architecture. Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application DEBUG: entering Owner countdown method Rendered visitors/new.html.erb within layouts/application (0.7ms) Completed 200 OK in 69ms (Views: 61.1ms | ActiveRecord: 0.0ms) Notice how the diagnostic messages in the console window match the headers in the browser Developer Tools view. The browser\u2019s \u201cRequest Method:GET\u201d matches the server\u2019s \u201cStarted GET.\u201d The browser\u2019s \u201cStatus Code: 200\u201d matches the server\u2019s \u201cCompleted 200 OK\u201d (you might have to clear the browser\u2019s cache if the browser is showing \u201c304 Not Modified\u201d). We can see evidence of the model-view-controller architecture. \u201cProcessing by VisitorsController#new\u201d shows the program flow entering the controller. Our debug statements show we enter the new method and reveal the value of the Owner name. The next debug statement reveals the flow has passed to the Owner model. A diagnostic message shows the controller has rendered the visitors/new.html.erb view file. Finally, the \u201cCompleted 200 OK\u201d message indicates the response has been sent to the browser. As we learned, the model-view-controller architecture is an abstract design pattern. We\u2019ve seen it reflected in the file structure of the Rails application directory. Now we can see it as activity in the server log. 14.6 The Stack Trace The Rails logger is extremely useful if you want to insert messages to show program flow or display variables. But there will be times when program flow halts and the console displays a stack trace . Let\u2019s deliberately create an error condition and see an error page and stack trace. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name DISASTER end end Visit the home page and you\u2019ll see an error page: Figure 14.1: Error page. You\u2019ll see this error page because we\u2019ve installed the better_errors gem. Without the better_errors gem, you\u2019d see the default Rails error page which is quite similar. In the console log, the stack trace will show everything that happens before Rails encounters the error: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Completed 500 Internal Server Error in 8ms (ActiveRecord: 0.0ms) NameError - uninitialized constant VisitorsController::DISASTER: app/controllers/visitors_controller.rb:7:in `new' . . . To save space, I\u2019m only showing the top line of the stack trace. I\u2019ve eliminated about sixty lines from the stack trace. Don\u2019t feel bad if your reaction to a stack trace is an immediate, \u201cTMI!\u201d Indeed, it is usually Too Much Information. There are times when it pays to carefully read through the stack trace line by line, but most often, only the top line of the stack trace is important. In this case, both the error page and the top line of the stack trace show the application failed (I prefer to say, \u201cbarfed\u201d) when it encountered an \u201cuninitialized constant\u201d at line 7 of the app/controllers/visitors_controller.rb file in the new method. It\u2019s easy to find line 7 in the file and see that is exactly where we added a string that Rails doesn\u2019t understand. The point of this exercise is to encourage you to read the top line of the stack trace and use it to diagnose the problem. I\u2019m always surprised how many developers ignore the stack trace, probably because it looks intimidating. 14.7 Raising an Exception As you just saw, you can purposefully break your application by adding characters that Rails doesn\u2019t understand. However, there is a better way to force your program to halt, called raising an exception . Let\u2019s try it. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name raise 'Deliberate Failure' end end You can throw an error by using the raise keyword from the Ruby API. You can provide any error message you\u2019d like in quotes following raise . Here\u2019s the console log after you try to visit the home page: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Completed 500 Internal Server Error in 6ms (ActiveRecord: 0.0ms) RuntimeError - Deliberate Failure: app/controllers/visitors_controller.rb:7:in `new' . . . Before we continue, let\u2019s remove the deliberate failure. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name end end Rails and the Ruby API provide a rich library of classes and methods to raise and handle exceptions. For example, you might want to display an error if a user enters a birthdate that is not in the past. Rails includes various exception handlers to display errors in production so users will see a helpful web page explaining the error. 14.8 Git There\u2019s no need to save any of the changes we made for troubleshooting. You could go to each file and carefully remove the debugging code you added. But there\u2019s an easier way. Check which files have changed: $ git status Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: app/controllers/visitors_controller.rb modified: app/models/owner.rb no changes added to commit (use \"git add\" and/or \"git commit -a\") Use Git to revert your project to the most recent commit: $ git reset --hard HEAD The Git command git reset \u2013hard HEAD discards any changes you\u2019ve made since the most recent commit. Check the status to make sure: $ git status On branch master nothing to commit, working directory clean We\u2019ve cleaned up after our troubleshooting exercise. Chapter 15 Just Enough Ruby Experienced Rails developers debate whether beginners should study Ruby before learning Rails. By all means, if you love the precision and order of programming languages, dive into the study of Ruby from the beginning. But most people don\u2019t delay starting Rails while learning Ruby; realistically, you\u2019ll retain more knowledge of Ruby if you learn it as you build things in Rails. That is the approach we\u2019ve taken in this book. You\u2019ve already built a simple Rails application and used Ruby as you did so. 15.1 Reading Knowledge of Ruby What you need, more than anything, when you start working with Rails, is reading knowledge of Ruby. With a reading knowledge of Ruby you\u2019ll avoid feeling overwhelmed or lost when you encounter code examples or work through a tutorial. Later, as you tackle complex projects and write original code, you\u2019ll need to know enough of the Ruby language to implement the features you need. But as a student, you\u2019ll be following tutorials that give you all the Ruby you need. Your job is to recognize the language keywords and use the correct syntax when you type Ruby code in your text editor. To that end, this chapter will review the Ruby keywords and syntax you\u2019ve already learned. And you\u2019ll extend your knowledge so you\u2019ll be prepared for the Ruby you\u2019ll encounter in upcoming chapters. 15.2 Ruby Example To improve your reading knowledge of Ruby, we\u2019ll work with an example file that contains a variety of Ruby expressions. We won\u2019t use this file in our tutorial application, so you\u2019ll delete it at the end of this chapter. But we\u2019ll approach it as real Ruby code, so make a file and copy the code using your text editor. First we have to consider where the file should go. It will not be a model, view, controller, or any other standard component of Rails. Rails has a place for miscellaneous files that don\u2019t fit in the Rails API. We\u2019ll create the file in the lib/ folder. That\u2019s the folder you\u2019ll use for any supporting Ruby code that doesn\u2019t fit elsewhere in the Rails framework. Create a file lib/example.rb : class Example < Object # This is a comment. attr_accessor :honorific attr_accessor :name attr_accessor :date def initialize(name,date) @name \\= name @date \\= date.nil? ? Date.today : date end def backwards_name @name.reverse end def to_s @name end def titled_name @honorific ||= 'Esteemed' titled_name \\= \"#{@honorific} #{@name}\" end def december_birthdays born_in_december \\= [ ] famous_birthdays.each do |name, date| if date.month \\== 12 born_in_december << name end end born_in_december end private def famous_birthdays birthdays \\= { 'Ludwig van Beethoven' \\=> Date.new(1770,12,16), 'Dave Brubeck' \\=> Date.new(1920,12,6), 'Buddy Holly' \\=> Date.new(1936,9,7), 'Keith Richards' \\=> Date.new(1943,12,18) } end end In some ways, this Ruby code is like a poem from Lewis Carroll: 'Twas brillig, and the slithy toves Did gyre and gimble in the wabe; All mimsy were the borogoves, And the mome raths outgrabe. \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch! Beware the Jubjub bird, and shun The frumious Bandersnatch!\" The poem corresponds to the rules of English syntax but is nonsense. The code follows the rules of Ruby syntax, and unlike the poem, uses meaningful words. But it is unclear how the author intends anyone to use the code. If you\u2019re beginning a career as a Rails developer, this won\u2019t be the last time you look at code and wonder what the author was intending. In this case, I just want to give you some code that illustrates typical Ruby syntax and structure. 15.3 Ruby Keywords When reading Ruby code, the first challenge is determining which words are Ruby keywords and which were made up by the developer. Code is only strings of characters. But some strings have special meaning for everyone and all others are arbitrary words that only have meaning to an individual developer. As you gain experience, you\u2019ll recognize Ruby keywords because you\u2019ve seen them before. You\u2019ll also recognize a developer\u2019s made-up words because of their position relative to other words and symbols. Some made-up words will be obvious because they are just too idiosyncratic to be part of the Ruby language. For example, you\u2019ll rightly guess that myapp or fluffycat are not part of the Ruby language. If you\u2019re reading a Lewis Carroll poem, you could look up words in a dictionary to see if you find them. There is only one way to be sure which words are part of the Ruby language: Check the Ruby API. As an exercise, pick one of the words from the example code that you think might be a Ruby keyword and search the API to find it. If you want to be a diligent student, you can check every keyword in the example code to find out whether it is in the Ruby API. It is more practical to learn to recognize Ruby keywords, which we\u2019ll do next. 15.3.1 API Documentation The Ruby API documentation lists every keyword in the language: ruby-doc.org - the official Ruby API apidock.com/ruby - Ruby API docs with usage notes 15.4 Ruby Files When we write code, we save it in files. We\u2019ve added our miscellaneous example file to the lib/ folder. By convention, Ruby files end with the file extension .rb . 15.4.1 Using IRB In the \u201cTroubleshooting\u201d chapter, you used IRB (the Interactive Ruby Shell) to try out Ruby code. You can use IRB to try out the example code in the console. $ irb >> load 'lib/example.rb' \\=> true >> require 'date' \\=> true >> ex \\= Example.new('Daniel',nil) \\=> #<Example:0x007fb46c9eecd8 @name=\"Daniel\", @date=# \\> list \\= ex.december\\_birthdays \\=> [\"Ludwig van Beethoven\", \"Dave Brubeck\", \"Keith Richards\"] >> Entering the load directive and the filename brings the code into IRB. The require \u2019date\u2019 statement loads the Ruby date library. The statement ex = Example.new(\u2019Daniel\u2019,nil) creates an object from the Example class. The ex.december_birthdays method returns an array of names. Remember you can use Control-d to exit from IRB. Now, for practice, we\u2019ll read the Ruby code. 15.5 Whitespace and Line Endings Whitespace characters such as spaces and tabs are generally ignored in Ruby code, except when they are included in strings. There are several special cases where whitespace is significant in Ruby expressions but you are not likely to encounter these cases as a beginning Rails developer. Some programming languages (Java and the C family) require a semicolon as a terminator character at the end of statements. Ruby does not require a semicolon to terminate a statement. Instead, if the Ruby code on a line is a complete expression, the line ending signifies the end of the statement. If the line ends with a + or other operator, or a backslash character, the statement is split into multiple lines. 15.6 Comments Ruby ignores everything that is marked as a comment. Use comments for notes to yourself or other programmers. # This is a comment. You can also turn code into comments if you don\u2019t want the code to run. This is a common trick when you want to \u201cturn off\u201d some part of your code but you don\u2019t want to delete it just yet, because you are trying out alternatives. 15.7 The Heart of Programming Three principles are at the heart of all programming: syntax conditional execution transformation Computers allow no ambiguity. Code must exactly follow the syntax of a language. Typos, guesses, and code that is almost-but-not-quite right will simply fail, often without any helpful error messages. Computers seem intelligent because they can execute code conditionally . You can write a program so that given one set of conditions, certain parts of the code will execute, and given different conditions, other parts of the code will execute. Lastly, programs are written to transform abstractions from one form to another. That\u2019s why computer programs look like math. When we learn simple arithmetic, we learn we can take the symbols for numbers and add them together to make a different number. Computer programs do more than add numbers; a program can transform words and other abstractions. 15.8 Assignment In Ruby, like many other programming languages, the equals sign indicates we are assigning a value. name \\= 'Foobar Kadigan' Assignment is the first step to transformation. Here \u2019Foobar Kadigan\u2019 is a string of letters. The equals sign is the assignment operator. And name is a variable that stores the value so it can be easily reused. We don\u2019t have to type \u2019Foobar Kadigan\u2019 every time we need a name; we can use name instead. Just as we can assign a value to a variable, we can reassign a new value whenever we want. That is why we call them variables; the value can vary. name \\= 'Mr. Foobar Kadigan' Variables can be assigned strings of letters, numbers, or anything else. \u201cAnything else\u201d is very broad because we can use Ruby to make complex structures that contain data and also \u201cdo work.\u201d These complex structures are objects and we say that Ruby is object-oriented because it is easy to work with objects in Ruby. 15.9 Object-Oriented Terminology Software architects use a common vocabulary to talk about programming languages: class instance or object method attribute or property inheritance class hierarchy There are three ways to learn what these words mean. You can memorize the definitions. You can write code and intuitively grasp the meanings. Or you can gain an understanding by applying metaphors. 15.9.1 Houses For example, some programming textbooks attempt to explain a class like this: A blueprint for a house design is like a class definition . All the houses built from that blueprint are objects of a class we could call House. 15.9.2 Vehicles Or: The concept of \u201cvehicle\u201d is like a class . Vehicles can have attributes , like color or number of doors. They have behavior, or methods , like buttons that turn on lights or honk a horn. The concepts of \u201ctruck\u201d or \u201ccar\u201d are also classes, inheriting common characteristics from a superclass \u201cvehicle.\u201d The blue car in your driveway with four doors is an object, a particular instance of the class \u201ccar.\u201d 15.9.3 Cookies I like the cookie metaphor the best. A class definition is like a cookie cutter. Bits in the computer memory are like cookie dough. The cookie cutter makes as many individual cookies as you want. Each cookie is an instance of the Cookie class, with the same shape and size as the others. Cookies are objects . You can decorate each cookie with sprinkles, which are attributes that are unique to each instance. Some cookies get red sprinkles, some get green, but the shape remains the same. Running a program is like baking. The cookies change state from raw to cooked. Sticking a toothpick in a cookie is like calling a method . The method returns a result that tells you about the state: Is it done? 15.9.4 Limitations of Metaphors Metaphors are imperfect. If baking was like running a program, all the cookies would disappear as soon as the oven was turned off. When a software program contains a \u201ccar\u201d model, it doesn\u2019t fully model cars in the physical world. It represents an abstraction of characteristics a programmer deems significant. Let\u2019s make a model for a Person that contains an attribute Gender. What values are possible for the attribute Gender? For many years, Facebook offered two choices, male and female. In 2014, Facebook suddenly offered a choice of over fifty gender terms. As Sarah Mei discusses in a blog post, Why Gender is a Text Field on Diaspora , your assumptions have consequences when you build a model. Most classes in software APIs don\u2019t model anything in the real world. They typically represent an abstraction, like an Array or a Hash, which inherits characteristics from another abstraction, for example, a Collection. Given the limitations of metaphors, maybe it is easier to simply say that software allows us to create abstractions that are \u201cmade real\u201d and then manipulated and transformed. Terminology such as class and instance describe the abstractions and the relationships among them. 15.9.5 Definitions Here are definitions for some of the terms we encounter when we consider Rails from the perspective of a software architect: class an abstraction that encapsulates data and behavior class definition written code that describes a class instance or object a unique copy of a class that exists only while a program is running *inheritance a way to make a class by borrowing from another class class hierarchy classes that are related by inheritance method a command that returns data from an object *attribute or property data that can be set or retrieved from the object variable a name that can be assigned a value or object expression or statement*** any combination of variables, classes, and methods that returns a result Some of these terms are abstractions that are \u201cmade real\u201d in the Ruby API (such as class and method); others are just terms that describe code, much like we use terms such as \u201cadjective\u201d or \u201cnoun\u201d to talk about the grammar of the English spoken language. 15.10 Classes You don\u2019t have to create classes to program in Ruby. If you only write simple programs, you won\u2019t need classes. Classes are used to organize your code and make your software more modular. For the software architect, classes make it possible to create a structure for complex software programs. To use Rails, you\u2019ll use the classes and methods that are defined in the Rails API. There is one class at the apex of the Ruby class hierarchy: BasicObject . BasicObject is a very simple class, with almost no methods of its own. The Object class inherits from BasicObject . All classes in the Ruby and Rails APIs inherit behavior from Object . Object provides basic methods such as nil? and to_s (\u201cto string\u201d) for every class that inherits from Object . We create a class Example and inherit from Object with the < \u201cinherits from\u201d operator: class Example < Object . . . end The end statement indicates all the preceding code is part of the Example class. In Ruby, all classes inherit from the Object class, so we don\u2019t need to explicitly subclass from Object as we do here. The example just shows it for teaching purposes. Here is the Example class without the explicit subclassing from Object : class Example . . . end Much of the art of programming is knowing what classes are available in the API and deciding when to subclass to inherit useful methods. 15.11 Methods Classes give organization and structure to a program. Methods get the work done. Any class can have methods. Methods are a series of expressions that return a result (a value). We say methods describe the class behavior. A method definition begins with the keyword def and (predictably) ends with end . def backwards_name @name.reverse end Initializing the object and calling the method returns a result: ex \\= Example.new('Daniel',nil) my_backwards_name \\= ex.backwards_name \\=> leinaD We can also override a method from the parent class. def to_s @name end Here we are overriding the to_s (\u201cto string\u201d) method from the parent Object class. Ordinarily, the to_s method returns the object\u2019s class name and an object id. Here we will return the string assigned to the variable @name . Most times you won\u2019t override the to_s (\u201cto string\u201d) method. This example shows how you can override any method inherited from a parent class. 15.12 Dot Operator The \u201cdot\u201d is the method operator. This tiny punctuation symbol is a powerful operator in Ruby. It allows us to call a method to get a result. Sometimes we say we send a message to the object when we invoke a method, implying the object will send a result. Some classes, such as Date , provide class methods which can be called directly on the class without instantiating it first. For example, you can run this in the Rails console: Date.today \\=> Tue, 15 Oct 2013 More often, methods are called on variables which are instances of a class. For example: birthdate \\= Date.new(1990, 12, 22) \\=> Sat, 22 Dec 1990 birthmonth \\= birthdate.month \\=> 12 We can apply method chaining to objects. For example, String has methods reverse and upcase (among many others). We could write: nonsense \\= 'foobar' \\=> \"foobar\" reversed \\= nonsense.reverse \\=> \"raboof\" capitalized \\= reversed.upcase \\=> \"RABOOF\" It is easier to use method chaining and write: 'foobar'.reverse.upcase \\=> \"RABOOF\" Classes create a structure for our software programs and methods do all the work. 15.12.1 Question and Exclamation Methods You\u2019ll see question marks and exclamation points (sometimes called the \u201cbang\u201d character) used in method names. These characters are simply a naming convention for Ruby methods. The question mark indicates the method will return a boolean value (true or false). The bang character indicates the method is \u201cdangerous.\u201d In some cases it means the method will change the object rather just return a result. In Rails an exclamation point often means the method will throw an exception on failure rather than failing silently. 15.13 Initialize Method Objects are created from classes before they are used. As I suggested earlier, class definitions are cookie cutters; the Ruby interpreter uses them to cut cookies. When we call the new method, we press the cookie cutter into the dough and get a new object. All the cookies will have the same shape but they can be decorated differently, by sprinkling attributes of different values. The initialize method is one of the ways we sprinkle attributes on our cookie. def initialize(name,date) When we want to use an Example object and assign it to a variable, we will instantiate it with Example.new(name,date) . The new method calls the initialize method automatically. If we don\u2019t define an initialize method, the new method still works, inherited from Object , so we can always instantiate any class. 15.14 Method Parameters Methods are useful when they operate on data. If we want to send data to a method, we define the method and indicate it will accept parameters . Parameters are placeholders for data values. The values that are passed to a method are arguments . \u201cParameters\u201d are empty placeholders and \u201carguments\u201d are the actual values. In practice, \u201cparameters\u201d and \u201carguments\u201d are terms that are used interchangeably and not many developers will notice if you mix up the terms. Our initialize method takes name and date arguments: def initialize(name,date) Ruby is clever with method parameters. You can define a method and specify default values for parameters. You can also pass extra arguments to a method if you define a method that allows optional parameters. This makes methods very flexible. We separate our parameters with commas. For readability, we enclose our list of parameters in parentheses. In Ruby, parentheses are always optional but they often improve readability. 15.15 Variable In Ruby, everything is an object. We can assign any object to a variable. The variable works like an alias. We can use a variable anywhere as if it were the assigned object. The variable can be assigned a string, a numeric value, or an instance of any class (all are objects). name You can assign a new value to a variable anywhere in your method. You can assign a different kind of object if you want. You can take away someone\u2019s name and give them a number. We can create a variable player , assign it the string \u2019Jackie Robinson\u2019 , replace the value with an integer 42 , or even a date such as Date.new(1947,4,15) . 15.15.1 Symbol Obviously, we see many symbols when we read Ruby code, such as punctuation marks and alphanumeric characters. But symbol has a specific meaning in Ruby. It is like a variable, but it can only be assigned a value once. After the initial assignment, it is immutable ; it cannot be changed. You will recognize a symbol by the colon that is always the first character. :name Symbols are efficient and fast because the Ruby interpreter doesn\u2019t have to work to check their current values. You\u2019ll often see symbols used in Rails where you might expect a variable. 15.16 Attributes In an object, methods do the work and data is stored as variables. We can use the initialize method to input data to the object. We can\u2019t access data in variables from outside the object unless it is exposed as attributes . Classes can have attributes, which we can \u201cset\u201d and \u201cget.\u201d That is, we can establish a value for an attribute and retrieve the value by specifying the attribute name. Attributes are a convenient way to push data to an object and pull it out later. In Ruby, attributes are also called properties. Here we use the attr_accessor directive to specify that we want to expose honorific , name and date attributes. attr_accessor :honorific attr_accessor :name attr_accessor :date If we use attr_accessor to establish attributes, we can use the attribute names as methods. For example, we could write: ex \\= Example.new('Daniel',nil) my_name \\= ex.name In Ruby, attributes are just specialized methods that expose data outside the object. 15.17 Instance Variable Inside an object, an ordinary variable only can be used within the method in which it appears. If you use a variable with the same name in two different methods, it will have a different value in each method. The scope of a variable is limited to the method in which it is used. Often you want a variable to be available throughout an instance, within any method. You can declare an instance variable by using an @ (at) sign as the first character of the variable name. The instance variable can be used by any method after the class is instantiated. @name \\= name The values assigned to instance variables are unique for every instance of the class. If you create multiple instances of a class, each will have its own values for its instance variables. Here we create two instances of the Example class. The @name instance variable will be \u201cDaniel\u201d in the first instance and \u201cFoobar\u201d in the second instance. ex1 \\= Example.new('Daniel',nil) ex2 \\= Example.new('Foobar',nil) An instance variable is not visible outside the object in which it appears; but when you create an attr_accessor , it creates an instance variable and makes it accessible outside the object. 15.17.1 Instance Variables in Rails In a Rails controller, you\u2019ll often see a model assigned to an instance variable. Earlier we saw @owner = Owner.new when we instantiated an Owner model. We use an instance variable when we want a model to be available to the view template. Rails beginners learn the simple rule that you have to use the @ (at) sign if you want a variable to be available in the view. Intermediate Rails developers learn that the variable with the @ (at) sign is called an instance variable and is only available within the scope of the instance (practically speaking, to other methods in the class definition). That leads to a question: Why is an instance variable available inside a view? There is a good reason. A Rails view is NOT a separate class. It is a template and, under the hood, it is part of the current controller object. From the viewpoint of a programmer, a Rails controller and a view are separate files, segregated in separate folders. From the viewpoint of a software architect, the controller is a single object that evaluates the template code, so an instance variable can be used in the view file. This example shows us that the programmer and the software architect have different perspectives on a Rails application. Understanding Rails requires an integration of multiple points of view. 15.18 Double Bar Equals Operator I\u2019ve suggested that the best way to get help is to use Google or Stack Overflow to look for answers. But that\u2019s difficult when you don\u2019t know what symbols are called. Try googling \u201c||=\u201d and you\u2019ll get no results. Instead, try googling \u201cbar bar equals ruby\u201d or \u201cdouble pipe equals ruby\u201d and you\u2019ll find many explanations of the \u201cor equals\u201d operator. This is an example of mysterious shorthand code you\u2019ll often find in Rails. \u201d||=\u201d is used for conditional assignment. In this case, we only assign a value to the variable if no value has been previously assigned. @honorific ||= 'Esteemed' It is equivalent to this conditional expression: if not x x \\= y end Conditional assignment is often used to assign a \u201cdefault value\u201d when no other value has been assigned. 15.19 Conditional Conditional logic is fundamental to programming. Our code is always a path with many branches. When the Ruby interpreter encounters an if keyword, it expects to find an expression which evaluates as true or false (a boolean ). If the expression is true, the statements following the condition are executed. If the expression is false, any statements are ignored, unless there is an else , in which case an alternative is executed. if date.month \\== 12 . . . end Sometimes you\u2019ll see unless instead of if , which is a convenient way of saying \u201cexecute the following if the condition is false.\u201d In Ruby, the conditional expression can be a simple comparison, as illustrated above with the == (double equals) operator. Or if can be followed by a variable that has been assigned a boolean value. Or you can call a method that returns a boolean result. 15.20 Ternary Operator A basic conditional structure might look like this: if date.nil? @date \\= Date.today else @date \\= date end We test if date is undefined (nil). If nil, we assign today\u2019s date to the instance variable @date . If date is already assigned a value, we assign it to the instance variable @date . This is useful in the initialize(name,date) method in our example code because we want to set today\u2019s date as the default value for the instance variable @date if the parameter date is nil. Ruby developers like to keep their code tight and compact. So you\u2019ll see a condensed version of this conditional structure often, particularly when a default value must be assigned. This compact conditional syntax is named the ternary operator because it has three components. Here is the syntax: condition ? value_if_true : value_if_false Here is the ternary operator we use in our example code: @date \\= date.nil? ? Date.today : date This is another example of Ruby syntax that you must learn to recognize by sight because it is difficult to interpret if you have never seen it before. For more Ruby code that has been condensed into obscurity, see an article on Ruby Golf . Ruby golf is the sport of writing code that uses as few characters as possible. 15.21 Interpolation Rubyists love to find special uses for orthography such as hashmarks and curly braces. It seems Rubyists feel sorry for punctuation marks that don\u2019t get much use in the English language and like to give them new jobs. We already know that we can assign a string to a variable: name \\= 'Foobar Kadigan' We can also perform \u201cstring addition\u201d to concatenate strings. Here we add an honorific, a space, and a name: @honorific \\= 'Mr.' @name \\= 'Foobar Kadigan' titled_name \\= @honorific + ' ' + @name \\=> \"Mr. Foobar Kadigan\" Single quote marks indicate a string. In the example above, we enclose a space character within quote marks so we add a space to our string. You can eliminate the ungainly mix of plus signs, single quote marks, and space characters in the example above. Use double quote marks and you can perform interpolation , which gives a new job to the hashmark and curly brace characters: @honorific \\= 'Mr.' @name \\= 'Foobar Kadigan' titled_name \\= \"#{@honorific} #{@name}\" \\=> \"Mr. Foobar Kadigan\" The hashmark indicates any expression within the curly braces is to be evaluated and returned as a string. This only works when you surround the expression with double quote marks. Interpolation is cryptic when you first encounter the syntax, but it streamlines string concatenation. 15.22 Access Control Any method you define will return a result. Sometimes you want to create a method that only can be used by other methods in the same class. This is common when you need a simple utility method that is used by several other methods. Any methods that follow the keyword private should only be used by methods in the same class (or a subclass). private You often see private methods in Rails. Ruby provides a protected keyword as well, but the difference between protected and private is subtle and protected is seldom seen in Rails applications. 15.23 Hash Our example code includes a private method named famous_birthdays that returns a collection of names and birthdays of famous musicians. Computers have always been calculation machines; they are just as important in managing collections. One important type of collection is named a Hash. A Hash is a data structure that associates a key to some value. You retrieve the value based upon its key. This construct is called a dictionary , an associative array , or a map in other languages. You use the key to \u201clook up\u201d a value, as you would look up a definition for a word in a dictionary. You\u2019ll recognize a Hash when you see curly braces (again, Rubyists give a job to under-utilized punctuation marks). birthdays \\= { 'Ludwig van Beethoven' \\=> Date.new(1770,12,16), 'Dave Brubeck' \\=> Date.new(1920,12,6), 'Buddy Holly' \\=> Date.new(1936,9,7), 'Keith Richards' \\=> Date.new(1943,12,18) } Rubyists also like to create novel uses for mathematical symbols. The combination of an = (equals) sign and > (greater than) sign is called a hashrocket . The => (hashrocket) operator associates a key and value pair in a Hash. You\u2019ll often see hashrockets in code written before Ruby 1.9. Ruby 1.9 introduced a new syntax using colons instead of hashrockets. Whether with colons or hashrockets, you\u2019ll often see Hashes used in Rails. With Ruby 1.9 and later, here\u2019s how we associate key and value pairs in a Hash: birthdays \\= { beethoven: Date.new(1770,12,16), brubeck: Date.new(1920,12,6), holly: Date.new(1936,9,7), richards: Date.new(1943,12,18) } Here, instead of using a string as the key, we are using Ruby symbols, which enable faster processing. The : (colon) character associates the key and value. Ordinarily, a symbol is defined with a leading colon character. In a Hash, a trailing colon makes a string into a symbol. If you want to transform a string containing spaces into a symbol in a Hash, you can do it, though the syntax is awkward: birthdays \\= { 'Ludwig van Beethoven': Date.new(1770,12,16) } 15.24 Array An Array is a list. Arrays can hold objects of any data type. In fact, arrays can contain a mix of different objects. For example, an array can contain a string and another array (this is an example of a nested array ). An array can be instantiated with square brackets: born_in_december \\= [ ] We can populate the array with values when we create it: my_list \\= ['apples', 'oranges'] If we don\u2019t want to use quote marks and commas to separate strings in a list, we can use the %w syntax: my_list \\= %w( apples oranges ) We can add new elements to an array with a push method: my_list \\= Array.new \\=> [] my_list.push 'apples' \\=> [\"apples\"] my_list.push 'oranges' \\=> [\"apples\", \"oranges\"] In our example code, we use the << shovel operator to add items to the array: born_in_december << name A Ruby array has close to a hundred available methods, including operations such as size and sort . See the Ruby API for a full list. 15.25 Iterator Of all the methods available for a Ruby collection such as Hash or Array, the iterator may be the most useful. You\u2019ll recognize an iterator when you see the each method applied to a Hash or Array: famous_birthdays.each The each keyword is always followed by a block of code. Each item in an Array, or key-value pair in a Hash, is passed to the block of code to be processed. 15.26 Block You can recognize a block in Ruby when you see a do ... end structure. A block is a common way to process each item when an iterator such as each is applied to a Hash or Array. In our example, we iterate over the famous_birthdays hash: famous_birthdays.each do |name, date| . . . end Within the two pipes (or bars), we assign the key and value to two variables. The block is like an unnamed method. The two variables are available only within the block. As each key-value pair is presented by the iterator, the variables are assigned, and the statements in the block are executed. In our example code, we evaluate each date in the famous_birthdays hash to determine if the musician was born in December. When we find a December birthday, we add the name of the musician to the born_in_december array: famous_birthdays.each do |name, date| if date.month \\== 12 born_in_december << name end end When you use a block within a method, any variable in your method is available within the block. That\u2019s why we can add name to the array born_in_december . Computer scientists consider a block to be a programming language construct called a closure . Ruby has other closures, including the proc (short for procedure) and the lambda . Though blocks are common you\u2019ll seldom see procs or lambdas in ordinary Rails code. They are more common in the Rails source code where advanced programming techniques are used more frequently. The key point to know about a block (or a proc or a lambda) is that it works like a method. Though you don\u2019t see a method definition, you can use a block to evaluate a sequence of statements and obtain a result. 15.27 Rails and More Keywords We\u2019ve looked at only a few of the keywords and constructs you will see in Ruby code. The exercise has improved your Ruby literacy, so you\u2019ll have an easier time reading Ruby code. Nothing in the exercise is Rails. The example code only uses keywords from the Ruby API. Rails has its own API, with hundreds of classes and methods. The Rails API uses the syntax and keywords of the Ruby language to construct new classes and create new keywords that are specific to Rails and useful for building web applications. We say Ruby is a general-purpose language because it can be used for anything. Rails is a domain-specific language (DSL) because it is used only by people building web applications (in this sense, \u201cdomain\u201d means area or field of activity). Ruby is a great language to use for building a DSL, which is why it was used for Rails. Unlike some other programming languages, Ruby easily can be extended or tweaked. For example, developers can redefine classes, add extra methods to existing classes, and use the special method_missing method to handle method calls that aren\u2019t previously defined. Software architects call this metaprogramming which simply means clever programming that twists and reworks the programming language. When you add a gem to a Rails project, you\u2019ll add additional keywords. Some of the most powerful gems add their own DSLs to your project. For example, the Cucumber gem provides a DSL for turning user stories into automated tests. Adding Rails, additional gems, and DSLs provides powerful functionality at the cost of complexity. But it all conforms to the syntax of the Ruby language. As you learn to recognize Ruby keywords and language structures, you\u2019ll be able to pick apart the complexity and make sense of any code. 15.28 More Ruby To develop your proficiency as a Rails developer, I hope you will make an effort to learn Ruby as you learn Rails. Don\u2019t be lazy; when you encounter a bit of Ruby you don\u2019t understand, make an effort to find out what is going on. Spend time with a Ruby textbook or interactive course when you work on Rails projects. 15.28.1 Collaborative Learning The best way to learn Ruby is to actually use it. That\u2019s the concept behind this site: Exercism.io With Exercism, you\u2019ll work though code exercises and get feedback from other learners. 15.28.2 Online Tutorials TryRuby.org - free browser-based interactive tutorial from Code School Codecademy Ruby Track - free browser-based interactive tutorials from Codecademy Ruby Koans - free browser-based interactive exercises from Jim Weirich and Joe O\u2019Brien Ruby in 100 Minutes - free tutorial from JumpstartLab Code Like This - free tutorials by Alex Chaffee RailsBridge Ruby - basic introduction to Ruby CodeSchool Ruby Track - instructional videos with in-browser coding exercises 15.28.3 Books Learn To Program - free ebook by Chris Pine Learn To Program - expanded $18.50 ebook by Chris Pine Learn Code the Hard Way - free from Zed Shaw and Rob Sobers Beginning Ruby - by Peter Cooper Programming Ruby - by Dave Thomas, Andy Hunt, and Chad Fowler Eloquent Ruby - by Russ Olsen Books by Avdi Grimm , including Confident Ruby and Objects on Rails . 15.28.4 Newsletters Practicing Ruby - $8/month for access to over 90 helpful articles on Ruby RubySteps - weekly lessons by email from Pat Maddox 15.28.5 Screencasts RubyTapas - $9/month for access to over 100 screencasts on Ruby 15.29 Git There\u2019s no need to save the file lib/example.rb file we created to learn Ruby. You can simply delete the file: $ rm lib/example.rb Check the Git status to make sure the file is gone: $ git status On branch master nothing to commit, working directory clean We\u2019ve cleaned up after our Ruby exercise. From here on, we\u2019re done with silly code examples. No more fooling around. With the next chapter, we start building a real-world Rails website. Chapter 16 Layout and Views In previous chapters we created a dynamic home page and learned techniques for troubleshooting. In this chapter we\u2019ll look closely at view files, particularly the application layout, so we can organize the design of our web pages. We\u2019ll also learn how to add a CSS stylesheet to improve the graphic design of our web pages. This chapter covers a lot of ground, so take a break before jumping in, or pace yourself to absorb it all. 16.1 Template Languages HTML is intended for markup, which means applying formatting to a text file. For a web application, ordinary HTML is not sufficient; we need to mix in Ruby code. We\u2019ll use a templating language that gives us a syntax for mixing HTML tags and Ruby code. The Ruby code will be processed by a templating engine built into Rails. The output will be pure HTML sent to the browser. The most popular templating language available for Rails is ERB , Embedded Ruby, which is the Rails default. In the \u201cConcepts\u201d chapter in Book One, you learned that components of Rails can be mixed for different \u201cstacks.\u201d Some developers substitute Haml or Slim for ERB. We\u2019ll use ERB in this book because it is the most popular. 16.2 Introducing the Application Layout We\u2019ve already created the view file for our home page. The file app/views/visitors/new.html.erb looks like this: Home Welcome to the home of < %= @owner.name %>. I was born on < %= @owner.birthdate %>. Only < %= @owner.countdown %> days until my birthday! The first line in the file contains an HTML heading tag, <h3> , with headline text, \u201cHome.\u201d When you used the browser Developer Tools view to see the HTML file received by the server, you saw this: LearnRails Home Welcome to the home of Foobar Kadigan. I was born on 1990-09-22. Only 126 days until my birthday! If you\u2019ve built websites before, you\u2019ll recognize the HTML file conforms to the HTML5 specification, with a DOCTYPE , <head> and <body> tags, and miscellaneous tags in the HEAD section, including a title and various CSS and JavaScript assets. If you look closely, you\u2019ll see some HTML attributes you might not recognize, for example the data-turbolinks-track attribute. That is added by Rails to support turbolinks , for faster loading of webpages. For the most part, everything is ordinary HTML. But only part of it originates from the view file we\u2019ve created for our home page. 16.3 Where did all the extra HTML come from? The final HTML file is more than twice the size of the view file. The additional tags come from the default application layout file. Rails has combined the Visitors#New view with the default application layout file. To be precise, the new method in the Visitors controller creates the home page by combining two files: the application layout file app/views/layouts/application.html.erb the Visitors#New template in the file app/views/visitors/new.html.erb We say Rails \u201crenders\u201d (or \u201cdelivers\u201d) a new view by combining two files. Let\u2019s examine the application layout file. Open the file app/views/layouts/application.html.erb : LearnRails <%= csrf_meta_tags %> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %> < %= yield %> Static pages delivered from the public folder do not use the default application layout. But every page generated by the model-view-controller architecture in the app/ folder incorporates the default application layout, unless you specify otherwise. The default application layout is where you put HTML that you want to include on every page of your website. Remember when we looked at the hidden code in the controller that renders a view? The controller uses the render method to combine the view file with the application layout. Here\u2019s the Visitors controller, again, with the hidden render method revealed: class VisitorsController < ApplicationController def new @owner \\= Owner.new render 'visitors/new' end end The render method combines the app/views/visitors/new.html.erb view file with the app/views/layouts/application.html.erb application layout. Alternatively, you could tell the controller to render the view without any application layout: render 'visitors/new', :layout \\=> false Or you could specify an alternative layout file, for example app/views/layouts/special.html.erb : render 'visitors/new', :layout \\=> 'special' An alternative layout can be useful for special categories of pages, such as administrative pages or landing pages. We won\u2019t use alternative layouts in this tutorial application, but it\u2019s good to know they are an option. The reference RailsGuides: Layouts and Rendering in Rails explains more about using alternative layouts. 16.4 Yield How does the render method insert the view file in the application layout? How do the two files get combined? Notice that the default application layout contains the Ruby keyword yield . . . . <%= yield %> . . . The yield keyword is replaced with a view file that is specific to the controller and action, in this case, the app/views/visitors/new.html.erb view file. The content from the view is inserted where you place the yield keyword. The yield keyword pulls in another view file. 16.5 Yield Variations We won\u2019t do it, but you could also use the yield keyword to insert a sidebar or a footer. Rails provides ways to insert content into a layout file at different places. The content_for method is helpful when your layout contains distinct regions such as sidebars and footers that should contain their own blocks of content. For example, you could create an application layout that includes a sidebar. This is just an example, so don\u2019t add it to the application you are building: LearnRails <%= csrf_meta_tags %> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %> < %= yield %> < %= yield :sidebar %> This view file provides both the main content and a sidebar: <% content_for :sidebar do %> Contact Info Email: [\\[email protected\\]](/cdn-cgi/l/email-protection) <% end %> Main Welcome! This section gets inserted at the <%= yield :sidebar %> location: <% content_for :sidebar do %> Contact Info Email: [\\[email protected\\]](/cdn-cgi/l/email-protection) <% end %> . . . The rest of the file gets inserted at the main <%= yield %> location. Again, don\u2019t add this to your application. I\u2019m just offering it as an example of multiple yield statements. The reference RailsGuides: Layouts and Rendering in Rails explains more about using yield and content_for . 16.6 ERB Delimiters Earlier, we saw ERB <%= ... %> delimiters allow us to insert Ruby expressions which are replaced by the result of evaluating the code. Here is an example that displays the number 4 <%= 2 + 2 %> Look closely and you\u2019ll see this ERB delimiter is slightly different: <% 3.times do %> list item <% end %> An ERB delimiter that does not contain the = (equals) sign will execute Ruby code but will not display the result. It is commonly used to add Ruby blocks to HTML code, so you\u2019ll often see do and end statements within ERB <% ... %> delimiters. The example above will create three list items, like this: list item list item list item A third version of the ERB delimiter syntax is rarely seen: <%# this is a comment %> It is only used for adding comments. The expression within the ERB <%# ... %> delimiters will not execute and will not appear when the page is output as HTML. 16.7 Introducing View Helpers We can use ERB delimiters to create Rails view helpers . We\u2019ve seen how ERB delimiters can enclose Ruby code. In the application layout file, the <%= ... %> delimiters don\u2019t include anything that looks like Ruby code. For example, we see <%= csrf_meta_tags %> which seems to be neither HTML nor anything from the Ruby API. In fact, this expression is Ruby code, but it is from the Rails API and only found in Rails applications. Ruby is an ideal choice for a web application development platform such as Rails because it can easily be used to create a domain-specific language (or DSL ). Much of Rails is a domain-specific language. The Smalltalk programming language was famous for its slogan \u201cCode should read like a conversation.\u201d Ruby, which borrows much from Smalltalk, makes it easy to add new words to the conversation. We can add new keywords that produce complex behaviour, creating entire new APIs such as Rails. Ruby makes it easy for the Rails core team to add keywords such as csrf_meta_tags that are additions to the Ruby language. In this case, Ruby\u2019s ability to produce a domain-specific language gives us Rails view helpers . Think of Rails view helpers as \u201cmacros to generate HTML.\u201d You may have used macros to automate a series of commands in World of Warcraft or other games. If you\u2019re an office worker, you may have used macros in Microsoft Word or Excel. A Rails view helper is a keyword that expands into a longer string of HTML tags and content. In this case, the csrf_meta_tags view helper expands into two lines of HTML: Why do we need this cryptic code? It turns out that almost any website that accepts user input via a form is vulnerable to a security bug (an exploit ) named a cross-site request forgery . To prevent rampant CSRF exploits, the Rails core team includes the csrf_meta_tags view helper in the default application layout. Rails provides a number of similar features that make websites more secure. A Rails view file becomes much less mysterious when you realize that many of the keywords you see are view helpers. Strange new keywords may be part of the Rails API. Or they may be provided by gems you\u2019ve added (gem developers often use the Ruby DSL capability to create new keywords). Think of it this way: Ruby gives developers the power to create an unlimited number of new \u201cHTML tags.\u201d These tags are not really HTML because they are not part of the HTML specification. But they serve as shortcuts to produce complex snippets of HTML and content. Now that we\u2019ve learned about view helpers, we can start building our default application layout. 16.8 The Rails Layout Gem Every Rails application needs a well-designed application layout. The Rails default starter application, which we get when we run rails new , provides a barebones application layout. It is purposefully simple so developers can add the code they need to accommodate any front-end framework (we\u2019ll look closely at front-end frameworks in the next chapter). In this chapter we\u2019ll start with a simple application layout file, adding a little CSS for simple styling. In the next chapter, we\u2019ll upgrade the application layout file to use the Bootstrap front-end framework. To make it easy, we\u2019ll use the rails_layout gem to generate files for an application layout. In this chapter, we\u2019ll use the rails_layout gem to create our basic layout and CSS files. In the next chapter, we\u2019ll use the rails_layout gem to create layout files for Bootstrap. In your Gemfile , you\u2019ve already added: gem 'rails_layout' and previously run $ bundle install . Rails provides the rails generate command to run simple scripts that are packaged into gems. The rails_layout gem uses the rails generate command to set up files we need. Run: $ rails generate layout:install simple --force The \u2013force argument will force the gem to replace the existing app/views/layouts/application.html.erb file. If you have the app/views/layouts/application.html.erb file open in your text editor, it will change. The rails_layout gem will rename the file: app/assets/stylesheets/application.css to: app/assets/stylesheets/application.css.scss The gem will add (or modify) five files: app/views/layouts/application.html.erb app/assets/stylesheets/simple.css app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/_navigation_links.html.erb Examining these files closely will reveal a great deal about the power of Rails. We\u2019ll dedicate the rest of this chapter to exploring the contents of these files. 16.9 Basic Boilerplate Open the file app/views/layouts/application.html.erb : <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content= \"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> Some of this code is already familiar. You\u2019ll recognize the standard HTML DOCTYPE , <head> , and <body> tags. We\u2019ve already discussed the yield keyword. We\u2019ve seen the <%= ... %> delimiters surrounding the csrf_meta_tags view helper: csrf_meta_tags - generates <meta> tags that prevent cross-site request forgery The rest of the file may be unfamiliar. We\u2019ll examine it line by line. 16.10 Adding Boilerplate Webmasters who build static websites are accustomed to setting up web pages with \u201cboilerplate,\u201d or basic templates for a standard web page. The well-known HTML5 Boilerplate project has been recommending \u201cbest practice\u201d tweaks to web pages since 2010. Very few of the HTML5 Boilerplate recommendations are relevant for Rails developers, as Rails already provides almost everything required. We\u2019ll discuss one important boilerplate item and a few \u201cnice to have\u201d extras. If you want to learn more, the article HTML5 Boilerplate for Rails Developers looks at the recommendations. 16.10.1 Viewport The viewport metatag improves the presentation of web pages on mobile devices. Setting a viewport tells the browser how content should fit on the device\u2019s screen. The tag is required for either Bootstrap or Zurb Foundation front-end frameworks. The viewport metatag looks like this: Apple\u2019s developer documentation on Configuring the Viewport provides details. 16.10.2 Title and Description If you want to maximize traffic to your website, you should make your web pages search-engine friendly. That means adding title and description metatags. Google uses contents of the title tag to display titles in search results. And it will sometimes use the content of a description metatag in search results snippets. See Google\u2019s explanation of how it uses Site Title and Description . Good titles and descriptions improve clickthrough from Google searches. Title and description looks like this: <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content=\"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> The rails_layout gem has created a default title and description based on our project name. Later in the tutorial, we\u2019ll see how to use a content_for statement to set a title and description for each individual page. The code is complex if you haven\u2019t seen advanced Ruby before. It uses the Ruby ternary operator which maximizes compactness at the price of introducing obscurity. You\u2019ll recall from the \u201cJust Enough Ruby\u201d chapter that it is a fancy conditional statement that says, \u201cif content_for?(:title) is present in the view file, use yield(:title) to include it, otherwise just display \u2018Learn Rails\u2019.\u201d 16.11 Asset Pipeline You may have noticed these Rails helper methods: stylesheet_link_tag javascript_include_tag These are tags that add CSS and JavaScript to the web page using the Rails asset pipeline . The Rails asset pipeline utility is one of the most powerful features of the platform. It offers convenience to the developer and helps organize an application; more importantly, it improves the speed and responsiveness of any complex website. If you\u2019re going to do any front-end development with CSS or JavaScript in Rails, you must understand the Rails asset pipeline. Here\u2019s how it works. 16.11.1 Assets Without Rails When building non-Rails websites, webmasters add JavaScript to a page using the <script> tag. For every JavaScript file, they add an additional <script> tag, so a page HEAD section looks like this: Page that uses multiple JavaScript files The same is true for CSS files in non-Rails websites. You add a <link> tag for each stylesheet file. With multiple stylesheets, the HEAD section of your application layout might look like this: Page that uses multiple CSS files If you want to handle CSS and JavaScript without Rails, you can place your files in the public folder. If you do so, every time you add a JavaScript or CSS file, you must modify the application layout file. Instead, use the asset pipeline and simplify this. 16.11.2 Assets With Rails The asset pipeline consists of two folders: app/assets/javascripts/ app/assets/stylesheets/ Any JavaScript and CSS file you add to these folders is automatically added to every page. In development, when the web browser makes a page request, the files in the asset pipeline folders are combined together and concatenated as single large files, one for JavaScript and one for CSS. If you examine the application layout file, you\u2019ll see the tags that perform this service: <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> The HTML delivered to the browser looks like this: Using the asset pipeline, there is no need to modify the application layout file each time you create a new JavaScript or CSS file. Create as many files as you need to organize your JavaScript or CSS code and, in production, you\u2019ll automatically get one single file delivered to the browser. In development mode, Rails continues to deliver multiple files for easier debugging. In production, there\u2019s a big performance advantage with the asset pipeline. Requesting files from the server is a time-consuming operation for a web browser, so every extra file request slows down the browser. The Rails asset pipeline eliminates the performance penalty of multiple <script> or <link> tags. The Rails asset pipeline also compresses JavaScript and CSS files for faster page loads. The asset pipeline is an example of a Rails convention that helps developers build complex websites. It is not needed for a simple website that uses a few JavaScript or CSS files. But it is beneficial on bigger projects. The asset pipeline has limitations, especially for projects with complex front-end JavaScript. Rails developers who integrate JavaScript front-end frameworks such as React or Angular often choose not to use the asset pipeline. Instead they rely on JavaScript tooling such as Webpack to manage complex JavaScript assets. Now that you understand the purpose of the Rails asset pipeline, let\u2019s look at more of the code in the default application layout file. 16.12 Navigation Links Every website needs navigation links. You can add navigation links directly to your application layout but many Rails developers prefer to create a partial template \u2013\u2013a \u201cpartial\u201d\u2013\u2013to better organize the default application layout. 16.12.1 Introducing Partials A partial is similar to any view file, except the filename begins with an underscore character. Place the file in any view folder and you can use the render keyword to insert the partial. We\u2019re not going to add a footer to our tutorial application, but here is how we could do it. We\u2019d use the render keyword with a file named app/views/layouts/_footer.html.erb : <%= render 'layouts/footer' %> Notice that you specify the folder within the app/views/ directory with a truncated version of the filename. The render method doesn\u2019t want the _ underscore character or the .html.erb file extension. That can be confusing; it makes sense when you remember that Rails likes \u201cconvention over configuration\u201d and economizes on extra characters when possible. We\u2019re not going to add a footer to our application, but we will add navigation links by using a partial. First, let\u2019s learn about link helpers . 16.12.2 Introducing Link Helpers There\u2019s no rule against using raw HTML in our view files, so we could create a partial for navigation links that uses the HTML <a> anchor tag like this: Home About Contact Rails gives us another option, however. We can use the Rails link_to view helper instead of the HTML <a> anchor tag. The Rails link_to helper eliminates the crufty <> angle brackets and the unnecessary href=\"\" . More importantly, it adds a layer of abstraction, using the routing configuration file to form links. This is advantageous if we make changes to the location of the link destinations. Earlier, when we created a static \u201cAbout\u201d page, we first set the config/routes.rb file with a route to the \u201cAbout\u201d page: root to: redirect(\u2019/about.html\u2019) . Later we removed the static \u201cAbout\u201d page and set the config/routes.rb file with a route to the dynamic home page: root to: \u2019visitors#new\u2019 . If we used the raw HTML <a> anchor tag, we\u2019d have to change the raw HTML everywhere we had a link to the home page. Using the Rails link_to helper, we name a route and make any changes once, in the config/routes.rb file. When you use the Rails link_to helper, you\u2019ll avoid the problem of link maintenance that webmasters face on static websites. Some webmasters like to use absolute URLs, specifying a host name in the link, for example http://www.example.com/about.html . Absolute URLs are a headache when moving the site, for example from staging.example.com to www.example.com . The problem is avoided by using relative URLs, such as /about.html , about.html , or even ../about.html . But relative URLs are fragile, and moving files or directories often results in overlooked and broken links. Instead, with the Rails link_to helper, you always get the destination location specified in the config/routes.rb file. 16.12.3 Navigation Partial Examine the app/views/layouts/application.html.erb and you\u2019ll see the use of the navigation partial. We include the navigation partial in our application layout with the expression: . . . <%= render 'layouts/navigation' %> . . . Open the file app/views/layouts/_navigation.html.erb : < %= link\\_to 'Home', root\\_path %> < %= render 'layouts/navigation\\_links' %> You\u2019ll see the link_to helper. Here the link_to helper takes two parameters. The first parameter is the string displayed as the anchor text ( \u2019Home\u2019 ). The second parameter is the route. In this case, the route root_path has been set in the config/routes.rb file. The navigation partial includes another partial, which we\u2019ll call the navigation links partial: . . . <%= render 'layouts/navigation_links' %> . . . This demonstrates that one partial can include another partial, so that partials can be \u201cnested.\u201d 16.12.4 Navigation Links Partial In our simple application, there\u2019s no obvious reason to nest another partial. But we\u2019ll see in the next chapter that it is convenient, because we can isolate the complex markup required by Bootstrap from the simple list of links we need for navigation. Open the file app/views/layouts/_navigation_links.html.erb : <%# add navigation links to this file %> As we add pages to our application, we\u2019ll add links to this file. For now, we have nothing to add. 16.13 Flash Messages Rails provides a standard convention to display alerts (including error messages) and other notices (including success messages), called a flash message . The name comes from the term \u201cflash memory\u201d and should not be confused with the \u201cAdobe Flash\u201d web development platform that was once popular for animated websites. The flash message is documented in the RailsGuides: Action Controller Overview . Here\u2019s a flash message you might see after logging in to an application: Figure 16.1: Flash message in Rails. It is called a \u201cflash message\u201d because it appears on a page temporarily. When the page is reloaded or another page is visited, the message disappears. Typically, you will see only one flash message on a page. But there is no limit to the number of flash messages that can appear on a page. 16.13.1 Creating Flash Messages Flash messages are created in a controller. For example, we can add messages to the home page by modifying the file app/controllers/visitors_controller.rb like this: class VisitorsController < ApplicationController def new @owner \\= Owner.new flash[:notice] \\= 'Welcome!' flash[:alert] \\= 'My birthday is soon.' end end If you test the application after adding the messages to the VisitorsController, you\u2019ll see two flash messages appear on the page. Rails provides the flash object so that messages can be created in the controller and displayed on the rendered web page. In this example, we create a flash message by associating the object flash[:notice] with the string \u2019Welcome!\u2019 . We can assign other messages, such as flash[:alert] or even flash[:warning] . In practice, Rails uses only :notice and :alert as flash message keys so it is wise to stick with just these. 16.13.2 Flash and Flash Now You can control the persistence of the flash message by choosing from two variants of the flash directive. Use flash.now in the controller when you immediately render a page, for example with a render :new directive. With flash.now , the message will vanish after the user clicks any links. Use the simple variant, flash , in the controller when you redirect to another page, for example with a redirect_to root_path directive. If you use flash.now before a redirect, the user will not see the flash message because flash.now does not persist through redirects or links. If you use the simple flash directive before a render directive, the message will appear on the rendered page and reappear on a subsequent page after the user clicks a link. In our example above, we really need to use the flash.now variant because the controller provides a hidden render method. Update the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @owner \\= Owner.new flash.now[:notice] \\= 'Welcome!' flash.now[:alert] \\= 'My birthday is soon.' end end Using flash.now will make sure the message only appears on the rendered page and will not persist after a user follows a link to a new page. If you ever see a \u201csticky\u201d flash message that won\u2019t go away, you need to use flash.now instead of flash . 16.13.3 Explaining the Ruby Code If you\u2019re new to programming in Ruby, it may be helpful to learn how the flash object works. The flash object is a Ruby hash . You\u2019ll recall from the \u201cJust Enough Ruby\u201d chapter that a hash is a data structure that associates a key to some value. You retrieve the value based upon its key. This construct is called a dictionary in other languages, which is appropriate because you use the key to \u201clook up\u201d a value, as you would look up a definition for a word in a dictionary. Hash is a type of collection . Presumably, the Rails core contributors who implemented the code chose to use a collection so that a page could be given multiple flash messages. Because we have a collection with (possibly) multiple messages, we need to retrieve each message one at a time. We learned earlier that all collections support an iterator method named each . Iterators return all the elements of a collection, one after the other. The iterator returns each key-value pair, item by item, to a block . In Ruby, a block is delimited by do and end or { } braces. You can add any code to a block to process each item from the collection. Here is simple Ruby code to iterate through a flash object, outputting each flash message in an HTML div tag and applying a CSS class for styling: flash.each do |key, value| puts '' + value + '' end In this simple example, we use each to iterate through the flash hash, retrieving a key and value that are passed to a block to be output as a string. We\u2019ve chosen the variable names key and value but the names are arbitrary. In the next example, we\u2019ll use name and msg as variables for the key-value pair. The output string will appear as HTML like this: Welcome! My birthday is soon. Let\u2019s continue examining our layout files. 16.13.4 The Flash Messages Partial Flash messages are a very useful feature for a dynamic website. Code to display flash messages can go directly in your application layout file or you can use a partial. Examine the file app/views/layouts/_messages.html.erb : <% flash.each do |name, msg| %> <% if msg.is_a?(String) %> <%= content_tag :div, msg, :class \\=> \"flash_#{name}\" %> <% end %> <% end %> It improves on our simple Ruby example in several ways. First, the expression if msg.is_a?(String) serves as a test to make sure we only display messages that are strings. Second, we use the Rails content_tag view helper to create the HTML div . The content_tag helper eliminates the messy soup of angle brackets and quote marks we used to create the HTML output in the example above. Finally, we apply a CSS class and combine the word \u201cflash\u201d with \u201cnotice\u201d or \u201calert\u201d to make the CSS class. We include the flash messages partial in our application layout with the expression: . . . <%= render 'layouts/messages' %> . . . 16.14 HTML5 Elements Let\u2019s look again at the app/views/layouts/application.html.erb file. To complete our examination of the application layout file, we\u2019ll look at a few structural elements. These elements are not unique to a Rails application and will be familiar to anyone who has done front-end development. Notice the tags that are structural elements in the HTML5 specification: <header> <main> These elements add structure to a web page. The tags don\u2019t add any new behavior but make it easier to determine the structure of the page and apply CSS styles. We wrap the navigation partial in the <header> tag: < %= render 'layouts/navigation' %> The <header> tag is typically used for branding or navigation. Notice the main tag : < %= render 'layouts/messages' %> < %= yield %> We wrap our messages partial and yield expression in a <main role=\"main\"> element. The <main> tag is among the newest HTML5 elements (see the W3C specification for details). From the specification: \u201cThe main content area of a document includes content that is unique to that document and excludes content that is repeated across a set of documents such as site navigation links, copyright information, site logos.\u201d We follow the advice of the specification and wrap our unique content in the <main> tag. The specification recommends, \u201cAuthors are advised to use ARIA role=\u2019main\u2019 attribute on the main element until user agents implement the required role mapping.\u201d ARIA , the Accessible Rich Internet Applications Suite, is a specification to make web applications more accessible to people with disabilities. That means the role=\"main\" attribute is there for any web browsers that don\u2019t yet recognize the <main> tag, and may help people with disabilities. We could add a <footer> tag. It typically contains links to copyright information, legal disclaimers, or contact information. We don\u2019t have a footer in our tutorial application but you can add the <footer> tag, with additional content, if you want. 16.15 Application Layout Our application layout is complete. We don\u2019t have to add anything because the rails_layout gem has created everything we need. <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content= \"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> We have the viewport metatag, a title, and a description. We have partials for navigation links and flash messages. Finally we have HTML5 structural elements. That\u2019s all we need for now. In the next chapter, we\u2019ll revise it to support styling with Bootstrap. 16.16 Simple CSS So far, we\u2019ve examined four files that were added by the rails_layout gem: app/views/layouts/application.html.erb app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/_navigation_links.html.erb Let\u2019s examine the CSS file that was created by the rails_layout gem. Open the file app/assets/stylesheets/simple.css : /* * Simple CSS stylesheet for a navigation bar and flash messages. */ main { background-color: #eee; padding-bottom: 80px; width: 100%; } header { border: 1px solid #d4d4d4; background-image: linear-gradient(to bottom, white, #f2f2f2); background-color: #f9f9f9; -webkit-box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); -moz-box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; } ul.nav li { display: inline; } ul.nav li a { padding: 10px 15px 10px; color: #777777; text-decoration: none; text-shadow: 0 1px 0 white; } .flash_notice, .flash_alert { padding: 8px 35px 8px 14px; margin-bottom: 20px; text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5); border: 1px solid #fbeed5; -webkit-border-radius: 4px; -moz-border-radius: 4px; border-radius: 4px; font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; } .flash_notice { background-color: #dff0d8; border-color: #d6e9c6; color: #468847; } .flash_alert { background-color: #f2dede; border-color: #eed3d7; color: #b94a48; } If you already know CSS, you\u2019ll see we\u2019ve set a background color for the main section of the page. We\u2019ve also set styles for a header, navigation links, and flash messages. This book is about Rails, not CSS, so we won\u2019t examine this closely. For more on CSS, there are thousands of tutorials on the web, but I like these: Codeacademy HTML Dog Remember what we learned about the Rails asset pipeline. By default, any CSS file in the app/assets/stylesheets/ folder will be added automatically to the application.css file that is included in the default application layout. In the next chapter, we remove the app/assets/stylesheets/simple.css and use Bootstrap to supply styles for the header, navigation links, and flash messages. For now, the simple.css file adds some basic styling and layout to the application. 16.17 Test the Application Let\u2019s run the application to see how it looks with the new application layout. The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . If you experimented with adding flash messages \u201cWelcome\u201d and \u201cMy birthday is soon,\u201d you\u2019ll see the messages when you visit the home page. Our home page now has only one navigation link, for \u201cHome.\u201d We\u2019ll add links for \u201cAbout\u201d and \u201cContact\u201d pages soon. 16.18 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"update application layout\" $ git push Chapter 17 Front-End Framework This chapter discusses front-end development and design using CSS. I\u2019ll show you how to add style to a Rails application, using Bootstrap for a simple theme. What do we mean by \u201cfront-end development\u201d? A website back end is the Rails application that assembles files that are sent to the browser, plus a database and any other server-side services. A website front end is all the code that runs in the browser. Everything that controls the appearance of the website in the browser is the responsibility of a front-end developer, including page layout, CSS stylesheets, and JavaScript code. Front-end development has grown increasingly important as websites have become more sophisticated. And front-end technology has grown increasingly complex, to the degree that front-end development has become a job for specialists. Front-end developers are primarily concerned with: markup - the layout and structure of the page style - graphic design for visual communication interactivity - browser-based visual effects and user interaction Broader concerns include: cross-browser and cross-device functionality interaction design to improve website usability accessibility for users with physical or perceptual limitations For years, front-end development was haphazard; webmasters each had their own quirky techniques. Around the time that Rails became popular, front-end developers at large companies began to share best practices and establish open source projects to bring structure and consistency to front-end development, leading to development of CSS frameworks. 17.1 CSS Frameworks Web developers began putting together \u201cboilerplate\u201d CSS stylesheets as early as 2000, when browsers first began to fully support CSS. Boilerplate CSS made it easy to reuse CSS stylesheet rules from project to project. More importantly, designers often implemented \u201cCSS reset\u201d stylesheets to enforce typographic uniformity across different browsers. Engineers at Yahoo! released the Yahoo! User Interface Library (YUI) as an open source project in February 2006 . Inspired by an article by Jeff Croft , and reacting to the huge size of the YUI library, independent developers began releasing other CSS frameworks such as the 960 grid system and the Blueprint CSS framework. There are dozens of CSS frameworks . In general, they all seek to implement a common set of requirements: An easily customizable grid Some default typography A typographic baseline CSS reset for default browser styles A stylesheet for printing More recently, with the ubiquity of smartphones and tablets, CSS frameworks support responsive web design , accommodating differences in screen sizes across a range of devices. In tandem with the development of CSS frameworks, we\u2019ve seen the emergence of JavaScript libraries and frameworks. 17.2 JavaScript Libraries and Frameworks JavaScript has nothing like RubyGems, a built-in package manager for code libraries, so initially there were few open source JavaScript libraries. Now there are several competing JavaScript package managers and many software libraries. Prototype was one of the first open source JavaScript libraries, created by Sam Stephenson in February 2005 to improve JavaScript support in Ruby on Rails. MooTools , Dojo , and jQuery soon followed. Of these libraries, jQuery has become the most popular, largely because of thousands of modular jQuery plug-ins that implement a wide range of effects and widgets (web page features). These plug-ins are used to add visual effects and interactivity to web pages. Examples are drop-down menus, modal windows, tabbed panels, autocompletion search forms, and sliders or carousels for images. Even without plugins, jQuery is useful as a high-level interface for manipulating the browser DOM ( document object model ), to make it easy to do things like hiding or revealing HTML elements on a page. Any Rails application can use jQuery because it is included by default in any new Rails application. Libraries such as jQuery add functionality to server-side applications, such as those built with Rails. Other JavaScript libraries serve as fully featured web application development frameworks, allowing developers to build client-side applications that run in the browser and only interact with a server to read or write data. Examples of these full-fledged JavaScript frameworks are Ember.js , AngularJS , and Backbone.js . All use a variant of the model-view-controller (MVC) software design pattern to implement single-page applications which function more like desktop or mobile applications than websites. Developers who build a single-page application with one of these frameworks often use Ruby on Rails as a back end; an MVC JavaScript framework can replace all the Rails view files. None of these JavaScript frameworks dominate web application development like Ruby on Rails, but they are gaining popularity for single-page applications. We won\u2019t look at Ember.js, AngularJS, or Backbone.js in this book; they are an advanced topic and require entire books themselves. The biggest problem with adding JavaScript to Rails is the difficult-to-maintain \u201cJavaScript soup\u201d that results from adding JavaScript to Rails views. Ember.js, AngularJS, or Backbone.js are more than is needed for simply structuring JavaScript in Rails views. But there\u2019s a newer framework that can be used to dry up JavaScript soup. It\u2019s React , a JavaScript framework developed by engineers at Facebook. Unlike AngularJS or Ember.js, React only manages views, not connections to databases or routing of requests, so it is not a full-stack framework, just a framework for the view layer. React\u2019s approach to building web pages is abstract and complex. But React is a good choice for complex interactive features, if you\u2019re determined to avoid JavaScript soup in your Rails application. We won\u2019t look at JavaScript frameworks in this book, but we will use the Bootstrap framework to manage our CSS stylesheets. 17.3 Front-End Frameworks Front-end frameworks combine CSS and JavaScript libraries. Many elements that are found on sophisticated web pages, such as modal windows or tabs, require a combination of JavaScript and CSS. Combining CSS and JavaScript libraries in a common framework makes it possible to standardize and reuse common web page features. There are many responsive front-end frameworks to choose from, including: Bootstrap Zurb Foundation Material Design Lite Bourbon Neat Semantic UI and many others Each has its fans, though Bootstrap and Zurb Foundation are the most popular among Rails developers. Each adds a library of markup, styles, and standardized web page features such as modal windows, pagination, breadcrumbs, and navigation. Bootstrap is the best-known front-end framework. It is the result of an effort to document and share common design patterns and assets across projects at Twitter, released as an open source project in August 2011. Just ahead, we\u2019ll look at why we use Bootstrap in this book. But first, you\u2019ll need to learn about Sass. 17.4 CSS Preprocessing with Sass Ordinary CSS is not a programming language. As a result, CSS rules are verbose and often repetitive. To add efficiency to CSS, Bootstrap relies on a CSS preprocessor named Sass . Sass extends CSS to give it more powerful programming language features. As a result, your stylesheets can use variables, mixins, and nesting of CSS rules, just like a real programming language. For example, in Sass you can create a variable such as $blue: #3bbfce and specify colors anywhere using the variable, such as border-color: $blue . Mixins are like variables that let you use snippets of reusable CSS. Nesting eliminates repetition by layering CSS selectors. Sass is included in any new Rails application with the default sass-rails gem. 17.5 Bootstrap or Others? Which front-end framework should you use? Bootstrap or another such as Zurb Foundation? The Bootstrap team maintains a Ruby gem that provides a drop-in version of Bootstrap for Rails. Other front-end frameworks, such as Zurb Foundation, are also available as Ruby gems. But Bootstrap has a large developer community and many more third-party projects, as evidenced by a Big Badass List of Useful Twitter Bootstrap Resources . In its sheer magnitude, this list, from Michael Buckbee and Bootstrap Hero, demonstrates the popularity of Bootstrap and the vitality of its open source community. We\u2019ll use Bootstrap here because of its sheer popularity and solid support. Before I show you how to integrate Bootstrap with your Rails application, let\u2019s briefly consider matters of design. 17.6 Graphic Design Options There are three approaches to graphic design for your Rails application. If you\u2019re well-funded and well-connected, you can put together a team or hire a freelance graphic designer to implement a unique design, built from scratch using CSS or customized from a framework such as Bootstrap or Zurb Foundation. If you\u2019ve got strong design skills, or can partner with an experienced web designer, you\u2019ll get a custom design that expresses the purpose and motif of your website. A second approach is to use Bootstrap or another CSS framework to quickly add attractive CSS styling to your application. Many developers don\u2019t have the skill or resources to customize the design. Consequently, sites that use Bootstrap look very similar. If that\u2019s your situation, it\u2019s okay, really! It\u2019s better to have a decent site with the clean look of Bootstrap than to leak ugliness onto the web. A third option is to obtain a pre-designed theme for your website. You may have visited ThemeForest or other theme galleries that offer pre-built themes for a few dollars each. These huge commercial galleries offer themes for WordPress, Tumblr, or CMS applications such as Drupal or Joomla. They don\u2019t offer themes for Rails. Your best option is to convert open source themes designed with Bootstrap. You can visit sites such as Start Bootstrap , Bootswatch , or the Themestrap gallery to find Bootstrap themes. Whether you use a prepackaged theme or design your own layout, you\u2019ll need to know how to set up a front-end framework in Rails. We\u2019ll look at setting up Bootstrap next. 17.7 Bootstrap 3 or 4? At the time this was written, the new Bootstrap 4 version was in alpha release. The Bootstrap 4 version is significantly different from earlier versions. It has been in alpha for testing and feedback for over a year. Many Rails developers are already using the Bootstrap 4 version but almost all themes and third-party add-ons are only available for Bootstrap 3. Eventually, the Bootstrap 4 beta and final versions will be released but until then, I recommend sticking with Bootstrap 3. As a beginner, you\u2019ll find more resources and help for Bootstrap 3. We\u2019ll use it here for this tutorial. 17.8 Bootstrap Gem Bootstrap provides a standard grid for layout plus dozens of reusable components for common page elements such as navigation, forms, and buttons. More importantly, it gives CSS the kind of structure and convention that makes Rails popular for back-end development. Bootstrap is packaged as a gem. In your Gemfile , you\u2019ve already added: gem 'bootstrap-sass' and previously run $ bundle install . The bootstrap-sass gem provides the files required to integrate Bootstrap 3 with Rails. Developers who want to use the new Bootstrap 4 release will use the Bootstrap 4 gem . Rather than following the installation instructions provided in the Bootstrap documentation , we\u2019ll use the rails_layout gem to set up Bootstrap and create the files we need. 17.9 Rails Layout Gem with Bootstrap In the previous chapter, we used the rails_layout gem to configure the default application layout with HTML5 elements, navigation links, and flash messages. Now we\u2019ll use the rails_layout gem to set up Bootstrap and generate new files for the application layout as well as the navigation and messages partials. The new files will replace the layout files we created in the previous chapter. We\u2019ll use the generator provided by the rails_layout gem to set up Bootstrap and add the necessary files. Run: $ rails generate layout:install bootstrap3 --force With the \u2013force argument, the rails_layout gem will replace existing files. The gem will create the file: app/assets/stylesheets/1st_load_framework.css.scss and modify the files: app/assets/javascripts/application.js app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/application.html.erb It will also remove the file: app/assets/stylesheets/simple.css Let\u2019s examine the files to see how our application is configured to use Bootstrap. 17.10 Renaming the application.css File The rails_layout gem renamed the app/assets/stylesheets/application.css file as app/assets/stylesheets/application.css.scss . Note the .scss file extension. This will allow you to use the advantages of an improved syntax for your application stylesheet. You learned earlier that stylesheets can use variables, mixins, and nesting of CSS rules when you use Sass. Sass has two syntaxes. The most commonly used syntax is known as \u201cSCSS\u201d (for \u201cSassy CSS\u201d), and is a superset of the CSS syntax. This means that every valid CSS stylesheet is valid SCSS as well. SCSS files use the extension .scss . The Sass project also offers a second, older syntax with indented formatting that uses the extension .sass . We\u2019ll use the SCSS syntax. You can use Sass in any file by adding the file extension .scss . The asset pipeline will preprocess any .scss file and expand it as standard CSS. For more on the advantages of Sass and how to use it, see the Sass website or the Sass Basics RailsCast from Ryan Bates. Before you continue, make sure that the rails_layout gem renamed the app/assets/stylesheets/application.css file as app/assets/stylesheets/application.css.scss . Otherwise you won\u2019t see the CSS styling we will apply. 17.11 The application.css.scss File In the previous chapter, I introduced the Rails asset pipeline . Your CSS stylesheets get concatenated and compacted for delivery to the browser when you add them to this directory: app/assets/stylesheets/ The asset pipeline helps web pages display faster in the browser by combining all CSS files into a single file (it does the same for JavaScript). Let\u2019s examine the file app/assets/stylesheets/application.css.scss : /* * This is a manifest file that'll be compiled into application.css, which will include all the files * listed below. * * Any CSS and SCSS file within this directory, lib/assets/stylesheets, or any plugin's * vendor/assets/stylesheets directory can be referenced here using a relative path. * * You're free to add application-wide styles to this file and they'll appear at the bottom of the * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS * files in this directory. Styles in this file should be added after the last require_* statement. * It is generally better to create a new file per style scope. * *= require_tree . *= require_self */ The app/assets/stylesheets/application.css.scss file serves two purposes. First, you can add any CSS rules to the file that you want to use anywhere on your website. Second, the file serves as a manifest , providing a list of files that should be concatenated and included in the single CSS file that is delivered to the browser. If you are familiar with CSS syntax, it may seem odd that the relevant lines are commented out (using asterisks). These lines are not CSS, so they must be commented out so they won\u2019t be interpreted as CSS. Though they are commented out, the Rails asset pipeline reads and understands them. It\u2019s a bit of a hack, but it works. 17.11.1 A Global CSS File Any CSS style rules that you add to the app/assets/stylesheets/application.css.scss file will be available to any view in the application. You could use this file for any style rules that are used on every page, particularly simple utility rules such as highlighting or resetting the appearance of links. However, in practice, you are more likely to modify the style rules provided by Bootstrap. These modifications don\u2019t belong in the app/assets/stylesheets/application.css.scss file; they will go in the app/assets/stylesheets/1st_load_framework.css.scss file. In general, it\u2019s bad practice to place a lot of CSS in the app/assets/stylesheets/application.css.scss file (unless your CSS is very limited). Instead, structure your CSS in multiple files. CSS that is used on only a single page can go in a file with a name that matches the page. Or, if sections of the website share common elements, such as themes for landing pages or administrative pages, make a file for each theme. How you organize your CSS is up to you; the asset pipeline lets you organize your CSS so it is easier to develop and maintain. Just add the files to the app/assets/stylesheets/ folder. 17.11.2 A Manifest File It\u2019s not obvious from the name of the app/assets/stylesheets/application.css.scss file that it serves as a manifest file as well as a location for miscellaneous CSS rules. For most websites, you can ignore its role as a manifest file. In the comments at the top of the file, the *= require_self directive indicates that any CSS in the file should be delivered to the browser. The *= require_tree . directive (note the Unix \u201cdot operator\u201d) indicates any files in the same folder, including files in subfolders, should be combined into a single file for delivery to the browser. If your website is large and complex, you can remove the *= require_tree . directive and specify individual files to be included in the file that is generated by the asset pipeline. This gives you the option of reducing the size of the application-wide CSS file that is delivered to the browser. For example, you might segregate a file that includes CSS that is used only in the site\u2019s administrative section. In general, only large and complex sites need this optimization. The speed of rendering a single large CSS file is faster than fetching multiple files. 17.12 Bootstrap JavaScript Bootstrap provides both CSS and JavaScript libraries. Like the application.css.scss file, the application.js file is a manifest that allows a developer to designate the JavaScript files that will be combined for delivery to the browser. The rails_layout gem modified the file app/assets/javascripts/application.js to include jQuery and the Bootstrap JavaScript libraries: //= require jquery //= require jquery_ujs //= require turbolinks //= require bootstrap-sprockets //= require_tree . It added the directives //= require jquery and //= require jquery_ujs to make jQuery available to the application. Keep in mind that Rails 5.1 dropped jQuery and no longer includes the jquery-rails gem by default. We added the jquery-rails gem to the Gemfile (and ran bundle install ). Without the jquery-rails gem, you\u2019ll get an error when you run the application. The rails_layout command also added the directive //= require bootstrap-sprockets before //= require_tree . to enable the Bootstrap front-end framework. Some of the features offered by Bootstrap require the jQuery library which is why the rails_layout command modifies the app/assets/javascripts/application.js file. 17.13 Bootstrap CSS The rails_layout gem added a file app/assets/stylesheets/1st_load_framework.css.scss containing: // import the CSS framework @import \"bootstrap-sprockets\"; @import \"bootstrap\"; . . . The file app/assets/stylesheets/1st_load_framework.css.scss is automatically included and compiled into your Rails application.css file by the *= require_tree . statement in the app/assets/stylesheets/application.css.scss file. The file could be named anything. However, by giving it a name beginning with \u201c1\u201d it will load before any other stylesheet files we may add later. The asset pipeline loads files in alphabetical order. We want the Bootstrap framework to load before any custom CSS files. The @import \"bootstrap\"; and @import \"bootstrap-sprockets\"; directives will import the Bootstrap CSS rules from the Bootstrap gem. You could add the Bootstrap @import code to the app/assets/stylesheets/application.css.scss file. However, it is better to have a separate app/assets/stylesheets/1st_load_framework.css.scss file. You may wish to modify the Bootstrap CSS rules; placing changes to Bootstrap CSS rules in the 1st_load_framework.css.scss file will keep your CSS better organized. In addition to the simple @import directives, the app/assets/stylesheets/1st_load_framework.css.scss contains a collection of Sass mixins. We\u2019ll look at these later in the chapter. 17.14 Using Bootstrap CSS Classes Now that you\u2019ve installed Bootstrap, you have a rich library of interactive effects you can add to your pages. Take a look at the Bootstrap documentation to see your options. Here are just a few examples: buttons navigation bar alerts At a simpler level, Bootstrap provides a collection of carefully-crafted styling rules in the form of CSS classes. These are building blocks you use for page layout and typographic styling. For example, Bootstrap gives you CSS classes to set up rows and columns in a grid system. Let\u2019s take a closer look at the Bootstrap grid system. 17.14.1 Bootstrap Grid The Bootstrap grid is responsive because it has \u201cbreakpoints.\u201d There are actually four grids: Extra small: browser windows 0 to 768 pixels wide (phones) Small: browser windows 768 to 992 pixels wide (tablets) Medium: browser windows 992 to 1200 pixels wide (desktops) Large: browser windows 1200 pixels and wider (large desktops) Start by designing for the extra small screen; then add classes prefixed \u201csmall,\u201d \u201cmedium,\u201d or \u201clarge\u201d if you want a different layout for larger screens. The layout will change at each breakpoint. The grid gives you 12 columns by default. You can organize your layout in horizontal and vertical sections using row and columns classes. For example, you could use Bootstrap grid classes to set up an application layout with a footer as a row with two sections: Copyright 2016 All rights reserved. The Bootstrap row class will create a horizontal break. The footer will contain two side-by-side sections. The first will be four columns wide; the second will be eight columns wide. Here\u2019s the same footer with a responsive design: Copyright 2016 All rights reserved. On desktops and tablets, the footer will contain two side-by-side sections. On phones, each section will expand to take the full browser width, appearing as stacked rows. To better understand the grid system with all its options, see the documentation for the Bootstrap grid . 17.14.2 Presentational Versus Semantic Styles There are two schools of thought among front-end developers. Some developers are content to use Bootstrap\u2019s classes directly in Rails view files. For these developers, the Bootstrap classes are both practical and descriptive, making it easy for any developer who knows the Bootstrap framework to visualize the layout of a page. Other developers take issue with this approach. They argue that Bootstrap\u2019s markup is often presentational , with class names describing the appearance of the page. In an ideal world, all markup would be semantic , with class names describing the function or purpose of a style. For example, a submit button often needs styling. Compare these two approaches to markup: presentational: <button class=\"big red button\">Order Now</button> semantic: <button class=\"submit\">Order Now</button> Suppose your user testing indicates a green button generates more sales. With the presentational approach you\u2019d have to change both the Rails view file and the CSS file. With a semantic approach, you\u2019d just change the CSS file to reassign the color of the submit class. 17.14.3 Use Bootstrap Classes Directly For quick and simple websites, where you don\u2019t need to be concerned about long-term maintenance, use Bootstrap\u2019s CSS classes directly. For example, you can style a button like this: <button type=\"button\" class=\"btn btn-success\">Order Now</button> The btn-success class is semantic and applies an \u201calert color\u201d which is green, by default, in Bootstrap. 17.14.4 Or Use Sass Mixins with Bootstrap You can use Sass mixins to create your own semantic class names. Sass mixins add a layer of complexity that can map Bootstrap class names to your own semantic class names. For example, the Bootstrap grid system is presentational. Specifying rows and columns, and quantifying the size of columns, describes the visual appearance of sections of the layout rather than the purpose of each section. The presentational approach makes it easy to visualize the layout of a page. But you\u2019ll be tied to Bootstrap 3 class names for the life of your website. If class names change in a future version of Bootstrao, or you decide to switch to another front-end framework, it will be difficult to update your application, as you will have to carefully rebuild each view file. Is it worth the effort to add the complexity of Sass mixins just to future-proof your website? Probably not for a simple website such as the one you are building for Foobar Kadigan. The rails_layout gem uses Sass mixins to apply CSS style rules to the default application layout. In doing so, the default application layout is free of framework-specific code and can be used with either Bootstrap or Zurb Foundation. Before we examine the default application layout, let\u2019s take a look at the Sass mixins supplied by the rails_layout gem. Look again at the file app/assets/stylesheets/1st_load_framework.css.scss created by the rails_layout gem: // import the CSS framework @import \"bootstrap-sprockets\"; @import \"bootstrap\"; // make all images responsive by default img { @extend .img-responsive; margin: 0 auto; } // override for the 'Home' navigation link .navbar-brand { font-size: inherit; } // THESE ARE EXAMPLES YOU CAN MODIFY // create your own classes // to make views framework-neutral .column { @extend .col-md-6; @extend .text-center; } .form { @extend .col-md-6; } .form-centered { @extend .col-md-6; @extend .text-center; } .submit { @extend .btn; @extend .btn-primary; @extend .btn-lg; } // apply styles to HTML elements // to make views framework-neutral main { @extend .container; background-color: #eee; padding-bottom: 80px; width: 100%; margin-top: 51px; // accommodate the navbar } section { @extend .row; margin-top: 20px; } The rails_layout gem is in active development so the file you\u2019ve created may be different from the example in this tutorial. It will probably be very similar. At the top of the file we import the Bootstrap framework CSS files from the gem. We override a Bootstrap style rule so the \u201cHome\u201d navigation link matches the other links in the navigation bar. Then we use mixins to create semantic classes. Mixins can take a block of CSS styles, other mixins, or a CSS selector (a CSS class or ID). If you\u2019d like to combine CSS classes, or rename a CSS class, use the @extend directive. The first declaration column combines the Bootstrap classes col-md-6 and text-center to make a new class, column . Next we create a few classes that combine Bootstrap CSS classes. For example, the new submit class can be used for a button. When we use it in a view, this class will be purely semantic since it describes the purpose of the element, allowing us to set its appearance outside of any view file. Finally, to avoid applying Bootstrap classes in the application layout file, we apply styles to HTML elements main and section to make the views framework-neutral. We use the @extend directive to add a Bootstrap CSS class. And we directly set standard CSS properties such as background-color and margin-top . Using this technique, the file app/assets/stylesheets/1st_load_framework.css.scss becomes the single point of intersection between the Bootstrap framework and the application layout. For a simple website, this could be over-engineering and counter-productive. The rails_layout gem uses the technique so that either Bootstrap or Zurb Foundation can be used without any change to the default application layout. We\u2019ll use the CSS classes provided by the rails_layout gem in the tutorial application, but if you choose to customize the application, feel free to use Bootstrap classes directly to keep your project simple. 17.15 Application Layout with Bootstrap Let\u2019s look at the application layout file created by the rails_layout gem: Examine the contents of the file app/views/layouts/application.html.erb : <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content=\"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> This file is almost identical to the simple application layout file we looked at in the previous chapter. Because we\u2019ve applied Bootstrap classes to the HTML element main in the app/assets/stylesheets/1st_load_framework.css.scss file, there\u2019s no need to use Bootstrap classes directly in the application layout. 17.16 Flash Messages with Bootstrap The messages partial we use with Bootstrap is complex. Examine the file app/views/layouts/_messages.html.erb : <%# Rails flash messages styled for Bootstrap 3.0 %> <% flash.each do |name, msg| %> <% if msg.is_a?(String) %> \u00d7 < %= content\\_tag :div, msg, :id \\=> \"flash\\_#{name}\" %> <% end %> <% end %> We use each to iterate through the flash hash, retrieving a name and msg that are passed to a block to be output as a string. The expression if msg.is_a?(String) serves as a test to make sure we only display messages that are strings. We construct a div that applies Bootstrap CSS styling around the message. Bootstrap provides classes alert and alert-dismissible to style the message. We use the Ruby ternary operator to check the type of the alert. A class of either success or danger styles the message. Rails notice messages will get styled with the Bootstrap success class. Any other Rails messages, including alert messages, will get styled with the Bootstrap danger class. We use the Rails content_tag view helper to create a div containing the message. Bootstrap creates a \u201cclose\u201d icon by applying the class alert-dismissible . Bootstrap\u2019s integrated JavaScript library will hide the alert box when the \u201cclose\u201d link is clicked. Bootstrap provides detailed documentation if you want to change the styling of the alert boxes. 17.17 Navigation Partial with Bootstrap The layout and styling required for the Bootstrap navigation bar are in the navigation partial file. Examine the file app/views/layouts/_navigation.html.erb : <%# navigation styled for Bootstrap 3.0 %> Toggle navigation < %= link\\_to 'Home', root\\_path, class: 'navbar-brand' %> < %= render 'layouts/navigation\\_links' %> The navigation partial is now more complex, with layout and Bootstrap classes needed to produce a responsive navigation bar. At the conclusion of this chapter, you\u2019ll test the responsive navigation by resizing the window. At small sizes, the navigation links will disappear and be replaced by an icon labeled \u201cMenu.\u201d Clicking the icon will reveal a vertical menu of navigation links. The navigation menu is a great demonstration of the ability of Bootstrap to adjust to the small screen size of a tablet or smartphone. If you\u2019d like to add a site name or logo to the tutorial application, you can replace the link helper <%= link_to \u2019Home\u2019, root_path %> . It is important to preserve the enclosing layout and classes, even if you don\u2019t want to display a site name or logo. The enclosing layout is used to generate the navigation menu when the browser window shrinks to accommodate a tablet or smartphone. You\u2019ll see we wrap the nested partial render \u2019layouts/navigation_links\u2019 with Bootstrap classes to complete the navigation bar. 17.18 Navigation Links Partial The file app/views/layouts/_navigation_links.html.erb is unchanged: <%# add navigation links to this file %> Later we\u2019ll add links to \u201cAbout\u201d and \u201cContact\u201d pages. The navigation links partial will be simply a list of navigation links. We\u2019re following the separation of concerns principle here. By separating the links from the styling that creates the navigation bar, we segregate the code that is unique to Bootstrap. In the future, if the Bootstrap layout or CSS classes change, we can make changes without touching the navigation links. If we wish, we can replace the navigation partial and substitute one that uses a different framework instead of Bootstrap, leaving the navigation links intact. 17.19 Test the Application Let\u2019s see how the application looks with Bootstrap. The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You should see a new page design that displays Bootstrap styling. Thanks to the open source efforts of the Bootstrap core team and contributors, we\u2019ve added powerful front-end features to our website with little effort. You can click the \u201cX\u201d close icons to hide the flash messages, thanks to the integrated CSS and JavaScript of the Bootstrap framework. Next we\u2019ll add \u201cAbout\u201d and \u201cContact\u201d pages to the application. After we update the navigation links, you\u2019ll see how the Bootstrap responsive web design adjusts the navigation bar at different browser widths. 17.20 Remove the Flash Messages Before we continue, we\u2019ll remove the flash messages we created for our demonstration. Update the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @owner \\= Owner.new end end 17.21 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"front-end framework\" $ git push Chapter 18 Add Pages Let\u2019s begin adding pages to our web application. There are three types of web pages in a Rails application. We\u2019ve looked at two types so far: static pages in the public/ folder that contain no Ruby code dynamic pages such as our home page that use the application layout There\u2019s another type of web page that is required on many websites. It has static content; that is, no dynamic data is needed on the page. But it uses the default application layout to maintain consistency in the website look and feel. We classify this type of page as a: static view that uses the application layout Examples include: \u201cAbout\u201d page Legal page FAQ page It\u2019s possible to place these pages in the public/ folder and copy the HTML and CSS from the default application layout but this leads to duplicated code and maintenance headaches. And dynamic elements such as navigation links can\u2019t be included. For these reasons, developers seldom create static pages in the public/ folder. Alternatively, a dynamic page can be created that has no model, a nearly-empty controller, and a view that contains no instance variables. This solution is quite common for static views that use the application layout. This solution is implemented so frequently that many developers create a gem to encapsulate the functionality. We\u2019re going to use the best-known of these gems, the high_voltage gem created by the Thoughtbot consulting firm. We\u2019ll use the High Voltage gem to create an \u201cAbout\u201d Page. We also will create a Contact page. We\u2019ll again use the High Voltage gem, but only for the first version of the Contact page. Later we\u2019ll discard the page we created with the High Voltage gem and replace it with a full model-view-controller implementation. The process will show the difference between an older form of web application architecture and a newer \u201cRails way.\u201d 18.1 High Voltage Gem We can add a page using the High Voltage gem almost effortlessly. The gem implements Rails \u201cconvention over configuration\u201d so well that there is nothing to configure. There are alternatives to its defaults which can be useful but we won\u2019t need them; visit the GitHub home page for the high_voltage gem if you want to explore all the options. In your Gemfile , you\u2019ve already added: gem 'high_voltage' and previously run $ bundle install . 18.2 Views Folder Create a folder app/views/pages : $ mkdir app/views/pages Any view files we add to this directory will automatically use the default application layout and appear when we use a URL that contains the filename. The High Voltage gem contains all the controller and routing magic required for this to happen. Let\u2019s try it out. 18.3 \u201cAbout\u201d Page Create a file app/views/pages/about.html.erb : <% content_for :title do %>About<% end %> About Foobar Kadigan He was born in Waikikamukau, New Zealand. He left New Zealand for England, excelled at the University of Mopery, and served in the Royal Loamshire Regiment. While in service, he invented the kanuten valve used in the processing of unobtainium for industrial use. With a partner, Granda Fairbook, he founded Acme Manufacturing, later acquired by the Advent Corporation, to develop his discovery for use in the Turboencabulator. Mr. Kadigan is now retired and lives in Middlehampton with a favorite cat, where he raises Griadium frieda and collects metasyntactic variables. His favorite quotation is: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Our simple \u201cAbout\u201d view will be combined with the default application layout by the High Voltage gem. We include a content_for Rails view helper that passes a page title to the application layout. 18.4 Contact Page For the initial version of the Contact page, create a file app/views/pages/contact.html.erb : <% content_for :title do %>Contact<% end %> Contact This is a placeholder page we\u2019ll use to test a navigation link. We include a content_for Rails view helper that passes a page title to the application layout. 18.5 Routing for the High Voltage Gem The High Voltage gem provides a PagesController. You\u2019ll never see it; it is packaged inside the gem. In addition to providing a controller, the High Voltage gem provides default routing so any URL with the form http://localhost:3000/pages/about will obtain a view from the app/views/pages directory. Like the PagesController, the code that sets up the route is packaged inside the gem. For details about the syntax of routing directives, refer to RailsGuides: Routing from the Outside In . 18.6 Update the Navigation Partial You can use a Rails route helper to create a link to any view in the app/views/pages directory like this: link_to 'About', page_path('about') Let\u2019s add links to the \u201cAbout\u201d and \u201cContact\u201d pages. Replace the contents of the file app/views/layouts/_navigation_links.html.erb with this: <%# add navigation links to this file %> < %= link\\_to 'About', page\\_path('about') %> < %= link\\_to 'Contact', page\\_path('contact') %> With an updated navigation bar, we can test the application. 18.7 Test the Application The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Links to the pages \u201cAbout\u201d and \u201cContact\u201d should work. If you get an error \u201cuninitialized constant PagesController,\u201d make sure the config/routes.rb file looks like this: Rails.application.routes.draw do root to: 'visitors#new' end Watch what happens when you resize the page. At smaller sizes, the navigation bar changes to display a menu icon. Clicking the menu icon reveals a drop-down menu of navigation links. You\u2019re seeing the power of the Bootstrap framework. Here\u2019s a troubleshooting tip. If clicking the menu icon doesn\u2019t reveal a drop-down menu, the application may not be loading the Bootstrap JavaScript library. Make sure that the file app/assets/javascripts/application.js contains: //= require jquery //= require jquery_ujs //= require turbolinks //= require bootstrap-sprockets //= require_tree . 18.8 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add 'about' and 'contact' pages\" $ git push There is nothing more we need for our \u201cAbout\u201d page. In the next chapter, we\u2019ll explore two different implementations for the Contact page. Chapter 19 Contact Form Forms are ubiquitous on the web, to the degree we seldom notice how often they are used for data entry, whether we\u2019re logging into a website or posting a blog comment. To build any interactive website, you\u2019ll need to understand forms. Here we\u2019ll build a contact form for our tutorial application. A contact form is common on many websites. If you think about it, contact forms are often unnecessary; simply displaying an email address is sufficient, more convenient, and easier to implement. But building a contact form is an excellent way to learn how to handle user data input. We\u2019ll pretend that our odd client, Mr. Foobar Kadigan, insists that he needs a contact form on his website. We\u2019re not backing the tutorial application with a database so we won\u2019t store the contact data after the information is submitted. Instead, in a subsequent chapter we\u2019ll learn how to send the contents of the form by email to the website owner. 19.1 The \u201cOld Way\u201d and the \u201cRails Way\u201d In this chapter, we\u2019ll explore two ways to implement a contact form. The first way will be familiar to anyone who has used PHP or similar web platforms. It is an obvious and straightforward way to handle a form. As we look closer, we\u2019ll see the approach has limitations. We\u2019ll discard our first approach and rebuild the Contact page, discovering how the \u201cRails way\u201d is more powerful. You may wonder why I\u2019m going to show you two different ways to implement the contact form. First, it is worthwhile to see there is more than one way to implement a web application. Maturity as a software developer means imagining different approaches and evaluating your options. With this exercise, you\u2019ll contrast two approaches and see how we make choices about software architecture. More importantly, it is not always obvious why we do things in a \u201cRails way.\u201d It would be easy to simply walk you through the steps to build a contact form without showing you alternative implementations (that\u2019s how most tutorials do it). But you\u2019ll gain a deeper understanding of Rails by building the contact form in a less sophisticated fashion and then seeing the more elegant Rails approach. 19.2 User Story Let\u2019s plan our work with a user story: *Contact Page* As a visitor to the website I want to fill out a form with my name, email address, and some text In order to send a message to the owner of the website Our first step will be to create a route to a controller that will process the submitted form. 19.3 Routing We\u2019re going to create a ContactsController to process the submitted form data. Every form must have a destination URL that receives the form submission. We need to set a route to generate the destination URL. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do post 'contact', to: 'contacts#process_form' root to: 'visitors#new' end The route post \u2019contact\u2019, to: \u2019contacts#process_form\u2019 will create a route helper that generates a URL and hands off the request to a controller. You can run the rails routes command to see our routes in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contact POST /contact(.:format) contacts#process_form root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command is somewhat cryptic but confirms we\u2019ve created the routes we need. The first item in the rails routes output indicates we can add \u201ccontact\u201d to \u201c_path\u201d to get our route helper, contact_path : contact_path - a route helper that can be used in a controller or view The second item indicates the request will be handled with the HTTP POST protocol: POST - HTTP method to submit form data The third item indicates the application will respond to the following URL: http://localhost:3000/contact - URL generated by the route helper The fourth item indicates a request to the URL will be handled by: contacts - the name of the controller process_form - a controller action For details about the syntax of routing directives, refer to RailsGuides: Routing from the Outside In . The route won\u2019t work yet; we need to create a ContactsController. But first we\u2019ll create the form. 19.4 Adding a Form to the Contact Page Let\u2019s add the code for a contact form to the Contact page. Forms were simple in the early days of the web. An HTML <form> tag creates a container for a form. The form element specifies a URL (an \u201caction\u201d) which receives and processes the form submission. Form fields accept input such as text or checkboxes. A submit button gathers the input and sends a request to the URL specified in the form action. Rails tries to simplify forms and make them more powerful. First, to simplify forms, Rails provides a set of view helpers for forms. These view helpers automate the creation of the necessary HTML elements. Some developers use an alternative set of form helpers (such as the SimpleForm gem ) which make the syntax of forms even simpler. Form helpers such as SimpleForm add a dependency that I like to avoid (sometimes the gem is not updated or breaks). We\u2019ll use the standard Rails form helpers. Rails also makes forms more powerful by providing a form builder that can be associated with a model. Associating a model with a form allows Rails to perform validation on the input data. We\u2019ll first build a form without a model (the \u201cold way\u201d) and then add a model (the \u201cRails way\u201d). Unfortunately, in the quest for simplicity and power, the Rails maintainers have made forms much more complicated than the original HTML specification. A large part of the complication is a new forms syntax introduced in Rails 5.1. Prior to Rails 5.1, Rails provided two different ways to create forms. One approach, using the form_tag directive, was simpler and didn\u2019t use a form builder and associated model. The second approach, using the form_for directive, was more powerful and widely used because it enabled validation of form data using an associated model. In Rails 5.1, the Rails maintainers introduced a third approach, using the form_with directive. The form_with approach replaces both the form_tag and form_for directives, combining both earlier approaches in one set of view helpers. There is very little documentation to explain how to use the form_with approach. As of this writing, the RailsGuides: Rails Form Helpers official document has not been updated for the new form_with syntax. Most tutorials (and Stack Overflow answers) explain forms using the form_tag or form_for helpers. The only official documentation is the Rails API document . These are persuasive reasons not to use the new form_with syntax. However, a future version of Rails will deprecate (remove) the form_tag or form_for helpers. It\u2019s best to learn to use form_with for your forms. Our tutorial will use form_with . Replace the contents of the file app/views/pages/contact.html.erb : <% content_for :title do %>Contact<% end %> Contact < %= form\\_with(url: contact\\_path) do |form| %> < %= form.label :name %> < %= form.text\\_field :name, autofocus: true %> < %= form.label :email %> < %= form.email\\_field :email %> < %= form.label 'message' %> < %= form.text\\_area :content, size: '40x5' %> < %= form.submit 'Submit', class: 'submit' %> < % end %> The code is compact but complex. We see several elements: content_for is a view helper that passes a page title to the application layout <div class=\"form\"> sets the width of the form and applies any styles we desire form_with is the view helper for the form The form_with view helper instantiates a form builder object which we assign to a variable named form . The form builder offers many standard form elements, such as text fields and submit buttons. Each element is available as a method call on the form object. The view helper form_with requires parameters and a block . Every form needs a URL that will handle processing of the form data. In this case, we specify a route in the application: url - set to contact_path , the destination for the form data Later, when we change this form to accommodate the\u201dRails way,\u201d we\u2019ll replace these two parameters with a single instance variable. The magic of Rails will generate the name of the form and the destination URL from the instance variable. For now, to implement the \u201cold way,\u201d we simply supply the destination URL. The form_with view helper accommodates a Ruby block. The block begins with do and closes with end . The code inside the block works just like code inside a method. In this case, the form object is passed to the block and methods belonging to the form object are called to produce HTML output. Inside the block, the form object methods generate HTML for: a name field an email field a content field (labeled \u201cmessage\u201d) a submit button Each of the form methods takes various parameters, such as: autofocus - displays the cursor in the field The structure of the form is clearly visible in the code. The form begins with a form_with helper and closes with the end keyword. Each line of code produces an element in the form such as a field or a button. This is a common structure for a Rails view helper and it will soon become familiar. 19.5 Controller We need code to process the form data. The form data is sent to the server as a POST request attached to a URL. As we\u2019ve learned, in Rails we use controllers to respond to browser requests. For this implementation, we\u2019ll create a ContactsController to process the submitted form data. Create a file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def process_form Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash[:notice] \\= \"Received request from #{params[:name]}\" redirect_to root_path end end The ContactsController inherits the behavior of the base ApplicationController. We create a process_form method to respond when the form is submitted. Later we\u2019ll learn that process_form doesn\u2019t fit the \u201cRails way.\u201d We\u2019ll use it for now. Before we look closely at the code for the process_form method, we need to learn about the params hash. 19.5.1 Params Hash Take a close look at these two lines: Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash\\[:notice\\] \\= \"Received request from #{params\\[:name\\]}\" Notice the params object. Earlier we learned about the Ruby Hash class. It is a data structure for key/value pairs and Hash instances are ideal for storing form data. Each field on the form can be mapped as label and data , or key and value, and stored in a Hash. Rails does all the work of extracting the form data from the browser\u2019s POST request. Rails creates a hash with the form field data mapped to the form field labels. Here\u2019s part of the hash: {... \"name\"\\=>\"Daniel\", \"email\"\\=>\" [email protected] \", \"content\"\\=>\"hi\" ...} The full params hash actually contains more data which we can see with a debug command: {\"utf8\"\\=>\"\u2713\", \"authenticity_token\"\\=>\"...\", \"name\"\\=>\"Daniel\", \"email\"\\=>\" [email protected] \", \"content\"\\=>\"hi\", \"commit\"\\=>\"Submit\", \"controller\"\\=>\"contacts\", \"action\"\\=>\"process_form\"} The params hash includes these elements: the utf8 checkmark character forces browsers to recognize Unicode the authenticity token prevents CSRF ( Cross Site Request Forgery ) form data current controller current action You will see the contents of the params hash in the console log after you submit the form. We\u2019ll look at the console log when we test the implementation. 19.5.2 Process_form Method Now that we know about the params hash, take a look again at the process_form method: def process_form Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash[:notice] \\= \"Received request from #{params[:name]}\" redirect_to root_path end We use a logger.debug method to reveal the form data in our console log by revealing the contents of the params hash. The inspect method shows the parameters in an easy-to-read list. Then we extract the data posted to the name field of the form and construct a flash message. A hash containing the data from the contact form is nested inside the params hash. We can retrieve the value of the name field with the expression params[:name] . We use double quotes and string interpolation to form the message using the #{...} syntax that evaluates a Ruby expression and combines it with a string. Finally we use the redirect_to directive to render the home page. We haven\u2019t actually sent the contact data to anyone. We\u2019ll add code for that later, after we refactor the controller to be a better example of the \u201cRails way.\u201d Before we do that, let\u2019s test the current implementation. We\u2019ve already set up routing for the new controller. 19.6 Test the Application If you need to start the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link; then fill out and submit the form. You should see the flash message \u201cReceived request from \u2026\u201d on the home page. If you see the message \u201cMy birthday is soon\u201d you need to delete your earlier experiment from the Visitors controller. If you get an error message \u201cuninitialized constant ContactsController,\u201d make sure you created the file app/controllers/contacts_controller.rb as instructed above. Notice what appears in the console log: Started POST \"/contact\" for 127.0.0.1 at 2017-07-19 16:22:13 +0800 Processing by ContactsController#process_form as JS Parameters: {\"utf8\"=>\"\u2713\", \"authenticity_token\"=>\"..\", \"name\"=>\"Daniel\", \"email\"=>\" [email protected] \", \"content\"=>\"hi\", \"commit\"=>\"Submit\"} DEBUG: params are \"\u2713\", \"authenticity_token\"=>\"...\", \"name\"=>\"Daniel\", \"email\"=>\" [email protected] \", \"content\"=>\"hi\", \"commit\"=>\"Submit\", \"controller\"=>\"contacts\", \"action\"=>\"process_form\"} permitted: false> Redirected to http://localhost:3000/ Completed 200 OK in 7ms The console log is our most important tool for debugging. Let\u2019s analyze what we see: Started POST - shows the server is responding to an HTTP POST request \u201c/contact\u201d - the path portion of the URL at \u2026 - timestamp Processing by ContactsController - the controller process_form - the controller action (the method that handles the request) as JS - the standard syntax (not XML or some other markup) Parameters: - the params hash containing all the submitted data \u201cutf8\u201d=\u201d\u2713\u201d - a Rails workaround to set the language encoding in Internet Explorer \u201cauthenticity token\u201d - prevents CSRF security exploits the form data \u201ccommit\u201d - the \u201cSubmit\u201d label from the button DEBUG - our debug message containing the form data Redirected to http://localhost:3000/ - responded by displaying the home page Completed 200 OK - HTTP response status code 200 indicating success in 7ms - time required to process the request That\u2019s a lot of data. For now, we really only care about the form data buried in the params hash. You can see that we really don\u2019t need the debug message because the console log shows us the contents of the params hash. 19.7 The Validation Problem It looks like we\u2019ve got everything we need to handle a form submission. As a next step, we could implement code to send an email message using form data extracted from the params hash. But consider a potential problem. What if the email address is poorly formed? The visitor will think the message has been sent but it will never be delivered. Or what if the name field or message is blank? It\u2019s not just a problem for the hapless visitor. An evildoer could repeatedly click the submit button, filling Foobar Kadigan\u2019s email inbox with endless empty messages. We need validation of the form data before we process it. We could dig into the Rails String API and look for a way to test if the string is empty or contains only whitespaces. And we could raise an Exception if the string is blank. Here\u2019s what validation code could look like. We won\u2019t use this code (because there\u2019s a better way to do this): class ContactsController < ApplicationController def process_form if params[:name].blank? raise 'Name is blank!' end if params[:email].blank? raise 'Email is blank!' end if params[:content].blank? raise 'Message is blank!' end message \\= \"Received request from #{params[:name]}\" redirect_to root_path, :notice \\=> message end end We would need additional code to test for invalid email addresses (it will be a complex regex , or regular expression ). And we would need a nicer way of showing the error to the visitor (right now, raising the exception displays an error message that makes it appear the application is broken). If we were implementing this on another web application platform, we might go further down this path, googling for code examples, and implementing a lengthy but bulletproof validation function. Rails offers a better way. 19.8 Remove the Contact Page We will implement a model-view-controller architecture for our Contact feature. That means we need a Contact model, a Contacts controller, and view files in the app/views/contacts/ folder. We no longer need the Contact page in the app/views/pages/ folder. Let\u2019s get started by removing the file app/views/pages/contact.html.erb : $ rm app/views/pages/contact.html.erb Before we implement a model-view-controller architecture, let\u2019s take time to understand the advantages of the Rails model-view-controller approach. 19.9 Implementing the \u201cRails Way\u201d Our initial implementation of the contact form is consistent with the earliest approach to web application development. That\u2019s why I call it the \u201cold way.\u201d It is an approach that originated in 1993 with a specification for CGI, the Common Gateway Interface . Before CGI, every page on the web existed only as a static HTML file. CGI made it possible to run a program, or CGI script, that dynamically generated HTML. In the early years of the web, every web URL matched either an HTML file or a CGI script. This is the \u201cpage paradigm\u201d of the web. So far, we\u2019re following the \u201cpage paradigm.\u201d Our Contact page hosts the form. Clicking the submit button makes a request to another page that is actually a program that returns HTML. Until the late 1990s, this is how the web worked. But soon after the introduction of CGI, developers began exploring the possibility of running a single program (an application server) that responds to any URL, parsing the URL to establish routing, and generating pages dynamically. This was the genesis of the \u201cweb application paradigm.\u201d It\u2019s how Rails works. The web application paradigm frees us from one-to-one correspondence of a URL with a single file or script. It allows us to refactor our code into object-oriented classes and methods that can be inherited rather than duplicated, which means we don\u2019t repeat the same code on every page that processes a form. The web application paradigm makes it possible to use the model-view-controller architecture. Instead of looking at the web as URLs that return pages, we see requests that are routed to controllers that render views. We can segregate any code that manipulates data into a model class, instead of mixing HTML with data manipulation in a single script. With the \u201cweb application paradigm,\u201d we can have a generic model class that isolates the code that connects to a database or validates form data. We can create models that inherit the generic behavior from a parent class and get a database connection or validation \u201cfor free.\u201d Unlike the \u201cpage paradigm,\u201d we\u2019ll avoid duplicating validation code every time we need to process a form. Consider our process_form method again: class ContactsController < ApplicationController def process_form if params[:name].blank? raise 'Name is blank!' end if params[:email].blank? raise 'Email is blank!' end if params[:content].blank? raise 'Message is blank!' end message \\= \"Received request from #{params[:name]}\" redirect_to root_path, :notice \\=> message end end We\u2019ll replace it with something better. Our \u201csegregation of concerns\u201d philosophy suggests that validation belongs in a model, since validation is a type of data manipulation (strictly speaking, a test of data integrity). Furthermore, it would be nice to make the validation tests generic so they could be used to validate data submitted from any form. Rails, as a framework, provides all this for us. We call it the \u201cRails way.\u201d 19.10 ActiveModel Rails extracts and generalizes common code that every website requires. The code that websites need for access to databases is abstracted into the Rails ActiveRecord class. ActiveRecord includes code from the ActiveModel class that handles interaction with forms and data validation. The ActiveModel class interfaces with SimpleForm to provide sophisticated validation and error handling. We can mix in behavior from the ActiveModel class to add validation and error handling to any model we create. SimpleForm will recognize ActiveModel methods if we provide a model as an argument to the SimpleForm view helper. SimpleForm will give the form a name that matches the model name. And SimpleForm will automatically generate a destination URL for the form based on the model name. More significantly, SimpleForm will add sophisticated error handling to the form. If a visitor doesn\u2019t enter a name or submits an invalid email address, and we declare in our model that we require validation, SimpleForm will highlight the invalid field and display an inline message indicating the problem. Compared to what we\u2019ve implemented so far, this kind of error handling provides a vastly superior user experience. Instead of displaying a message that the application failed, the form will be redisplayed with the problem marked and noted. Now that we\u2019ve seen the advantages of the \u201cRails way,\u201d let\u2019s re-implement our contact form using the model-view-controller architecture. 19.11 Model When we build database-backed applications with Rails, we base our models on a parent class named ActiveRecord. We are not using a database for our tutorial application, so we\u2019ll mix in behavior from ActiveModel, which adds validation and error handling to our model. Let\u2019s set up a model that doesn\u2019t require a database. Create a file app/models/contact.rb : class Contact include ActiveModel::Model attr_accessor :name, :email, :content validates_presence_of :name validates_presence_of :email validates_presence_of :content validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i validates_length_of :content, :maximum \\=> 500 end When you copy this, be careful to keep the long regex expression ( with: /.../i ) on one line (no line breaks). We give the model the name \u201cContact.\u201d We mix in behavior from the ActiveModel class using include ActiveModel::Model . We create attributes (data fields) for the model by using the attr_accessor keyword. The attributes match the fields in the contact form. If we were using a database for our tutorial application, we would not need to use attr_accessor because ActiveRecord would create access methods for reading and writing attributes directly from the database. ActiveModel gives us validation methods named validates_presence_of , validates_format_of , and validates_length_of . We check that name , email , and content exist (no blanks are allowed). We provide a complex regex , or regular expression , to test if the email address is valid. Finally, we declare that the message content cannot exceed 500 characters. The model is elegant. We describe the fields we need and state our validation requirements. ActiveModel does all the rest. Next we\u2019ll add a new Contact page by creating a view in the app/views/contacts/ folder. The new contact form will use our new model. 19.12 Create a New Contact Page First, let\u2019s create the app/views/contacts/ folder: $ mkdir app/views/contacts/ Create a file app/views/contacts/new.html.erb : <% content_for :title do %>Contact<% end %> Contact < %= form\\_with(model: @contact) do |form| %> < %= form.label :name %> < %= form.text\\_field :name, autofocus: true %> < %= form.label :email %> < %= form.email\\_field :email %> < %= form.label 'message' %> < %= form.text\\_area :content, size: '40x5' %> < %= form.submit 'Submit', class: 'submit' %> < % end %> The form is the same as we used before, but we\u2019re now providing only one argument, the @contact instance variable, to the form_with view helper. That\u2019s enough to generate the form name and destination URL. We haven\u2019t yet created a controller that assigns the Contact model to the @contact instance variable. We\u2019ll do that soon. The form helper uses the @contact instance variable to name the form, set a destination for the form data, and initialize each field in the form using attributes from the Contact model. Setting the values for the form fields from the attributes in the model is called \u201cbinding the form to the object\u201d and you can read about it in the RailsGuides: Form Helpers article. We\u2019ve added the error_notification method which provides all the error handling. The method call is very simple but the results will be impressive. We\u2019ll need a controller and routing to complete our model-view-controller architecture. But first, we\u2019ll detour to learn about seven standard controller actions. 19.13 Seven Controller Actions Consider all the possibilities for managing a list. It\u2019s a list of anything: users, inventory, thingamajigs. We use a web application to manage the list, so we\u2019ll fill out a form to record each item in our list. The web application offers seven features to help us manage our records: index - display a list of all items show - display a record of one item new - display an empty form create - save a record of a new item edit - display a record for editing update - save an edited record destroy - delete a record You can manage any list using these seven actions. There are a few extra actions that are helpful, such as: pagination - displaying a portion of a list sorting - displaying the list in a different order bulk edit - changing multiple items at once But seven basic actions are all you need for managing any list of items. The \u201cRails way\u201d is about taking advantage of structure and convention to leverage the power of the framework. The ApplicationController contains code to implement each of the seven standard actions. When we create a controller that inherits from the ApplicationController, we get these standard actions \u201cfor free.\u201d That\u2019s why our new method in our VisitorsController was so simple. The controller knew to render a view file named new.html.erb from the views/visitors/ folder because of behavior inherited from the ApplicationController. Just like the Rails directory structure provides consistency to make it easy for any Rails developer to collaborate with other Rails developers, relying on the seven standard controller actions makes it easy for other team members to understand how your controllers work. A controller that uses these actions is said to be \u201cRESTful\u201d (a term that refers to representational state transfer , a software design abstraction). Experienced Rails developers follow the \u201cRails way\u201d and try to use RESTful controller methods when possible. When necessary, you will add other controller actions. For example, imagine you\u2019ve built a subscription website. When a user\u2019s subscription ends, you may not want to destroy the subscriber record. Instead you might add a controller expire or suspend action that marks the subscriber record as expired so you can continue to access the subscriber\u2019s contact information for customer service or renewal offers. To the extent you can, use the seven standard controller actions and be cautious about adding more. Earlier, I said our ContactsController process_form method isn\u2019t suitable for the \u201cRails way.\u201d With our model-view-controller architecture, we can piggyback on the ApplicationController to display our empty contact form and process the form when it is submitted. We\u2019ll use only two of the seven standard controller actions: new - display the empty contact form create - validate and process the submitted form Our ContactsController will know to render a view from the app/views/contacts/new.html.erb file when we call the controller new method. We won\u2019t piggyback on behavior from the ApplicationController create method. But we\u2019ll implement a create method because, by convention, the form will submit the data to the controller\u2019s create method. SimpleForm will create a destination URL that corresponds to the ContactsController#create action. 19.14 Controller Replace the contents of the file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def new @contact \\= Contact.new end def create @contact \\= Contact.new(secure_params) if @contact.valid? # TODO send message flash[:notice] \\= \"Message sent from #{@contact.name}.\" redirect_to root_path else render :new end end private def secure_params params.require(:contact).permit(:name, :email, :content) end end We\u2019ve dropped the \u201cold school\u201d process_form method and added the \u201cRails way\u201d new and create methods. The controller new action will instantiate an empty Contact model, assign it to the @contact instance variable, and render the app/views/contacts/new.html.erb view. We\u2019ve already created the view file containing the form. SimpleForm will set a destination URL that corresponds to the ContactsController#create action. The create method will instantiate a new Contact model using the data from the form (we take steps to avoid security vulnerabilities first\u2014more on that later). The ActiveModel class provides a method valid? which we can call on the Contact model. Our conditional statement if @contact.valid? checks each of the validation requirements we\u2019ve set in the model. If all the Contact fields are valid, we can send a message (which we\u2019ll add later), prepare a flash message, and redirect to the home page. Notice that we don\u2019t need to dig into the params hash for the visitor\u2019s name; it is now available as @contact.name directly from the model. If any validation fails, the controller create action will render the app/views/contacts/new.html.erb view. This time, appropriate error messages are set and the form object\u2019s error_notification method will highlight the invalid field and display a matching prompt. You\u2019re looking at the tightly bound interaction of the \u201cRails way\u201d model, view, and controller. The only element we are missing is routing. But first, let\u2019s look closer at the steps we take to avoid security exploits. 19.14.1 Mass-Assignment Vulnerabilities Rails protects us from a class of security exploits called \u201cmass-assignment vulnerabilities.\u201d Rails won\u2019t let us initialize a model with just any parameters submitted on a form. Suppose we were creating a new user and one of the user attributes was a flag allowing administrator access. A malicious hacker could create a fake form that provides a user name and sets the administrator status to \u201ctrue.\u201d Rails forces us to \u201cwhite list\u201d each of the parameters used to initialize the model. We create a method named secure_params to screen the parameters sent from the browser. The params hash contains two useful methods we use for our screening: require(:contact) - makes sure that params[:contact] is present permit(:name, :email, :content) - our \u201cwhite list\u201d With this code, we make sure that params[:contact] only contains :name, :email, :content . If other parameters are present, they are stripped out. Rails will raise an error if a controller attempts to pass params to a model method without explicitly permitting attributes via permit . In older versions of Rails (before Rails 4.0), the mass-assignment exploit was blocked by using a \u201cwhite list\u201d of acceptable parameters with the attr_accessible keyword in a model. You\u2019ll see this code in examples and tutorials that were written before Rails 4.0 introduced \u201cstrong parameters\u201d in the controller. 19.14.2 Private Methods If you paid close attention to the code you added to the Contacts controller, you may have noticed the keyword private above the secure_params method definition. This is a bit of software architecture that limits access to the secure_params method (plus any more methods we might add beneath it). Very simply, adding the private keyword restricts access to the secure_params method so only methods in the same class can use it. You might be puzzled; after all, how else could it be accessed? We haven\u2019t explored calling methods from other classes, so I\u2019ll just say that without the private keyword, the secure_params method could be used from code anywhere in our application. In this case, we apply the private keyword because we want to be sure the secure_params method is only used in the ContactsController class. It\u2019s just a bit of \u201cbest practice\u201d and for now, you can simply learn that secure_params method should be a private method. Now let\u2019s look at routing for controllers that are built the \u201cRails way.\u201d 19.15 Routing Rails routing is aware of the seven standard controller actions. In fact, it takes only one keyword (with one parameter) to generate seven different routes for any controller. The keyword is resources and supplying a name that matches a model and controller provides all seven routes. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do resources :contacts, only: [:new, :create] root to: 'visitors#new' end Here we\u2019ve added resources :contacts, only: [:new, :create] . We only want two routes so we\u2019ve added the restriction only: [:new, :create] . The new route has these properties: new_contact_path - route helper contacts - name of the controller (ContactsController) new - controller action http://localhost:3000/contacts/new - URL generated by the route helper GET - HTTP method to display a page The create route has these properties: contacts_path - route helper contacts - name of the controller (ContactsController) create - controller action http://localhost:3000/contacts - URL generated by the route helper POST - HTTP method to submit form data You can run the rails routes command to see these in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contacts POST /contacts(.:format) contacts#create new_contact GET /contacts/new(.:format) contacts#new root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command shows we\u2019ve created the routes we need. Our new route new_contact_path can now be used. We\u2019ve completed our move to the model-view-controller architecture by adding the appropriate routes. 19.16 Change Navigation Links With our new model-view-controller architecture, we need to change the navigation links. Change the file app/views/layouts/_navigation_links.html.erb : <%# add navigation links to this file %> < %= link\\_to 'About', page\\_path('about') %> < %= link\\_to 'Contact', new\\_contact\\_path %> We\u2019re ready to test the model-view-controller implementation of the Contact feature. Be sure you\u2019ve removed the file app/views/pages/contact.html.erb , as it is no longer used. 19.17 Test the Application If you need to restart the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link; then fill out and submit the form. You should see the flash message \u201cMessage sent from \u2026\u201d on the home page. Try submitting the form with a blank name. You\u2019ll see a warning message, \u201cPlease review the problems below.\u201d Try submitting the form with an invalid email address such as \u201c [email protected] \u201d. The form will re-display with a message, \u201cPlease review the problems below,\u201d and next to the email field, \u201cis invalid.\u201d Combining SimpleForm error handling with ActiveModel validation is powerful. If validation fails after the form is submitted, the page will redisplay and SimpleForm will display an appropriate error message. 19.18 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"contact form\" $ git push We\u2019ve built a sophisticated Contact form. Chapter 20 Send Mail Email sent from a web application is called transactional email . As a website visitor, you\u2019ve probably seen transactional email such as these messages: sign up confirmation email response to a password reset request acknowledgment of a purchase notice of a change to a user profile setting A web application can send email to a visitor. It can also send messages to its owner or webmaster. On large active sites, email notices can be impractical (an admin interface is better) but for our small-volume tutorial application, it makes sense to email the contact request directly to the site owner (Foobar Kadigan is retired and enjoys receiving email). 20.1 User Story Let\u2019s plan our work with a user story: *Send Contact Message* As the owner of the website I want to receive email messages with a visitor's name, email address, and some text In order to communicate with visitors To implement the user story, let\u2019s create a feature that sends the contact data as an email message. 20.2 Implementation Rails makes it easy to send email. The ActionMailer gem is part of any Rails installation. Implementation of email closely follows the model-view-controller architecture. To implement email, you\u2019ll need: model view mailer The \u201cmailer\u201d is similar to a controller, combining data attributes from a model with a view file. Any methods we add to the mailer class can be called from a controller, triggering delivery of an email message. The model can be any we\u2019ve already created. In this case, we\u2019ll use the Contact model, since it gives us access to the visitor\u2019s name, email address, and message. We\u2019ll create a mail-specific view file in the app/views/user_mailer/ folder. Our folder for mail-specific views will go in the app/views/ directory as a sibling of the app/views/layouts folder. The Rails directory structure already gives us a folder app/mailers/ for the mailer class and, not surprisingly, it is a sibling of the app/controllers/ folder. We don\u2019t have to create the necessary folders and files manually, as the rails generate command runs a utility to create what we need. 20.3 Create View Folder and Mailer Use the rails generate command to create a mailer with a folder for views: $ rails generate mailer UserMailer The name of the mailer isn\u2019t important; we\u2019ll use UserMailer because it is obvious. The rails generate command will create a file: app/mailers/user_mailer.rb It also creates test files which we won\u2019t use in this tutorial. It uses three additional files which are provided by default in a Rails 5 application: app/mailers/application_mailer.rb app/views/layouts/mailer.html.erb app/views/layouts/mailer.text.erb This implements our model-view-mailer architecture. 20.4 Edit the Mailer Add a contact_email method to the mailer by editing the file app/mailers/user_mailer.rb : class UserMailer < ApplicationMailer default from: \" [email protected] \" def contact_email(contact) @contact \\= contact mail(to: Rails.application.secrets.owner_email, from: @contact.email, :subject \\=> \"Website Contact\") end end The UserMailer class inherits behavior from the ApplicationMailer class. We\u2019ll create a method definition that assigns the contact argument to the instance variable @contact . Like a controller that combines a model with a view, our mailer class makes the instance variable available in the view. The name of the method isn\u2019t important; it can be anything obvious. We\u2019ll use it in the ContactsController to trigger mail delivery. Like the render method in a web page controller, the ActionMailer parent class has a mail method that renders the view. You\u2019ll need to use your email address in the mailer. You should have already set a configuration variable for your email address in the file config/secrets.yml . If you haven\u2019t done so, do it now. By inserting the configuration variable with your email address after to: , your inbox will receive the message. If Foobar Kadigan was a real person, we\u2019d supply his email address here. We need to insert a \u201cfrom\u201d address in two places. First there is a default, for all messages that do not set a \u201cfrom\u201d address. We will use \u201c [email protected] \u201d for the default \u201cfrom\u201d address. The email is originating from a web application that does not receive email, so this indicates the email address should not be used for replies. For emails going to website visitors, it would be best to provide a default email address for a customer service representative on the \u201cfrom\u201d line, so the recipient can easily reply. We\u2019re not sending email messages to visitors so we can ignore this nicety. For our contact_email method, we\u2019ll insert the email address of the visitor as the \u201cfrom\u201d address since we are sending a message to the site owner. This makes it easy for Foobar Kadigan to click \u201creply\u201d when he is reading the contact messages in his inbox. You can see our use of the email attribute from the Contact model in the expression from: @contact.email . That\u2019s all we need for mailer class. Next we\u2019ll create a view containing the message. 20.5 Create Mailer View There are two types of mailer views. One contains plain text, for recipients who don\u2019t like formatted email (some people still read email from the Unix command line). The other type contains HTML markup to provide formatting. It\u2019s good to create a message of both types, though most recipients will benefit from HTML formatting. The mailer view for formatted email looks very similar to a web page view file. It contains HTML markup plus Ruby expressions embedded in <%= ... %> delimiters. In the UserMailer class, we\u2019ve assigned the Contact model to the instance variable @contact so any attributes are available for use in the message. Create a file app/views/user_mailer/contact_email.html.erb : Website Contact This visitor requested contact: < %= @contact.name %> < %= @contact.email %> The visitor said: \" < %= @contact.content %>\" You can easily imagine how this view would look as a web page. You\u2019ll soon see it as an email message in your inbox. For those recipients who like plain text, create a view without HTML markup. Create a file app/views/user_mailer/contact_email.text.erb : You received a message from <%= @contact.name %> with email address <%= @contact.email %>. The visitor said: \"<%= @contact.content %>\" You\u2019ve created views for the email message. Now we can integrate our email feature with the ContactsController. 20.6 Modify Controller We\u2019ll add code to the ContactsController: UserMailer.contact_email(@contact).deliver_now Replace the contents of the file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def new @contact \\= Contact.new end def create @contact \\= Contact.new(secure_params) if @contact.valid? UserMailer.contact_email(@contact).deliver_now flash[:notice] \\= \"Message sent from #{@contact.name}.\" redirect_to root_path else render :new end end private def secure_params params.require(:contact).permit(:name, :email, :content) end end The UserMailer class is available to any controller in the application. We call the contact_email method we\u2019ve created, passing the @contact instance variable as an argument, which renders the email message. Finally, the deliver_now method initiates delivery. For more on sending email from a Rails application, see RailsGuides: Action Mailer Basics . 20.7 Test the Application If your web server is not running, start it: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link and try submitting the form. The email message should be visible in the console. If you didn\u2019t get an email message in your inbox, make sure you set your config/environments/development.rb file to perform deliveries as described in the \u201cConfiguration\u201d chapter. Be sure to restart your server if you change the configuration file. 20.8 Troubleshooting If you get an error, you can practice troubleshooting. You\u2019ve set up a complex system with many dependencies. It\u2019s great if it works, but there are several opportunities for errors. The most likely errors are a missing user name or password. We are trying to connect to the SendGrid email service. SendGrid expects your SendGrid user name. Mine is DanielKehoe (it is not my email address). SendGrid also expects a password. 20.8.1 User Name Issues If you get the error message, \u201cSMTP-AUTH requested but missing user name,\u201d SendGrid is not receiving a user name it recognizes. Check that the user name is set in your Unix environment variables: $ echo \"$SENDGRID_USERNAME\" You should see your SendGrid user name. Make sure you\u2019ve used underscores consistently. If your Unix environment variable is SENDGRID_USER_NAME and the config/secrets.yml file contains SENDGRID_USERNAME , you\u2019ll have a problem. 20.8.2 Password Issues If you get the error message, \u201cSMTP-AUTH requested but missing secret phrase,\u201d SendGrid is not receiving the SendGrid password. Check that the SendGrid password is set in your Unix environment variables: $ echo \"$SENDGRID_PASSWORD\" You should see the long cryptic string in the console response. Again, make sure you\u2019ve used underscores consistently, and SENDGRID_PASSWORD is used for the Unix environment variable as well as the config/secrets.yml file. 20.8.3 Problems with Environment Variables First, close and reopen your terminal to make sure your environment reflects any recent changes you\u2019ve made to your shell configuration. Then try echo \"$SENDGRID_USERNAME\" to see if you get the credentials you set in your .bash_profile or .bashrc files. If you\u2019ve set up Unix environment variables but echo \"$SENDGRID_USERNAME\" doesn\u2019t return the correct variable in the console, you may have a problem with the way you\u2019ve set Unix environment variables. Most computers use the bash shell and you can set environment variables in your .bash_profile or .bashrc files. But not every system is alike. If it seems Unix environment variables are not working, you may have to find a colleague who can help you troubleshoot. If your Unix environment variables are not working, you can hardcode the variables in your config/secrets.yml file: Replace the following: development: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> with: development: email_provider_username: example email_provider_password: 's#cr*t' In a YAML file, you do not need quotes unless your string contains special characters. If your password contains any of these characters you should surround the string with single quotes: : { } [ ] & * # ? | - < > = ! % @ \\ Remember the security rule: Don\u2019t commit the config/secrets.yml file to Git if it contains any secrets. Test the application and finish your troubleshooting. Then remove the hardcoded values from the config/secrets.yml file before committing to Git. 20.9 Asynchronous Mailing You may notice a delay in the responsiveness of the Contact form after adding the email feature. Unfortunately, there\u2019s a performance penalty with our new feature. Our controller code connects to the SendGrid server and waits for a response before it renders the home page and displays the acknowledgment message. The performance penalty can be avoided by changing the implementation so that the controller doesn\u2019t wait for a response from the SendGrid server. We call this asynchronous behavior because sending email does not need to be \u201cin sync\u201d with displaying the acknowledgment. Eliminating a delay improves the user experience and makes the site feel more responsive. Asynchronous mailing requires a queueing system for background jobs . For our tutorial application, and for a typical small business website, the delay caused by lack of queueing is no big deal. Keep in mind, though, as you tackle bigger projects in Rails, you will need to implement a queueing system. Rails includes the Active Job feature for background processing. The Mailing List with Active Job tutorial in the Capstone Rails Tutorials series explains how to use it. 20.10 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"sending mail\" $ git push You\u2019ve created a Rails application that handles a form and sends email to the site owner. Mail is a practical way to connect with site visitors. Let\u2019s implement a feature that collects email addresses for mass mailing of a newsletter. Chapter 21 Mailing List Even as other messaging avenues become increasingly popular, such as messaging apps or Facebook messages, email remains the most practical way to stay in touch with website visitors. Encouraging a visitor to provide an email address means offering an invitation to a dialog and a relationship beyond a single visit. If you have a legitimate reason to stay in touch, and you\u2019ve motivated the visitor to leave an email address, you\u2019ll need a mailing list service. You\u2019ve seen how Rails can send an email message. From what you\u2019ve seen so far, you can imagine it would not take much code to loop through a list of email addresses from a database, sending a message to each. In the early days of the web, it was easy for any system administrator to write a script for mass mailings. Since there is negligible cost to sending bulk email, unscrupulous and ignorant operators sent email to any address they could scrape, borrow, or steal. The resulting flood of spam made checking one\u2019s inbox an icky experience and destroyed much of the early culture of the Internet. Fortunately, services such as Gmail arose to filter email. There is now a thick (but leaky) layer of screening protocols that redirect spam to a junk folder. One reason you won\u2019t use a Rails application to send bulk email is that a web application server is not the most efficient tool for sending email. More significantly, there\u2019s a good chance your email won\u2019t go through or, if it does (and someone complains), you\u2019ll quickly see your IP address blacklisted. That\u2019s why we use mailing list services to send bulk email such as newsletters or promotional offers. Considerable expertise is required to keep email from being filtered as spam (see MailChimp\u2019s article Email Delivery For IT Professionals . Email service providers increase reliability of delivery. These services track deliveries and show how well your email is being delivered. You\u2019ll also get features such as management of \u201cunsubscribe\u201d requests and templates to design attractive messages. There are at least a dozen well-established email service providers that allow a Rails application to programmatically connect to the service (via an API) to add or remove email addresses. For a list, see the article Send Email with Rails . For this tutorial application, we\u2019ll use MailChimp because there is no cost to open an account and you can send up to 12,000 emails/month to list of 2000 or fewer subscribers for free. Spam is unsolicited email. Don\u2019t ever send spam, whether for yourself, a client, or an employer. If recipients complain, your IP address and domain name will be blacklisted. So be very careful to only send to subscribers who signed up, send what subscribers expect, and be sure to offer value. If you get complaints, or the unsubscribe rate is high, stop. We\u2019ll assume we\u2019ve discussed the rules with Foobar Kadigan and he is eager to offer a newsletter to his visitors that will be genuinely appreciated. 21.1 User Story Let\u2019s plan our work with a user story: *Subscribe to Mailing List* As a visitor to the website I want to sign up for a mailing list In order to receive news and announcements To implement the user story, we\u2019ll add a mailing list feature. 21.2 Implementation We\u2019ll use the Rails model-view-controller architecture. We\u2019ll need: Visitors model view for visitors#new Visitors controller with new and create methods routing for visitors#new and visitors#create We\u2019ll add a Visitor model that has a data attribute for an email address. We already have a Visitors controller that renders the home page using the file in the app/views/visitors/ folder. We\u2019ll replace the contents of the view file with a nice photo, a marketing message, and a form. Our Visitors controller new and create methods will be very similar to what we created for the Contacts controller. Instead of connecting to SendGrid to send a message, we\u2019ll call a method to save the visitor\u2019s email address to a MailChimp mailing list. 21.3 Gibbon Gem The Gibbon gem is a convenient wrapper for the MailChimp API . We could connect to the MailChimp API using other gems that provide low-level plumbing such as HTTP connections ( httparty ) and data parsing ( multi_json ), but other developers have already done the work of wrapping the plumbing in a higher-level abstraction that easily fits into a Rails application. Amro Mousa\u2019s Gibbon gem is popular and actively maintained. In your Gemfile , you\u2019ve already added: gem 'gibbon' and previously run $ bundle install . 21.4 Home Page Earlier we built a home page that provided a simple demonstration of the Ruby language. We\u2019ll discard it and replace it with a page that you could adapt for a typical small-business website. We want a nice photo, space for a marketing message, and the \u201csign up\u201d form. Replace the contents of the file app/views/visitors/new.html.erb : <% content_for :title do %>Foobar Kadigan<% end %> <% content_for :description do %>Website of Foobar Kadigan<% end %> Stay in touch. < %= form\\_with(model: @visitor) do |f| %> < %= f.email\\_field :email, placeholder: 'Your email address...', autofocus: true %> < %= f.submit 'Sign up for the newsletter', class: 'submit' %> < % end %> We include content_for view helpers that pass a title and description to the application layout. We add a photo to the page with an <img> tag. We\u2019re taking a shortcut and using a placeholder photo from the lorempixel.com service. The section and <div class=\"column\"> tags apply our CSS grid to create a row with two columns, one for our marketing message, and one for the form. Our marketing message is merely a placeholder. For a real website, you\u2019d likely craft a stronger call to action than merely \u201cStay in touch.\u201d The form is very similar to the form on the Contact page, except we initialize it with the @visitor instance variable and only need a field for an email address. We use the :placeholder parameter to create a hint in the empty input field. A submit element will contain the text, \u201cSign up for the newsletter,\u201d and we apply a CSS class to style the element as a button. 21.4.1 Photo Options You\u2019re free to modify this page as you wish, as long as you keep the form intact. You might wish to modify the placeholder photo. If you don\u2019t like cats, try http://lorempixel.com/1170/600/nightlife/1 or any other categories from the lorempixel.com service. You can change the size by modifying the dimensions from 1170 (pixel width) by 600 (pixel height). You can replace the placeholder photo with your own. Look for the app/assets/images folder and add an image. Instead of the HTML <img> tag, use the Rails image_tag view helper, like this: <%= image_tag \"myphoto.jpg\" %> We\u2019ll need a Visitor model to initialize the form. 21.5 Visitor Model The Visitor model is almost identical to the Contact model we created earlier, except there is just one data attribute for the email field. We\u2019ll also add a subscribe method to add a visitor to a MailChimp list. We\u2019ll call this method from the controller when we process the submitted form. Create a file app/models/visitor.rb : class Visitor include ActiveModel::Model attr_accessor :email validates_presence_of :email validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i def subscribe mailchimp \\= Gibbon::Request.new(api_key: Rails.application.secrets.mailchimp_api_key) list_id \\= Rails.application.secrets.mailchimp_list_id result \\= mailchimp.lists(list_id).members.create( body: { email_address: self.email, status: 'subscribed' }) Rails.logger.info(\"Subscribed #{self.email} to MailChimp\") if result end end When you copy this, be careful to keep the long regex expression with: /.../i on one line (no line breaks). Just as we did for the Contact model, we use include ActiveModel::Model to mix in behavior from the ActiveModel class. This is the best way to create a model that does not use a database. In other applications, where models use a database, you will create a model class that inherits from ActiveRecord instead. We create the email attribute using the attr_accessor keyword. We set validation requirements using validates_presence_of and validates_format_of keywords. To subscribe a visitor to a mailing list, you need to provide: list_id - identify the MailChimp list email_address - address of the visitor status - subscribed, pending, or unsubscribed We specify \u201csubscribed\u201d to immediately add the address without asking the user for confirmation. We could specify \u201cPending\u201d if we wanted to add the address with double-opt-in so the visitor receives a request to confirm the email address before they are subscribed. Our subscribe method does the work of connecting to the MailChimp server to add the visitor to the mailing list. We instantiate the Gibbon object which provides all the connectivity, providing the mailchimp_api_key value, which we\u2019ve set in the config/secrets.yml file. We assign the Gibbon object to the mailchimp variable (we could name it anything). We set the list_id from a configuration variable in the config/secrets.yml file. The visitor\u2019s email_address is an attribute of the model we obtain from self . We must set the status property to \u2019subscribed\u2019 to indicate the visitor should receive mailings. Finally, if the application successfully adds the new subscriber, we write a message to the logger. If we get an error when trying to add the subscriber, Gibbon will raise an exception. 21.6 Visitors Controller We already have a Visitors controller that contains a simple new method. We\u2019ll change the new method, add a create method, and provide a secure_params private method to secure the controller from mass assignment exploits. Replace the contents of the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @visitor \\= Visitor.new end def create @visitor \\= Visitor.new(secure_params) if @visitor.valid? @visitor.subscribe flash[:notice] \\= \"Signed up #{@visitor.email}.\" redirect_to root_path else render :new end end private def secure_params params.require(:visitor).permit(:email) end end Our new method now assigns the Visitor model to an instance variable instead of the Owner model. The create method is almost identical to the Contacts controller create method. We instantiate the Visitor model with scrubbed parameters from the submitted form. If the validation check succeeds, we subscribe the visitor to the MailChimp mailing list with the @visitor.subscribe method. All the work of connecting to MailChimp happens in the Visitor model. If the validation check fails, we redisplay the home page (the new action). 21.7 Clean Up We no longer use the Owner model, so we can delete the file app/models/owner.rb : $ rm app/models/owner.rb There\u2019s no harm if it remains but it is good practice to remove code that is no longer used. 21.8 Routing Our routing is now more complex. In addition to rendering the visitors# new view as the application root (the home page), we need to handle the create action. We can use a \u201cresourceful route\u201d as we did with the Contacts controller. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do resources :contacts, only: [:new, :create] resources :visitors, only: [:new, :create] root to: 'visitors#new' end The root path remains visitors#new . Order is significant in the config/routes.rb file. As the final designated route, the root path will only be active if nothing above it matches the route. We\u2019ve added resources :visitors, only: [:new, :create] . We only want two routes so we\u2019ve added the restriction only: [:new, :create] . The new route has these properties: new_visitor_path - route helper visitors - name of the controller (VisitorsController) new - controller action http://localhost:3000/visitors/new - URL generated by the route helper GET - HTTP method to display a page The create route has these properties: visitors_path - route helper visitors - name of the controller (VisitorsController) create - controller action http://localhost:3000/visitors - URL generated by the route helper POST - HTTP method to submit form data You can run the rails routes command to see these in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contacts POST /contacts(.:format) contacts#create new_contact GET /contacts/new(.:format) contacts#new visitors POST /visitors(.:format) visitors#create new_visitor GET /visitors/new(.:format) visitors#new root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command shows we\u2019ve created the routes we need. 21.9 Test the Application If you need to start the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see our new home page with the placeholder photo and the \u201csign up\u201d form. Enter your email address and click the \u201csign up\u201d button. You should see the page redisplay with an acknowledgment message. Try entering an invalid email address such as \u201c [email protected] @\u201d, or click the submit button without entering an email address, and you should see an error message. You\u2019ll have to log in to MailChimp and check your list of subscribers to see if the new email address was added successfully. With MailChimp, you can send a welcome message automatically when the visitor signs up for the mailing list. Use the welcome message to inform the visitor that they\u2019ve successfully subscribed to the mailing list and will receive the next newsletter email. It\u2019s a bit difficult to find the MailChimp option to create a welcome message. Strangely, MailChimp considers a welcome message a \u201cform.\u201d Here\u2019s how to find it. On the MailChimp \u201cLists\u201d page, click the \u201cdown arrow\u201d for a list and click \u201cSignup forms.\u201d Then click \u201cGeneral forms.\u201d On the \u201cCreate Forms\u201d page, there is a drop-down list of \u201cForms & Response Emails.\u201d The gray box shows \u201cSignup form.\u201d Click the down arrow. Select the menu item named \u201cFinal \u2018Welcome\u2019 Email\u201d and you\u2019ll be able to create a welcome message. 21.10 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"mailing list\" $ git push Our tutorial application is feature complete. Let\u2019s deploy it so we can see it running as a real website. Chapter 22 Deploy You\u2019ve been running the default web server on your local machine. If you wanted, you could leave your computer running, set up a managed DNS service , and your web application would be accessible to anyone. But even if you wanted to leave your computer running 24 hours a day, you\u2019re probably not a security expert, your web server isn\u2019t tuned to handle much traffic, and your computer is distant from the interconnection hubs where most websites are hosted. For these reasons, when we move a web application from development to production, we deploy it to a web hosting service that provides a hosting platform on a server located in a strategically-located data center . Data centers offer colocation services , renting rack-mounted computers with fast Internet connections that can be configured as web servers. In the early days of the web, deploying a web application required system administration skills to configure and maintain a web server. Today, some developers like to set up their web servers \u201cfrom bare metal\u201d using virtual private servers from Linode, Slicehost, Rackspace, Amazon EC2, or others. With sufficent skills and study, they say there is a feeling of satisfaction from doing it yourself. But not everyone wants to be a system administrator. Most Rails developers simply use a hosted platform as a service (PaaS) provider such as Heroku , DigitalOcean , EngineYard , OpenShift , or Pivotal Cloud Foundry . If you\u2019ve previously built web sites, you may already be using a shared web hosting service such as GoDaddy or DreamHost. Be skeptical if a shared web hosting service, designed for WordPress or static websites, claims to support Rails applications; most do so badly. Shared hosting services offer file space for static websites on servers that are shared by thousands of websites. A Rails application requires considerably greater computing resources and specialized expertise. In contrast, a platform as a service provider offers a hardware and software stack optimized for application performance and developer convenience. Heroku is the best known and most popular PaaS provider and we\u2019ll use it to deploy the tutorial application. Using Heroku or another PaaS provider means you don\u2019t need skills as a system administrator to manage your web server. Instead, you\u2019ll have experts maintaining the production environment, tuning system performance, and keeping the servers running. 22.1 Heroku Costs It costs nothing to set up a Heroku account and deploy as many applications as you want. You\u2019ll pay only if you upgrade your hosting to accommodate a busy website. Heroku pricing is based on a measure of computing resources the company calls a \u201cdyno.\u201d Think of a dyno as a virtual server (though it is not). For personal projects, you can run your Rails application on a single dyno and never incur a charge, as long as it is not active more than 12 hours a day. A single dyno idles after one hour of inactivity, \u201cgoing to sleep\u201d until it receives a new web request. For a personal project, this means your web application will respond with a few seconds delay if it hasn\u2019t received a web request in over an hour. After it wakes up, it will respond quickly to every browser request. If you want your web application running 24 hours per day and responding to every request without delay, Heroku will charge $7 per month for a \u201chobby\u201d account. You\u2019ll be able to set up a custom domain, using your own domain name. Heroku offers the option of adding dynos to handle more traffic for $25 per month; here\u2019s an article that compares Heroku costs . A single dyno can serve thousands of requests per second, but performance depends greatly on your application. As a default, Heroku supports Puma , the recommended web server for Rails 5. Serving a typical Rails application that takes 100ms on average to process each request, Puma can accommodate about 50 requests per second per dyno, which is adequate for a personal project. If traffic surges on your website and exceeds 50 requests per second, you can scale up with more dynos. Heroku is ideal for hosting our application: no system administration expertise is required hosting is free performance is excellent For this tutorial application, we won\u2019t concern ourselves with the possibility that the website may get a lot of traffic. I\u2019m sure you\u2019ll join me in offering hearty thanks to Heroku for providing a convenient service that beginners can use for free. Let\u2019s deploy! 22.2 Test the Application Before deploying an application to production, a professional Rails developer runs integration or acceptance tests. If the developer follows the discipline of test-driven development , he or she will have a complete test suite that confirms the application runs as expected. Often the developer uses a continuous integration server which automatically runs the test suite each time the code is checked into the GitHub repository. We haven\u2019t used test-driven development to build this application so no test suite is available. You\u2019ve tested the application manually at each stage. 22.3 Preparing for Heroku You\u2019ll need to prepare your Rails application for deployment to Heroku. 22.3.1 Gemfile We need to modify the Gemfile for Heroku. We add a group :production block for a gem that Heroku needs: pg - PostgreSQL gem Heroku doesn\u2019t support the SQLite database; the company provides a PostgreSQL database. Though we won\u2019t need it for our tutorial application, we must include the PostgreSQL gem for Heroku. We\u2019ll mark the sqlite3 gem to be used in development only. Open your Gemfile and replace the contents with the following: Gemfile source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' gem 'sqlite3' end group :production do gem 'pg' end We have to run bundle install because we\u2019ve changed the Gemfile. The gem we\u2019ve added is only needed in production so we don\u2019t install it on our local machine. When we deploy, Heroku will read the Gemfile and install the gem in the production environment. We\u2019ll run bundle install with the \u2013without production argument so we don\u2019t install the new gem locally: $ bundle install --without production You\u2019ll see: . . . Gems in the group production were not installed. Use `bundle show [gemname]` to see where a bundled gem is installed. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"gems for Heroku\" $ git push 22.3.2 Asset Pipeline in Production It is important to understand that assets are compiled by Heroku at the time of deployment. Rails compiles assets to make our application faster for the user. The Rails asset pipeline produces single CSS and JavaScript files that combine all the files in the folders app/assets/javascripts/ and app/assets/stylesheets/ . In development mode, the Rails asset pipeline \u201clive compiles\u201d all CSS and JavaScript files so any changes are reflected immediately. But compiling assets adds processing overhead. In production, a web application would be slowed unnecessarily if assets were compiled for every web request. Consequently, assets are precompiled by Heroku at the time we deploy our application to production. When assets are compiled, the Rails asset pipeline will automatically produce concatenated and minified application.js and application.css files from files listed in the manifest files app/assets/javascripts/application.js and app/assets/stylesheets/application.css.scss . The result will be several files added to the public/assets/ folder. The filenames will contain a long unique identifier that prevents caching when you change the application CSS or JavaScript. You can precompile assets manually with the command rails assets:precompile but ordinarily it is not necessary. It is a likely indicator that the asset pipeline is not working or assets are not compiled if CSS styling is missing from your web pages. If you want to learn more about the asset pipeline, refer to the Rails Guide on the Asset Pipeline or an article from LaunchSchool . 22.3.3 Option to Ban Spiders Do you want your website to show up in Google search results? If there\u2019s a link anywhere on the web to your site, within a few days (sometimes hours) the Googlebot spider will visit your site and add it to the database for the Google search engine. Most webmasters want their sites to be found in Google search results. If that\u2019s not what you want, you may want to modify the file public/robots.txt to prevent indexing by search engines. Only change this file if you want to prevent your website from appearing in search engine listings: See http://www.robotstxt.org/robotstxt.html for documentation To ban all spiders from the entire site uncomment the next two lines: User-agent: * Disallow: / To block all search engine spiders, remove the commenting from the User-Agent and Disallow lines. You can learn more about the format of the robots exclusion standard . 22.3.4 Humans.txt Many websites include a robots.txt file for nosy bots so it\u2019s only fair that you offer a humans.txt file for nosy people. Few people will look for it but you can add a file public/humans.txt to credit and identify the creators and software behind the website. The HTML5 Boilerplate project offers an example file or you can borrow from RailsApps . 22.4 Sign Up for a Heroku Account In the chapter, \u201cAccounts You May Need,\u201d I suggested you sign up for a Heroku account. To deploy an app to Heroku, you must have a Heroku account. Visit https://id.heroku.com/signup/devcenter to set up an account. Be sure to use the same email address you used to configure Git locally. You can check the email address you used for Git with: $ git config --get user.email 22.5 Heroku Toolbelt Heroku provides a command line utility for creating and managing Heroku apps. Visit https://toolbelt.heroku.com/ to install the Heroku Toolbelt. A one-click installer is available for Mac OS X, Windows, and Linux. The installation process will install the Heroku command line utility. It also installs the Foreman gem which is useful for duplicating the Heroku production environment on a local machine. The installation process will also make sure Git is installed. To make sure the Heroku command line utility is installed, try: $ heroku version heroku-toolbelt/... You\u2019ll see the heroku-toolbelt version number. You should be able to login using the email address and password you used when creating your Heroku account: $ heroku login Enter your Heroku credentials. Email: [email protected] Password: Could not find an existing public key. Would you like to generate one? [Yn] Generating new SSH public key. Uploading ssh public key /Users/adam/.ssh/id_rsa.pub The Heroku command line utility will create SSH keys if necessary to guarantee a secure connection to Heroku. 22.6 Heroku Create Be sure you are in your application root directory and you\u2019ve committed the tutorial application to your Git repository. Use the Heroku create command to create and name your application. $ heroku create myapp Replace myapp with something unique. Heroku demands a unique name for every hosted application. If it is not unique, you\u2019ll see an error, \u201cname is already taken.\u201d Chances are, \u201clearn-rails\u201d is already taken. The name must start with a letter and can only contain lowercase letters, numbers, and dashes. If you don\u2019t specify your app name ( myapp in the example above), Heroku will supply a placeholder name. You can easily change Heroku\u2019s placeholder name to a name of your choice with the heroku apps:rename command (see Renaming Apps from the CLI ). Don\u2019t worry too much about getting the \u201cperfect name\u201d for your Heroku app. The name of your Heroku app won\u2019t matter if you plan to set up your Heroku app to use your own domain name. You\u2019ll just use the name for access to the instance of your app running on the Heroku servers; if you have a custom domain name, you\u2019ll set up DNS ( domain name service ) to point your domain name to the app running on Heroku. The heroku create command sets your Heroku application as a Git remote repository. That means you\u2019ll use the git push command to deploy your application to Heroku. 22.7 Enable Email You\u2019ll need to enable email for production or else you\u2019ll get errors when your application tries to send email from Heroku. To use SendGrid, add the following to your config/environments/production.rb file: email enabled in production config.action_mailer.smtp_settings \\= { address: \"smtp.sendgrid.net\", port: 587, domain: Rails.application.secrets.domain_name, authentication: \"plain\", enable_starttls_auto: true, user_name: Rails.application.secrets.email_provider_username, password: Rails.application.secrets.email_provider_password } ActionMailer Config config.action_mailer.default_url_options \\= { :host \\=> Rails.application.secrets.domain_name } config.action_mailer.delivery_method \\= :smtp config.action_mailer.perform_deliveries \\= true config.action_mailer.raise_delivery_errors \\= false You can use port 25, 587, or 2525 (some ISPs restrict connections on port 25). Be sure to add the new settings before the end keyword in the file. The settings can be added anywhere, as long as they precede the end keyword! You\u2019ll need to specify the unique name you\u2019ve selected for your hosted application. We\u2019re using the Rails.application.secrets.domain_name configuration variable in two places in the file. The config/secrets.yml file provides configuration variables for use in production. Be sure to commit your code to the Git local repository: $ git add -A $ git commit -m \"email set for Heroku\" $ git push Next we\u2019ll set Heroku environment variables. 22.8 Set Heroku Environment Variables When you run your application, configuration values are obtained from the config/secrets.yml file, which contains Unix environment variables which are set in the .bash_profile or .bashrc files. Heroku doesn\u2019t have a .bash_profile or .bashrc file, so you\u2019ll need a way to set environment variables on Heroku. You can use the heroku config:add command. $ heroku config:add SENDGRID_USERNAME\\='example' $ heroku config:add SENDGRID_PASSWORD\\='secret' $ heroku config:add MAILCHIMP_API_KEY\\='my-key' $ heroku config:add MAILCHIMP_LIST_ID\\='mylistid' $ heroku config:add OWNER_EMAIL\\=' [email protected] ' $ heroku config:add DOMAIN_NAME\\='myapp.herokuapp.com' Don\u2019t use the values shown above. Instead, look in your .bash_profile or .bashrc files and copy the values you find there. When you set myapp.herokuapp.com , replace myapp with the name that Heroku is using for your application. If you want to use a custom domain name, you\u2019ll need to set up DNS ( domain name service ), which we won\u2019t cover in this tutorial. You don\u2019t need to set SECRET_KEY_BASE , even though it is in your config/secrets.yml file. Heroku sets it automatically. Check that the environment variables are set with: $ heroku config See the Heroku documentation on Configuration and Config Vars and the article Rails Environment Variables for more information. 22.9 Push to Heroku After all this preparation, you can finally push your application to Heroku. Be sure to commit any recent changes to the Git local repository before you push to Heroku. You commit your code to Heroku just like you push your code to GitHub. Here\u2019s how to push to Heroku: $ git push heroku master You may see a message, \u201cThe authenticity of host \u2018heroku.com\u2019 can\u2019t be established. Are you sure you want to continue connecting (yes/no)?\u201d. You can answer \u201cyes\u201d and safely continue. The push to Heroku takes several minutes. You\u2019ll see a sequence of diagnostic messages in the console, beginning with: Counting objects... and finishing with: remote: Verifying deploy.... done. 22.10 Updating the Application It is likely you\u2019ll make changes to your application after deploying to Heroku. Each time you update your site and push the changes to GitHub, you\u2019ll also have to push the new version to Heroku. A typical update scenario looks like this: $ git add -A $ git commit -m \"revised application\" $ git push $ git push heroku master 22.11 Visit Your Site Your application will be running at http://my-app-name.herokuapp.com/ . You can open any web browser and visit the site. For a shortcut, you can open your default web browser and visit your site from the command line: $ heroku open If you\u2019re using hosted development such as Cloud9, you\u2019ll need to open a browser manually to visit the site. If you\u2019ve configured everything correctly, you should be able to sign up for the newsletter and send a contact request. 22.12 Customizing For a real application, you\u2019ll likely want to use your own domain name for your app. See Heroku\u2019s article about custom domains for instructions. You may also want to improve website responsiveness by adding page caching with a content delivery network such as CloudFlare . CloudFlare can also provide an SSL connection for secure connections between the browser and server. Heroku offers many add-on services . These are particularly noteworthy: Adept Scale - automated scaling of Heroku dynos New Relic - performance monitoring For an in-depth look at your options, see the Rails Heroku Tutorial . 22.13 Troubleshooting When you get errors, troubleshoot by reviewing the log files: $ heroku logs If necessary, use the Unix tail flag to monitor your log files. Open a new terminal window and enter: $ heroku logs -t to watch the server logs in real time. 22.14 Where to Get Help Your best source for help with Heroku is Stack Overflow . Use the tag \u201cheroku,\u201d \u201clearn-ruby-on-rails,\u201d or \u201crailsapps\u201d when you post your question. Your issue may have been encountered and addressed by others. You can also check the Heroku Dev Center or the Heroku Google Group . Chapter 23 Analytics In earlier chapters, we built the tutorial application and deployed it for hosting on Heroku. We\u2019ve left something out. Though not obvious, it\u2019s very important: analytics. Analytics services provide reports about website traffic and usage. You\u2019ll use the data to increase visits and improve your site. Analytics close the communication loop with your users; your website puts out a message and analytics reports show how visitors respond. Google Analytics is the best known tracking service. It is free, easy to use, and familiar to most web developers. In this chapter we\u2019ll integrate Google Analytics with the tutorial application. There are several ways to install Google Analytics for Rails. The article on Analytics for Rails looks at various approaches and explains how Google Analytics works. For this tutorial, we\u2019ll use the Segment.com service. The service provides an API to send analytics data to dozens of different services, including Google Analytics. 23.1 Segment.com Segment.com is a subscription service that gathers analytics data from your application and sends it to dozens of different services, including Google Analytics. The service is free for low-volume websites, accommodating 1000 tracked users per month at no cost. There is no charge to sign up for the service. Using Segment.com means you install one JavaScript library and get access to reports from dozens of analytics services. You can see a list of supported services . The company offers helpful advice about which analytics tools to choose from . For low-volume sites, many of the analytics services are free, so Segment.com makes it easy to experiment and learn about the available analytics tools. The service is fast and reliable, so there\u2019s no downside to trying it. 23.2 Accounts You Will Need You will need an account with Segment.com. Sign up for Segment.com . You will need accounts with each of the services that you\u2019ll use via Segment.com. You\u2019ll likely want to start with Google Analytics, so you\u2019ll need a Google Analytics account and tracking ID. Visit the Google Analytics website to obtain the Tracking ID for your website. You\u2019ll need to know the domain name of your website to get an account for your website. If you\u2019ve deployed to Heroku without a custom domain, use the domain that looks like \u201cmyapp.herokuapp.com\u201d. Or use your custom domain if you have one. Use it for fields for \u201cWebsite Name,\u201d \u201cWeb Site URL,\u201d and \u201cAccount Name.\u201d Choose the defaults when you create your Google Analytics account and click \u201cGet Tracking ID.\u201d Your tracking ID will look like this: UA-XXXXXXX-XX . You won\u2019t need the tracking code snippet as we will use the Segment.com JavaScript snippet instead. You\u2019ll check your Google Analytics account later to verify that Google is collecting data. 23.3 Installing the JavaScript Library Segment.com provides a JavaScript snippet that sets an API token to identify your account and installs a library named analytics.js . This is similar to how Google Analytics works. The Segment.com library loads asynchronously, so it won\u2019t affect page load speed. The Segment.com JavaScript snippet should be loaded on every page and it can be included as an application-wide asset using the Rails asset pipeline. We\u2019ll add the Segment.com JavaScript snippet to a file named app/assets/javascripts/segment.js . The manifest directive //= require_tree . in the file app/assets/javascripts/application.js will ensure that the new file is included in the concatenated application JavaScript file. If you\u2019ve removed the //= require_tree . directive, you\u2019ll have to add a directive to include the app/assets/javascripts/segment.js file. Create a file app/assets/javascripts/segment.js and include the following: (function(){ // Create a queue, but don't obliterate an existing one! var analytics \\= window.analytics \\= window.analytics || []; // If the real analytics.js is already on the page return. if (analytics.initialize) return; // If the snippet was invoked already show an error. if (analytics.invoked) { if (window.console && console.error) { console.error('Segment snippet included twice.'); } return; } // Invoked flag, to make sure the snippet // is never invoked twice. analytics.invoked \\= true; // A list of the methods in Analytics.js to stub. analytics.methods \\= [ 'trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'reset', 'group', 'track', 'ready', 'alias', 'debug', 'page', 'once', 'off', 'on' ]; // Define a factory to create stubs. These are placeholders // for methods in Analytics.js so that you never have to wait // for it to load to actually record data. The `method` is // stored as the first argument, so we can replay the data. analytics.factory \\= function(method){ return function(){ var args \\= Array.prototype.slice.call(arguments); args.unshift(method); analytics.push(args); return analytics; }; }; // For each of our methods, generate a queueing stub. for (var i \\= 0; i < analytics.methods.length; i++) { var key \\= analytics.methods[i]; analytics[key] \\= analytics.factory(key); } // Define a method to load Analytics.js from our CDN, // and that will be sure to only ever load it once. analytics.load \\= function(key){ // Create an async script element based on your key. var script \\= document.createElement('script'); script.type \\= 'text/javascript'; script.async \\= true; script.src \\= ('https:' \\=== document.location.protocol ? 'https://' : 'http://') + 'cdn.segment.com/analytics.js/v1/' + key + '/analytics.min.js'; // Insert our script next to the first script element. var first \\= document.getElementsByTagName('script')\\[0\\]; first.parentNode.insertBefore(script, first); }; // Add a version to keep track of what's in the wild. analytics.SNIPPET_VERSION \\= '4.0.0'; // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load(\"YOUR_WRITE_KEY\"); })(); You can get the newest version of the code from the Segment.com Quickstart page. If you copy a newer version of the code, remove the <script type=\"text/javascript\"> and </script> tags from the top and bottom. The Rails asset pipeline will add the code to the application.js file which already contains the necessary <script> tags. If you copy the code from the Segment.com Quickstart instructions, also remove: // Make the first page call to load the integrations. If // you'd like to manually name or tag the page, edit or // move this call however you'd like. analytics.page(); We\u2019ll add analytics.page(); later, wrapping it in additional code to accommodate Rails Turbolinks. Note that the Segment.com website offers a minified version of the snippet for faster page loads. We\u2019ve used the non-minified version so you can read the code and comments. If you want, you can get minified version from the Segment.com website for improved speed. 23.4 Replace the Write Key You must replace YOUR_WRITE_KEY with your Segment.com \u201cWrite Key.\u201d After you log in to Segment.com , click on your \u201cworkspace,\u201d then choose a \u201csource,\u201d click \u201csettings,\u201d and click \u201cAPI Keys\u201d in the side navigation bar. Add the \u201cWrite Key\u201d in the file where you see this line: // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load(\"YOUR_WRITE_KEY\"); Now you must add extra code to the Segment.com JavaScript snippet. The extra code accommodates Turbolinks, plus page view and event tracking, which we\u2019ll look at next. 23.5 Add Integration Code To make sure every page is tracked when Rails Turbolinks is used, plus track page views and events, you must add the following JavaScript to the end of the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { console.log('page loaded'); analytics.page(); analytics.trackForm($('#new_visitor'), 'Signed Up'); analytics.trackForm($('#new_contact'), 'Contact Request'); }) Add it after the last line. Add it after the orthographic car wreck that looks like })(); . I\u2019ll explain the purpose of this code next. 23.6 Page View Tracking with Turbolinks To make sure every page is tracked when Rails Turbolinks is used, we\u2019ve added the following JavaScript to the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { . . . analytics.page(); . . . }) Rails 4.0 introduced a feature named Turbolinks to increase the perceived speed of a website. Turbolinks makes an application appear faster by only updating the body and the title of a page when a link is followed. By not reloading the full page, Turbolinks reduces browser rendering time and trips to the server. With Turbolinks, the user follows a link and sees a new page but Segment.com or Google Analytics thinks the page hasn\u2019t changed because a new page has not been loaded. To resolve the issue, you could disable Turbolinks by removing the turbolinks gem from the Gemfile. However, it\u2019s nice to have both the speed of Turbolinks and tracking data, so I\u2019ll show you how to get tracking data with Turbolinks. Turbolinks fires a load event when a page has been replaced. The code listens for the load event and calls the Segment.com analytics.page() method. This code will work even on pages that are not visited through Turbolinks (for example, the first page visited). 23.7 Event Tracking Segment.com gives us a convenient method to track page views. Page view tracking gives us data about our website traffic, showing visits to the site and information about our visitors. It\u2019s also important to learn about a visitor\u2019s activity on the site. Site usage data helps us improve the site and determine whether we are meeting our business goals. This requires tracking events as well as page views. The Segment.com JavaScript library gives us two methods to track events: trackLink trackForm Link tracking can be used to send data to Segment.com whenever a visitor clicks a link. It is not useful for our tutorial application because we simply record a new page view when a visitor clicks a link on our site. However, if you add links to external sites and want to track click-throughs, you could use the trackLink method. The method can also be used to track clicks that don\u2019t result in a new page view, such as changing elements on a page. The trackForm method is more useful for our tutorial application. We\u2019ve already appended it to the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { console.log('page loaded'); analytics.page(); analytics.trackForm($('#new_visitor'), 'Signed Up'); analytics.trackForm($('#new_contact'), 'Contact Request'); }) I\u2019ve included a console.log(\u2019page loaded\u2019) statement so you can check the browser JavaScript console to see if the code runs as expected. The trackForm method takes two parameters, the ID attribute of a form and a name given to the event. Form tracking will show us how many visitors sign up for the newsletter or submit the contact request form. Obviously we can count the number of subscribers in MailChimp or look in the site owner\u2019s inbox to see how many contact requests we\u2019ve received. But form tracking helps us directly correlate the data with visitor data. For example, we can analyze our site usage data and see which traffic sources result in the most newsletter sign-ups. You can read more about the Segment.com JavaScript library in the Segment.com documentation . 23.8 Troubleshooting Click \u201cDebugger\u201d in the navigation bar so you can monitor data sent to Segment.com from your application. When you test the application locally, you should see the results of page visits and form submissions within seconds in the Segment.com debugger. If you don\u2019t see your page visits in the Segment.com debugger, open the browser JavaScript console, visit a page, and check for the message \u201cpage loaded\u201d in the JavaScript console. In the Chrome browser, the JavaScript console is available under the item \u201cDeveloper\u201d in the \u201cView\u201d menu. 23.9 Segment.com Integrations After installing the Segment.com JavaScript snippet in your application, go to your \u201csources\u201d page and click the \u201cintegrations\u201d link to visit the integrations page to select the services that will receive your data. Each service requires a different configuration information. At a minimum, you\u2019ll have to provide an account identifier or API key that you obtained when you signed up for the service. For Google Analytics, enter your Google Analytics tracking id. It looks like UA-XXXXXXX-XX . With Google Analytics enabled as a Segment.com integration, you\u2019ll see form submissions appear in the Google Analytics Real-Time report, under the \u201cEvents\u201d heading. Note that Google doesn\u2019t process their data in real-time in most of its reports. Data appears immediately in the Google Analytics Real-Time report. Other Google Analytics reports, such as the Audience report, won\u2019t show data immediately. Check the next day for updated reports. 23.10 Deploy Commit to the Git repo and deploy to Heroku: $ git add -A $ git commit -m \"analytics\" $ git push Then you can deploy to Heroku: $ git push heroku master When you visit the site, you should see real-time tracking of data sent to Segment.com in the Segment.com debugger. Log into your Google Analytics account to see real-time tracking of visits to your website. Under \u201cStandard Reports\u201d see \u201cReal-Time Overview.\u201d You\u2019ll see data within seconds after visiting any page. 23.11 Improving the User Experience Website analytics can be used to improve visitors\u2019 experience of the website. Deploying the website is not the last step in your project. Unlike many earlier forms of communication (such as releasing a film, publishing a book, or broadcasting an advertisement), we can see how every visitor responds to the website. That means your work is not done when you deploy the site. Look at your usage data to see which elements of the site are getting attention and which are being used. Does no one visit the \u201cAbout\u201d page? Maybe the navigation link is difficult to find. Do many people visit the Contact page but few submit a contact request form? Maybe you should change the label on the button or offer other ways to contact the site owner. Effective and successful websites often are the result of systematic A/B testing (sometimes called split testing ). A/B testing is a technique of creating variations on a web page, such as changing text, layout, or button colors, and using website analytics to measure the effect of the change. You can learn more about services such as Content Analytics in Google Analytics, Optimizely , or Visual Website Optimizer . These services provide complete \u201cdashboards\u201d to set up usage experiments and measure results ( Optimizely is available as a Segment.com integration). 23.12 Conversion Tracking You may only be interested in knowing that people visit your site, without measuring visitors\u2019 engagement or response to the site. But in most cases, if you build a website, you\u2019ll offer a way for visitors to respond, whether it is by purchasing a product, signing up for a newsletter, or clicking a \u201clike\u201d button. The ultimate measure of website effectiveness is the conversion rate . The term comes from the direct marketing industry and originally referred to a measure of how people responded to \u201cjunk mail\u201d offers. For a website, the conversion rate indicates the proportion of visitors who respond to a call to action , which may be an offer to make a purchase, register for a membership, sign up for a newsletter, or any other activity which shows the visitor is engaged and interested. For our tutorial application, we can measure our website effectiveness by looking at the conversion rate for newsletter sign-ups. We\u2019re tracking page views which will give us a count of visits to the website home page. And we\u2019ve got event tracking in place to count newsletter sign-ups. If 100 people visit the home page and 10 people request a newsletter, we\u2019ve got a conversion rate of 10%. We can try to improve the conversion rate by improving the user experience (perhaps through A/B testing) or focusing on increasing traffic from sources that provide a higher conversion rate. You can monitor your site\u2019s conversion rate by setting up events as goals in Google Analytics. Segment.com also integrates with many services which provide conversion tracking. 23.13 Enjoy What You\u2019ve Achieved You\u2019ve completed building the tutorial application. If your project was to build an application for someone else, whether the company you work for, or a client like Foobar Kadigan, you\u2019ve completed the deliverable . You started with project planning, in the form of user stories. You implemented the application using a variety of technologies supported by the Ruby on Rails development platform. And you\u2019ve deployed the application for others to use, with analytics in place to track traffic and usage. Not every manager or client will appreciate the effort or the complexity of the project you\u2019ve built. Mr. Kadigan\u2019s happiness may depend on how well you\u2019ve understood his goals and the degree to which you\u2019ve met his expectations. If you\u2019re working for yourself, or launching your startup, you may be your own toughest boss, because there is always more to do. With technology projects, like many other aspects of life, though it seems you\u2019ll never get it right, and never get it done, there are moments when you can savor a sense of accomplishment. This is one of those moments. Before you start thinking about adding one more feature, or updating the application for the new releases that inevitably came out during the time you were working, take time to bask in the satisfaction of seeing the results of your work. Software development has its own unique rhythm of frustration and satisfaction. As software developers, we subject ourselves to hours, days, or weeks of struggle with code that is cryptic and resists understanding. We gain mastery for a few minutes and then turn to the next problem. With each feature you implement, or issue you resolve, you\u2019ll experience brief elation before resuming the grind of development. But at each milestone, and at the completion of the project, you\u2019ve built something tangible that you can use. You can try it out yourself and show it to others. Give yourself full credit. You\u2019ve built something extraordinary with little more than intelligence and attention. You\u2019ve leveraged the work of other developers who have contributed to the open source Ruby on Rails platform and you\u2019ve created your own unique product. This is what drives us as developers; to create something from nothing, using only our collective intelligence and ambition. Chapter 24 Testing You don\u2019t need to read this chapter if you will always be a student, or a hobbyist, working on personal projects. But if you wish to work as a professional Rails developer, or launch your own startup, with money and reputation at stake, you must learn about testing. In this chapter, I\u2019ll introduce the basic concepts of testing and show how to build a test suite for the tutorial application. 24.1 Why Test? Software applications are fragile. When you write a song, you can include a wrong note and the song won\u2019t break. In a film, technical flaws like a \u201cjump cut\u201d or a microphone in the frame won\u2019t ruin an entire movie. But an unseen error in a software program can disrupt a key feature or crash the entire application. Software applications are never finished. Songs and movies reach a stage of completion and are delivered to their audience, with no expectation that the completed work will change. With software applications, there\u2019s always an upcoming version with bug fixes or new features. As web developers, we continue to make changes to the applications that our customers are actively using. Sometimes new features are delivered within minutes, or hours, of committing new code to the repository. Software applications are complex. A web application, or any software program, is a machine with intricately connected parts, or dependencies . As an application grows, the connections quickly grow more complex, to the point where no one is able to see all the dependencies at once. Plus, web applications are often a collaborative effort, so no one person is familiar with every line of code. Combine the evolving nature of an application, with the complexity of the product, and the likelihood that flaws will be immediately noticed by users, and you\u2019ll realize why testing is so important to the software development process. Testing was once considered the sole responsibility of a quality assurance (QA) department. Senior developers created new features or fixed bugs. When the work was \u201cdone,\u201d lesser paid (and lower status) developers \u201cin QA\u201d clicked through screens, with written notes or scripts, as if they were users testing every feature of a program. Invariably, manual testing led to oversights, because testing notes were out of date, \u201cedge cases\u201d were overlooked, and the work was monotonous. In the best-run companies, QA engineers are now expert consultants on testing methods and a source of guidance for other developers. We now rely on automated testing . Even more important, the job of writing test code now belongs to the developer who creates a feature or fixes a bug. It\u2019s our responsibility to write adequate tests for any code we add to the repository. 24.2 What Are Tests? Developers talk about testing as if it were an activity different from writing code. It is not. Testing is something we do while writing code. We create tests with the same text editor we use use to write code. The tests themselves are written in Ruby, just like any other part of a Rails application. You\u2019ll put the test code in either a tests/ or spec/ folder, committed to the Git repository with all the other code. You\u2019ll use the specialized API of a testing framework for the methods of your tests, either Minitest or RSpec . Test code is different from code that implements features in one significant way: Instead of supporting interactions with a user, test code interacts with the code you\u2019ve written, verifying the code behaves as intended. 24.3 Scripted or Exploratory When testing is used for quality assurance, the goal is to create a suite of automated tests that will reveal any bugs that creep into code and break the application. Sometimes this is called scripted testing . These tests are checked into the software repository and maintained with the application. Often developers will set up a system for continuous integration (CI), which will automatically run the test suite whenever the repository is updated. Developers can set up a CI server such as Jenkins or use a hosted CI service such as Travis CI , CircleCI , or Semaphore to run tests automatically. Automated testing with continuous integration serves as a safety net for developers. There is another role for testing, which is often called exploratory testing , or developer testing . These tests may end up in an application test suite, but the primary purpose is to help a developer construct an application. Many developers, after gaining experience in writing tests for quality assurance, realize that writing tests can be a useful first step in figuring out how a feature should be implemented. It may seem odd to write tests first, but exploratory testing can clarify what behavior will be required, and help the developer think through alternatives and edge cases. This approach is called test-first development , and many developers will tell you that when you write tests first, you\u2019ll be more satisfied; you\u2019ll be more focused; and you\u2019ll avoid tangents and detours of the \u201cnice-to-have-but-not-really-needed\u201d variety. We\u2019ll look closely at test-first development in conjunction with Test-Driven Development (TDD) and Behavior-Driven Development (BDD) at the end of this chapter. First, let\u2019s gain an understanding of testing terminology and practice. 24.4 Regression and Acceptance We describe tests by the purpose they serve. In addition to exploratory testing used in test-first development, there are several kinds of tests used for quality assurance. Regression tests are run every time we change code. Sometimes we want to make sure new features don\u2019t break the existing application. More often, we run tests after changing existing code to make it more readable, elegant, or effective. We call this tinkering \u201c refactoring .\u201d Refactoring is very similar to what we call editing or rewriting when we work with the written word. Before we refactor, we need to know what results we expect from our code, and we need automated tests to execute our code and check for the expected results. If our automated tests are adequate, we can use the tests as regression tests, making sure our refactoring hasn\u2019t introduced new bugs. Acceptance tests are sometimes identical to regression tests, and may use the same test code. The purpose is different, so we give this kind of testing a different name. Acceptance tests provide accountability and serve a management function. These are tests that determine if a feature has been implemented as expected. It is common to run acceptance tests when an outside contractor delivers code, so we can determine if the team has delivered what we requested. We can also use acceptance tests to determine if our internal team has implemented the stated requirements. Proponents of behavior-driven development claim that the process of creating acceptance tests clarifies the product requirements. Obviously, if we want adequate acceptance tests, we need to plan carefully when specifying the product requirements. If we\u2019ve planned well, we can turn our user stories into automated tests that serve as acceptance tests. 24.5 Units and Integration We also describe tests by their relationship to the rest of the code. Unit tests probe the internal workings of the machine. If we\u2019ve written our code well, a small section of the code, such as a class or a method, will be a discrete unit that can be tested independently of all other units. Unit tests inspect the integrity of small parts of the application in isolation. When a unit test fails, we can quickly identify and fix broken code. We use integration tests to make sure the entire application works as expected. Integration tests mimic the behavior of real users. For a web application, an integration test may simulate a user signing in, filling out forms, clicking between pages, and verifying that contents of pages match expected results. Integration tests can also be called feature tests if they are designed to confirm that product features work as expected. Our feature tests can serve as acceptance tests if we use the test suite to determine if we\u2019ve correctly implemented our user stories or other product specifications. Sometimes these tests are called black box tests because the code is tested as if the application was a black box, with the internal workings of the application hidden from the observer. They are also called system tests or end-to-end tests . 24.6 Sample Data When we write tests, either feature tests or unit tests, we often want to check whether a method returns the data we expect. That means we have to create the data we need in advance of the test. Either we populate a database with the data we expect, or we disconnect the database and instantiate an object that provides the data we expect. Test frameworks give us a tool named a factory or a fixture to create sample data. Developers argue about what is better, factories or fixtures, but you\u2019ll encounter factories more often, particularly the popular FactoryGirl gem. A factory is an object that creates other objects. When you use FactoryGirl, you have the option of saving your object to the database (which is slow) or building your object in memory only (which is faster). Fixtures are used to populate a database with sample data before your tests run. If you use fixtures, you\u2019ll save sample data in a configuration file. Before tests run, Rails automatically loads all fixtures from configuration files in the test/fixtures folder. As you gain experience with testing, you\u2019ll become familiar with both factories and fixtures. 24.7 Test Doubles In unit testing, to isolate small parts of the application, sometimes we artificially decouple the code from the rest of the application. For example, with a unit test, we don\u2019t want to connect to an external service with an API to obtain data. Or we simply want a method to get a predictable response from another object. Test doubles stand in for external dependencies. The term is borrowed from Hollywood, where stunt doubles stand in for actors in action scenes. A test double is any kind of pretend object used in place of a real object for testing purposes. There are two types of test doubles, stubs and mocks . Stubs provide canned answers to calls made during the test, only responding when queried by the test. Sometimes stubs record information about the call, for example, the message sent or the number of times called. Mocks are pre-programmed objects that reproduce the behavior of the object they represent, forming a specification of an object\u2019s behavior. It takes time to write stubs and mocks and lots of experience to use them correctly, so as a beginner, you probably won\u2019t write stubs and mocks without help. As you can gain experience, you\u2019ll better understand the difference between stubs and mocks and learn how to use them. For now, it is enough to recognize the terminology and remember that tests run faster and better when we reduce coupling and complexity with test doubles. 24.8 Minitest and RSpec You\u2019ve already learned that Rails developers mix and match gems to create a favorite technology stack . Not everyone likes ERB for view templates. Some prefer Haml or Slim syntax for mixing HTML and Ruby in a view. Developers often stray from the default Rails stack when it comes to testing. Since the release of Ruby 1.9, Minitest has been supplied as a standard gem with all Ruby installations. Yet most Rails developers use RSpec for testing. In this tutorial, I\u2019ll use Minitest to introduce you to testing. Minitest is easier to set up and offers a syntax that is very similar to RSpec. Some developers say that there is no reason to use RSpec because Minitest provides almost all the convenience of RSpec with smaller size, faster speed, and less complexity. Other developers insist that RSpec is more expressive and flexible. Realistically, if you want a job working on most Rails teams, you\u2019ll need to learn RSpec. Get started with Minitest to learn the basics of testing. When you\u2019re ready for the next step, the Capstone Rails Tutorials will take you deeper. I also recommend the books Rails 4 Test Prescriptions by Noel Rappin and Everyday Rails Testing with RSpec by Aaron Sumner. 24.9 Capybara, the Ghost in the Machine Unit tests are simple, in principle and often in practice. The tests are just Ruby code, supplemented with methods from the test framework API. If we want unit tests for all the methods of a User class, we instantiate the class and write code that calls each method and verifies if the response matches our expectations. Using methods from the Minitest or RSpec test framework, we output a message that indicates whether each unit test passes or fails. Integration tests, or feature tests, require more of a framework than unit tests. We want our tests to be as realistic as possible, as if a robot was using a web browser and interacting with our web application. Fortunately, the maintainers of the Capybara gem have created such a robot. To create integration tests, we add the Capybara gem, using it with either Minitest or RSpec. Capybara gives us a visit method that simulates a user visiting a page. After we call the visit method, Capybara gives us a page object and allows us to test whether the page contains the content we expect. Every Rails application relies on a layer of middleware named Rack that ties into a web server. Capybara interacts with the web application, via calls to Rack, as if it was a browser making requests and receiving HTML files as a response. When we use Capybara, by default it operates in headless mode , interacting directly with the Rails application via Rack. \u201cHeadless\u201d means there is no graphical user interface (as if the absent screen was a computer\u2019s head). In headless mode, JavaScript is unavailable. If some of our application features require JavaScript, we must set up Capybara to act as a robot using a real web browser. Capybara has a built-in driver (named Selenium ) that gives our robot the option of automatically launching and using a real web browser for each test. By default, Capybara will use the Firefox web browser if it is installed on your computer. What you\u2019ll see is amazing. When you run tests using Capybara with the JavaScript option, the Firefox web browser will pop open on your desktop and you\u2019ll watch a ghost flying through your web application. With Capybara, you now have a ghostly QA department running your integration tests. 24.10 Four Phases of Feature Tests Test code is easier to understand when you recognize that tests proceed in stages, or phases. Code that simulates a user visiting a web page tends to be organized in four phases: set up visit page verify page contents neutralize The setup phase may include creating a user, signing in, or any other activity that creates the conditions for a test. With Capybara, the test visits the page, which requires Capybara to simulate a browser request to the Rails application. Then, in the third stage, we check if the server response contains the data we expect. Finally, we may need to clean up, resetting the original state of the application, or removing any data the test added to the database. 24.11 Four Phases of Unit Tests Unit tests also are organized in four stages: set up exercise verify teardown When you test a small part of the application in isolation, you\u2019ll focus on an object or method which we call the \u201csystem under test.\u201d The setup phase prepares the system under test. Often this means instantiating an object. Here is an example: user \\= User.new(email: ' [email protected] ') During the exercise phase, something is executed. Often this is a method call: user.save During verification, the result of the exercise is verified against the developer\u2019s expectations: user.email.must_equal ' [email protected] ' During teardown, the system under test is reset to its initial state. Rails integrates with Minitest or RSpec to reset a database to its initial state. You will seldom write code for the teardown phase. Now that you\u2019ve learned about the basic concepts of testing, let\u2019s set up Minitest for our first tests. 24.12 Set Up Minitest We\u2019ll set up testing with both Minitest and Capybara, so we can write both unit tests and feature tests. Minitest is a standard Ruby gem, installed when you install Ruby in your environment. We\u2019ll install the minitest-spec-rails gem which makes it easy to use an RSpec-like syntax with Minitest. We\u2019ll also add the minitest-rails-capybara gem to integrate Capybara with Minitest and Rails. Open your Gemfile and replace the contents with the following: Gemfile source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' gem 'sqlite3' end group :production do gem 'pg' end group :test do gem 'minitest-spec-rails' gem 'minitest-rails-capybara' end We\u2019ve added the two gems to the test group. Now, some gems are loaded only when we\u2019re writing code (during development), some are loaded only when the application is running on Heroku (deployed to production), and our newest additions only are loaded when we run tests. Next, install the additional gems: $ bundle install The bundle install command will download and install the gems from the rubygems.org server. 24.12.1 Run Tests The command rails test will execute Minitest. Let\u2019s see what happens when we run tests: $ rails test Running via Spring preloader in process 29254 /Users/danielkehoe/workspace/learn-rails/db/schema.rb doesn't exist yet. Run `rails db:migrate` to create it, then try again. If you do not intend to use a database, you should instead alter /Users/danielkehoe/workspace/ /learn-rails/config/application.rb to limit the frameworks that will be loaded. Run options: --seed 35136 Running: Finished in 0.005570s, 0.0000 runs/s, 0.0000 assertions/s. 0 runs, 0 assertions, 0 failures, 0 errors, 0 skips Rails Minitest informs us that our application is not set up to use a database. The easiest way to resolve the issue is to run rails db:migrate which sets up the database schema file. We\u2019re not using a database for this application so the database schema file will be empty. $ rails db:migrate The rails db:migrate command doesn\u2019t produce any result in the terminal but it will create a new db/schema.rb file. Try running rails test again: $ rails test Running via Spring preloader in process 29468 Run options: --seed 46952 Running: Finished in 0.005945s, 0.0000 runs/s, 0.0000 assertions/s. 0 runs, 0 assertions, 0 failures, 0 errors, 0 skips The output shows that Minitest executes but we have no tests for it to run. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"set up minitest\" $ git push 24.13 Unit Test (Standard Syntax) In its default form, Minitest uses the syntax of the older test_unit framework that was supplied with Ruby before version 1.9. The test_unit syntax uses explicit Ruby to set up tests. Here\u2019s an example of Minitest using the test_unit syntax: require 'test_helper' class VisitorTest < ActiveSupport::TestCase def valid_params { email: ' [email protected] ' } end def test_valid visitor \\= Visitor.new valid_params assert visitor.valid?, \"Can't create with valid params: #{visitor.errors.messages}\" end def test_invalid_without_email params \\= valid_params.clone params.delete :email visitor \\= Visitor.new params refute visitor.valid?, \"Can't be valid without email\" assert visitor.errors[:email], \"Missing error when without email\" end end Notice that we must declare a class VisitorTest that inherits from ActiveSupport::TestCase . Then we must define a new method for each test case using the def keyword. This syntax is not popular with Rails developers. RSpec offers its own DSL (domain specific language) that hides the overhead of setting up classes and methods behind convenience methods. Minitest offers its own version of the the RSpec DSL, allowing us to use the more popular syntax. I\u2019ll use the new RSpec-like syntax in this tutorial, since you are likely to encounter RSpec more frequently. 24.14 Unit Test (Spec Syntax) For our first test, let\u2019s create a simple unit test for our Visitor model. Every time we run our tests, we want to know that we\u2019re able to create a Visitor model. We\u2019ll also check that the Visitor model contains a method that returns an email address. The default Rails directory structure already contains a test/models/ folder. Thanks to Rails conventions, we know exactly where to create our test file. Create a file test/models/visitor_test.rb : require 'test_helper' describe Visitor do let(:visitor_params) { {email: ' [email protected] '} } let(:visitor) { Visitor.new visitor_params } it 'is valid when created with valid parameters' do visitor.must_be :valid? end it 'is invalid without an email' do # Delete email before visitor let is called visitor_params.delete :email visitor.wont_be :valid? # Must not be valid without email visitor.errors[:email].must_be :present? # Must have error for missing email end end The test above, written in the RSpec-like syntax, is functionally identical to the previous example, written in the old test_unit syntax. Take a close look at both, so the structure and keywords will be familiar when you see it again. We need require \u2019test_helper\u2019 to enable the test framework and apply any configuration settings. The keywords describe , let , and it are keywords that are also used in the RSpec DSL (domain-specific language). When you see these keywords, you know you are looking at test code, either Minitest or RSpec. The purpose of a unit test is to describe the system under test, in terms of its expected behavior. We create a do ... end block using the describe keyword and specifying a class we wish to test: describe Visitor do . . . end 24.14.1 Create a Test Class With Describe The describe keyword creates a test class. In this case, the describe keyword will create a class named VisitorTest that inherits from ActiveSupport::TestCase . Using the old test_unit syntax, we could do this with class VisitorTest < ActiveSupport::TestCase but the describe keyword is more convenient. When Minitest runs, it recognizes and executes test classes. By including our code inside a test class, we get to use methods such as let and it which are useful for writing tests. Minitest will recognize various classes like models or controllers and provide appropriate behavior. 24.14.2 Setup Phase We must set up everything we need for the test. Minitest provides a simple way to set up everything before a test using the before keyword: before do do_some_setup end We could initialize the Visitor model using a before block and setting instance variables: before do @visitor_params \\= {email: ' [email protected] '} @visitor \\= Visitor.new(visitor_params) end Instead of using a before block, we\u2019ll use the convenient let keyword: let(:visitor_params) { {email: ' [email protected] '} } let(:visitor) { Visitor.new visitor_params } The let keyword is a specialized version of the before keyword. It caches the objects that you create so they are ready for every test you write in the test class. And it is lazy-loaded , which means it does not require any processing overhead until the first time it is used. 24.14.3 Do It Each test is defined by the it keyword and a do ... end block that contains the exercise and verify phases of the test. The it keyword must be accompanied by a description. The description will be displayed if the test fails. For our first test, we want to check if the Visitor model can be created when we provide a valid email address. Before the test runs, the let statement makes sure the Visitor object is instantiated with an email value. The verification phase of each test consists of a comparison between the results of an operation and our expectations. We expect that each time we create a Visitor object with a valid email address, the visitor.valid? method will return true. We can create a test: it 'is valid when created with valid parameters' do assert_equal visitor.valid?, true end The keyword assert_equal is the old test_unit syntax. It compares the result of visitor.valid? with true and tells Minitest the test has passed or failed. We can write the same thing using the new RSpec-style syntax: it 'is valid when created with valid parameters' do visitor.must_be :valid? end The method must_be is an expectation . You can see a Minitest cheat sheet with a list of all the expectation methods. As you might guess, must_be functions as a comparison operator, checking if a call to visitor.valid? returns true. For our second test, we want to make sure the Visitor object is invalid when no email address is provided: it 'is invalid without an email' do # Delete email before visitor let is called visitor_params.delete :email visitor.wont_be :valid? # Must not be valid without email visitor.errors[:email].must_be :present? # Must have error for missing email end We created the visitor_params hash with a let statement. Before we invoke the Visitor object and call the visitor.valid? method, we delete the email address from the visitor_params hash. When the Visitor object is invoked, it will be created by the let statement without an email address. The wont_be expectation confirms that the result of visitor.valid? method is false . Then we check if a validation error message is present. At this point, don\u2019t expect to be ready to write unit tests for every model method. You\u2019ll need to spend time with the documentation for Minitest expectations or the Minitest cheat sheet to become familiar with all the possible ways to write tests. This introduction should help you recognize the syntax of tests, understand the structure, and give you the background you need to learn more about unit testing. 24.15 Run Tests Let\u2019s run our unit tests: $ rails test Running via Spring preloader in process 29585 Run options: --seed 7800 Running: .. Finished in 0.020289s, 98.5770 runs/s, 147.8655 assertions/s. 2 runs, 3 assertions, 0 failures, 0 errors, 0 skips The output shows that our tests pass. 24.15.1 Breaking the Test Let\u2019s see what happens if we purposefully break our Visitor model. Modify the file app/models/visitor.rb : class Visitor include ActiveModel::Model attr_accessor :email # validates_presence_of :email # validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i def subscribe mailchimp \\= Gibbon::Request.new(api_key: Rails.application.secrets.mailchimp_api_key) list_id \\= Rails.application.secrets.mailchimp_list_id result \\= mailchimp.lists(list_id).members.create( body: { email_address: self.email, status: 'subscribed' }) Rails.logger.info(\"Subscribed #{self.email} to MailChimp\") if result end end When you copy this, be careful to keep the long regex expression (/\\A\u2026\\z/i) on one line (no line breaks). We\u2019ve commented out the statements that require validation for the email attribute. Let\u2019s run the tests again: $ rails test Running via Spring preloader in process 29655 Run options: --seed 45089 Running: F Failure: Visitor#test_0002_is invalid without an email [/Users/danielkehoe/workspace//learn-rails/test/models/visitor_test.rb:15]: Expected # , @messages={}, @details={}>> to not be valid?. bin/rails test test/models/visitor_test.rb:12 . Finished in 0.008457s, 236.4993 runs/s, 236.4993 assertions/s. 2 runs, 2 assertions, 1 failures, 0 errors, 0 skips The output shows a failure. The diagnostic message displays the description of the failing test, \u201cVisitor#test_0002_is invalid without an email\u201d, and indicates the line number where the test failed. Now you know what a failing test looks like. Before you continue, restore the file app/models/visitor.rb to its original state, and make sure the tests pass. If you wish, you can continue writing unit tests. You could create a similar unit test for the Contact model. With more experience, or some independent research, you could create a test for the subscribe method in the Visitor model. This method connects to an external API, so it requires test doubles to fake the response of the external services. Our goal here is to introduce you to the concepts of testing, so we\u2019ll put aside advanced work on unit tests, and take a look at feature tests. 24.16 Feature Test Let\u2019s start with a user story for our home page. It might seem trivial to call the home page a \u201cfeature\u201d and describe it with a user story, but it illustrates a process that works just as well with more complex features. Here\u2019s our user story: *Feature: Home page* As a visitor I want to visit a home page And see a welcome message For our test, we know we want to visit the home page and check if the words \u201cStay in touch\u201d appear on the page. This is the scenario we\u2019ll test: *Scenario: Visit the home page* Given I am a visitor When I visit the home page Then I see \"Stay in touch\" If you think of your application as a collection of features, and you describe each feature in terms of \u201cAs a (role), I want (goal), In order to (benefit),\u201d and then imagine scenarios for each feature using the \u201cGiven\u2026, When\u2026, Then\u2026\u201d formula, you\u2019ll be able to write automated tests to cover every feature in the application. Let\u2019s try it for the home page. Examine the folders within the test/ directory. Remember that feature tests are also called integration tests. You\u2019ll see a folder test/integration/ . That\u2019s where we\u2019ll add our feature tests. Create a file test/integration/home_page_test.rb : require 'test_helper' Feature: Home page As a visitor I want to visit a home page So I can learn more about the website feature 'Home page' do # Scenario: Visit the home page # Given I am a visitor # When I visit the home page # Then I see \"Welcome\" scenario 'visit the home page' do visit root_path page.must_have_content 'Stay in touch' end end I\u2019ve included the user story and scenario description in comments. There\u2019s no convention to do so, but it will help you to see the relationship between testing and the product planning process. It should be easy to transform a \u201cGiven\u2026 When\u2026 Then\u2026\u201d scenario into the code needed for a feature test. 24.16.1 Feature When we created a unit test, we used the describe keyword to create a test class. The feature keyword creates a test class that inherits from the Capybara::Rails::TestCase class, giving us methods such as visit and page . Feature tests are created with a do ... end block using the feature keyword and providing a description of the feature: feature 'Home page' do . . . end Notice that the description is placed in quotes. In this case, Minitest will automatically generate a class named HomePageTest . 24.16.2 Scenario Typically we test a single feature with multiple scenarios in a single test file. The scenario keyword is similar to the it keyword you\u2019ve seen in unit tests. Each feature test is defined by the scenario keyword and a do ... end block that contains the visit and verify phases of the test. The scenario keyword must be accompanied by a description. The description will be displayed if the test fails. scenario 'visit the home page' do visit root_path page.must_have_content 'Stay in touch' end The directive visit is a Capybara method that takes a URL or Rails route as an argument. You could specify either visit \u2019/\u2019 or visit root_path to direct Capybara to retrieve the home page. Capybara provides other actions in addition to visit . You can see the documentation for Capybara actions that include actions for filling in a form and clicking a button. Capybara creates a page object for us as a response to the visit. The page object is a representation of the HTML file returned by the application. We can call the must_have_content method, testing if the string \u201cStay in touch\u201d is present in the page. Capybara gives us a collection of methods we can use to verify our expectations. The documentation for Capybara expectations provides an extensive collection of methods we can use to verify what\u2019s on a web page. For example, must_have_link checks for a link. With Capybara expectations, you can check almost anything on a page. Combining Capybara actions and expectations allows you to build a powerful page-checking robot. 24.17 Run Tests Let\u2019s run all our tests: $ rails test Running via Spring preloader in process 30144 Run options: --seed 51858 Running: ... Finished in 0.459255s, 6.5323 runs/s, 8.7098 assertions/s. 3 runs, 4 assertions, 0 failures, 0 errors, 0 skips We have three tests (in two test files) making four assertions, all passing. 24.17.1 Troubleshooting You might get an error message: rails aborted! NoMethodError: undefined method `feature' for main:Object You\u2019ll see this error message if you neglected to modify the test/test_helper.rb file to allow use of the Capybara test framework methods. 24.17.2 Breaking the Test Let\u2019s see what happens if we purposefully break our home page. Modify the file app/view/visitors/new.html.erb : <% content_for :title do %>Foobar Kadigan<% end %> <% content_for :description do %>Website of Foobar Kadigan<% end %> <section> <img src\\=\"http://lorempixel.com/1170/600/cats/1\"> GO AWAY! < %= form\\_with(model: @visitor) do |f| %> < %= f.email\\_field :email, placeholder: 'Your email address...', autofocus: true %> < %= f.submit 'Sign up for the newsletter', class: 'submit' %> < % end %> We\u2019ve changed the welcome message from \u201cStay in touch\u201d to \u201cGO AWAY!\u201d. Let\u2019s run the tests again: $ rails test Running via Spring preloader in process 30059 Run options: --seed 39958 Running: F Failure: Home page Feature Test#test_0001_visit the home page [/Users/danielkehoe/workspace//learn-rails/test/integration/home_page_test.rb:15]: Expected to find text \"Stay in touch\" in \"Toggle navigation Home About Contact GO AWAY!\". bin/rails test test/integration/home_page_test.rb:13 .. Finished in 5.124522s, 0.5854 runs/s, 0.7806 assertions/s. 3 runs, 4 assertions, 1 failures, 0 errors, 0 skips The output shows a failure. The diagnostic message displays the description of the failing test, \u201cHome page Feature Test#test_0001_visit the home page\u201d, showing a failure, \u201cExpected to include \u2018Stay in touch\u2019.\u201d Before you continue, restore the file app/view/visitors/new.html.erb to its original state, and make sure the tests pass. Now that we have written a few basic tests, let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add tests\" $ git push You\u2019ve written a complete application with tests. Very good! 24.17.3 Using Capybara There is an art to developing feature tests. You can test that all the text on the home page is exactly what you want. That would make your test files large. And your tests would be \u201cbrittle,\u201d because any changes you made in development, even the slightest changes to the words on the page, would break your tests. For good integration tests, focus on the features that are essential to your application. For example, use the Capybara robot to make sure the user can follow a critical path through your application, visiting important pages, filling in forms, clicking buttons, and seeing results. Capybara lets you select any HTML element on a page, so you can check an ID or class attribute of an HTML tag, not just text on a page. You\u2019ll want to be confident that application navigation and page flow continues to work after any code changes. That will serve you better than tests that tell you a word changed here or there. 24.18 Other Tests The art of testing lies in making good choices about what to test. It\u2019s common to write feature tests because they will test the entire application from the viewpoint of the user. It is also common to write unit tests for models because models contain much of the uniqueness of an application. Every other aspect of a Rails application can be tested, including controllers, helpers, and views. Developers seldom write tests for every aspect of a Rails application. If your controllers contain only the standard RESTful actions, with no extra logic, you probably don\u2019t need to write unit tests for your controllers. If you only have simple HTML markup in helpers, helpers don\u2019t need to be tested. And views are rarely tested with unit tests (use feature tests if you want to make sure a page contains what you expect). As a beginner, you\u2019ll make a good start if you concentrate on unit tests for models and integration tests for your page flow. 24.19 Behavior-Driven Development In Book One, you learned about the software development approach called Behavior-Driven Development (BDD), or sometimes, Behavior-Driven Design. In writing the feature tests for the home page, you saw it in action. With BDD, you turn user stories into detailed scenarios that are accompanied by tests. BDD is a powerful approach for managing software development. It helps you define your product requirements, refine your project scope, and divide your project into well-defined tasks. The BDD process is complete when each feature has automated tests, when you enter rails test on the command line and see that every feature is implemented and functioning as expected. You may feel lost or overwhelmed when you attempt to build a Rails application for the first time, especially if your only experience is following the step-by-step instructions of a tutorial. When you experience that panic, BDD is your lifeline. Start by writing user stories for a few simple features. Write feature tests and implement the code required to make the tests pass. As you focus on the process of writing scenarios and tests, and implementing the code for each feature, you\u2019ll begin to gain momentum, and before you know it, you\u2019ll be over the first hurdle. 24.20 Test-Driven Development You can see how the BDD approach refines the product requirements and user experience. At a microscopic level, a similar discipline, named test-driven development , helps refine the implementation. Where BDD is driven by feature tests, TDD is focused on unit tests. TDD is an approach to software development that emphasizes that all code should be written to be tested. Excellent test coverage, allowing easy refactoring, is not the only goal of TDD. Just as important, the developer focuses on what needs to be accomplished and thinks through alternatives and edge cases. Some TDD aficionados say testing is a tool to write better code, and regression tests are a side effect. Unit tests are at the heart of TDD, and easiest to write when code is carefully decoupled into systems that can be tested in isolation. An application that is composed of decoupled units with clearly defined interfaces is a well-designed application that is easy to extend and maintain. If you make it a practice to write unit tests in conjunction with all the code you write, you\u2019ll write better code, and you\u2019ll be practicing TDD. 24.21 Test-First Development Often when you are practicing TDD, you\u2019ll write tests before you write implementation code. Earlier in this chapter, I referred to test-first development and explained that it serves a different purpose than testing for quality assurance. In some situations, test-first development is simply exploratory testing, a means of describing the behavior of the code that must be built. Test-first development is particularly useful when you\u2019ve solved a similar problem and know exactly what results to expect, making it easy to write tests before writing the implementation. Test-first development leads to a \u201cred-green-refactor\u201d workflow. A developer imagines the results of an operation, writes a test that checks for the results, and runs tests which fail (with the right configuration, failing tests display as red in the console). Then the developer writes code that produces the correct results and runs the tests again, improving the code until the tests pass (displaying in green). At this point, the developer has an adequate regression test and can begin to refactor to improve the implementation, checking that the tests continue to pass. Developers like the rhythm and coherency of the \u201cred-green-refactor\u201d workflow. Writing tests creates discrete, manageable tasks. When tests pass, turning green, there is a feeling of satisfaction, of a job well-done. By postponing concerns about improving the code to a refactoring phase, it\u2019s easier to get the job done without trying to get it perfect. And perfection can be pursued in the refactoring phase without worrying about regressing to a broken state. David Heinemeier Hansson, the creator of Rails, famously declared that TDD is dead. Long live testing. . He pointed out that sometimes ardent advocates of TDD will try out an implementation before writing tests, to determine what needs to be done, or to clarify a problem. In the real world, even though developers recommend writing tests first, there are often times when a developer will write tests only after writing code and settling on an approach. TDD, which emphasizes the benefit of writing tests as a first step, doesn\u2019t really require that you write tests before you write code, or even that you write tests for all code. The test-first emphasis of TDD is a recommendation, not a rule. You\u2019ll be a better developer if you find opportunities to get \u201cin the zone\u201d with the red-green-refactor workflow of test-first development, but testing is worthwhile whether it comes first or last. 24.22 Words of Encouragement Testing often intimidates the newcomer. It is difficult to find good examples. The syntax of Minitest and RSpec has evolved over time, so there is little consistency among examples you\u2019ll find. Older examples are not a good guide to current practices. But once you gain familiarity with the concepts in this chapter, you can start writing tests. Testing is one of the few things in Rails that you can jump into without getting just right. You can\u2019t screw up your code base by writing incorrect tests. Experienced developers seem to worry that inexperienced developers will write slow tests, but in truth, a slow test is better than no test. Tests won\u2019t affect the performance of your application in production. If your code is clumsy, don\u2019t worry, you\u2019ll get better with practice. What\u2019s most important is that you\u2019ve begun writing tests. That\u2019s an indication you are committed to Rails best practices. Your tests are only \u201cbad\u201d if they don\u2019t cover your code adequately or if they give you a false sense of assurance. You will only discover this over time, as you find bugs you didn\u2019t anticipate (which is inevitable). It\u2019s better to just begin testing, even if you\u2019re not sure you\u2019re doing it right, than to not test at all. Chapter 25 Rails Composer I\u2019m going to show you how to skip all the work you already did, and build a ready-to-use Rails application in less than five minutes. When you\u2019re done with this chapter, you may wonder why you read the rest of the book. Watch the video for a demonstration of Rails Composer: Rails Composer 25.1 Building Starter Applications This chapter is about Rails Composer , a tool for building starter applications. Rails Composer makes building applications so easy, it feels like a guilty pleasure. In the introductory \u201cCreate the Application\u201d chapter, you learned that developers often use a starter application instead of assembling an application from scratch. You\u2019ve seen how the rails new command gives you a rudimentary starter application. Developers typically add a front-end framework, a testing framework, and a handful of favorite gems before they get started on any custom development. Since most applications start with the same basic components, it makes sense to rely on an open source effort to stitch them together, so any integration issues or update problems are quickly resolved by the community. That\u2019s the idea behind the RailsApps project . The project provides a collection of starter applications, plus Rails Composer, a tool that creates the starter applications. I\u2019ve been leading the RailsApps project for several years because I think the project saves time for developers and makes things easier. I may be biased, so take a look and judge for yourself. 25.2 Build \u2018Learn Rails\u2019 in Less Than Five Minutes In less than five minutes, we can build our tutorial application using Rails Composer. It will be identical to the application you\u2019ve built, but we\u2019ll call it \u201cfoobar-kadigan.\u201d It\u2019s a new application, so if you\u2019re still in the workspace/learn-rails/ project directory, move up a level to the workspace/ project directory: $ cd ../ $ pwd /Users/danielkehoe/workspace Or jump to it directly, if it\u2019s one level below your home directory: $ cd ~/workspace $ pwd /Users/danielkehoe/workspace Use the \u201clearn-rails\u201d gemset we created earlier: $ rvm use [email protected] Now create the \u201cfoobar-kadigan\u201d application: $ rails new foobar-kadigan -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb We\u2019re using the rails new command and designating \u201cfoobar-kadigan\u201d as the name for the application. The -m flag applies an application template , which is a script that generates an application. The application template can be on your local computer, or retrieved from a remote server. Rails Composer is an application template that is stored on GitHub. When you run the rails new command as shown above, a new Rails application is built and then modified by the Rails Composer script. Here\u2019s the first prompt you\u2019ll see: option Build a starter application? 1) Build a RailsApps example application 2) Contributed applications 3) Custom application choose Enter your selection: Options #2 and #3 are not for beginners. We\u2019ll skip any contributed applications. And the \u201cCustom application\u201d option is strictly for experts. Enter 1 to select \u201cBuild a RailsApps example application.\u201d You\u2019ll see a list of available starter applications: option Choose a starter application. 1) learn-rails 2) rails-bootstrap 3) rails-foundation 4) rails-mailinglist-activejob 5) rails-omniauth 6) rails-devise 7) rails-devise-roles 8) rails-devise-pundit 9) rails-signup-download 10) rails-stripe-checkout 11) rails-stripe-coupons choose Enter your selection: We\u2019ll explore the list later. For now, enter 1 to select \u201clearn-rails\u201d. Here\u2019s your chance to get news and announcements about Rails Composer: Get on the mailing list for Rails Composer news? option Enter your email address: Enter your email address (if you want news) or press \u201creturn\u201d to skip it (if you\u2019re shy). In less than the time it took me to write a few sentences, you\u2019ll have a new Rails application. Look for it in your folder: $ ls -1 foobar-kadigan learn-rails You\u2019ve just created a new application named \u201cfoobar-kadigan\u201d that is almost identical to the \u201clearn-rails\u201d application you created from scratch. If you have a file compare tool on your computer, you can compare the folders and see that the only differences are the application name embedded in the application, plus a few configuration settings such as the secret keys in the config/secrets.yml file. Move into the project directory: $ cd foobar-kadigan As soon as you move into the foobar-kadigan/ folder, RVM will automatically begin using the gemset named \u201cfoobar-kadigan.\u201d That\u2019s because Rails Composer created hidden .ruby-gemset and .ruby-version files. Run bundle install to install the necessary gems in the RVM gemset: $ bundle install Try running the application. $ cd foobar-kadigan $ rails server \\=> Booting Puma . . . Open a web browser window and navigate to http://localhost:3000/ . Try it out. You\u2019ll see our new home page with the placeholder photo and the \u201csign up\u201d form. The application will be almost identical to the one you already built. Compare the project files side-by-side in your editor. The files will be nearly identical. In fact, if you made mistakes when you built the tutorial application, Rails Composer will give you the newest and most correct version of the application so you can check for your mistakes with a file compare tool. You are probably already aware that a perfect version of the tutorial application is already on GitHub, in the learn-rails GitHub repository . You could use git clone to get a copy to use as a starter application. The version generated by Rails Composer differs in one important respect. Rails Composer generates the application with any name you give it, so there\u2019s no need to search and change every use of the name in the application. I hope you\u2019re not irritated that I asked you to spend hours building the \u201clearn-rails\u201d application, and then showed you how to build the same application in less than five minutes. I promise you the time you spent with the book is worthwhile, because you\u2019ve gained a knowledge of Rails you can\u2019t get from using Rails Composer. 25.3 A Collection of Starter Applications Since you\u2019ve already built the \u201clearn-rails\u201d application, the identical \u201cfoobar-kadigan\u201d application may not be interesting. Let\u2019s look at the other applications you can generate with Rails Composer. 25.3.1 Rails Bootstrap The \u201crails-bootstrap\u201d application provides an integration of Rails and Bootstrap , the popular front-end framework. This application gives you everything you built in this book\u2019s chapters on \u201cLayout and Views\u201d and \u201cFront-End Framework,\u201d including flash messages and navigation, set up for Bootstrap. It\u2019s a good beginning point for many custom applications. You can examine the example application on GitHub, in the rails-bootstrap repository. If you have subscribed for the Capstone Rails Tutorials, you can read the Bootstrap Quickstart Guide to understand the code. 25.3.2 Rails Foundation The \u201crails-foundation\u201d application is just like the \u201crails-bootstrap\u201d application, only with the Zurb Foundation front-end framework instead of Bootstrap. It\u2019s a stripped-down version of the \u201clearn-rails\u201d application you just built, without the contact form or mailing list sign-up, using Foundation. If you want to build a custom application, starting with nothing more than Foundation and an \u201cabout\u201d page, generate the \u201crails-foundation\u201d application. You can examine the example application on GitHub, in the rails-foundation repository. There\u2019s a Foundation Quickstart Guide with the Capstone Rails Tutorials. 25.3.3 Rails Mailing List with Active Job Rails 4.2 added the Active Job feature for background processing. The Mailing List with Active Job tutorial explains how to use it. You can use Rails Composer to generate the rails-mailinglist-activejob starter application. In the \u201cSend Mail\u201d chapter I wrote about \u201cAsynchronous Mailing\u201d which provides a queueing system for background jobs. For a production website, it is smart to use Active Job for better website performance for users. The Mailing List with Active Job tutorial in the Capstone Rails Tutorials series explains the code. 25.3.4 Rails OmniAuth OmniAuth is a gem for authentication. Most web applications need a way for users to sign in, allowing access to some features of the application only for signed-in users. OmniAuth allows a user to sign in using an account they already have with a service such as Facebook, Twitter, or GitHub. If you\u2019re building an application that needs quick and easy sign-in, this is a useful starter application. You can examine the example application on GitHub, in the rails-omniauth repository. You can read the OmniAuth Tutorial in the Capstone Rails Tutorials series to learn about authentication with OmniAuth. 25.3.5 Rails Devise Devise is the most popular gem for authentication. Devise provides user management and authentication, letting a user sign up to create an account and log in with an email address and password. Most websites need email/password authentication, so this is a popular starter application. You can examine the example application on GitHub, in the rails-devise repository. You can read the Devise Quickstart Guide in the Capstone Rails Tutorials series to learn about user management and authentication with Devise. 25.3.6 Rails Devise Roles Devise is a popular gem for authentication , verifying a user\u2019s registered identity. In conjunction with authentication, authorization limits access to pages of a web application. With role-based authorization, a user can be assigned a role such as \u201cuser,\u201d \u201cadmin,\u201d or \u201cVIP\u201d (a \u201cvery important person\u201d). If you want to control access to features of the website by checking a user\u2019s role, this is a useful starter application. You can examine the example application on GitHub, in the rails-devise-roles repository. You can read the Rails Authorization Tutorial in the Capstone Rails Tutorials series to learn about authorization. 25.3.7 Rails Devise Pundit To keep controllers skinny, Rails developers often use the Pundit gem for authorization. It improves upon simple role-based authorization to move access control code from controllers to separate \u201cpolicy objects.\u201d For complex applications with elegant architecture, use the \u201crails-devise-pundit\u201d starter application. You can examine the example application on GitHub, in the rails-devise-pundit repository. You can read the Pundit Quickstart Guide in the Capstone Rails Tutorials series to learn about authorization with Pundit. 25.3.8 Other Starter Applications Other applications in the Rails Composer collection include: rails-signup-download rails-stripe-checkout rails-stripe-coupons You can use the rails-signup-download application to build a website where a user can download a PDF file after registering with an email address. Using the code in the Signup and Download Tutorial , you could customize the \u201clearn-rails\u201d application so visitors could download an ebook by Foobar Kadigan after they sign up for his newsletter. Stripe is a popular service used to accept credit card payments. Stripe offers two approaches to implementing payment processing. Stripe Checkout is Stripe\u2019s entry-level approach. Stripe Checkout competes with the button-based payment options from Google, PayPal, or Amazon, adding a pop-up payment form to any web page. Stripe Checkout is very limited because the pop-up payment form cannot be customized for use with a Rails application. Our Stripe Checkout Tutorial in the Capstone Rails Tutorials series shows how to combine Stripe Checkout with Devise for simple applications. Stripe.js is optimal for use with a Rails application, allowing full customization of a payment form and integration with Rails form processing. The rails-stripe-coupons application implements a payment feature using Stripe JS so a visitor pays to download a PDF file. The application accommodates promotional coupons and adds payment forms to landing pages, for real-world payment processing. Our Stripe JS With Coupons tutorial in the Capstone Rails Tutorials series provides the details. 25.4 Rails Composer Options If all Rails Composer did was copy example applications from GitHub repos, it would be convenient but not very interesting. When you built the \u201cfoobar-kadigan\u201d application with Rails Composer, it simply built a replica of our tutorial application. When you build the other starter application, the options get more interesting. Rails Composer lets developers customize their starter applications for their favorite stack (we discussed stacks in the \u201cConcepts\u201d chapter in Book One). Let\u2019s see what options we get when we build the powerful rails-devise-roles starter application. Jump to your workspace/ folder so we can create a new application: $ cd ~/workspace $ pwd /Users/danielkehoe/workspace It\u2019s okay to start with the \u201clearn-rails\u201d gemset. We have to start with a gemset that already has the Rails gem installed. After that, Rails Composer will create a new gemset for the new project. $ rvm use [email protected] Now generate the \u201crails-devise-roles\u201d starter application: $ rails new rails-devise-roles -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb Don\u2019t worry if some of the prompts are different from the ones I describe here. Rails Composer changes often. At the time I wrote this, I saw: option Build a starter application? 1) Build a RailsApps example application 2) Contributed applications 3) Custom application choose Enter your selection: Enter 1 to select \u201cBuild a RailsApps example application.\u201d option Choose a starter application. 1) learn-rails 2) rails-bootstrap 3) rails-foundation 4) rails-mailinglist-activejob 5) rails-omniauth 6) rails-devise 7) rails-devise-roles 8) rails-devise-pundit 9) rails-signup-download 10) rails-stripe-checkout 11) rails-stripe-coupons choose Enter your selection: Select \u201crails-devise-roles\u201d (it was #7 when I wrote this, but the list may have changed). Get on the mailing list for Rails Composer news? option Enter your email address: Another chance to get on the mailing list. Just hit \u201creturn\u201d if you already signed up. option Web server for development? 1) Puma (default) 2) Thin 3) Unicorn 4) Phusion Passenger (Apache/Nginx) 5) Phusion Passenger (Standalone) choose Enter your selection: Our first option! We\u2019ve always used Puma since it is the Rails default. Choose \u201cPuma\u201d to keep things familiar. option Web server for production? 1) Same as development 2) Thin 3) Unicorn 4) Puma 5) Phusion Passenger (Apache/Nginx) 6) Phusion Passenger (Standalone) choose Enter your selection: We could get fancy for deployment. Choose \u201cSame as development\u201d to stay in our comfort zone. option Database used in development? 1) SQLite 2) PostgreSQL 3) MySQL choose Enter your selection: We haven\u2019t explored applications that use databases in this book, but Devise and role-based authorization require saving a User model to a database. Choose \u201cSQLite,\u201d which is built-in and ready to run in the Mac or Ubuntu environments. Developers prefer PostgreSQL for production applications, but it takes extra effort to set up, so we\u2019ll stick with SQLite for now. option Template engine? 1) ERB 2) Haml 3) Slim choose Enter your selection: In this book, all our view templates were written using the ERB template language. In the \u201cConcepts\u201d chapter in Book One, you learned that components of Rails can be mixed for different stacks. Some developers substitute Haml or Slim for ERB. I\u2019ve written an article on Haml and Rails if you\u2019d like to know more. Choose \u201cERB\u201d for now. option Test framework? 1) None 2) RSpec with Capybara choose Enter your selection: You\u2019ve had an introduction to testing with Minitest in the \u201cTesting\u201d chapter of this book. RSpec is popular among many developers, so Rails Composer offers an \u201cRSpec with Capybara\u201d option. Rails Composer will install a test suite for the rails-devise-roles application when RSpec is selected. You can read the RSpec Quickstart Guide in the Capstone Rails Tutorials series to get started with RSpec. Choose \u201cnone\u201d for now. option Front-end framework? 1) None 2) Bootstrap 4.0 3) Bootstrap 3.3 4) Bootstrap 2.3 5) Zurb Foundation 5.5 6) Zurb Foundation 4.0 7) Simple CSS choose Enter your selection: You learned to use Bootstrap 3 in this book. Let\u2019s stick with that. Choose \u201cBootstrap 3.3.\u201d option Add support for sending email? 1) None 2) Gmail 3) SMTP 4) SendGrid 5) Mandrill choose Enter your selection: Devise will need to send email for its \u201cforgot password\u201d feature. Configuring email took some time for our tutorial application. Rails Composer will instantly set up everything we need to send email using our choice of services. Choose \u201cSendGrid\u201d for now. option Devise modules? 1) Devise with default modules 2) Devise with Confirmable module 3) Devise with Confirmable and Invitable modules choose Enter your selection: Choose \u201cDevise with default modules.\u201d Devise has options, like a Confirmable module that requires users to click a link in an email message to confirm a new account. The Invitable module provides a feature that allows administrators or other users to invite users to establish accounts. We won\u2019t need these extra features. option Admin interface for database? 1) None 2) Thoughtbot Administrate choose Enter your selection: Thoughtbot Administrate adds an administrative interface to a database application. Choose \u201cNone\u201d for now. option Use a form builder gem? 1) None 2) SimpleForm choose Enter your selection: We could add the SimpleForm gem to make it easy to build forms. We didn\u2019t use it in this book, so we\u2019ll choose \u201cnone.\u201d Next you\u2019ll see a menu of page layout options from Rails Composer. These are available if you use Bootstrap 3. option Add Bootstrap page templates? 1) None 2) 1 Col Portfolio 3) 2 Col Portfolio 4) 3 Col Portfolio 5) 4 Col Portfolio 6) Bare 7) Blog Home 8) Business Casual 9) Business Frontpage 10) Clean Blog 11) Full Width Pics 12) Heroic Features 13) Landing Page 14) Modern Business 15) One Page Wonder 16) Portfolio Item 17) Round About 18) Shop Homepage 19) Shop Item 20) Simple Sidebar 21) Small Business 22) Stylish Portfolio 23) The Big Picture 24) Thumbnail Gallery choose Enter your selection: You\u2019ll get an option to install any of 23 different Bootstrap page templates. Some of these are simple one page layouts. Others are complex, multipage websites. If you\u2019d like to see what all the templates look like, browse the Start Bootstrap website to see the gallery of Bootstrap themes & templates. I like the \u201cModern Business\u201d template for several ready-made website pages, so choose 14 to install the template. option Install page-view analytics? 1) None 2) Google Analytics 3) Segment.com choose Enter your selection: In our \u201cAnalytics\u201d chapter, I said every application needs a way to analyze traffic. Let\u2019s choose \u201cSegment.com\u201d since we learned about it already. option Segment.com Write Key? You can enter your Segment.com Write Key here, if you know it. Otherwise, hit return and you\u2019ll get a placeholder you can replace later. option Prepare for deployment? 1) no 2) Heroku 3) Capistrano choose Enter your selection: This option sets up your starter application for deployment to Heroku. Choose \u201cno\u201d for now. Some developers find Rails Turbolinks annoying when they wish to integrate JavaScript with their Rails applications. option Disable Rails Turbolinks? (y/n) We\u2019re not adding any JavaScript so choose \u201cn\u201d to use Rails Turbolinks. option Set a robots.txt file to ban spiders? (y/n) In the \u201cDeploy\u201d chapter you learned that you can leave your website out of Google search results with the robots.txt file. Let\u2019s answer \u201cy\u201d or \u201cyes\u201d and play it safe. option Create a GitHub repository? (y/n) Rails Composer will create a GitHub repository for your starter application if your credentials are set up correctly. Let\u2019s play it safe and answer \u201cn\u201d or \u201cno\u201d to skip the repository option. Rails Composer has all the answers it needs. On my computer, with a fast Internet connection in the heart of San Francisco, Rails composer takes about thirty seconds to build the starter application. It installs every needed gem; sets configuration files; and generates views, models, controllers, and routes. The developers who maintain the Rails Composer project have worked out any tricky integration issues so you can expect the starter application to work without any problems. 25.5 Try It Out You\u2019ve added a new application to your collection of projects: $ ls -1 foobar-kadigan learn-rails rails-devise-roles Let\u2019s examine the application. $ cd rails-devise-roles $ git log --oneline 087167a rails_apps_composer: extras 6d4f710 rails_apps_composer: add Bootstrap page layouts be68589 rails_apps_composer: navigation links 3126403 rails_apps_composer: set up database 53a029f rails_apps_composer: add README files 7c78031 rails_apps_composer: add analytics 99e9c0c rails_apps_composer: add pages 1886d2c rails_apps_composer: front-end framework 38242d7 rails_apps_composer: add roles to a User model 839749f rails_apps_composer: devise 62753db rails_apps_composer: set email accounts 0754893 rails_apps_composer: generators 09104b9 rails_apps_composer: Gemfile b61cd18 rails_apps_composer: initial commit Rails Composer set up a Git repository and committed files as it built the application. We can see a list of Git commits with the git log \u2013oneline command. When you move into the rails-devise-roles/ folder, RVM will automatically begin using the gemset named \u201crails-devise-roles\u201d because of the hidden .ruby-gemset and .ruby-version files. Run bundle install to install the necessary gems in the RVM gemset: $ bundle install Let\u2019s try running the application: $ rails server \\=> Booting Puma . . . Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see a navigation bar with \u201cSign in\u201d and \u201cSign up\u201d links that implement an authentication feature using Devise. Sign in with the email address \u201c [email protected] \u201d and the password \u201cchangeme\u201d. You\u2019ll see a link to the Users page in the navigation bar that is only seen by administrators. Click the \u201cUsers\u201d link and you\u2019ll see a list of users (just one initially). The first user (created by Rails Composer) is automatically assigned administrator privileges. Sign out and sign up to create a new account with your own email address and password. You\u2019ll see a message \u201cWelcome! You have signed up successfully.\u201d You will not see the \u201cUsers\u201d link. Your new account is an ordinary user without administrator privileges, so you are not allowed to see the list of all users. Notice the navigation link \u201cEdit account.\u201d It displays a page for account management where you can change your name, email address, or password. Sign out and sign in again with the administrative account \u201c [email protected] \u201d and the password \u201cchangeme\u201d. Now you can view the list of users. You can change the role of any user. You\u2019ve got a useful starter application. Without Rails Composer, an experienced developer needs at least an hour or two to set up a similar starter application (and possibly more time if version updates have created integration issues). Examine the application in your editor. Here\u2019s where a starter application can be useful as a learning tool. Given what you\u2019ve learned so far, what do recognize as familiar? Every Rails application shares a similar structure, so you will recognize files such as the Gemfile; and folders such as app/models/ , app/controllers/ , and app/views/ . Explore the application. Try to guess the purpose of the unfamiliar files and code. If you\u2019re overwhelmed by unfamiliar files and code, try building one of the simpler starter applications, such as rails-bootstrap or rails-devise . Every line of code is explained in the Capstone Rails Tutorials series so there\u2019s no mystery code. As a beginner, you can use Rails Composer for two purposes. You can quickly build apps that are guaranteed to work and then pick them apart. A \u201cbreakable toy\u201d can be a wonderful instrument for learning. Make an effort to understand everything in the RailsApps example applications and you\u2019ll gain a solid understanding of the basic components used in real-world Rails projects. Secondly, start building custom applications based on the Rails Composer starter applications. By starting with Rails Composer, you\u2019ll skip the frustrating preliminaries of setting up a front-end framework, authentication, or authorization and jump right into implementing your ideas for new features. Rails Composer is often used at hackathons, where teams race to build interesting applications for a prize, to avoid the time sink of setting up a basic application. A final word: Use Rails Composer judiciously. It\u2019s intended to be a tool for experienced developers who already know how to build starter applications from scratch using databases, front-end frameworks, authentication, or authorization, and all the bells and whistles offered in the Rails Composer options. Use it to pinpoint what you need to learn, or use it to turbocharge your learning process, but don\u2019t use it as a crutch to avoid learning the basics. To learn Rails, you must be able to build every starter application from scratch, without Rails Composer. To learn more about Rails Composer, see the Rails Composer home page and the README for the Rails Composer project on GitHub. Chapter 27 Credits and Comments Was the book useful to you? Follow @rails_apps on Twitter and tweet some praise. I\u2019d love to know you were helped out by the tutorial. You can find me on Facebook or Google+ . I\u2019m happy to connect if you want to stay in touch. If you\u2019d like to recommend the book to others, the landing page for the book is here: http://learn-rails.com/learn-ruby-on-rails.html I\u2019d love it if you mention the book online, whether it is a blog post, Twitter, Facebook, or online forums. Recommending the book with a link makes it easier for people to find the book. 27.1 Credits The book was created with the encouragement, financial support, and editorial assistance of hundreds of people in the Rails community. Daniel Kehoe wrote the book and implemented the application. 27.1.3 Technical Editors Rails and Ruby experts are very busy. I am very grateful for the assistance I received from my colleagues for the technical review of individual chapters. Kirsten Jones , reviewed the chapter \u201cRequest and Response\u201d Pat Shaughnessy , author of Ruby Under a Microscope , reviewed the chapter \u201cJust Enough Ruby\u201d Noel Rappin , author of Rails Test Prescriptions , reviewed chapters 1-7, and the \u201cTesting\u201d chapter Aaron Sumner , author of Everyday Rails Testing with RSpec , reviewed the \u201cTesting\u201d chapter Ken Collins reviewed the \u201cTesting\u201d chapter Buy their books. I recommend them.","title":"Learn Ruby on Rails: Book Two  - Roy"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#learn-ruby-on-rails-book-two-roy","text":"Version 4.2.0, 2 August 2017 Daniel Kehoe","title":"Learn Ruby on Rails: Book Two  - Roy"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-2-introduction","text":"","title":"Chapter 2 Introduction"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#22-what-to-expect","text":"","title":"2.2 What To Expect"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#221-about-book-one","text":"Here\u2019s what is covered in Book One, in case you missed it. I introduce the basic concepts you\u2019ll need to understand web application development.","title":"2.2.1 About Book One"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-3-get-help-when-you-need-it","text":"","title":"Chapter 3 Get Help When You Need It"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#33-getting-help-with-the-book","text":"Let\u2019s consider what to do if you encounter problems as you build the tutorial application in this book. If you are in a classroom, or studying in a group, ask a peer to look at your problem. Most problems are caused by simple typos or formatting errors. Your classmate may see what you overlooked. Stack Overflow provides a question-and-answer forum for readers of this book. As the author of this book, I can\u2019t solve your individual problems or help you directly by email. If I did, I would not have time to create the tutorials and videos that benefit so many people. However, I watch for questions on Stack Overflow. Everyone benefits when solutions are made public. tag your questions on Stack Overflow with railsapps for extra attention If your questions aren\u2019t answered on Stack Overflow, try the Reddit forum: /r/rails I sincerely hope you won\u2019t encounter obstacles as you build the tutorial application. Thousands of beginners have successfully completed the book and, unless a gem has recently changed, you should have no problem. Now let\u2019s consider where to look for help when you are working on your own Rails projects.","title":"3.3 Getting Help With the Book"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#34-getting-help-with-rails","text":"","title":"3.4 Getting Help With Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#341-video-option","text":"Watch the six minute video Get Help with Rails - Insider Tips - YouTube","title":"3.4.1 Video Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#342-where-to-go-for-help","text":"What will you do when you get stuck? \u201cGoogle it,\u201d of course. But here\u2019s a trick to keep in mind. Google has options under \u201cSearch tools\u201d to show only recent results from the past year. Use it to filter out stale advice that pertains only to older versions of Rails. Stack Overflow is as important as Google for finding answers to programming problems. Stack Overflow answers are often included in Google search results, but you can go directly to Stack Overflow to search for answers to your questions. Like Google, answers from Stack Overflow are helpful if you check carefully to make sure the answers are recent. Also be sure to compare answers to similar questions; the most popular answer is not always the correct answer to your particular problem. Requests for advice (especially anything that provokes opinions) are often rejected on Stack Overflow. Instead, try Reddit for advice or recommendations. You\u2019ll find discussion forums (\u201csubreddits\u201d) devoted to Rails and Ruby . You can also visit the Quora question-and-answer site for topics devoted to Rails and Ruby .","title":"3.4.2 Where To Go For Help?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#35-references","text":"Here are suggestions for the most important references. If you feel overwhelmed by all the links, remember that you can use this book to build the tutorial application without any additional resources. Right now, it\u2019s important to know additional help is available when you need it.","title":"3.5 References"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#351-railsguides","text":"The Rails Guides are Rails\u2019s official documentation, written for intermediate-level developers who already have experience writing web applications. The Rails Guides are an excellent reference if you want to check the correct syntax for Rails code. You\u2019ll be able to use the Rails Guides after completing this tutorial.","title":"3.5.1 RailsGuides"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#352-cheatsheets","text":"Tobias Pfeiffer has created a useful Rails Beginner Cheat Sheet that provides a good overview of Rails syntax and commands. Even better than a cheatsheet, for Mac users, is an application named Dash that offers fingertip access to reference documentation for Ruby, Rails, HTML, CSS, JavaScript, and many other languages and frameworks. I recommend Dash as a tool to look up classes, modules, and methods in Ruby and Rails. Dash is a macOS app; use Zeal on Linux. Dash and Zeal run offline (they don\u2019t need an Internet connection) so you can use them anywhere.","title":"3.5.2 Cheatsheets"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-4-accounts-you-may-need","text":"You\u2019ll need accounts with four services before you begin building the application in this book. This tutorial will show you how to save your work using GitHub . You can sign up for a GitHub account for free. Every experienced Rails developer has a GitHub account; it is where we collaborate on our code, both commercial and open source projects. We\u2019ll create a form that allows website visitors to \u201copt-in\u201d to a mailing list. You\u2019ll need a MailChimp account, which is free. If you send email to a mailing list, you will find it is useful to have an account with MailChimp or a similar service. We\u2019ll also send email from the application, which will require a SendGrid account. SendGrid is a transactional email service that lets you send email messages efficiently and reliably. SendGrid offers a free account that allows you to send 12,000 messages per month for free. Finally, we\u2019ll deploy the tutorial application to Heroku which provides Rails application hosting. It costs nothing to set up a Heroku account and deploy as many applications as you want. It is the easiest way to deploy a Rails application and most Rails developers use Heroku at some time in their careers.","title":"Chapter 4 Accounts You May Need"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#41-github","text":"Rails developers use GitHub for collaboration and remote backup of projects. For this tutorial, I suggest you get a free personal GitHub account if you don\u2019t already have one. As a developer, your GitHub account establishes your reputation in the open source community. If you\u2019re seeking a job as a developer, employers will look at your GitHub account. When you work with other developers, they may check to see what you\u2019ve worked on recently. Don\u2019t be reluctant to set up a GitHub account, even if you\u2019re a beginner. It shows you are serious about learning Rails. You\u2019ll be asked to provide a username. This can be a nickname or short version of your real name (for example, your Twitter username). You\u2019ll be asked to provide an email address. It\u2019s very important that you use the same email address for your GitHub account that you use to configure Git locally (there will be more about configuring Git later). If you create a Heroku account to deploy and host your Rails applications, you should use the same email address. After you create your GitHub account, log in and look for the button \u201cEdit Your Profile.\u201d Take a few minutes to add some public information to your account. It is really important to provide your real name and a public email address. Displaying your real name on your GitHub account makes it easy for people to associate you with your work when they meet you in real life, for example at a meetup, a hackathon, or a conference. Providing a public email address makes it possible for other developers to reach you if you ask questions or submit issues. If you can, provide a website address (even just your Twitter or Facebook page). In general, you won\u2019t be exposed to stalkers or spammers (except some recruiters) if you are open about yourself on GitHub. Later I\u2019ll show you how to set up and use Git and GitHub.","title":"4.1 GitHub"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#42-mailchimp","text":"This tutorial shows how website visitors can sign up to receive a newsletter provided by a MailChimp mailing list. MailChimp allows you to send up to 12,000 emails/month to a list of 2000 or fewer subscribers for free. There is no cost to set up an account. MailChimp will ask you to provide a website address and company details for your account. These details are included when email messages are sent to your subscribers. If you don\u2019t have your own website, you can enter the URL for your GitHub account for now. Use your own name for a company if you don\u2019t have one. After you have set up a MailChimp account, create a new mailing list where you can collect email addresses of visitors who have asked to subscribe to a newsletter. The MailChimp \u201cLists\u201d page has a button for \u201cCreate List.\u201d The list name and other details are up to you. If you get frustrated with the complex and confusing MailChimp interface, try to remember that the friendly MailChimp monkey is laughing with you, not at you.","title":"4.2 MailChimp"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#43-sendgrid","text":"Earlier editions of this book showed how to use a Gmail account to send email from the application. Google has taken steps to make Gmail more secure and now it can be difficult to send email from a Rails application using Gmail. This tutorial provides instructions for SendGrid . SendGrid offers a free account that allows you to send 12,000 messages per month for free. Scroll to the bottom of the SendGrid pricing page to see details about the free plan. Click the \u201cTry for Free\u201d link to set up an account. No credit card is needed.","title":"4.3 SendGrid"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-5-get-started","text":"","title":"Chapter 5 Get Started"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#52-copying-and-pasting-code","text":"In the next chapter you\u2019ll begin building a Rails application. You need to get the code from this tutorial into your computer. You could just read and imagine, but really, building a working application is the only way to learn. The most obvious way is to copy and paste from this tutorial into your text editor, assuming you are reading this on your computer (not a tablet or printed pages). It\u2019s a bit tedious and error-prone but you\u2019ll have a good opportunity to examine the code closely. Some students like to type in the code, character by character. If you have patience, it\u2019s a worthwhile approach because you\u2019ll become more familiar with the code than by copying and pasting. Don\u2019t feel shy about copying code; it\u2019s how you will learn. Working programmers spend a lot of time copying code from others. At first, you will copy a lot of code. As you gain proficiency, you will copy code and adapt it, more extensively as you gain confidence and skill. Only when you\u2019ve been working full-time as a coder for months or years will you find yourself writing code from scratch; even then, when you encounter new problems, you will still look for code examples to copy and adapt.","title":"5.2 Copying and Pasting Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#54-try-the-terminal","text":"Look for the Terminal application in the following places: MacOS: Applications - Utilities - Terminal Linux: Applications - Accessories - Terminal Windows: Taskbar Start Button - Command Prompt On the Mac, search for the macOS Terminal application by pressing the Command-Spacebar combination (which Apple calls \u201cSpotlight Search\u201d) and searching for \u201cTerminal.\u201d The magnifying glass in the upper right corner of your screen will also launch \u201cSpotlight Search.\u201d Or look in the Applications/Utilities/ folder for the Terminal application. You\u2019ll need to click the name of the application to launch the Terminal. For Linux or Windows, The Command Line Crash Course explains how to launch a terminal application . Launch your terminal application now. Try out the terminal application by entering a shell command. $ whoami Don\u2019t type the $ character. The $ character is a cue that you should enter a shell command. This is a longtime convention that indicates you should enter a command in the terminal application or console. The Unix shell command whoami returns your username. Don\u2019t type the $ prompt. You might see: command not found: $ which indicates you typed the $ character by mistake. If you are new to programming, using a text editor and the shell will seem primitive compared to the complexity and sophistication of Microsoft Word or Photoshop. Software developers edit files with simple text editors and run programs in the shell. That\u2019s all we do. We have to remember the commands we need (or consult a cheatsheet) because there are no graphical menus or toolbars. Yet with nothing more than a text editor and the command line interface, programmers have created everything that you use on your computer.","title":"5.4 Try the Terminal"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#56-your-workspace","text":"Take a moment to think about where on your computer you\u2019ll do your work and store your files. You may have a documents/ folder. You could make a similar folder named projects/ or code/ or workspace/ for your programming projects. Use the Unix mkdir command to create a folder or create it with your file browser. In this tutorial, the terms \u201cfolders\u201d and \u201cdirectories\u201d mean the same thing. Use the Unix cd command to change directories. When you enter the Unix command cd ~ , you\u2019ll move to your home (or \u201cuser\u201d) directory. The squiggly ~ \u201ctilde\u201d character is a Unix shortcut that indicates your home folder. The Unix pwd command shows the \u201cpresent working directory,\u201d where you are. The Unix mkdir command creates an empty folder and we move into it with the Unix cd command.","title":"5.6 Your Workspace"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#561-video-option","text":"Watch the four minute video : Unix Commands Basics - All You Need to Know - YouTube","title":"5.6.1 Video Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#57-understanding-version-numbers","text":"Rails follows a convention named semantic versioning : The first number denotes a major version (Rails 4) The second number denotes a minor release (Rails 4.2) The third number denotes a patch level (Rails 4.2.1) A major release includes new features, including changes which break backward compatibility. For example, switching from Rails 3.2 to Rails 4.0 required a significant rewrite of every Rails application. A minor release introduces new features but doesn\u2019t break anything. For example, Rails 3.2 added the asset pipeline, and Rails 4.2 added the Active Job feature for background processing. A patch release fixes bugs but doesn\u2019t introduce significant features. Usually this means you can change the version number in the Gemfile and run bundle update without making any other changes to your application.","title":"5.7 Understanding Version Numbers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#58-ruby-and-rails-version-check","text":"Check that appropriate versions of Ruby and Rails are installed in your development environment. You\u2019ll need: The Ruby language (version 2.3 or newer) The Rails gem (version 5.1 or newer) Open your terminal application and enter: $ ruby -v You might see: ruby 2.4.1p0 (...) You\u2019ve got Ruby version 2.4.1, patch level \u201cp0\u201d (Ruby versions add an extra patch level to semantic versioning). If you\u2019ve got a newer version of Ruby, no problem; minor updates to Ruby don\u2019t affect Rails. Try: $ rails -v You might see: Rails 5.1.2 If you see: Rails is not currently installed on this system. If you\u2019ve got Rails 5.1.3 or newer, that\u2019s fine.","title":"5.8 Ruby and Rails Version Check"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-6-create-the-application","text":"In this chapter, we\u2019ll begin building the tutorial application. But first, let\u2019s consider the options you have for starter applications.","title":"Chapter 6 Create the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#61-starter-applications","text":"Rails provides a framework ; that is, a software library that provides utilities, conventions, and organizing principles to allow us to build complex web applications. Without a framework, we\u2019d have to code everything from scratch. Rails gives us the basics we need for many websites. Still, the framework doesn\u2019t give us all the features we need for many common types of websites. For example, we might want users to register for an account and log in to access the website (\u201cuser management and authentication\u201d). We might want to restrict portions of our website to just administrators (\u201cauthorization\u201d). We also might want to add gems that enhance Rails to aid development (gems for testing, for example) or improve the look and feel of our application (the Bootstrap or Foundation front-end frameworks). Developers often mix and match components to make a customized Rails stack. Developers often use a starter application instead of assembling an application from scratch. You might call this a \u201ctemplate\u201d but we use that term to refer to the view files that combine HTML with Ruby code to generate web pages. Most experienced developers have one or more starter applications that save time when beginning a new project. The RailsApps project was launched to provide open source starter applications so developers could collaborate on their starter applications and avoid duplicated effort. After you gain some skill with this tutorial, you might use the RailsApps starter apps to instantly generate a Rails application with features like authentication, authorization, and an attractive design. At the end of this book, you\u2019ll learn about Rails Composer , a tool for building starter applications. For now, we\u2019ll begin with the Rails default starter application.","title":"6.1 Starter Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#62-workspace-folder","text":"Are you in the folder named workspace/ you created earlier? $ pwd /Users/danielkehoe/workspace/ If you\u2019re not in your workspace folder, enter a Unix command to move to the folder: $ cd ~/workspace","title":"[6.2 Workspace Folder"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#63-use-rails-new-to-build-the-application","text":"Let\u2019s go! We have selected a gemset, we have Rails installed, and we\u2019re in our workspace/ folder. Let\u2019s build a Rails application! This is your project directory. It is also called the application root directory. You\u2019ll spend all your time inside this folder. Box 6.1. Spring After creating a new Rails application, you may see a message to run a command: $ bundle exec spring binstub --all The command sets up Spring. Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don\u2019t need to stop and restart it when you make changes. After you change into the project directory, you can run the command. Type the ls command to show the folders and files in a directory. Soon we\u2019ll learn more about each of these folders and files. $ ls Gemfile Rakefile config lib test Gemfile.lock app config.ru log tmp README.md bin db public vendor","title":"6.3 Use \u201cRails New\u201d to Build the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#65-test-the-application","text":"You\u2019ve created a simple default web application. It\u2019s ready to run.","title":"6.5 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#651-launching-the-web-server","text":"You can launch the application by entering the command: $ rails server Alternatively, to save typing, you can abbreviate the rails server command: $ rails s If you are using the Cloud9 hosted service, you\u2019ll need to enter bin/rails server -p $PORT -b $IP . You\u2019ll see: \\=> Booting Puma \\=> Rails 5.1.2 application starting in development on http://localhost:3000 \\=> Run \\`rails server -h\\` for more startup options \\=> Ctrl-C to shutdown server Puma starting in single mode... \\* Version 3.4.0 (ruby 2.4.1-p0), codename: Owl Bowl Brawl \\* Min threads: 5, max threads: 5 \\* Environment: development \\* Listening on tcp://localhost:3000 Use Ctrl-C to stop The rails server command launches the Puma web server that is provided with Rails.","title":"6.5.1 Launching the Web Server"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#654-watch-log-messages","text":"Notice that messages scroll in the console window when your browser requests the Rails default web page. Open the file log/development.log and you\u2019ll see the same messages. When a browser sends requests to the Puma web server, diagnostic messages are written to the console and to the log/development.log file. These diagnostic messages are an important tool for troubleshooting when you are developing.","title":"6.5.4 Watch Log Messages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#656-stop-the-web-server","text":"You can stop the server with Control-c to return to the command prompt. When we say Control-c, we mean hold down the Control key as you press the letter \u201cc\u201d. Most of the time you\u2019ll keep the web server running as you add or edit files in your project. Changes will automatically appear when you refresh the browser or request a new page. There is a tricky exception, however. If you make changes to the Gemfile, or changes to configuration files, the web server must be shut down and relaunched for changes to be activated. As a rule of thumb, files that produce web pages can be changed without a restart. This includes any file in the app/ folder which creates web pages, as well as the config/routes.rb file. Changes to files that create the environment for the web application, such as gems or configuration files, and are loaded at web server launch, won\u2019t be seen until the web server is restarted.","title":"6.5.6 Stop the Web Server"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-7-the-parking-structure","text":"We\u2019ve created the default Rails starter application. It is a parking structure for our code. Unlike an ordinary parking structure, where you park anywhere you like, this garage has assigned parking. You have to park your code in the right place. This is Rails, where convention brings order to the development process. As you develop a web application, you\u2019ll do all your work in the project directory. It is important to know your way around and understand the purpose of each folder and file. If you\u2019ve built simple websites with HTML and CSS, or built websites with unstructured platforms such as Perl or PHP, you\u2019ll be surprised at the complexity of the Rails project directory. Rails is a software machine with many moving parts; the project directory provides a structure to manage the complexity. The logic and order of the project directory structure is familiar to every Rails developer, and consistent for every Rails application, which makes it easy to collaborate, maintain an application, and create open source projects.","title":"Chapter 7 The Parking Structure"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#71-video-option","text":"Watch the eleven minute video if you have subscribed: Rails Project Directory - Guided Explanation - YouTube","title":"7.1 Video Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#72-project-directory","text":"Use the Unix ls command to list the contents of the project directory. For a one-column list that shows each subdirectory (marked with a slash), we\u2019ll add the -1p option to the command. $ ls -1p You\u2019ll see: Gemfile Gemfile.lock README.md Rakefile app/ bin/ config/ config.ru db/ lib/ log/ public/ tmp/ vendor/ Now is a good time to open a file browser window and look at the contents of the project directory. On the Mac, there\u2019s a command you can use to open the graphical file browser from the console. If you\u2019re in the project directory, type open . . The period (or \u201cdot\u201d) is a Unix symbol that means \u201cthe directory I\u2019m in.\u201d $ open . Figure 7.1: Rails directory structure. You\u2019ll learn more about each file and folder as you proceed through the tutorial.","title":"7.2 Project Directory"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#73-get-to-know-the-folders-and-files","text":"To get you started, here are three tables. The first describes the files and folders that are important for every beginner. The second table describes the files and folders that you can ignore. The third table is a preview of things to come.","title":"7.3 Get to Know the Folders and Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#731-important-folders-and-files","text":"These folders and files are important to beginners. This is where you will spend your time in Rails. Gemfile Lists all the gems used by the application. Gemfile.lock Lists gem versions and dependencies. README.md A page for documentation. app/ Application folders and files. config/ Configuration folders and files. db/ Database folders and files. public/ Files for web pages that do not contain Ruby code, such as error pages.","title":"7.3.1 Important Folders and Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#732-not-so-important-folders-and-files","text":"These folders and files are not important to beginners. Rakefile Scripts for the Rake utility program. bin/ Folder for binary (executable) programs. config.ru Configuration file for Rack (a software library for web servers). lib/ Folder for miscellaneous Ruby code. log/ Folder for application server logfiles. tmp/ Temporary files created when your application is running. vendor/ Folder for Ruby software libraries that are not gems.","title":"7.3.2 Not-So-Important Folders and Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#733-folders-for-testing","text":"spec/ Folder for the popular RSpec testing framework. test/ Folder for the default Rails testing framework. The test/ folder is present in the default Rails starter app. You\u2019ll use the test/ folder when you learn about test-driven development. Many Rails developers use a different gem for testing, named RSpec, and your RSpec tests will go in a spec/ folder.","title":"7.3.3 Folders for Testing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#74-the-app-directory","text":"Take time to drill down into the app/ folder in the project directory. This is easiest using the file browser. Figure 7.2: Rails app folder. You can also use your text editor to view the folder. Or do it with Unix commands: $ cd app $ ls -1p assets/ channels/ controllers/ helpers/ jobs/ mailers/ models/ views/ Whether you use the file browser, Unix commands, or your text editor, you are looking at the same file system. Most of the work of developing a Rails application happens in the app/ folder. Earlier we described Rails as \u201ca set of files organized with a specific structure.\u201d We said the structure is the same for every Rails application. The app/ directory is a good example. The folders in the app/ directory are the same in every Rails application. This makes it easy to collaborate with other Rails developers, providing consistency and predictability. assets channels controllers helpers jobs mailers models views You may recall our earlier description of Rails from the perspective of a software architect. In this folder, you\u2019ll see evidence of the model\u2013view\u2013controller design pattern. Three folders named models/ , views/ , and controllers/ enforce the software architect\u2019s \u201cseparation of concerns\u201d and impart structure to our code. As you build the application, we\u2019ll explain the role of the MVC components in greater detail. Five folders play supporting roles. The mailers folder is for code that sends email messages. The helpers folder is for Rails view helpers , snippets of reusable code that generate HTML. Later, when we learn more about views , we\u2019ll say view helpers are like \u201cmacros\u201d that expand a short command into a longer string of HTML tags and content. Rails 3.1 added the assets/ folder as a location for CSS and JavaScript files. The jobs/ folder is for background jobs built with the Rails ActiveJob feature. Rails 5.0 added the channels/ folder for the ActionCable feature which uses WebSockets for real-time communication between web server and browser.","title":"7.4 The App Directory"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#741-folders-of-future-importance","text":"You won\u2019t encounter these when you are a beginner: policies/ Folder for code that controls access to features services/ Folder for code that reduces the complexity of models and controllers If you join a project to work on a large and complex Rails application, you may see folders such as these in the app/ directory. As an application grows in complexity, an experienced software architect may suggest reducing the size of models and controllers by moving code to \u201cPOROs\u201d ( plain old Ruby objects ). Code in any folder in the app/ directory is shared throughout a Rails application without any additional configuration (in contrast, code you add to the lib/ directory is only available with some extra work). Rails provides a basic model\u2013view\u2013controller framework but it is often necessary to extend it with code in a services/ folder. Similarly, a policies/ folder can be used to consolidate code that controls access to various features or pages of a web application. Use the cd .. command (\u201cchange directory dot dot\u201d) to return to the project directory. $ cd .. $ pwd /Users/danielkehoe/workspace/learn-rails As a Rails developer, you\u2019ll spend most of your time navigating the hierarchy of folders as you create and edit files. And because Rails provides a consistent structure, you\u2019ll quickly find your way on any unfamiliar project.","title":"7.4.1 Folders of Future Importance"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-8-time-travel-with-git","text":"Now that we\u2019ve looked at our Rails project directory from the viewpoint of a programmer and software architect, let\u2019s consider the viewpoint of the time traveler. This chapter will introduce you to software source control , also called version control or revision control . The terms all have the same meaning. At first sight, the concept seems rather dull, like sorting your socks. But it makes professional software development possible and, at the core, it is essentially a form of time travel. To understand time travel, we need to understand state . It\u2019s a term you\u2019ll encounter often in software development. We know about states of matter. Water can be ice, liquid, or steam. Imagine a machine with a button that, each time it is pressed, changes water from one state to another. We call this a state machine . Almost every software program is a state machine. When a program receives an input, it transitions from one state to another. Like flipping a light switch, there\u2019s no in-between. Light or dark. Ice, liquid, or steam. Or, in a web application: logged in, logged out. When we write software code, there\u2019s a lot of in-between. We look things up, we think, we type errors and we make corrections. As humans, we spend a lot of time in a flow of undetermined state. We can save our work at any time, but we may be saving typos or unfinished code that doesn\u2019t work. Every so often, we get to a point where a task is finished; we\u2019ve fixed all our errors and our code runs. We want to preserve the state of our work. That\u2019s when we need a version control system. A version control system does more than a software application\u2019s \u201cSave\u201d command. Like a \u201cSave\u201d command, it preserves the current state of our files. It also allows us to add a short note that describes the work we\u2019ve done. More importantly, it archives a snapshot of the current state in a repository where it can be retrieved if needed. Here\u2019s where the time travel comes in. We can go back and recover the state of our work at any point where we committed a snapshot to the repository. In software development, travel to the past is essential because we often make mistakes or false starts and have to return to a point where we know things were working correctly. What about time travel to the future? Often we need to try out code we may decide to discard, without disturbing work we\u2019ve done earlier. Version control systems allow us to explore alternative futures by creating a branch for our work. If we like what we\u2019ve done in our branch, we can merge it into the main trunk of our software project. Unlike time travel in the movies, we can\u2019t travel back to any arbitrary point in the flow of time. We can only travel to past or future states we\u2019ve marked as significant by checking our work into the repository.","title":"Chapter 8 Time Travel with Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#81-git","text":"The dominant version control system among Rails developers is Git , created by the developer of the Linux operating system. Unlike earlier version control systems, Git is ideal for wide-scale distributed open source software development. Combined with GitHub , the \u201csocial coding\u201d website, Git makes it easy to share and merge code. When you work with others on a project, your Git commit messages (the notes that accompany your snapshot) offer a narrative about the progress of the project. Well-written commit messages describe your work to co-workers or open source collaborators. GitHub\u2019s support for forking (making your own copy of a repository) makes it possible to take someone else\u2019s project and modify it without impacting the original. That means you can customize an open source project for your own needs. You can also fix bugs or add a feature to an open source project and submit a pull request for the project maintainer to add your work to the original. Fixing bugs (large or small) and adding features to open source projects are how you build your reputation in the Rails community. Your GitHub account, which shows all your commits, both to public projects and your own projects, is more important than your resum\u00e9 when a potential employer considers hiring you because it shows the real work you have done. Collaboration is easy when you use a branch in Git. If you and a coworker are working on the same codebase, you can each make a branch before adding to the code or making changes. Git supports several kinds of merges , so you can integrate your branch with the trunk when your task is complete. If your changes collide with your coworker\u2019s changes, Git identifies the conflict so you can resolve the collision before completing the merge. All the power of Git comes at a price. Git is difficult for a beginner to learn, largely because many of its procedures have no real-world analog. Have you noticed how time travel movies require mental gymnastics, especially when you try to make sense of alternative futures and intersecting timelines? Git is a lot like that, mostly because we use it to do things we don\u2019t ordinarily do in the real world. In this tutorial, you won\u2019t encounter Git\u2019s advanced procedures, like resolving merges or reverting to earlier versions. We\u2019ll stick to the basics of archiving our work (and in one case, discarding work that we\u2019ve done for practice). You can build the tutorial project without using Git. But I urge you to use Git and a GitHub account for this project, for two reasons. First, with your tutorial application on GitHub, you\u2019ll show potential employers or collaborators that you\u2019ve successfully built a useful, functioning Rails application. More importantly, you must get to know Git if you plan to do any serious coding, either as a professional or a hobbyist. Before I show you Git commands, I want to mention that some people use graphical client applications to manage Git. MacOS has GitHub for Mac , Git Tower , and other Mac Git clients . Graphical applications for Git are useful for colleagues who don\u2019t use a Terminal application, such as graphic designers or writers. There\u2019s no need for you to install these applications. Every developer I\u2019ve met uses Git from the command line. It will take effort to master Git; the commands are not intuitive. But it is absolutely necessary to become familiar with Git basics. Before you do any work on the tutorial application, I\u2019ll show you the basics of setting up and using Git.","title":"8.1 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#82-is-git-installed","text":"As a first step, make sure Git is installed on your computer: $ which git /usr/local/bin/git $ git version git version ... If Git is not found, install Git. See the article Rails with Git and GitHub for installation instructions.","title":"8.2 Is Git Installed?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#83-is-git-configured","text":"Make sure Git knows who you are. Every time you update your Git repository with the git commit command, Git will identify you as the author of the changes. $ git config --get user.name $ git config --get user.email You should see your name and email address. If not, configure Git: $ git config --global user.name \"Real Name\" $ git config --global user.email \"[\\[email protected\\]](/cdn-cgi/l/email-protection)\" Use your real name so people will associate you with your work when they meet you in real life. There\u2019s no reason to use a clever name unless you have something to hide. And use your full name, not just your first name. Use the same email address for Git, your GitHub account, and Heroku to avoid headaches.","title":"8.3 Is Git Configured?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#84-create-a-repository","text":"Now we\u2019ll add a Git repository to our project. It\u2019s a basic step you\u2019ll repeat every time you create a new Rails project. Extending the time traveler analogy, initializing a Git repository is equivalent to setting up the time machine. Be sure you are in your project directory, not your user home directory or somewhere else. Use the pwd command to check: $ pwd /Users/danielkehoe/workspace/learn-rails The git init command sets up a Git repository (a \u201crepo\u201d) in the project directory. We add the Unix symbol that indicates Git should be initialized in the current directory (git init dot): $ git init . Initialized empty Git repository in ... It creates a hidden folder named .git/ in the project directory. You can peek at the contents: $ ls -1p .git HEAD config description hooks/ info/ objects/ refs/ All Git commands operate on the hidden files. The hidden files record the changing state of your project files each time you run the git commit command. There is no reason to ever edit files inside the hidden .git/ folder (doing so could break your time machine).","title":"8.4 Create a Repository"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#85-gitignore","text":"The hidden .git/ folder contains the Git repository with all the snapshots of your changing project. The snapshots are highly compressed, only containing records of changes, so the repository takes up very little file space relative to the project as a whole. Not every file should be included in a Git snapshot. Here are some types of files that should be ignored: log files created by the web server database files configuration files that include passwords or API keys Git gives us an easy way to ignore files. A hidden file in the project directory named .gitignore can specify a list of files that are never seen by Git. The rails new command creates a .gitignore file with defaults that include log files and database files. Later, when we add configuration files that include secrets, we\u2019ll update the .gitignore file. Take a look at the contents of the .gitignore file. We use the Unix cat command to display the contents of the file: $ cat .gitignore # See https://help.github.com/articles/ignoring-files for more about ignoring files. # # If you find yourself ignoring temporary files generated by your text editor # or operating system, you probably want to add a global ignore instead: # git config --global core.excludesfile '~/.gitignore\\_global' # Ignore bundler config. /.bundle # Ignore the default SQLite database. /db/\\*.sqlite3 /db/\\*.sqlite3-journal # Ignore all logfiles and tempfiles. /log/\\* /tmp/\\* !/log/.keep !/tmp/.keep # Ignore Byebug command history file. .byebug\\_history For a .gitignore file that ignores more, see an example .gitignore file from the RailsApps project.","title":"8.5 GitIgnore"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#86-git-workflow","text":"Your workflow with Git will move through four distinct phases as you add or edit files.","title":"8.6 Git Workflow"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#861-untracked-files","text":"The first phase is a \u201cdirty\u201d state of untracked and changed files, before any snapshot. The git status command lists all folders or files that are not checked into the repository. $ git status On branch master Initial commit Untracked files: (use \"git add <file>...\" to include in what will be committed) .gitignore Gemfile Gemfile.lock README.md Rakefile app/ bin/ config.ru config/ db/ lib/ log/ public/ test/ tmp/ vendor/ nothing added to commit but untracked files present (use \"git add\" to track) In the online version of this book (the HTML version), the example above appears in green. In the terminal window on your computer, it will be red, showing you untracked files. Here the git status command tells us that we have many untracked files. We have created new files and they are saved on the computer\u2019s hard disk but nothing has been recorded in the Git repository.","title":"8.6.1 Untracked Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#862-staging","text":"I call this step, \u201cPose for your snapshot.\u201d Recording files in the Git repository takes two steps: staging and committing. There will be times when you change many files at once. For example, you may fix a bug, add a new graphic, and change a form. You might think you\u2019d like to have Git automatically record all the changes as you save each file. But the story of your project would be confusing and overly detailed. Git requires you to mark one or more files (\u201cstaging\u201d) before recording the changes (\u201ccommitting\u201d). This gives you fine-grained control over the recorded history of your project. You can mark individual files to be staged: $ git add Gemfile Adding individual files allows you to selectively record the history of your project. For example, you might stage and commit a series of bug fixes before you stage and commit new features. Applying the time traveler analogy, it will be easier to travel back to look at bug fixes if they are not mixed in with new features. More often, you\u2019ll mark all the files to be staged. Do so now: $ git add -A Running git status will show you a long list of files that are staged and ready to commit. There are three forms of the git add command: git add foo.txt adds a file named foo.txt git add . adds all new files and changed files, except deleted files git add -A adds everything, including deletions If it seems nonsensical that the command git add -A \u201cadds deletions,\u201d don\u2019t worry. Like time travel, Git will stretch your understanding of what makes sense. Most often, you can simply use the git add -A form of the command. Now that you\u2019ve marked the files that will be committed to the repository, you\u2019ve told everyone to pose, and you\u2019re ready to take the snapshot.","title":"8.6.2 Staging"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#863-committing","text":"The previous step, the \u201cposing\u201d step, or staging, gives you an opportunity to select particular files before you commit. If you\u2019ve only worked on one feature, you\u2019ll likely stage and commit all your files. The next step is a \u201ccommit\u201d which I like to call, \u201cclicking the snapshot.\u201d When you \u201cmake a commit\u201d, you include a message that describes the work you\u2019ve done. For a time traveler, the \u201ccommit message\u201d is important; you are leaving a trail to help you find your way into the past. Google will show you dozens of blog posts about \u201cwriting better commit messages\u201d but common sense can be your guide. For example, writing \u201cfix registration form to catch blank email addresses\u201d will be more helpful than merely writing \u201cfix bugs.\u201d And if you wonder why commit messages are commonly written in the imperative not past tense (\u201cfix\u201d not \u201cfixed\u201d), it\u2019s a time traveler convention. Now commit your project to the repository: $ git commit -m \"Initial commit\" The -m flag lets you add a message for the commit. The pristine state of your new Rails application is now recorded in the repository on your local computer. Running git status will tell you \u201cnothing to commit, working directory clean.\u201d $ git status On branch master nothing to commit, working directory clean You\u2019ve recorded your snapshot locally. Next let\u2019s see a list of previous snapshots. Then we\u2019ll learn how to save your snapshots remotely to GitHub.","title":"8.6.3 Committing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#864-git-log","text":"You can use the git log command to see your project history: $ git log commit 8da41eec9e864ed91b4a445d8cefdf7893e2faf6 Author: Daniel Kehoe < [email protected] > Date: Fri Dec 18 10:30:12 2015 +0700 Initial commit The long string of characters that follows \u201ccommit\u201d is an ID, or marker, that will help you travel back in time if you need to do so. If you get \u201cstuck\u201d in git log , type q to return to the command prompt. I like to use the git log command with an option for a compact listing: $ git log --oneline 8da41ee Initial commit Don\u2019t worry if your console doesn\u2019t show 8da41ee . The ID for your commit will be different. The listing is easier to review when it is displayed in a compact format. The commit ID is abbreviated but it is all you need to travel back in time.","title":"8.6.4 Git Log"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#865-repositories","text":"When we talk about repositories, or \u201crepos,\u201d we mean the archive of our git commits. The local repo is located in the hidden folder named .git/ in the project directory. Of course, if your hard drive crashes, or your computer is lost or stolen, you\u2019ll lose your local repo along with your project. So it is wise to save your repository in the cloud. The GitHub site is a place to save repositories. GitHub is also a place for collaboration. Most Rails developers save their repositories to Github, as either a public repo for open source projects, or a private repo for proprietary projects.","title":"8.6.5 Repositories"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#866-pushing-to-github","text":"We\u2019ve seen three phases of the Git workflow: untracked , staged , and committed . A fourth stage is important when you work with others: pushing to GitHub. The repositories hosted on your GitHub account establish your reputation as a Rails developer for employers and developers you may work with. Even if your first project is copied from a tutorial, it shows you are serious about learning Rails and studying conscientiously. Did you create a GitHub account? Now would be a good time to add your repo to GitHub. Go to GitHub and create a new empty repository for your project. Name the repository \u201clearn-rails\u201d and give it a description. If the repository is public, hosting on GitHub is free. Don\u2019t be reluctant to go public with an unfinished or half-baked project; everyone expects projects on GitHub to be works in progress. Add GitHub as a remote repository for your project and push your local project to GitHub. Before you copy and paste the command, notice that you need to insert your own GitHub account name. In other words, change YOUR_GITHUB_ACCOUNT in the command shown below. Box 8.1. Warning STOP! Be sure to change YOUR_GITHUB_ACCOUNT to your GitHub user name. If you don\u2019t, you will create a mess that you have to fix with the instructions here . $ git remote add origin https://github.com/YOUR_GITHUB_ACCOUNT/learn-rails.git $ git push -u origin master The -u option sets up Git so you can use git push in the future without explicitly specifying GitHub as the destination. Now you can view your project repository on GitHub at: https://github.com/YOUR_GITHUB_ACCOUNT/learn-rails Obviously you must change YOUR_GITHUB_ACCOUNT in the web address to see your own repository. Take a look. It\u2019s an exact copy of the project on your local computer. If you haven\u2019t used GitHub before, take some time to explore. GitHub is absolutely essential to all open source Rails development. You may notice that the README.md file is automatically incorporated into the home page of the project repository on GitHub. For our next step, we\u2019ll update the README file, commit it to the local repo, and push it up to GitHub. It will be good practice for using Git.","title":"8.6.6 Pushing to GitHub"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#87-the-readme","text":"Changing the README file is a good way to practice with Git. It\u2019s also a good habit to edit the README file whenever you create a new project. It\u2019s easy to neglect the README for little projects that you\u2019ve just started. But replacing a default README file shows you are a disciplined, conscientious developer who will be a good collaborator. The new README file can be brief. Just state your intentions and acknowledge any code you\u2019ve borrowed. For this project you could say, \u201cExcited to learn Rails with help from Daniel Kehoe\u2019s book!\u201d In your text editor, open the file README.md and replace the contents:","title":"8.7 The README"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#learning-rails","text":"Learning Rails with a tutorial from [learn-rails.com](http://learn-rails.com/). GitHub lets you add formatting using your choice of markup syntax, depending on the file extension you add to the filename: README.md uses the GitHub Flavored Markdown syntax README.textile uses the Textile syntax README.rdoc uses the rdoc syntax We\u2019ll use Markdown syntax by adding the # character before the first line of text to force a headline. And we\u2019ll add a link that leads to the learn-rails.com website. There\u2019s no requirement that you use Markdown syntax in your README file. Markdown simply is a popular way to add formatting to improve readability. Use git status to see what has changed: $ git status On branch master Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: README.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Here\u2019s our typical workflow. We\u2019ll stage and commit the change: $ git add -A $ git commit -m \"update README\" Then we\u2019ll push the change to GitHub: $ git push origin master If you decide not to use GitHub for this tutorial, you can skip this step (and skip it throughout the tutorial). Take a look at your GitHub repository (refresh the web page). Very cool! The README file has been updated. The git log command will display your project history: $ git log --oneline 69b9b6c update README 8da41ee Initial commit To learn more about Git, I recommend the book Learn Enough Git to Be Dangerous by my colleague Michael Hartl. An online version is available for free. Now that you\u2019re comfortable with Git, we can begin customizing our new Rails application.","title":"Learning Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-9-gems","text":"The art of selecting gems is at the heart of Rails development. I explained earlier that gems are packages of code, \u201csoftware libraries,\u201d that have been developed and tested by other developers. Some gems add functionality or features to a website. Other gems play a supporting role, making development easier or implementing basic infrastructure. Gems are open source. They are available at no charge and can be freely copied and modified.","title":"Chapter 9 Gems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#91-videos","text":"If you have subscribed, two short videos introduce gems: What Are Rubygems Find Rubygems","title":"9.1 Videos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#92-rubygems","text":"It is a mark of honor to release a gem for public use, and a developer\u2019s reputation can be established when a gem becomes popular and widely used. Gems are often created when a developer has used the same code as a component in more than one web application. He or she will take time to release the code as a gem. That\u2019s how the Rails ecosystem was built, gem by gem since 2004. There is no evaluation or review process in publishing gems. Gems are hosted on a public server, rubygems.org . Gems are mostly text files (like any other Ruby code), organized in a particular format with some descriptive information (in a gemspec file), and compressed and archived as a single file. A single command, gem push , uploads a gem to the rubygems.org server for anyone to use. Over 50,000 gems have been released since rubygems.org was established. Some of these gems are used by one or two developers on their own projects. Many others have been neglected and abandoned due to lack of interest. Only a few thousand gems are popular and widely used. As a Rails developer, you must master the art of finding and evaluating gems so you can base your applications on the tried-and-true work of others. There is no single authoritative source of recommendations for gems. The Ruby Toolbox website categorizes and ranks many gems by popularity, and it is a good place to begin hunting for useful gems. Other than that, it is useful to study example applications and search for blog posts to find which gems are most often recommended. When you find an interesting gem, search Stack Overflow or Google to see what people are saying. Look at the gem\u2019s GitHub repository and check: How many issues are open? How many are closed? How recent are the commits of patches or updates? Is there a CHANGELOG file? Is the gem well-documented? How many \u201cstars\u201d (people favoriting) or \u201cforks\u201d (people hacking)? Popular gems are likely to have many reported issues, some of which are trivial problems or feature requests. Gems that are actively maintained will have many closed issues and, ideally, only a few open issues. When you find a gem that has many open issues and no recently closed issues, you\u2019ve probably found a gem that has been abandoned. Also look at the commit log, which you\u2019ll find on the GitHub project page in a tab at the top of the page. Regular and recent activity in the commit log indicates the gem is actively maintained.","title":"9.2 RubyGems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#93-rails-gems","text":"Rails itself is a gem that, in turn, requires a collection of other gems. This becomes clear if you look at the summary page for Rails on the rubygems.org site. On that page, you\u2019ll see photos of the Rails core team. More importantly, you\u2019ll see a list of gems that are required to use Rails: actioncable - real-time communication using WebSockets actionmailer - framework for email delivery and testing actionpack - framework for routing and responding to web requests actionview - view templates and rendering activejob - queueing slow tasks to run in the background activemodel - architecture for model objects activerecord - framework for connections to databases activesupport - utility classes and Ruby library extensions bundler - utility to manage gems railties - console commands and generators sprockets-rails - support for the Rails asset pipeline These are the \u201cruntime dependencies\u201d for Rails. Each of these gems has its own dependencies as well. When you install Rails, a total of 63 gems are automatically installed in your development environment.","title":"9.3 Rails Gems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#94-gems-for-a-rails-default-application","text":"In addition to the Rails gem and its dependencies, a handful of other gems are included in every rails new default starter application: sqlite3 - adapter for the SQLite database puma - web application server sass-rails - enables use of the SCSS syntax for stylesheets uglifier - JavaScript compressor coffee-rails - enables use of the CoffeeScript syntax for JavaScript turbolinks - faster loading of webpages jbuilder - utility for encoding JSON data You may not need a SQLite database, SCSS for stylesheets, or the others, but many developers use these tools so they are included in the default starter application.","title":"9.4 Gems for a Rails Default Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#95-where-do-gems-live","text":"Gems are files saved in the computer\u2019s disk storage, containing someone else\u2019s code that you can use in your own application. When you run a Rails application, gems are loaded into the computer\u2019s working memory immediately before your own custom code is loaded. Gems are handled by the Ruby interpreter no differently than your own code. It\u2019s all Ruby code, whether you or someone else wrote it. When you are building an application in Rails, you don\u2019t need to think about where gems are stored in your file system. It\u2019s all handled automatically. Experienced programmers who have used software libraries in other languages might wonder how it works. Here\u2019s the technical explanation from the experts. Ruby has a require method that allows you to import software libraries into your programs. RubyGems extends the require method, adding gem directories to a $LOAD_PATH . When Rails loads, it will automatically require each of the gems listed in your Gemfile, finding the gems in the $LOAD_PATH directories. If you\u2019re a curious person, you might like to see where the gems live. You can run the gem env command to reveal the RubyGems environment details which are normally hidden from you: $ gem env RubyGems Environment: - RUBYGEMS VERSION: 2.6.4 - RUBY VERSION: 2.4.1 (2016-04-26 patchlevel 112) \\[x86\\_64-darwin14\\] - INSTALLATION DIRECTORY: /Users/danielkehoe/.rvm/gems/[\\[email protected\\]](/cdn-cgi/l/email-protection) - USER INSTALLATION DIRECTORY: /Users/danielkehoe/.gem/ruby/2.3.0 - RUBY EXECUTABLE: /Users/danielkehoe/.rvm/rubies/ruby-2.4.1/bin/ruby - EXECUTABLE DIRECTORY: /Users/danielkehoe/.rvm/gems/[\\[email protected\\]](/cdn-cgi/l/email-protection)/bin - SPEC CACHE DIRECTORY: /Users/danielkehoe/.gem/specs - SYSTEM CONFIGURATION DIRECTORY: /Users/danielkehoe/.rvm/rubies/ruby-2.4.1/etc - RUBYGEMS PLATFORMS: - ruby - x86\\_64-darwin-14 - GEM PATHS: - /Users/danielkehoe/.rvm/gems/[\\[email protected\\]](/cdn-cgi/l/email-protection) - /Users/danielkehoe/.rvm/gems/[\\[email protected\\]](/cdn-cgi/l/email-protection) . . . If you use RVM, gems are saved to a hidden .rvm folder in your user directory. A global subfolder contains the Bundler gem. If you\u2019ve followed the instructions in the \u201cGet Started\u201d chapter to install Rails, the project-specific learn-rails subfolder contains the Rails gem. If you use Chruby or Rbenv instead of RVM, your gems will be stored in a different location. Run the gem which command and you\u2019ll see where the gems live: $ gem which bundler /Users/danielkehoe/.rvm/gems/ [email protected] /gems/bundler-1.12.5/lib/bundler.rb $ gem which rails /Users/danielkehoe/.rvm/gems/ [email protected] /gems/railties-5.1.2/lib/rails.rb These are details you\u2019ll never need to know, because Ruby on Rails handles it for you. You\u2019ll never move or delete gems directly. Instead you\u2019ll manage gems using the Bundler utility. The key to Bundler is the Gemfile.","title":"9.5 Where Do Gems Live?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#96-gemfile","text":"Every Rails application has a Gemfile. Earlier, I described Rails from the viewpoint of the \u201cgem hunter,\u201d the developer who wants to assemble an application from the best open source components he or she can find. To the gem hunter, the Gemfile is the most important file in the application. It lists each gem that the developer wants to use. The Gemfile provides the information needed by the Bundler utility to manage gems. Bundler\u2019s bundle install command reads the Gemfile, then downloads and saves each listed gem to the hidden gem folder. Bundler checks to see if the gem is already installed and only downloads gems that are needed. Bundler checks for the newest gem version and records the version number in the Gemfile.lock file. Bundler also downloads any gem dependencies and records the dependencies in the Gemfile.lock file. Between the Gemfile, with its list of gems that will be used by the application, and the Gemfile.lock file, with its list of dependencies and version numbers, you have a complete specification of every gem required to run the application. More importantly, when other developers install your application, Bundler will automatically install all the gems (including dependencies and correct versions) needed to run the application. When you deploy the application to production for others to use, automated deployment scripts (such as those used by Heroku) install all the required gems. Bundler provides a bundle update command when we want to replace any gems with newer versions. If you run bundle update , any new gem versions will be downloaded and installed and the Gemfile.lock file will be updated. Be aware that updating gems can break your application, so only update gems when you have time to test and resolve any issues. You can run bundle outdated to see which gems are available in newer versions. If you want to prevent your fellow developers (or yourself) from accidentally updating gems, you can specify a gem version number for any gem in the Gemfile. The Gemfile gives fine-grained control over rules for updating: gem \u2019rails\u2019, \u20195.0.0\u2019 is \u201cabsolute\u201d only version 5.0.0 will be used gem \u2019rails\u2019, \u2019>= 5.0.0\u2019 is \u201coptimistic\u201d any version newer than 5.0.0 will be used gem \u2019rails\u2019, \u2019~> 5.0.0\u2019 is \u201cpessimistic\u201d \u201cPessimistic\u201d versioning needs some explanation. ~> 5.0.0 means use any version greater than 5.0.0 and less than 5.1 (any patch version can be used). ~> 5.0 means use any version greater than 5.0 and less than 6.0 (any minor version can be used). In general, during development we only lock down any gem versions in the Gemfile if we know newer versions introduce problems. Let\u2019s take a look at the Gemfile created by the rails new command.","title":"9.6 Gemfile"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#97-gemfile-for-a-rails-default-application","text":"Open the Gemfile with your text editor: source 'https://rubygems.org' git\\_source(:github) do |repo\\_name| repo\\_name \\= \"#{repo\\_name}/#{repo\\_name}\" unless repo\\_name.include?(\"/\") \"https://github.com/#{repo\\_name}.git\" end # Bundle edge Rails instead: gem 'rails', github: 'rails/rails' gem 'rails', '~> 5.1.2' # Use sqlite3 as the database for Active Record gem 'sqlite3' # Use Puma as the app server gem 'puma', '~> 3.7' # Use SCSS for stylesheets gem 'sass-rails', '~> 5.0' # Use Uglifier as compressor for JavaScript assets gem 'uglifier', '>= 1.3.0' # See https://github.com/rails/execjs#readme for more supported runtimes # gem 'therubyracer', platforms: :ruby # Use CoffeeScript for .coffee assets and views gem 'coffee-rails', '~> 4.2' # Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks gem 'turbolinks', '~> 5' # Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder gem 'jbuilder', '~> 2.5' # Use Redis adapter to run Action Cable in production # gem 'redis', '~> 3.0' # Use ActiveModel has\\_secure\\_password # gem 'bcrypt', '~> 3.1.7' # Use Capistrano for deployment # gem 'capistrano-rails', group: :development group :development, :test do # Call 'byebug' anywhere in the code to stop execution and get a debugger console gem 'byebug', platforms: \\[:mri, :mingw, :x64\\_mingw\\] # Adds support for Capybara system testing and selenium driver gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do # Access an IRB console on exception pages or by using <%= console %> anywhere in the code. gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # Windows does not include zoneinfo files, so bundle the tzinfo-data gem gem 'tzinfo-data', platforms: \\[:mingw, :mswin, :x64\\_mingw, :jruby\\] The file you see will be very similar. Some version numbers may be different if a newer Rails version was released since this was written. The first line, source \u2019https://rubygems.org\u2019 , directs Bundler to use the rubygems.org server as a source for any gems. Notice that the second uncommented line directs Bundler to use Rails and specifies a range of acceptable versions. In this case, the Gemfile indicates we can use any version between 5.1.2 and 5.2. In the Gemfile you\u2019ll see the gems for a Rails default application, such as the sqlite3 database gem, which we described earlier. Other gems are commented out (the lines begin with the # character). These are suggestions and we can ignore them or remove them. We won\u2019t use a database for our application but we\u2019ll keep the gem \u2019sqlite3\u2019 entry. Configuring Rails for no database is complicated; it is easier to keep the sqlite3 gem and not use it. If you are developing your application on a computer using the Linux operating system, you may need to uncomment and use the statement gem \u2019therubyracer\u2019, platforms: :ruby . Linux doesn\u2019t have a built-in JavaScript interpreter so you must install Node.js in your environment or else add the therubyracer gem to each project Gemfile. For help, see Install Ruby on Rails - Ubuntu . It\u2019s wise to specify the Ruby version we\u2019re using. This is needed for automated deployment scripts such as those used by Heroku. We can add that to the Gemfile: ruby '2.4.1' If you add the Ruby version and remove the extra clutter in the Gemfile it will look like this: source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: \\[:mri, :mingw, :x64\\_mingw\\] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end Try it now. Replace the Gemfile with the simplified code above.","title":"9.7 Gemfile for a Rails Default Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#98-adding-gems","text":"I\u2019ve identified several gems that will be useful for our tutorial application. I learned about these gems from several places: Ruby Toolbox RubyFlow various blog posts example code and starter apps on GitHub recommendations from colleagues We\u2019re adding these gems at the beginning of our development process since we already know which gems we\u2019ll need. On a real project, you\u2019ll often discover useful gems and add them to the Gemfile during the ongoing process of development. Here are gems we\u2019ll add to the Gemfile: bootstrap-sass - front-end framework gibbon - access to the MailChimp API high_voltage - for static pages like \u201cabout\u201d jquery-rails - adds the jQuery JavaScript library Box 9.1. jQuery and Rails 5.1 Versions of Rails prior to Rails 5.1 included the jquery-rails gem by default. The gem was dropped from Rails 5.1. We\u2019ll add the jquery-rails gem because it is required by the Bootstrap front-end framework. We\u2019ll also add utilities that make development easier: better_errors - helps when things go wrong rails_layout - generates files for an application layout Open your Gemfile and replace the contents with the following: source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: \\[:mri, :mingw, :x64\\_mingw\\] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high\\_voltage' gem 'jquery-rails' group :development do gem 'better\\_errors' gem 'rails\\_layout' end Notice that we\u2019ve placed two gems inside a \u201cgroup.\u201d Specifying a group for development or testing ensures a gem is not loaded in production, reducing the application\u2019s memory footprint. Rails let you specify groups for development , test , or production .","title":"9.8 Adding Gems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#910-install-the-gems","text":"Each time you edit the Gemfile, you will run bundle install and restart your web server. You\u2019ve edited the Gemfile. Install the required gems on your computer: $ bundle install The bundle install command will download the gems from the rubygems.org server and save them to a hidden directory that is managed by the RVM gemset you\u2019ve specified. We\u2019ll see all the gems and their dependencies: Fetching gem metadata from https://rubygems.org/ Fetching version metadata from https://rubygems.org/ Fetching dependency metadata from https://rubygems.org/ Resolving dependencies... Using rake 11.3.0 Using concurrent-ruby 1.0.2 Using i18n 0.7.0 Using minitest 5.9.1 . . . (many more gems not shown... you get the idea) . . . Bundle complete! 20 Gemfile dependencies, 73 gems now installed. Use \\`bundle show \\[gemname\\]\\` to see where a bundled gem is installed. You can use your text editor to view the contents of Gemfile.lock and you will see a detailed listing of every gem and each dependency, with version numbers. There\u2019s no reason to edit a Gemfile.lock file; if it is ever in error, delete it and run bundle install to recreate it. Run gem list to see all the gems that are loaded into the development environment: $ gem list The list of gems loaded in the environment is the same as the list specified in the Gemfile.lock file. Here\u2019s how it works. RVM makes a place for the gems to be stored (the RVM gemset); the Gemfile lists the gems you want to use; bundle install reads the Gemfile and installs the gems into the RVM gemset; the Gemfile.lock file records dependencies and version numbers; and gem list shows you the gems that are in the gemset and available for use.","title":"9.10 Install the Gems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#9101-troubleshooting","text":"If your development environment is set up correctly, there should be no difficulty installing gems with the bundle install command. If your development environment is not set up correctly, you may see error messages when Bundler attempts to install the Nokogiri gem. Nokogiri is often needed by other gems (it is a dependency of some gems) and Nokogiri can become a problem to install. Unlike most gems that are written in pure Ruby, parts of Nokogiri are written in the C language and must be compiled using system tools that vary with different operating systems. If you get an error while installing gems, and the message says, \u201cAn error occurred while installing nokogiri,\u201d ask for help on Stack Overflow .","title":"9.10.1 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#911-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add gems\" $ git push origin master After your first use of git push origin master , you can use the shortcut git push . If you get a message: fatal: Not a git repository (or any of the parent directories): .git It indicates you are in a folder that has not been initialized with Git. You are probably not in your project directory. Use the Unix command pwd to see where you are. If you get a message: fatal: 'origin' does not appear to be a git repository fatal: The remote end hung up unexpectedly It shows that you can\u2019t connect to GitHub to push the changes. To investigate, enter: $ git remote show origin It is not absolutely necessary to use GitHub for this tutorial. We\u2019re only using it so you\u2019ll be familiar with the workflow of professional development. We\u2019re ready to configure the application.","title":"9.11 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-10-configure","text":"Rails is known for its \u201cconvention over configuration\u201d guiding principle. As applied, the principle reduces the need for many configuration files. It\u2019s not possible to eliminate all configuration files, however. Many applications require configuration of settings such as email account credentials or API keys for external services. In our tutorial application, we\u2019ll need to store an API key to access MailChimp, which we\u2019ll use to add visitors\u2019 email addresses to a mailing list. We\u2019ll also need to store credentials so we can send email using the SendGrid transactional email service. Rails provides the config/secrets.yml file for our configuration settings. Any variable that is set in the config/secrets.yml file can be used elsewhere in our Rails application, providing a single location for all our configuration variables.","title":"Chapter 10 Configure"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#101-configuration-security","text":"GitHub is a good place to store and share code. But when your repos are public, they are not a good place for secret account credentials. In fact, any shared Git repository, even a private repo, is a bad place to store email account credentials or private API keys. Operating systems (Linux, macOS, Windows) provide mechanisms to set local environment variables , as does Heroku and other deployment platforms. With a bit of Unix savvy, you can set environment variables using the Unix shell. Environment variables can be accessed from Rails applications and provide an ideal place to set configuration settings that must remain private. For the best security, set credentials as Unix environment variables and only use Unix environment variables in the config/secrets.yml file. The article Rails Environment Variables shows alternatives to using Unix environment variables, if for any reason you cannot set environment variables on your machine.","title":"10.1 Configuration Security"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#102-videos","text":"If you have subscribed, now\u2019s a good time to watch: UNIX Environment Variables - On the Mac with Bash - YouTube Rails Environment Variables - Explanation and Tutorial - YouTube","title":"10.2 Videos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#103-about-environment-variables","text":"Unix environment variables are typically set in a file that is read when starting an interactive shell. The shell is the program that gives us the command line interface we see in the Terminal or console application. Unix gives you a choice of shell programs (with names like sh , bash , ksh , and zsh ); each has a slightly different way to set environment variables. The most common shell program is bash. Let\u2019s find out what shell you are using: $ echo $SHELL /bin/bash If you see /bin/bash , that\u2019s great! If not, you may have to do some research to find out how to set environment variables in your shell. You might be surprised to see a dollar sign in the command. You don\u2019t type the first dollar sign (it is just the convention that indicates you are entering a Unix command). You\u2019ll type echo $SHELL to ask the operating system to show the variable SHELL . The dollar sign in the command tells Unix to return a variable named SHELL . Try typing echo SHELL without the dollar sign and you\u2019ll see echo just displays what you type. When you open a console window, the bash shell reads a configuration file in your user home directory. You can use a Unix command to list all the files in your user home directory (the ~ \u201ctilde\u201d character represents your home directory): $ ls -1pa ~ . . . .bash\\_profile . . . On the Mac, you\u2019ll see .bash_profile . On Linux systems, you\u2019ll see .bashrc .","title":"10.3 About Environment Variables"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#104-viewing-hidden-files","text":"The files .bash_profile or .bashrc are hidden in the file browser. You can force the Mac to display hidden files by entering the following command in the Terminal application: defaults write com.apple.finder AppleShowAllFiles TRUE; killall Finder Hidden files will appear in gray in the Finder window. Use your text editor (Atom or Sublime) to open the .bash_profile or .bash_rc file. To open the .bash_profile file with Atom: $ atom ~/.bash\\_profile In Unix, the squiggle (tilde) character is a shortcut to your user home folder. Open either file and you\u2019ll likely find a command such as: export PATH=~/.bin:$PATH That is a command that sets the PATH environment variable. The command might not be exactly the same but it is likely you will see some export commands. You can add the environment variables anywhere in the file. For convenience, add the environment variables near the end of the file, above any existing EXPORT statement. You should use quotes to surround configuration values (credentials) in the .bash_profile or .bashrc files. If you don\u2019t have a .bash_profile or .bashrc file in your user home directory, you can create one.","title":"10.4 Viewing Hidden Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#105-set-environment-variables","text":"You\u2019ll set the following environment variables in your .bashrc or .bash_profile file: * SENDGRID\\_USERNAME * SENDGRID\\_PASSWORD * MAILCHIMP\\_API\\_KEY * MAILCHIMP\\_LIST\\_ID * OWNER\\_EMAIL Here are details.","title":"10.5 Set Environment Variables"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1051-sendgrid","text":"You\u2019ll need your SendGrid username and password. The credentials are the same you use to sign in to the SendGrid website. Add your SendGrid username and password to your .bash_profile or .bashrc file: export SENDGRID\\_USERNAME=\"example\" export SENDGRID\\_PASSWORD=\"secret\" Obviously, change \u201cexample\u201d and \u201csecret\u201d to your own credentials.","title":"10.5.1 SendGrid"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1052-mailchimp","text":"When visitors sign up to receive a newsletter, we\u2019ll add them to a MailChimp list. Add an environment variable for the MailChimp API key: MAILCHIMP_API_KEY . Sign in to MailChimp to get your API key. Click your name at the top of the navigation menu, then click \u201cAccount.\u201d Click \u201cExtras,\u201d then \u201cAPI keys.\u201d You have to generate an API key; MailChimp doesn\u2019t create one automatically. The MailChimp API key is a long string of characters like a secret code that works like a password. Enter it in your .bash_profile or .bashrc file: export MAILCHIMP\\_API\\_KEY=\"Your\\_MailChimp\\_API\\_Key\" You\u2019ll need to create a MailChimp mailing list in preparation for our \u201cMailing List\u201d chapter. Have you already created a MailChimp mailing list? If not, the MailChimp \u201cLists\u201d page has a button for \u201cCreate List.\u201d The list name and other details are up to you. We\u2019ll need the MAILCHIMP_LIST_ID for the mailing list you\u2019ve created. To find the list ID, on the MailChimp \u201cLists\u201d page, click the \u201cdown arrow\u201d for a menu and click \u201cSettings.\u201d At the bottom of the \u201cList Settings\u201d page, you\u2019ll find the unique ID for the mailing list. export MAILCHIMP\\_LIST\\_ID=\"Your\\_List\\_ID\" Your environment variables are set up to use MailChimp.","title":"10.5.2 MailChimp"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1053-owner-email","text":"You\u2019ll send email messages to this address when a visitor submits a contact request form. Set OWNER_EMAIL with an email address where you receive mail. export OWNER\\_EMAIL=\"[\\[email protected\\]](/cdn-cgi/l/email-protection)\" Enter an email address and your environment variables will be set up with the site owner email address.","title":"10.5.3 Owner Email"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1054-restart-the-terminal-session","text":"Close and reopen your terminal to make sure the environment is updated with any recent changes.","title":"10.5.4 Restart the Terminal Session"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1055-troubleshooting","text":"Check that the SendGrid user name is set in your Unix environment variables: $ echo \"$SENDGRID\\_USERNAME\" You should see your SendGrid user name in the console response. Make sure you\u2019ve used underscores consistently and you\u2019ve used SENDGRID_USERNAME not SENDGRID_USER_NAME . If you have trouble, remember to close and reopen your terminal to make sure the environment includes any recent changes. On Linux, if you\u2019ve entered the environment variables in your .bashrc file but they don\u2019t seem to work, try setting them in your .bash_profile file instead. If you\u2019ve set up Unix environment variables but echo \"$SENDGRID_USERNAME\" doesn\u2019t return the correct variable in the console, you may have a problem with the way you\u2019ve set Unix environment variables. Most computers use the bash shell and you can set environment variables in your .bash_profile or .bashrc files. But not every system is alike. If it seems Unix environment variables are not working, you may have to find a colleague who can help you troubleshoot. If you are having problems, you can continue with the tutorial and add the credentials directly to the config/secrets.yml file.","title":"10.5.5 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#106-the-secrets-file","text":"Use your text editor to add the Unix environment variables to the file config/secrets.yml : # Be sure to restart your server when you modify this file. # Your secret key is used for verifying the integrity of signed cookies. # If you change this key, all old signed cookies will become invalid! # Make sure the secret is at least 30 characters and all random, # no regular words or you'll be exposed to dictionary attacks. # You can use \\`rails secret\\` to generate a secure secret key. # Make sure the secrets in this file are kept private # if you're sharing your code publicly. # Shared secrets are available across all environments. # shared: # api\\_key: a1B2c3D4e5F6 # Environmental secrets are only available for that specific environment. development: email\\_provider\\_username: <%= ENV\\[\"SENDGRID\\_USERNAME\"\\] %> email\\_provider\\_password: <%= ENV\\[\"SENDGRID\\_PASSWORD\"\\] %> domain\\_name: example.com mailchimp\\_api\\_key: <%= ENV\\[\"MAILCHIMP\\_API\\_KEY\"\\] %> mailchimp\\_list\\_id: <%= ENV\\[\"MAILCHIMP\\_LIST\\_ID\"\\] %> owner\\_email: <%= ENV\\[\"OWNER\\_EMAIL\"\\] %> secret\\_key\\_base: very\\_long\\_random\\_string test: secret\\_key\\_base: very\\_long\\_random\\_string # Do not keep production secrets in the unencrypted secrets file. # Instead, either read values from the environment. # Or, use \\`bin/rails secrets:setup\\` to configure encrypted secrets # and move the \\`production:\\` environment over there. production: email\\_provider\\_username: <%= ENV\\[\"SENDGRID\\_USERNAME\"\\] %> email\\_provider\\_password: <%= ENV\\[\"SENDGRID\\_PASSWORD\"\\] %> domain\\_name: example.com mailchimp\\_api\\_key: <%= ENV\\[\"MAILCHIMP\\_API\\_KEY\"\\] %> mailchimp\\_list\\_id: <%= ENV\\[\"MAILCHIMP\\_LIST\\_ID\"\\] %> owner\\_email: <%= ENV\\[\"OWNER\\_EMAIL\"\\] %> secret\\_key\\_base: <%= ENV\\[\"SECRET\\_KEY\\_BASE\"\\] %> Be sure to use spaces, not tabs. Make sure there is a space after each colon and before the value for each entry or you will get a message \u201cInternal Server Error: mapping values are not allowed\u201d when you start the web server. You used quotes to surround configuration values in the **.bashrc** or **.bash\\_profile** files. Here, in the **config/secrets.yml** file, you don\u2019t need quotes when you are importing Unix environment variables.","title":"10.6 The Secrets File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1061-domain-name","text":"We\u2019ll need a domain name when we configure email for delivery in production. For development, use example.com . If you have your own domain name, you can use that instead. There\u2019s no need to keep the domain_name configuration variable secret, so we don\u2019t need to set it in a Unix environment variable. You can decide for yourself if the owner_email variable really needs to be secret. Just for caution, I\u2019m suggesting you set it as a Unix environment variable.","title":"10.6.1 Domain Name"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1062-securing-the-secrets-file","text":"Some developers take steps to prevent the config/secrets.yml file from being checked into Git. To prevent the file from being saved to your repo you could add the filename to the .gitignore file in your application root directory. However, you don\u2019t need to keep the config/secrets.yml file from being checked into Git if you\u2019ve used Unix environment variables in the config/secrets.yml file. If you only reveal the SECRET_KEY_BASE used for development or testing, and no one can access your development machine, no useful secrets will be revealed in your GitHub repo. When you deploy to Heroku, the config/secrets.yml file must be in your Git repository. For that reason, I suggest you save the file in your Git repo and keep your secrets safe by using environment variables.","title":"10.6.2 Securing the Secrets File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1063-troubleshooting","text":"Remember, in YAML files (with the file extension .yml ), indentation is required (your application will break without it). Be sure to use spaces, not tabs. Make sure there is a space after each colon and before the value for each entry. If you have trouble setting Unix environment variables, you can add credentials directly to the config/secrets.yml file. If you do so, you should not check the file into Git until you\u2019ve deleted the secrets from the file. Replace the following if you are troubleshooting: development: email\\_provider\\_username: <%= ENV\\[\"SENDGRID\\_USERNAME\"\\] %> email\\_provider\\_password: <%= ENV\\[\"SENDGRID\\_PASSWORD\"\\] %> with: development: email\\_provider\\_username: example email\\_provider\\_password: 's#cr\\*t' In a YAML file, you do not need quotes unless your string contains special characters. If your password contains any of these characters you should surround the string with single quotes: : { } [ ] & * # ? | - < > = ! % @ \\ Again, DON\u2019T CHECK THE FILE INTO GIT if you\u2019ve hardcoded your credentials directly in the config/secrets.yml file. The article Rails Environment Variables shows alternatives to using Unix environment variables, if for any reason you cannot set environment variables on your machine.","title":"10.6.3 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#107-secret-key-base","text":"It\u2019s not necessary to set SECRET_KEY_BASE as an environment variable on the computer you use for development. Rails generates a unique SECRET_KEY_BASE in the config/secrets.yml file each time you create a new Rails application and you don\u2019t need to replace it. If someone sees the SECRET_KEY_BASE in the config/secrets.yml file in your GitHub repo, there isn\u2019t anything they can do with it, since they don\u2019t have access to your local machine. For your future reference, in case you want to change the SECRET_KEY_BASE , here\u2019s how. Go to your Rails application directory and create a new secret token: $ rails secret very\\_long\\_random\\_string And, if you wish, add it to your .bash_profile or .bashrc file: export SECRET\\_KEY\\_BASE=\"very\\_long\\_random\\_string\" You should always use the environment variable <%= ENV[\"SECRET_KEY_BASE\"] %> in the production section of your config/secrets.yml file, otherwise, someone who sees the secret token in your GitHub repo can gain access to your application in production. You\u2019ll set the environment variables for production when you deploy to Heroku.","title":"10.7 Secret Key Base"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#108-configure-email","text":"Email messages are visible in the console and the log file when you test the application. If you don\u2019t want to actually send email, you can skip this step. But it\u2019s more fun when your application can actually send email. You can learn more in the article Send Email with Rails .","title":"10.8 Configure Email"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1081-connect-to-an-email-server","text":"Web servers don\u2019t send email. Our Rails application has to connect to an email server (also known as a mail transfer agent or \u201cmail relay\u201d). In the early days of the Internet, an experienced system administrator could set up an SMTP server to distribute email. Now, because of efforts to reduce spam, it is necessary to use an established email service to ensure deliverability. In production, for high volume transactional email and improved deliverability, it is best to use a service such as SendGrid . Alternatives are: Amazon SES (Simple Email Service) Mailgun Mailjet Mandrill PostageApp Postmark SparkPost For our tutorial application, we\u2019ll connect to SendGrid to send email. For convenience during development, some developers use their own Gmail account to send email. Google has increased security measures for Gmail, so it is difficult to use Gmail to send email from a Rails application. SendGrid is easier to set up and you\u2019re more likely to use it for a real application. That\u2019s why we\u2019ll use it. In the file config/environments/development.rb , near the end of the file, find the statement: config.assets.debug \\= true Immediately following, add this: config.action\\_mailer.smtp\\_settings \\= { address: \"smtp.sendgrid.net\", port: 587, domain: Rails.application.secrets.domain\\_name, authentication: \"plain\", enable\\_starttls\\_auto: true, user\\_name: Rails.application.secrets.email\\_provider\\_username, password: Rails.application.secrets.email\\_provider\\_password } # ActionMailer Config config.action\\_mailer.default\\_url\\_options \\= { :host \\=> 'localhost:3000' } config.action\\_mailer.delivery\\_method \\= :smtp config.action\\_mailer.raise\\_delivery\\_errors \\= true # Send email in development mode? config.action\\_mailer.perform\\_deliveries \\= true You can use port 25, 587, or 2525 (some ISPs restrict connections on port 25). It\u2019s important to add these changes in the body of the configuration file, before the end keyword. The order isn\u2019t important but don\u2019t add the configuration statements after the end keyword. Notice that we are using configuration variables that are set in the config/secrets.yml file: Rails.application.secrets.email_provider_username Rails.application.secrets.email_provider_password We could \u201chard code\u201d a username and password here but that would expose confidential data if your GitHub repository is public. Using configuration variables that are set in the config/secrets.yml file keeps your secrets safe. Again, if you need to troubleshoot, you can enter the SendGrid username and password directly in this file instead of the configuration variables. But for security, don\u2019t commit to Git with the password hardcoded in this file.","title":"10.8.1 Connect to an Email Server"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1082-perform-deliveries-in-development","text":"If you want to send real messages when you test the application in development mode, modify the file config/environments/development.rb . After the code you just added, add the statement: # Send email in development mode? config.action\\_mailer.perform\\_deliveries \\= true This changes the configuration to send email when you\u2019re working on the application. Make sure any code you\u2019ve added to the config/environments/development.rb file is placed before the final end keyword. If you add code after the final end keyword, your application will fail with errors when you start the web server. Later, after we add a contact form to the tutorial application, the application will be ready to send email messages.","title":"10.8.2 Perform Deliveries in Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#109-git","text":"Make sure you\u2019re in your application root directory. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add configuration\" $ git push We\u2019re ready to create a home page for the application.","title":"10.9 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-11-static-pages-and-routing","text":"A Rails application can deliver static web pages just like an ordinary web server. The pages are delivered fast and no Ruby code is required. We\u2019ll look at simple static pages and learn about Rails routing before we explore the complexities of dynamic web pages in Rails.","title":"Chapter 11 Static Pages and Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#111-add-a-home-page","text":"Make sure you are in your project directory. Start the application server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see the Rails default information page. For the next step, you\u2019ll need to know how to use a text editor such as Atom or Sublime Text . You can find free tutorials on YouTube. Or, if you prefer a book, try Michael Hartl\u2019s Learn Enough Text Editor to Be Dangerous . Use your text editor to create and save a file public/index.html : <h1>Hello World</h1> Refresh the browser window and you\u2019ll see the \u201cHello World\u201d message. The Rails application server looks for any pages in the public folder by default. If no filename is specified in the URL, the server will attempt to respond with a file named index.html . This is a convention that dates to 1993; if no filename was specified, one of the first web servers ever built (the NCSA httpd server) would return a list of all files in the directory, unless a file named index.html was present. Since then, index.html has been the default filename for a home page.","title":"11.1 Add a Home Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#112-routing-error","text":"What happens when no file matches the requested web address? Enter the URL http://localhost:3000/about.html in your browser. You\u2019ll see an error page that shows a routing error. If you are using Cloud9, add \u201c/about.html\u201d to the URL in the preview browser window.","title":"11.2 Routing Error"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#113-add-an-about-page","text":"Use your text editor to create and save a file public/about.html : <h1>About</h1> Visit the URL http://localhost:3000/about.html in your browser. You\u2019ll see the new \u201cAbout\u201d page. By the way, you\u2019ve just done test-driven development (TDD).","title":"11.3 Add an About Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1131-introducing-tdd","text":"With test-driven development, a developer tests behavior before implementing a feature, expecting to see an error condition. Then the developer implements the feature and sees a successful result to the test. That\u2019s exactly what you\u2019ve done, in the simplest way. Beginners tend to think TDD is scary and complicated. Now that you\u2019ve experienced a simple form of TDD, maybe it won\u2019t be intimidating. Real TDD means writing tests in Ruby before implementing features, but the principle is the same.","title":"11.3.1 Introducing TDD"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#114-introducing-routes","text":"The guiding principle of \u201cconvention over configuration\u201d governs Rails routing. If the web browser requests a page named \u201cindex.html\u201d, Rails will deliver the page from the public folder by default. No configuration is required. But what if you want to override the default behavior? Rails provides a configuration file to control web request routing. If you\u2019ve got only one terminal window open, you\u2019ll have to stop the Rails server with Control-c to get your terminal prompt. Here is where it is helpful to have two terminal sessions going in different tabs. Let\u2019s set the \u201cAbout\u201d page as the home page. Open the file config/routes.rb . Remove all the comments and replace the file with this: Rails.application.routes.draw do root to: redirect('/about.html') end This snippet of Rails routing code takes any request to the application root ( http://localhost:3000/ ) and redirects it to the about.html file (which is expected to be found in the public folder). There is no need to restart your application server to see the new behavior. If you need to start the server: $ rails server Visit the page http://localhost:3000/ . You\u2019ll see the \u201cAbout\u201d page. If you still see the \u201cHello World\u201d page, you didn\u2019t remove the the public/index.html file. Rails will use the index file in the public folder before it checks the routing file for a redirect. You\u2019ve just seen an example of Rails magic. Some developers complain that the \u201cconvention over configuration\u201d principle is black magic. It\u2019s not obvious why pages are delivered from the public folder; it just happens. If you don\u2019t know the convention, you could be left scratching your head and looking for the code that maps http://localhost:3000/ to the public/index.html file. The code is buried deep in the Rails framework. However, if you know the convention and the technique for overriding it, you have both convenience and power at your disposal.","title":"11.4 Introducing Routes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#115-using-the-about-page","text":"We\u2019ve created an \u201cAbout\u201d page so we can learn about routing. For the next chapter, we\u2019ll use the static \u201cAbout\u201d page to investigate how a web application works. Later in the tutorial we\u2019ll create a new \u201cAbout\u201d page using a different approach.","title":"11.5 Using the \u201cAbout\u201d Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-12-request-and-response","text":"You\u2019ve configured the tutorial application, created static pages, and seen the magic of Rails routing. In this chapter, we\u2019ll investigate the web request-response cycle and look at the model-view-controller design pattern so you\u2019ll be prepared to build a dynamic home page.","title":"Chapter 12 Request and Response"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#121-investigating-the-request-response-cycle","text":"Remember, at its core, the World Wide Web is nothing more than web browsers that request files from web servers. Web browsers make requests . A web server responds to a request by sending an HTML file. Depending on the headers in the HTML file, the web browser may make additional requests and get additional CSS, JavaScript, and image files. The beauty and simplicity of the World Wide Web architecture, as conceived by Tim Berners-Lee in 1990, is that the web is nothing more than a request from a web browser and a response from a web server. Some web pages now include streaming video, or music, requiring an open \u201cpipe\u201d between the web server and the web browser, but even so, an initial request-response cycle delivers the page that sets up the stream. We can reduce the mystery of how the web works to its simplest components when we investigate the request-response cycle. We\u2019ll see that everything that happens in a web application takes place within the flow of the request-response cycle. Let\u2019s look at the request-response cycle. Figure 12.1: The request-response cycle.","title":"12.1 Investigating the Request Response Cycle"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1211-inside-the-browser","text":"We can see the actual request, and the actual response, by using the diagnostic tools built into the web browser. Start the application server if it is not already running: $ rails server Developers use various web browsers during development. I\u2019ll provide instructions for Chrome, since it is the most popular. Even if you prefer Mozilla Firefox or Apple Safari, try this in Chrome, so you can follow along with the text. Start our investigation by putting Chrome into \u201cIncognito Mode\u201d with Command-Shift-N (on a Mac). On Linux, use Ctrl-Shift-N to get in incognito mode with Chrome. Alternatively, you can clear the browser cache. This clears any files that were previously cached by the browser. The Developer Tools view is your primary diagnostic tool for front-end (browser-based) development, including CSS and JavaScript. In Chrome on macOS, press Command-Option-I to open the Developer Tools View in a section of the browser window. Alternatively, you can find the menu item under View/Developer/Developer Tools. In Chrome on Windows or Linux platforms, press Shift-Ctrl-I or select Menu/Tools/Developer Tools. Initiate the request-response cycle by visiting the \u201cAbout\u201d page at http://localhost:3000/about.html . In the Developer Tools view, under the Network tab, you\u2019ll see files received by the browser from the web server. There is only one: \u201cabout.html\u201d. This is the file that the browser evaluates to display a web page. Figure 12.2: Viewing a request in the Developer Tools View. Be sure to select the Network tab in the Developer Tools view. Click the \u201cabout.html\u201d file icon. Then click the tab \u201cHeaders.\u201d The diagnostic window shows the entire request sent to the server and the entire response received by the browser. Figure 12.3: Viewing request headers in the Developer Tools View. Under the heading \u201cGeneral,\u201d you can see the request is composed of: request URL (http://localhost:3000/about.html) request method (GET) status code (200 OK or 304 Not Modified) You can also see request and response headers: request headers (including the User Agent identifier) response headers (including last-modified date/time) You can see the HTML sent to the browser by clicking the Preview or Response tabs in the view under the Network tab. Here\u2019s the point of the exercise: The browser\u2019s Developer Tools view shows all the data exchanged between the browser and server. You\u2019re looking at everything that passes through the plumbing.","title":"12.1.1 Inside the Browser"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1212-inside-the-server","text":"The browser\u2019s Developer Tools view doesn\u2019t show you what happens on the server. For that, go to the server logs or the console window. Started GET \"/\" for ::1 at ... Notice how the diagnostic messages in the console window match the headers in the browser Developer Tools view. The browser\u2019s \u201cRequest Method:GET\u201d matches the server\u2019s \u201cStarted GET.\u201d Notice there are no console log messages for pages delivered from the public folder. Soon we\u2019ll see much more in the console window, after we\u2019ve built a dynamic web page that is assembled by the application server.","title":"12.1.2 Inside the Server"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#122-how-the-browser-works","text":"What happens after the browser receives a response from the server? The response is not complete until all files are received (or the browser reaches a time-out limit). Modern browsers retrieve files asynchronously; the order and location of the files in the initial HTML file doesn\u2019t matter because the browser will try to load all the files before displaying the page.","title":"12.2 How the Browser Works"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1221-document-object-model","text":"When the web browser receives an HTML file, it creates an internal representation of the page in computer memory, called the Document Object Model (DOM). It provides a structural representation of the document. The DOM works like an API for HTML documents, allowing you to modify the content and visual presentation of the page by using JavaScript. Later in the tutorial, we\u2019ll see how a JavaScript library such as jQuery can be used to do things like hiding or revealing HTML elements on a page by manipulating the DOM.","title":"12.2.1 Document Object Model"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1222-rendering","text":"Each time the DOM changes, the browser engine converts the DOM to a visual representation of the page and renders it in the browser window. Knowing about the DOM will help you understand what happens in the browser when it receives a web response. And understanding the DOM will help you work with JavaScript for front-end programming. But in this book, our focus is on building a server-side web application in Rails. Let\u2019s see how a Rails application responds to a web request.","title":"12.2.2 Rendering"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#123-how-the-application-works","text":"Now that we\u2019ve investigated the request-response cycle, let\u2019s dig deeper to understand what happens inside the Rails application in response to a browser request. To do so, we\u2019ll need to understand the model\u2013view\u2013controller concept.","title":"12.3 How the Application Works"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1231-video-option","text":"This eight minute video introduces the model\u2013view\u2013controller concept: Model View Controller in Rails - Best Explanation - YouTube","title":"12.3.1 Video Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1232-the-model-view-controller-concept","text":"The model\u2013view\u2013controller concept is key to understanding how a Rails application responds to a browser request. Here is a diagram that shows what happens in the server during the request-response cycle. Figure 12.4: Model\u2013View\u2013Controller in Rails. You learned earlier that, from the perspective of a software architect, Rails is organized to conform to the model\u2013view\u2013controller software design pattern. This enforces \u201cseparation of concerns\u201d to keep code manageable and organized. The MVC design pattern is optimal for web applications and is a central organizing principle for Rails. The MVC design pattern originated in the design of desktop applications. \u201cModel\u201d classes manipulated data; \u201cview\u201d classes created the user interface; and a \u201ccontroller\u201d class responded to user interaction. Some computer scientists feel the architecture of web applications doesn\u2019t quite match the original MVC design pattern of desktop applications. We can see the reason for the quibble in the next diagram. The diagram shows the MVC architecture as part of the Rails software stack. At the base of the stack is the web browser. A request flows upward through the layers and encounters the router which dispatches the request to an appropriate controller. In a Rails application, there is a single routing file, config/routes.rb , and multiple controllers, models, and views. Figure 12.5: Model\u2013View\u2013Controller stack in Rails. Considering the importance of the router, perhaps we should call our Rails architecture the RCMV , or Routing-Controller-Model-View, pattern. Despite the quibble about nomenclature, the architecture is well understood and used by all Rails developers. Here\u2019s the step-by-step walk-through of what happens. When the web browser makes a request, a router component will check the config/routes.rb file and determine which controller should handle the request, based on the web address and HTTP protocol. The controller will obtain any needed data from a model . After obtaining data, the controller will render a response combining data from the model with a view component that provides markup and layout. The response is an HTML file that the controller assembles for the browser to display. The model, view, and controller are files you create containing Ruby code. Each file has a certain structure and syntax based on foundation model, view, and controller classes defined in the Rails framework. The model, view, and controller classes you create will inherit behavior from parent classes that are part of the framework, so you will have less code to write yourself. In most Rails applications, a model obtains data from a database, though some models obtain data from a remote connection to another server. For example, a User model might retrieve a user name and email address from a local database. A User model could also obtain a user\u2019s recent tweets from Twitter or a user\u2019s hometown from Facebook. The controller can obtain data from more than one model if necessary. A controller can have more than one action . For example, a User controller might have actions to display a list of users, or add or delete a user from a list. The config/routes.rb file matches a web request to a controller action. In the software architects\u2019 terminology, each action is a method of the controller class . We use the terms action and method interchangeably when we talk about a Rails controller; to be precise, controller actions are implemented as methods. In practice, Rails developers try to limit controllers to seven standard actions: index , show , new , create , edit , update and destroy actions. A controller that offers these actions is said to be \u201cRESTful\u201d (a term that refers to representational state transfer , another software design abstraction). It\u2019s not important to understand the abstract principles of RESTful design; recognizing the term and knowing that Rails controllers have seven standard actions is sufficient for beginners. A view file combines Ruby code with HTML markup. Typically there will be a view file associated with each controller action that displays a page. An index view might show a list of users. A \u201cshow\u201d view might provide details of a user\u2019s profile. View files look much like ordinary HTML files but typically contain data in the form of Ruby variables. Often you\u2019ll see Ruby statements such as blocks that iterate through lists to create tables. Following the \u201cseparation of concerns\u201d principle, it is considered good practice to limit Ruby code in view files to only displaying data; anything else belongs in a model. Not every controller action has its own view file. In many controllers, on completion, the destroy action will redirect to the index view, and create will redirect to either show or new . This conceptual overview will be easier to grasp when you actually see the code for a model, view, and controller. We\u2019ll create model, view, and controller files in the next chapter.","title":"12.3.2 The Model View Controller Concept"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#124-remove-the-about-page","text":"We\u2019ve been using the static \u201cAbout\u201d page to investigate the request-response cycle. We\u2019re done, so delete the file public/about.html : $ rm public/about.html Earlier, we set up the config/routes.rb file. You can leave it in place. We\u2019ll change it in the next chapter. Now we\u2019ll look at ways to implement the home page using the full power of Rails.","title":"12.4 Remove the About Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-13-dynamic-home-page","text":"Earlier, we saw how Rails can deliver simple static web pages. Here we\u2019ll build a dynamic home page, illustrating basic concepts you\u2019ll need to understand Rails.","title":"Chapter 13 Dynamic Home Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#131-user-story","text":"We\u2019ll plan our work with a user story: *Birthday Countdown* As a visitor to the website I want to see the owner's name I want to see the owner's birthdate I want to see how many days until the owner's next birthday In order to send birthday greetings This silly home page will help us explore Rails and learn about the Ruby language. Our goal is to build a practical web application that you can really use. Later we\u2019ll replace this silly home page with a useful web page that encourages visitors to sign up for a mailing list.","title":"13.1 User Story"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#132-routes-model-view-and-controller","text":"We\u2019ll use the model-view-controller design pattern as we build our new home page. First, we\u2019ll set up a route so a request URL gets directed to the appropriate controller. We\u2019ll set up a model so we obtain data we need for the home page. We\u2019ll set up a view that contains the HTML needed to display our home page. And finally, we\u2019ll create a controller that responds to the request, obtaining data from the model and rendering the view, sending a response to the web browser. We can create the routes, model, view, and controller in any order. All must exist before our web application will respond to a request for a home page. In this tutorial, I\u2019ve chosen to create the routes, model, view, and controller in an order that is convenient for learning.","title":"13.2 Routes, Model, View, and Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#133-the-name-game","text":"Much of the art of programming lies in choosing suitable names for our creations. We\u2019ll need a model as a source for data about the site owner. Choosing the most obvious name, we\u2019ll call it the Owner model: Owner - the file will be app/models/owner.rb What about a name for the controller that will render our home page? How about \u201cHome controller\u201d or \u201cWelcome controller?\u201d Those names are acceptable. But if we consider our user story, the name \u201cVisitors controller\u201d is best. A visitor is the actor, so \u201cVisitors controller\u201d is appropriate: VisitorsController - the file will be app/controllers/visitors_controller.rb Later we\u2019ll see this is a good choice because we\u2019ll create a Visitor model to handle data about the website visitor. In Rails, there is often a model with the same name as a controller (though a controller can use data from multiple models).","title":"13.3 The Name Game"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#134-naming-conventions","text":"Rails is picky about class names and filenames. That\u2019s because of the \u201cconvention over configuration\u201d principle. By requiring certain naming patterns, Rails avoids complex configuration files. Before we look at class and filename conventions, here\u2019s a note about typographic terminology: a string is a sequence of characters you\u2019re looking at an example of lowercase strings separated by spaces (words!) Titlecase means there is an Initial Capital Letter in a string CamelCase contains a capital letter in the middle of a string snake_case combines words with an underscore character instead of a space When you write code, you\u2019ll follow rules for class names: class Visitor - the model class name is capitalized and singular class VisitorsController < ApplicationController - for a controller, combine a pluralized model name with \u201cController\u201d in CamelCase Here are the rules for filenames. They are always lowercase, with words separated by underscores (snake_case): the model filename matches the model class name, but lowercase, for example app/models/visitor.rb the controller filename matches the controller class name, but snake_case, for example app/controllers/visitors_controller.rb the views folder matches the model class name, but plural and lowercase, for example app/views/visitors At first the rules may seem arbitrary, but with experience they will make sense. The rule about no capital letters or spaces in filenames has its origins in computer antiquity. If you stray from these naming conventions, you\u2019ll encounter unexpected problems and frustration.","title":"13.4 Naming Conventions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#135-routing","text":"We\u2019ll create the route before we implement the model and controller. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do root to: 'visitors#new' end Any request to the application root ( http://localhost:3000/ ) will be directed to the VisitorsController new action. Don\u2019t be overly concerned about understanding the exact syntax of the code. It will become familiar soon and you can look up the details in the reference documentation, RailsGuides: Routing from the Outside In . In general, when you change a configuration file you must restart your application server. However, the config/routes.rb file is an exception. You don\u2019t need to restart the server after changing routes. If you need to start the server: $ rails server Visit the page http://localhost:3000/ . You\u2019ll see an error message because we haven\u2019t implemented the controller. The error message, \u201cuninitialized constant VisitorsController,\u201d means Rails is looking for a VisitorsController and can\u2019t find it.","title":"13.5 Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#136-model","text":"Most Rails models obtain data from a database. When you use a database, you can use the rails generate model command to create a model that inherits from the ActiveRecord class and knows how to connect to a database. To keep things simple, our tutorial application doesn\u2019t need a database. Instead of inheriting from ActiveRecord, we create a Ruby class with methods that return the owner\u2019s name, birthdate, and days remaining until his birthday. This simple class provides an easy introduction to Ruby code. Create a file app/models/owner.rb (don\u2019t include the colon punctuation that follows): class Owner def name name \\= 'Foobar Kadigan' end def birthdate birthdate \\= Date.new(1990, 12, 22) end def countdown today \\= Date.today birthday \\= Date.new(today.year, birthdate.month, birthdate.day) if birthday \\> today countdown \\= (birthday \\- today).to\\_i else countdown \\= (birthday.next\\_year \\- today).to\\_i end end end This is your first close look at Ruby code. The oddest thing you\u2019ll see is the owner\u2019s name, \u201cFoobar Kadigan.\u201d Everything else will make sense with a bit of explanation. Keep in mind that we are using a text file to create an abstraction that we can manipulate in the computer\u2019s memory. Software architects call these abstractions objects . In Ruby, everything we create and manipulate is an object . To distinguish one object from another, we define it as a class , give it a class name , and add behavior in the form of methods . The first line class Owner defines the class and assigns a name. At the very end of the file, the end keyword completes the class definition. We define three methods, starting with def (for \u201cmethod definition\u201d) and ending with end . def name \u2026 end def birthdate \u2026 end def countdown \u2026 end Each method contains simple Ruby code that assigns data to a variable. Later, we\u2019ll retrieve the data for use in our view file by instantiating the class and calling a method. Don\u2019t be discouraged by the software architects\u2019 terminology; the concepts are simple and we\u2019ll soon see everything in action. Ruby makes it easy for a method to return data when called; the value assigned by the last statement will be delivered when the method is called. Looking more closely at the Ruby code inside the method definitions, you\u2019ll see Ruby uses the = (equals) sign to assign values to a variable. The variable is named on the left side of the equals sign; a value is assigned on the right side. We call the equals sign an assignment operator . We can assign any value to a variable, including a string (a series of characters that can be a word or name) such as \u201cFoobar Kadigan.\u201d Ruby recognizes a string when characters are enclosed in single or double quotes. Not surprisingly, a number also can be assigned to a variable, either a whole number (an integer ) or a decimal fraction (a float ). More interestingly, any Ruby object can be assigned to a variable. That helps us \u201cmove around\u201d any object very easily, giving us access to the object\u2019s class methods anywhere we use the variable. We can create our own objects, as we have by creating the Owner class. Or we can use the library of objects that are supplied with Ruby. Ruby\u2019s prefabricated objects are defined by the Ruby API ( application programming interface ); essentially the API is a catalog of prebuilt classes that are building blocks for any application. The Rails API gives us additional classes that are useful for web applications. Learning the syntax of Ruby code gets you started with Ruby programming; knowing the API classes leads to mastery of Ruby. The Date class is provided by the Ruby API. It is described in the Ruby API reference documentation . The Date class has a Date.new method which instantiates (creates) a new date when supplied with year, month, and day parameters . You can see this syntax when we assign Date.new(1990, 12, 22) to the birthdate variable. Note that Ruby has specific expectations about the syntax of numbers. The Date.new(...) method expects integers. Imagine a September birthday. You must use Date.new(1990, 9, 22) . If you enter a date in the format Date.new(1990, 09, 22) , you\u2019ll get a syntax error \u201cInvalid octal digit\u201d when you test the application. Ruby expects numbers that begin with zero to be octal numbers ; you\u2019ll get an error because octal numbers can\u2019t contain the digit \u201c9.\u201d Our countdown method contains the most complex code in the class. First, we set a variable today with today\u2019s date. The Date.today method creates an object that represents the current date. When the Date.today method is called, Ruby gets the current date from the computer\u2019s system clock. Next we create a birthday variable and assign a new date that combines today\u2019s year with the month and day of the birthdate . This gives us the date of Foobar Kadigan\u2019s birthday this year. The Date class can perform complex calendar arithmetic. The variables birthdate and today are instances of the Date class. We can use a greater-than operator to determine if Foobar Kadigan\u2019s birthday is in the future or the past. The if ... else ... end structure is a conditional statement . If the birthday is in the future, we subtract today from birthday to calculate the number of days remaining until the owner\u2019s birthday, which we assign to the countdown variable. If the birthday has already passed, we apply a next_year method to the birthday to get next year\u2019s birthday. Then we subtract today from birthday.next_year to calculate the number of days remaining until the owner\u2019s birthday, which we assign to the countdown variable. The result might be fractional so we use the utility method to_i to convert the result to a whole number (integer) before assigning it to the countdown variable. This shows you the power of programming in Ruby. Notice that I needed 16 paragraphs and over 600 words to explain 15 short lines of code. We used only seven Ruby abstractions but they represent thousands of lines of code in the Ruby language implementation. With knowledge of Ruby syntax and the Ruby API, a few short lines of code in a text file gives us amazing ability. In an upcoming chapter, we\u2019ll look more closely at the syntax and keywords of the Ruby language. But without knowing more than this, we can build a simple web application. Let\u2019s see how we can put this functionality to use on a web page.","title":"13.6 Model"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#137-view","text":"The Owner model provides the data we want to see on the Home page. We\u2019ll create the markup and layout in a View file and add variables that present the data. View files go in folders in the app/views/ directory. In a typical application, one controller can render multiple views, so we make a folder to match each controller. You can make a new folder using your file browser or text editor. Or use the Unix mkdir command: $ mkdir app/views/visitors Create a file app/views/visitors/new.html.erb (don\u2019t include the colon punctuation that follows): <h3>Home</h3> <p>Welcome to the home of <%= @owner.name %>.</p> <p>I was born on <%= @owner.birthdate %>.</p> <p>Only <%= @owner.countdown %> days until my birthday!</p> We\u2019ve created a visitors/ folder within the app/views/ directory. We have only a single new view but if we had more views associated with the Visitors controller, they\u2019d go in the app/views/visitors/ folder. We name our View file new.html.erb , adding the .erb file extension so that Rails will use the ERB templating engine to interpret the markup. There are several syntaxes that can be used for a view file. In this tutorial, we\u2019ll use the ERB syntax that is most commonly used by beginners. Some experienced developers prefer to add gems that provide the Haml or Slim templating engines. As you might guess, a View that uses the Haml templating syntax would be named new.html.haml . Our HTML markup is minimal, using only the <h3> and <p> tags. The only ERB markup we add are the <%= ... %> delimiters. This markup allows us to insert Ruby code which will be replaced by the result of evaluating the code. In other words, <%= @owner.name %> will appear on the page as Foobar Kadigan. You may have noticed that we refer to the Owner model with the variable @owner . It will be clear when we create the Visitors controller why we use this syntax (a variable name that begins with the @ character is called an instance variable ). Obviously, if all we wanted to do was include the owner\u2019s name on the page, it would be easier to simply write the text. The Rails implementation becomes useful if the name is retrieved from a database or created programmatically. We can better see the usefulness of the Owner model when we look at the use of <= @owner.countdown %> . There is no way to display a calculation using only static HTML, so Rails gives us a way to display the birthday countdown calculation. If you\u2019re a programmer, you might wonder why we only output the variable on the page. Since we can use ERB to embed any Ruby code, we could perform the calculation right on the page by embedding <%= (Date.new(today.year, @owner.birthdate.month, @owner.birthdate.day) - Date.today).to_i %> . If you\u2019ve used JavaScript or PHP, you may have performed calculations like this, right on the page. Rails would allow us to do so, but the practice violates the \u201cseparation of concerns\u201d principle that encourages us to perform complex calculations in a model and only display data in the view. Before we can display the home page, we need to create the Visitors controller.","title":"13.7 View"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#138-controller","text":"The Visitors controller is the glue that binds the Owner model with the VisitorsController#new view. Note: When we refer to a controller action, we use the notation \u201cVisitorsController#new,\u201d joining the controller class name with the action (method) that renders a page. In this context, the # character is only a documentation convention. Note: VisitorsController will be the class name and visitors_controller.rb will be the filename. The class name is written in camelCase (with a hump in the middle, like a camel) so we can combine two words without a space. Unix commands get messy when filenames include spaces so we create a filename that combines two words with an underscore (sometimes called \u201csnake_case\u201d). Create a file app/controllers/visitors_controller.rb (don\u2019t include the colon punctuation that follows): class VisitorsController < ApplicationController def new @owner \\= Owner.new end end We define the class and name it class VisitorsController , inheriting behavior from the ApplicationController class which is defined in the Rails API. We only need to define the new method. We create an instance variable named @owner and assign an instance of the Owner model. Any instance variables (variables named with the @ character) will be available in the corresponding view file. If we don\u2019t instantiate the Owner model, we\u2019ll get an error when the controller new action attempts to render the view because we use the @owner instance in the view file. Keep in mind the purpose of the controller. Each controller action (method) responds to a request by obtaining a model (if data is needed) and rendering a view. You\u2019ve already created a view file in the app/views/visitors folder. The new action of the VisitorsController renders the template app/views/visitors/new.html.erb . The new method is deceptively simple. Hidden behavior inherited from the ApplicationController does all the work of rendering the view. We can make the hidden code explicit if we wish to. It would look something like this: class VisitorsController < ApplicationController def new @owner \\= Owner.new render 'visitors/new' end end This is an example of Rails magic. Some developers complain this is black magic because the \u201cconvention over configuration\u201d principle leads to obscurity. Rails often offers default behavior that looks like magic because the underlying implementation is hidden in the depths of the Rails code library. This can be frustrating when, as a beginner, you want to understand what\u2019s going on. Revealing the hidden code, we see that invoking the new method calls a render method supplied by the ApplicationController parent class. The render method searches in the app/views/visitors directory for a view file named new (the file extension .html.erb is assumed by default). The code underlying the render method is complex. Fortunately, all we need to do is define the method and instantiate the Owner model. Rails takes care of the rest. As a beginner, simply accept the magic and don\u2019t confound yourself trying to find how it works. As you gain experience, you can dive into the Rails source code to unravel the magic.","title":"13.8 Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#139-scaffolding","text":"This tutorial aims to give you a solid foundation in basic concepts. The model\u2013view\u2013controller pattern is one of the most important. I\u2019ve found the best way to understand model\u2013view\u2013controller architecture is to create and examine the model, view, and controller files. As you continue your study of Rails, you\u2019ll find other tutorials that use the scaffolding shortcut. For example, Rails Guides: Getting Started with Rails includes a section \u201cGetting Up and Running Quickly with Scaffolding\u201d which shows how to use the rails generate scaffold command to create model, view, and controller files in a single operation. Students often use scaffolding to create simple Rails applications. In practice, I\u2019ve observed that working Rails developers seldom use scaffolding. There\u2019s nothing wrong with it; it just seems that scaffolding doesn\u2019t offer much that can\u2019t be done as quickly by hand.","title":"13.9 Scaffolding"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1310-test-the-application","text":"We\u2019ve created a model, view, and controller. Now let\u2019s run the application. Enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see our new home page. Figure 13.1: Dynamic home page shows days until a birthday. It\u2019s a very simple web page but it uses Ruby to calculate the countdown to the birthday. And the underlying code conforms to the conventions and structure of Rails.","title":"13.10 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1311-git","text":"At this point, you might have the Rails server running in your console window. We\u2019re going to run a git command in the console now. You might think you have to enter Control-c to shut down the server and get the command prompt. But that\u2019s not necessary. You can open more than one console view. Your terminal application lets you open multiple windows or tabs. If you open multiple tabs, you can easily switch between console views without using a lot of screen real estate. If you haven\u2019t tried it, now is a good time. On the Mac, Command+t opens a new tab in the terminal application. It is convenient to have a console tab open for the server and another for various Unix commands. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"dynamic home page\" $ git push Now let\u2019s take a look at troubleshooting.","title":"13.11 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-14-troubleshoot","text":"In the last chapter, we built a dynamic home page and learned about the model\u2013view\u2013controller architecture of Rails. There was a lot to learn, but the code was simple, and I hope it worked the first time you tried it. Before we do any more work on our tutorial application, we need to learn about troubleshooting and debugging. As a software developer, you\u2019ll spend a lot of time with code that doesn\u2019t work. You\u2019ll need tools and techniques to diagnose problems.","title":"Chapter 14 Troubleshoot"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#141-git","text":"In this chapter we\u2019ll make changes to the application just for troubleshooting. Before you get started, make sure the work you\u2019ve done is committed to your git repository. Use the git status command to check: $ git status You should see: On branch master nothing to commit, working directory clean If git status reports any uncommitted changes, go back to the last step in the previous chapter and commit your work to the git repository before continuing. At the end of this chapter, we\u2019re going to throw away the work we\u2019ve done in this chapter. We don\u2019t want to accidentally throw away work from the previous chapter so make sure it is committed to the repository.","title":"14.1 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#142-interactive-ruby-shell","text":"There will be times when you want to try a snippet of Ruby code just to see if it works. Your tool will be IRB, the Interactive Ruby shell. IRB is a Ruby interpreter that runs from the command line. It executes any Ruby code and provides an immediate response, allowing you to experiment in real-time. Let\u2019s try it. $ irb >> The command irb launches the program and displays a prompt that shows your Ruby version, a line number, and an arrow. I\u2019ll just show a simple prompt in the examples, instead. If you enter a valid Ruby expression, the interpreter will display the result of evaluating the expression. Try simple arithmetic: >> n \\= 2 => 2 >> n + 2 => 4 Wow! You are using your computer for simple math. Maybe you can delete the calculator app from your phone. IRB will evaluate any Ruby expression and helps you quickly determine if syntax and logic is correct.","title":"14.2 Interactive Ruby Shell"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1421-irb-for-blocks-of-code","text":"At first glance, it appears IRB works on just one line of code. Actually, IRB can handle multiple lines of code. Try it: >> n \\= 10 \\=> 10 >> if n < 10 >> puts \"small\" >> else ?> puts \"big\" >> end big \\=> nil >> Here we set n = 10 and then enter a conditional statement line-by-line. After we enter the final end , IRB interprets the code and outputs the result. You\u2019ll often enter more than one line of code in IRB. If you find yourself frustrated because you\u2019ve entered typos and had to enter the same code repeatedly, you can use IRB to load code you\u2019ve saved in a file: >> load './mytest.rb'","title":"14.2.1 IRB for Blocks of Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1422-quitting-irb","text":"It can be very frustrating to find you are stuck inside IRB. Unlike most shell commands, you can\u2019t quit with Control-c. Enter Control-d or type exit to quit IRB: $ irb >> exit","title":"14.2.2 Quitting IRB"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1423-learn-more-about-irb","text":"Here\u2019s an entertaining way to learn about IRB: Why\u2019s (Poignant) Guide to Ruby (with a Basic Introduction to IRB) Here\u2019s a more conventional way to learn about IRB: The Pragmatic Programmer\u2019s Guide","title":"14.2.3 Learn More About IRB"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1424-beyond-irb","text":"If you ask experienced Rails developers for help with IRB, they\u2019ll often recommend you switch to Pry. Pry is a powerful alternative to the standard IRB shell for Ruby. As you gain experience, you might take a look at Pry to see what the enthusiasm is all about. But for now, as a beginner trying out a few lines of Ruby code, there\u2019s no need to learn Pry.","title":"14.2.4 Beyond IRB"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#143-rails-console","text":"IRB only evaluates expressions that are defined in the Ruby API. IRB doesn\u2019t know Rails. It\u2019d be great to have a tool like IRB that evaluates any expression defined in the Rails API. The tool exists; it\u2019s called the Rails console. It is particularly useful because it loads your entire Rails application. Your application will be running as if the application was waiting to respond to a web request. Then you can expose behavior of any pieces of the web application. $ rails console ... Loading development environment (Rails 5.x.x) >> The Rails console behaves like IRB but loads your Rails development environment. The prompt shows it is ready to evaluate an expression. Let\u2019s use the Rails console to examine our Owner model: >> myboss \\= Owner.new => # We\u2019ve created a variable named myboss and created a new instance of the Owner class. The Rails console responds by displaying the unique identifier it uses to track the object. The identifier is not particularly useful, except to show that something was created. If you\u2019re unsure about the difference between an instance and a class , we\u2019ve just seen that we can make one or more instances of a class by calling the Owner.new method. When we specify the Owner class, the class definition is loaded into the computer\u2019s working memory (our development environment) from the class definition file on disk. Then we can use the Owner.new method to make one or more instances of the Owner class. Each instance is a unique object with its own data attributes but the same behavior as other objects instantiated from its class. Let\u2019s assign the name of our boss to a variable called name : >> name \\= myboss.name => \"Foobar Kadigan\" Our variable myboss is an instance of an Owner class so it responds to the method Owner.name by returning the owner\u2019s name. We want to show respect to our boss so we\u2019ll perform some string manipulation : >> name \\= 'Mr. ' + name => \"Mr. Foobar Kadigan\" We\u2019re done for now. When we quit the Rails console or shut down the computer the Owner class definition remains stored on disk but the instances disappear. The bits that were organized to create the variable name will evaporate into the ether. Actually, the bits are still there, in the form of logic states in the computer\u2019s chips, but they have no meaning until another program uses them. Enter Control-d or type exit to quit the Rails console. The Rails console is a useful utility. It is like a handy calculator for your code. Use it when you need to experiment or try out short code snippets.","title":"14.3 Rails Console"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#144-rails-logger","text":"As you know, a Rails application sends output to the browser that makes a web request. On every request, it also sends diagnostic output to the server log file . Depending on whether the application is running in the development environment or in production, the log file is here: log/development.log log/production.log In development, everything written to the log file appears in the console window after you run the rails server command. Scrolling the console window is a good way to see diagnostics for every request. Here\u2019s what you see in the log after you visit the application home page: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML Rendering visitors/new.html.erb within layouts/application Rendered visitors/new.html.erb within layouts/application (6.6ms) Completed 200 OK in 650ms (Views: 634.4ms | ActiveRecord: 0.0ms) You may have more than one console window open in the terminal application. If you don\u2019t see your log output in your terminal, check if you have tabs with other windows. Here\u2019s the best part. You can add your own messages to the log output by using the Rails logger. Let\u2019s try it out. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name end end Visit the home page again and you\u2019ll see this in the console output: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application Rendered visitors/new.html.erb within layouts/application (1.1ms) Completed 200 OK in 81ms (Views: 72.2ms | ActiveRecord: 0.0ms) If you really needed to do so, you could add a logger statement at every step in the application. You could see how the application behaves, step by step. And you could \u201cprint\u201d the value of every variable at every step. You\u2019ll never need diagnostics at this level of detail in Rails, but the logger is extremely useful when you are trying to understand unexpected behavior. Let\u2019s add logger statements to the Owner model. Modify the file app/models/owner.rb : class Owner def name name \\= 'Foobar Kadigan' end def birthdate birthdate \\= Date.new(1990, 12, 22) end def countdown Rails.logger.debug 'DEBUG: entering Owner countdown method' today \\= Date.today birthday \\= Date.new(today.year, birthdate.month, birthdate.day) if birthday > today countdown \\= (birthday - today).to_i else countdown \\= (birthday.next_year - today).to_i end end end We added the Rails.logger.debug statement to the Owner.countdown method. Visit the home page and here\u2019s what you\u2019ll see in the console output: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application DEBUG: entering Owner countdown method Rendered visitors/new.html.erb within layouts/application (0.7ms) Completed 200 OK in 69ms (Views: 61.1ms | ActiveRecord: 0.0ms) You\u2019ll often need to \u201cget inside\u201d the model or controller to see what\u2019s happening. The Rails logger is the best tool for the job. Here are some tricks for the Rails logger. In a controller, you can use the method logger on its own. In a model, you have to write Rails.logger (both class and method). You can use any of the methods logger.debug , logger.info , logger.warn , logger.error , or logger.fatal to write log messages. By default, you\u2019ll see any of these messages in the development log. Log messages written with the logger.debug method will not be recorded in a production log file. If you want your log messages to stand out, you can add formating code for color: Rails.logger.debug \"\\033[1;34;40m[DEBUG]\\033[0m \" + 'will appear in bold blue' For more about the Rails logger, see the RailsGuide: Debugging Rails Applications .","title":"14.4 Rails Logger"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#145-revisiting-the-request-response-cycle","text":"Earlier, when we investigated the request-response cycle, we looked in the server log to see the response to the web browser request. Now, with debug statements in the controller and model, we\u2019ll see messages showing the server\u2019s traverse of the model-view-controller architecture. Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application DEBUG: entering Owner countdown method Rendered visitors/new.html.erb within layouts/application (0.7ms) Completed 200 OK in 69ms (Views: 61.1ms | ActiveRecord: 0.0ms) Notice how the diagnostic messages in the console window match the headers in the browser Developer Tools view. The browser\u2019s \u201cRequest Method:GET\u201d matches the server\u2019s \u201cStarted GET.\u201d The browser\u2019s \u201cStatus Code: 200\u201d matches the server\u2019s \u201cCompleted 200 OK\u201d (you might have to clear the browser\u2019s cache if the browser is showing \u201c304 Not Modified\u201d). We can see evidence of the model-view-controller architecture. \u201cProcessing by VisitorsController#new\u201d shows the program flow entering the controller. Our debug statements show we enter the new method and reveal the value of the Owner name. The next debug statement reveals the flow has passed to the Owner model. A diagnostic message shows the controller has rendered the visitors/new.html.erb view file. Finally, the \u201cCompleted 200 OK\u201d message indicates the response has been sent to the browser. As we learned, the model-view-controller architecture is an abstract design pattern. We\u2019ve seen it reflected in the file structure of the Rails application directory. Now we can see it as activity in the server log.","title":"14.5 Revisiting the Request-Response Cycle"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#146-the-stack-trace","text":"The Rails logger is extremely useful if you want to insert messages to show program flow or display variables. But there will be times when program flow halts and the console displays a stack trace . Let\u2019s deliberately create an error condition and see an error page and stack trace. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name DISASTER end end Visit the home page and you\u2019ll see an error page: Figure 14.1: Error page. You\u2019ll see this error page because we\u2019ve installed the better_errors gem. Without the better_errors gem, you\u2019d see the default Rails error page which is quite similar. In the console log, the stack trace will show everything that happens before Rails encounters the error: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Completed 500 Internal Server Error in 8ms (ActiveRecord: 0.0ms) NameError - uninitialized constant VisitorsController::DISASTER: app/controllers/visitors_controller.rb:7:in `new' . . . To save space, I\u2019m only showing the top line of the stack trace. I\u2019ve eliminated about sixty lines from the stack trace. Don\u2019t feel bad if your reaction to a stack trace is an immediate, \u201cTMI!\u201d Indeed, it is usually Too Much Information. There are times when it pays to carefully read through the stack trace line by line, but most often, only the top line of the stack trace is important. In this case, both the error page and the top line of the stack trace show the application failed (I prefer to say, \u201cbarfed\u201d) when it encountered an \u201cuninitialized constant\u201d at line 7 of the app/controllers/visitors_controller.rb file in the new method. It\u2019s easy to find line 7 in the file and see that is exactly where we added a string that Rails doesn\u2019t understand. The point of this exercise is to encourage you to read the top line of the stack trace and use it to diagnose the problem. I\u2019m always surprised how many developers ignore the stack trace, probably because it looks intimidating.","title":"14.6 The Stack Trace"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#147-raising-an-exception","text":"As you just saw, you can purposefully break your application by adding characters that Rails doesn\u2019t understand. However, there is a better way to force your program to halt, called raising an exception . Let\u2019s try it. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name raise 'Deliberate Failure' end end You can throw an error by using the raise keyword from the Ruby API. You can provide any error message you\u2019d like in quotes following raise . Here\u2019s the console log after you try to visit the home page: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Completed 500 Internal Server Error in 6ms (ActiveRecord: 0.0ms) RuntimeError - Deliberate Failure: app/controllers/visitors_controller.rb:7:in `new' . . . Before we continue, let\u2019s remove the deliberate failure. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name end end Rails and the Ruby API provide a rich library of classes and methods to raise and handle exceptions. For example, you might want to display an error if a user enters a birthdate that is not in the past. Rails includes various exception handlers to display errors in production so users will see a helpful web page explaining the error.","title":"14.7 Raising an Exception"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#148-git","text":"There\u2019s no need to save any of the changes we made for troubleshooting. You could go to each file and carefully remove the debugging code you added. But there\u2019s an easier way. Check which files have changed: $ git status","title":"14.8 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#changes-not-staged-for-commit","text":"","title":"Changes not staged for commit:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#use-git-add-to-update-what-will-be-committed","text":"","title":"(use \"git add ...\" to update what will be committed)"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#use-git-checkout-to-discard-changes-in-working-directory","text":"","title":"(use \"git checkout -- ...\" to discard changes in working directory)"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#_1","text":"","title":""},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#modified-appcontrollersvisitors_controllerrb","text":"","title":"modified:   app/controllers/visitors_controller.rb"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#modified-appmodelsownerrb","text":"","title":"modified:   app/models/owner.rb"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#_2","text":"no changes added to commit (use \"git add\" and/or \"git commit -a\") Use Git to revert your project to the most recent commit: $ git reset --hard HEAD The Git command git reset \u2013hard HEAD discards any changes you\u2019ve made since the most recent commit. Check the status to make sure: $ git status","title":""},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#on-branch-master","text":"nothing to commit, working directory clean We\u2019ve cleaned up after our troubleshooting exercise.","title":"On branch master"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-15-just-enough-ruby","text":"Experienced Rails developers debate whether beginners should study Ruby before learning Rails. By all means, if you love the precision and order of programming languages, dive into the study of Ruby from the beginning. But most people don\u2019t delay starting Rails while learning Ruby; realistically, you\u2019ll retain more knowledge of Ruby if you learn it as you build things in Rails. That is the approach we\u2019ve taken in this book. You\u2019ve already built a simple Rails application and used Ruby as you did so.","title":"Chapter 15 Just Enough Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#151-reading-knowledge-of-ruby","text":"What you need, more than anything, when you start working with Rails, is reading knowledge of Ruby. With a reading knowledge of Ruby you\u2019ll avoid feeling overwhelmed or lost when you encounter code examples or work through a tutorial. Later, as you tackle complex projects and write original code, you\u2019ll need to know enough of the Ruby language to implement the features you need. But as a student, you\u2019ll be following tutorials that give you all the Ruby you need. Your job is to recognize the language keywords and use the correct syntax when you type Ruby code in your text editor. To that end, this chapter will review the Ruby keywords and syntax you\u2019ve already learned. And you\u2019ll extend your knowledge so you\u2019ll be prepared for the Ruby you\u2019ll encounter in upcoming chapters.","title":"15.1 Reading Knowledge of Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#152-ruby-example","text":"To improve your reading knowledge of Ruby, we\u2019ll work with an example file that contains a variety of Ruby expressions. We won\u2019t use this file in our tutorial application, so you\u2019ll delete it at the end of this chapter. But we\u2019ll approach it as real Ruby code, so make a file and copy the code using your text editor. First we have to consider where the file should go. It will not be a model, view, controller, or any other standard component of Rails. Rails has a place for miscellaneous files that don\u2019t fit in the Rails API. We\u2019ll create the file in the lib/ folder. That\u2019s the folder you\u2019ll use for any supporting Ruby code that doesn\u2019t fit elsewhere in the Rails framework. Create a file lib/example.rb : class Example < Object # This is a comment. attr_accessor :honorific attr_accessor :name attr_accessor :date def initialize(name,date) @name \\= name @date \\= date.nil? ? Date.today : date end def backwards_name @name.reverse end def to_s @name end def titled_name @honorific ||= 'Esteemed' titled_name \\= \"#{@honorific} #{@name}\" end def december_birthdays born_in_december \\= [ ] famous_birthdays.each do |name, date| if date.month \\== 12 born_in_december << name end end born_in_december end private def famous_birthdays birthdays \\= { 'Ludwig van Beethoven' \\=> Date.new(1770,12,16), 'Dave Brubeck' \\=> Date.new(1920,12,6), 'Buddy Holly' \\=> Date.new(1936,9,7), 'Keith Richards' \\=> Date.new(1943,12,18) } end end In some ways, this Ruby code is like a poem from Lewis Carroll: 'Twas brillig, and the slithy toves Did gyre and gimble in the wabe; All mimsy were the borogoves, And the mome raths outgrabe. \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch! Beware the Jubjub bird, and shun The frumious Bandersnatch!\" The poem corresponds to the rules of English syntax but is nonsense. The code follows the rules of Ruby syntax, and unlike the poem, uses meaningful words. But it is unclear how the author intends anyone to use the code. If you\u2019re beginning a career as a Rails developer, this won\u2019t be the last time you look at code and wonder what the author was intending. In this case, I just want to give you some code that illustrates typical Ruby syntax and structure.","title":"15.2 Ruby Example"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#153-ruby-keywords","text":"When reading Ruby code, the first challenge is determining which words are Ruby keywords and which were made up by the developer. Code is only strings of characters. But some strings have special meaning for everyone and all others are arbitrary words that only have meaning to an individual developer. As you gain experience, you\u2019ll recognize Ruby keywords because you\u2019ve seen them before. You\u2019ll also recognize a developer\u2019s made-up words because of their position relative to other words and symbols. Some made-up words will be obvious because they are just too idiosyncratic to be part of the Ruby language. For example, you\u2019ll rightly guess that myapp or fluffycat are not part of the Ruby language. If you\u2019re reading a Lewis Carroll poem, you could look up words in a dictionary to see if you find them. There is only one way to be sure which words are part of the Ruby language: Check the Ruby API. As an exercise, pick one of the words from the example code that you think might be a Ruby keyword and search the API to find it. If you want to be a diligent student, you can check every keyword in the example code to find out whether it is in the Ruby API. It is more practical to learn to recognize Ruby keywords, which we\u2019ll do next.","title":"15.3 Ruby Keywords"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1531-api-documentation","text":"The Ruby API documentation lists every keyword in the language: ruby-doc.org - the official Ruby API apidock.com/ruby - Ruby API docs with usage notes","title":"15.3.1 API Documentation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#154-ruby-files","text":"When we write code, we save it in files. We\u2019ve added our miscellaneous example file to the lib/ folder. By convention, Ruby files end with the file extension .rb .","title":"15.4 Ruby Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1541-using-irb","text":"In the \u201cTroubleshooting\u201d chapter, you used IRB (the Interactive Ruby Shell) to try out Ruby code. You can use IRB to try out the example code in the console. $ irb >> load 'lib/example.rb' \\=> true >> require 'date' \\=> true >> ex \\= Example.new('Daniel',nil) \\=> #<Example:0x007fb46c9eecd8 @name=\"Daniel\", @date=# \\> list \\= ex.december\\_birthdays \\=> [\"Ludwig van Beethoven\", \"Dave Brubeck\", \"Keith Richards\"] >> Entering the load directive and the filename brings the code into IRB. The require \u2019date\u2019 statement loads the Ruby date library. The statement ex = Example.new(\u2019Daniel\u2019,nil) creates an object from the Example class. The ex.december_birthdays method returns an array of names. Remember you can use Control-d to exit from IRB. Now, for practice, we\u2019ll read the Ruby code.","title":"15.4.1 Using IRB"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#155-whitespace-and-line-endings","text":"Whitespace characters such as spaces and tabs are generally ignored in Ruby code, except when they are included in strings. There are several special cases where whitespace is significant in Ruby expressions but you are not likely to encounter these cases as a beginning Rails developer. Some programming languages (Java and the C family) require a semicolon as a terminator character at the end of statements. Ruby does not require a semicolon to terminate a statement. Instead, if the Ruby code on a line is a complete expression, the line ending signifies the end of the statement. If the line ends with a + or other operator, or a backslash character, the statement is split into multiple lines.","title":"15.5 Whitespace and Line Endings"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#156-comments","text":"Ruby ignores everything that is marked as a comment. Use comments for notes to yourself or other programmers. # This is a comment. You can also turn code into comments if you don\u2019t want the code to run. This is a common trick when you want to \u201cturn off\u201d some part of your code but you don\u2019t want to delete it just yet, because you are trying out alternatives.","title":"15.6 Comments"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#157-the-heart-of-programming","text":"Three principles are at the heart of all programming: syntax conditional execution transformation Computers allow no ambiguity. Code must exactly follow the syntax of a language. Typos, guesses, and code that is almost-but-not-quite right will simply fail, often without any helpful error messages. Computers seem intelligent because they can execute code conditionally . You can write a program so that given one set of conditions, certain parts of the code will execute, and given different conditions, other parts of the code will execute. Lastly, programs are written to transform abstractions from one form to another. That\u2019s why computer programs look like math. When we learn simple arithmetic, we learn we can take the symbols for numbers and add them together to make a different number. Computer programs do more than add numbers; a program can transform words and other abstractions.","title":"15.7 The Heart of Programming"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#158-assignment","text":"In Ruby, like many other programming languages, the equals sign indicates we are assigning a value. name \\= 'Foobar Kadigan' Assignment is the first step to transformation. Here \u2019Foobar Kadigan\u2019 is a string of letters. The equals sign is the assignment operator. And name is a variable that stores the value so it can be easily reused. We don\u2019t have to type \u2019Foobar Kadigan\u2019 every time we need a name; we can use name instead. Just as we can assign a value to a variable, we can reassign a new value whenever we want. That is why we call them variables; the value can vary. name \\= 'Mr. Foobar Kadigan' Variables can be assigned strings of letters, numbers, or anything else. \u201cAnything else\u201d is very broad because we can use Ruby to make complex structures that contain data and also \u201cdo work.\u201d These complex structures are objects and we say that Ruby is object-oriented because it is easy to work with objects in Ruby.","title":"15.8 Assignment"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#159-object-oriented-terminology","text":"Software architects use a common vocabulary to talk about programming languages: class instance or object method attribute or property inheritance class hierarchy There are three ways to learn what these words mean. You can memorize the definitions. You can write code and intuitively grasp the meanings. Or you can gain an understanding by applying metaphors.","title":"15.9 Object-Oriented Terminology"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1591-houses","text":"For example, some programming textbooks attempt to explain a class like this: A blueprint for a house design is like a class definition . All the houses built from that blueprint are objects of a class we could call House.","title":"15.9.1 Houses"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1592-vehicles","text":"Or: The concept of \u201cvehicle\u201d is like a class . Vehicles can have attributes , like color or number of doors. They have behavior, or methods , like buttons that turn on lights or honk a horn. The concepts of \u201ctruck\u201d or \u201ccar\u201d are also classes, inheriting common characteristics from a superclass \u201cvehicle.\u201d The blue car in your driveway with four doors is an object, a particular instance of the class \u201ccar.\u201d","title":"15.9.2 Vehicles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1593-cookies","text":"I like the cookie metaphor the best. A class definition is like a cookie cutter. Bits in the computer memory are like cookie dough. The cookie cutter makes as many individual cookies as you want. Each cookie is an instance of the Cookie class, with the same shape and size as the others. Cookies are objects . You can decorate each cookie with sprinkles, which are attributes that are unique to each instance. Some cookies get red sprinkles, some get green, but the shape remains the same. Running a program is like baking. The cookies change state from raw to cooked. Sticking a toothpick in a cookie is like calling a method . The method returns a result that tells you about the state: Is it done?","title":"15.9.3 Cookies"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1594-limitations-of-metaphors","text":"Metaphors are imperfect. If baking was like running a program, all the cookies would disappear as soon as the oven was turned off. When a software program contains a \u201ccar\u201d model, it doesn\u2019t fully model cars in the physical world. It represents an abstraction of characteristics a programmer deems significant. Let\u2019s make a model for a Person that contains an attribute Gender. What values are possible for the attribute Gender? For many years, Facebook offered two choices, male and female. In 2014, Facebook suddenly offered a choice of over fifty gender terms. As Sarah Mei discusses in a blog post, Why Gender is a Text Field on Diaspora , your assumptions have consequences when you build a model. Most classes in software APIs don\u2019t model anything in the real world. They typically represent an abstraction, like an Array or a Hash, which inherits characteristics from another abstraction, for example, a Collection. Given the limitations of metaphors, maybe it is easier to simply say that software allows us to create abstractions that are \u201cmade real\u201d and then manipulated and transformed. Terminology such as class and instance describe the abstractions and the relationships among them.","title":"15.9.4 Limitations of Metaphors"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1595-definitions","text":"Here are definitions for some of the terms we encounter when we consider Rails from the perspective of a software architect: class an abstraction that encapsulates data and behavior class definition written code that describes a class instance or object a unique copy of a class that exists only while a program is running *inheritance a way to make a class by borrowing from another class class hierarchy classes that are related by inheritance method a command that returns data from an object *attribute or property data that can be set or retrieved from the object variable a name that can be assigned a value or object expression or statement*** any combination of variables, classes, and methods that returns a result Some of these terms are abstractions that are \u201cmade real\u201d in the Ruby API (such as class and method); others are just terms that describe code, much like we use terms such as \u201cadjective\u201d or \u201cnoun\u201d to talk about the grammar of the English spoken language.","title":"15.9.5 Definitions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1510-classes","text":"You don\u2019t have to create classes to program in Ruby. If you only write simple programs, you won\u2019t need classes. Classes are used to organize your code and make your software more modular. For the software architect, classes make it possible to create a structure for complex software programs. To use Rails, you\u2019ll use the classes and methods that are defined in the Rails API. There is one class at the apex of the Ruby class hierarchy: BasicObject . BasicObject is a very simple class, with almost no methods of its own. The Object class inherits from BasicObject . All classes in the Ruby and Rails APIs inherit behavior from Object . Object provides basic methods such as nil? and to_s (\u201cto string\u201d) for every class that inherits from Object . We create a class Example and inherit from Object with the < \u201cinherits from\u201d operator: class Example < Object . . . end The end statement indicates all the preceding code is part of the Example class. In Ruby, all classes inherit from the Object class, so we don\u2019t need to explicitly subclass from Object as we do here. The example just shows it for teaching purposes. Here is the Example class without the explicit subclassing from Object : class Example . . . end Much of the art of programming is knowing what classes are available in the API and deciding when to subclass to inherit useful methods.","title":"15.10 Classes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1511-methods","text":"Classes give organization and structure to a program. Methods get the work done. Any class can have methods. Methods are a series of expressions that return a result (a value). We say methods describe the class behavior. A method definition begins with the keyword def and (predictably) ends with end . def backwards_name @name.reverse end Initializing the object and calling the method returns a result: ex \\= Example.new('Daniel',nil) my_backwards_name \\= ex.backwards_name \\=> leinaD We can also override a method from the parent class. def to_s @name end Here we are overriding the to_s (\u201cto string\u201d) method from the parent Object class. Ordinarily, the to_s method returns the object\u2019s class name and an object id. Here we will return the string assigned to the variable @name . Most times you won\u2019t override the to_s (\u201cto string\u201d) method. This example shows how you can override any method inherited from a parent class.","title":"15.11 Methods"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1512-dot-operator","text":"The \u201cdot\u201d is the method operator. This tiny punctuation symbol is a powerful operator in Ruby. It allows us to call a method to get a result. Sometimes we say we send a message to the object when we invoke a method, implying the object will send a result. Some classes, such as Date , provide class methods which can be called directly on the class without instantiating it first. For example, you can run this in the Rails console: Date.today \\=> Tue, 15 Oct 2013 More often, methods are called on variables which are instances of a class. For example: birthdate \\= Date.new(1990, 12, 22) \\=> Sat, 22 Dec 1990 birthmonth \\= birthdate.month \\=> 12 We can apply method chaining to objects. For example, String has methods reverse and upcase (among many others). We could write: nonsense \\= 'foobar' \\=> \"foobar\" reversed \\= nonsense.reverse \\=> \"raboof\" capitalized \\= reversed.upcase \\=> \"RABOOF\" It is easier to use method chaining and write: 'foobar'.reverse.upcase \\=> \"RABOOF\" Classes create a structure for our software programs and methods do all the work.","title":"15.12 Dot Operator"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#15121-question-and-exclamation-methods","text":"You\u2019ll see question marks and exclamation points (sometimes called the \u201cbang\u201d character) used in method names. These characters are simply a naming convention for Ruby methods. The question mark indicates the method will return a boolean value (true or false). The bang character indicates the method is \u201cdangerous.\u201d In some cases it means the method will change the object rather just return a result. In Rails an exclamation point often means the method will throw an exception on failure rather than failing silently.","title":"15.12.1 Question and Exclamation Methods"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1513-initialize-method","text":"Objects are created from classes before they are used. As I suggested earlier, class definitions are cookie cutters; the Ruby interpreter uses them to cut cookies. When we call the new method, we press the cookie cutter into the dough and get a new object. All the cookies will have the same shape but they can be decorated differently, by sprinkling attributes of different values. The initialize method is one of the ways we sprinkle attributes on our cookie. def initialize(name,date) When we want to use an Example object and assign it to a variable, we will instantiate it with Example.new(name,date) . The new method calls the initialize method automatically. If we don\u2019t define an initialize method, the new method still works, inherited from Object , so we can always instantiate any class.","title":"15.13 Initialize Method"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1514-method-parameters","text":"Methods are useful when they operate on data. If we want to send data to a method, we define the method and indicate it will accept parameters . Parameters are placeholders for data values. The values that are passed to a method are arguments . \u201cParameters\u201d are empty placeholders and \u201carguments\u201d are the actual values. In practice, \u201cparameters\u201d and \u201carguments\u201d are terms that are used interchangeably and not many developers will notice if you mix up the terms. Our initialize method takes name and date arguments: def initialize(name,date) Ruby is clever with method parameters. You can define a method and specify default values for parameters. You can also pass extra arguments to a method if you define a method that allows optional parameters. This makes methods very flexible. We separate our parameters with commas. For readability, we enclose our list of parameters in parentheses. In Ruby, parentheses are always optional but they often improve readability.","title":"15.14 Method Parameters"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1515-variable","text":"In Ruby, everything is an object. We can assign any object to a variable. The variable works like an alias. We can use a variable anywhere as if it were the assigned object. The variable can be assigned a string, a numeric value, or an instance of any class (all are objects). name You can assign a new value to a variable anywhere in your method. You can assign a different kind of object if you want. You can take away someone\u2019s name and give them a number. We can create a variable player , assign it the string \u2019Jackie Robinson\u2019 , replace the value with an integer 42 , or even a date such as Date.new(1947,4,15) .","title":"15.15 Variable"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#15151-symbol","text":"Obviously, we see many symbols when we read Ruby code, such as punctuation marks and alphanumeric characters. But symbol has a specific meaning in Ruby. It is like a variable, but it can only be assigned a value once. After the initial assignment, it is immutable ; it cannot be changed. You will recognize a symbol by the colon that is always the first character. :name Symbols are efficient and fast because the Ruby interpreter doesn\u2019t have to work to check their current values. You\u2019ll often see symbols used in Rails where you might expect a variable.","title":"15.15.1 Symbol"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1516-attributes","text":"In an object, methods do the work and data is stored as variables. We can use the initialize method to input data to the object. We can\u2019t access data in variables from outside the object unless it is exposed as attributes . Classes can have attributes, which we can \u201cset\u201d and \u201cget.\u201d That is, we can establish a value for an attribute and retrieve the value by specifying the attribute name. Attributes are a convenient way to push data to an object and pull it out later. In Ruby, attributes are also called properties. Here we use the attr_accessor directive to specify that we want to expose honorific , name and date attributes. attr_accessor :honorific attr_accessor :name attr_accessor :date If we use attr_accessor to establish attributes, we can use the attribute names as methods. For example, we could write: ex \\= Example.new('Daniel',nil) my_name \\= ex.name In Ruby, attributes are just specialized methods that expose data outside the object.","title":"15.16 Attributes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1517-instance-variable","text":"Inside an object, an ordinary variable only can be used within the method in which it appears. If you use a variable with the same name in two different methods, it will have a different value in each method. The scope of a variable is limited to the method in which it is used. Often you want a variable to be available throughout an instance, within any method. You can declare an instance variable by using an @ (at) sign as the first character of the variable name. The instance variable can be used by any method after the class is instantiated. @name \\= name The values assigned to instance variables are unique for every instance of the class. If you create multiple instances of a class, each will have its own values for its instance variables. Here we create two instances of the Example class. The @name instance variable will be \u201cDaniel\u201d in the first instance and \u201cFoobar\u201d in the second instance. ex1 \\= Example.new('Daniel',nil) ex2 \\= Example.new('Foobar',nil) An instance variable is not visible outside the object in which it appears; but when you create an attr_accessor , it creates an instance variable and makes it accessible outside the object.","title":"15.17 Instance Variable"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#15171-instance-variables-in-rails","text":"In a Rails controller, you\u2019ll often see a model assigned to an instance variable. Earlier we saw @owner = Owner.new when we instantiated an Owner model. We use an instance variable when we want a model to be available to the view template. Rails beginners learn the simple rule that you have to use the @ (at) sign if you want a variable to be available in the view. Intermediate Rails developers learn that the variable with the @ (at) sign is called an instance variable and is only available within the scope of the instance (practically speaking, to other methods in the class definition). That leads to a question: Why is an instance variable available inside a view? There is a good reason. A Rails view is NOT a separate class. It is a template and, under the hood, it is part of the current controller object. From the viewpoint of a programmer, a Rails controller and a view are separate files, segregated in separate folders. From the viewpoint of a software architect, the controller is a single object that evaluates the template code, so an instance variable can be used in the view file. This example shows us that the programmer and the software architect have different perspectives on a Rails application. Understanding Rails requires an integration of multiple points of view.","title":"15.17.1 Instance Variables in Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1518-double-bar-equals-operator","text":"I\u2019ve suggested that the best way to get help is to use Google or Stack Overflow to look for answers. But that\u2019s difficult when you don\u2019t know what symbols are called. Try googling \u201c||=\u201d and you\u2019ll get no results. Instead, try googling \u201cbar bar equals ruby\u201d or \u201cdouble pipe equals ruby\u201d and you\u2019ll find many explanations of the \u201cor equals\u201d operator. This is an example of mysterious shorthand code you\u2019ll often find in Rails. \u201d||=\u201d is used for conditional assignment. In this case, we only assign a value to the variable if no value has been previously assigned. @honorific ||= 'Esteemed' It is equivalent to this conditional expression: if not x x \\= y end Conditional assignment is often used to assign a \u201cdefault value\u201d when no other value has been assigned.","title":"15.18 Double Bar Equals Operator"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1519-conditional","text":"Conditional logic is fundamental to programming. Our code is always a path with many branches. When the Ruby interpreter encounters an if keyword, it expects to find an expression which evaluates as true or false (a boolean ). If the expression is true, the statements following the condition are executed. If the expression is false, any statements are ignored, unless there is an else , in which case an alternative is executed. if date.month \\== 12 . . . end Sometimes you\u2019ll see unless instead of if , which is a convenient way of saying \u201cexecute the following if the condition is false.\u201d In Ruby, the conditional expression can be a simple comparison, as illustrated above with the == (double equals) operator. Or if can be followed by a variable that has been assigned a boolean value. Or you can call a method that returns a boolean result.","title":"15.19 Conditional"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1520-ternary-operator","text":"A basic conditional structure might look like this: if date.nil? @date \\= Date.today else @date \\= date end We test if date is undefined (nil). If nil, we assign today\u2019s date to the instance variable @date . If date is already assigned a value, we assign it to the instance variable @date . This is useful in the initialize(name,date) method in our example code because we want to set today\u2019s date as the default value for the instance variable @date if the parameter date is nil. Ruby developers like to keep their code tight and compact. So you\u2019ll see a condensed version of this conditional structure often, particularly when a default value must be assigned. This compact conditional syntax is named the ternary operator because it has three components. Here is the syntax: condition ? value_if_true : value_if_false Here is the ternary operator we use in our example code: @date \\= date.nil? ? Date.today : date This is another example of Ruby syntax that you must learn to recognize by sight because it is difficult to interpret if you have never seen it before. For more Ruby code that has been condensed into obscurity, see an article on Ruby Golf . Ruby golf is the sport of writing code that uses as few characters as possible.","title":"15.20 Ternary Operator"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1521-interpolation","text":"Rubyists love to find special uses for orthography such as hashmarks and curly braces. It seems Rubyists feel sorry for punctuation marks that don\u2019t get much use in the English language and like to give them new jobs. We already know that we can assign a string to a variable: name \\= 'Foobar Kadigan' We can also perform \u201cstring addition\u201d to concatenate strings. Here we add an honorific, a space, and a name: @honorific \\= 'Mr.' @name \\= 'Foobar Kadigan' titled_name \\= @honorific + ' ' + @name \\=> \"Mr. Foobar Kadigan\" Single quote marks indicate a string. In the example above, we enclose a space character within quote marks so we add a space to our string. You can eliminate the ungainly mix of plus signs, single quote marks, and space characters in the example above. Use double quote marks and you can perform interpolation , which gives a new job to the hashmark and curly brace characters: @honorific \\= 'Mr.' @name \\= 'Foobar Kadigan' titled_name \\= \"#{@honorific} #{@name}\" \\=> \"Mr. Foobar Kadigan\" The hashmark indicates any expression within the curly braces is to be evaluated and returned as a string. This only works when you surround the expression with double quote marks. Interpolation is cryptic when you first encounter the syntax, but it streamlines string concatenation.","title":"15.21 Interpolation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1522-access-control","text":"Any method you define will return a result. Sometimes you want to create a method that only can be used by other methods in the same class. This is common when you need a simple utility method that is used by several other methods. Any methods that follow the keyword private should only be used by methods in the same class (or a subclass). private You often see private methods in Rails. Ruby provides a protected keyword as well, but the difference between protected and private is subtle and protected is seldom seen in Rails applications.","title":"15.22 Access Control"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1523-hash","text":"Our example code includes a private method named famous_birthdays that returns a collection of names and birthdays of famous musicians. Computers have always been calculation machines; they are just as important in managing collections. One important type of collection is named a Hash. A Hash is a data structure that associates a key to some value. You retrieve the value based upon its key. This construct is called a dictionary , an associative array , or a map in other languages. You use the key to \u201clook up\u201d a value, as you would look up a definition for a word in a dictionary. You\u2019ll recognize a Hash when you see curly braces (again, Rubyists give a job to under-utilized punctuation marks). birthdays \\= { 'Ludwig van Beethoven' \\=> Date.new(1770,12,16), 'Dave Brubeck' \\=> Date.new(1920,12,6), 'Buddy Holly' \\=> Date.new(1936,9,7), 'Keith Richards' \\=> Date.new(1943,12,18) } Rubyists also like to create novel uses for mathematical symbols. The combination of an = (equals) sign and > (greater than) sign is called a hashrocket . The => (hashrocket) operator associates a key and value pair in a Hash. You\u2019ll often see hashrockets in code written before Ruby 1.9. Ruby 1.9 introduced a new syntax using colons instead of hashrockets. Whether with colons or hashrockets, you\u2019ll often see Hashes used in Rails. With Ruby 1.9 and later, here\u2019s how we associate key and value pairs in a Hash: birthdays \\= { beethoven: Date.new(1770,12,16), brubeck: Date.new(1920,12,6), holly: Date.new(1936,9,7), richards: Date.new(1943,12,18) } Here, instead of using a string as the key, we are using Ruby symbols, which enable faster processing. The : (colon) character associates the key and value. Ordinarily, a symbol is defined with a leading colon character. In a Hash, a trailing colon makes a string into a symbol. If you want to transform a string containing spaces into a symbol in a Hash, you can do it, though the syntax is awkward: birthdays \\= { 'Ludwig van Beethoven': Date.new(1770,12,16) }","title":"15.23 Hash"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1524-array","text":"An Array is a list. Arrays can hold objects of any data type. In fact, arrays can contain a mix of different objects. For example, an array can contain a string and another array (this is an example of a nested array ). An array can be instantiated with square brackets: born_in_december \\= [ ] We can populate the array with values when we create it: my_list \\= ['apples', 'oranges'] If we don\u2019t want to use quote marks and commas to separate strings in a list, we can use the %w syntax: my_list \\= %w( apples oranges ) We can add new elements to an array with a push method: my_list \\= Array.new \\=> [] my_list.push 'apples' \\=> [\"apples\"] my_list.push 'oranges' \\=> [\"apples\", \"oranges\"] In our example code, we use the << shovel operator to add items to the array: born_in_december << name A Ruby array has close to a hundred available methods, including operations such as size and sort . See the Ruby API for a full list.","title":"15.24 Array"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1525-iterator","text":"Of all the methods available for a Ruby collection such as Hash or Array, the iterator may be the most useful. You\u2019ll recognize an iterator when you see the each method applied to a Hash or Array: famous_birthdays.each The each keyword is always followed by a block of code. Each item in an Array, or key-value pair in a Hash, is passed to the block of code to be processed.","title":"15.25 Iterator"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1526-block","text":"You can recognize a block in Ruby when you see a do ... end structure. A block is a common way to process each item when an iterator such as each is applied to a Hash or Array. In our example, we iterate over the famous_birthdays hash: famous_birthdays.each do |name, date| . . . end Within the two pipes (or bars), we assign the key and value to two variables. The block is like an unnamed method. The two variables are available only within the block. As each key-value pair is presented by the iterator, the variables are assigned, and the statements in the block are executed. In our example code, we evaluate each date in the famous_birthdays hash to determine if the musician was born in December. When we find a December birthday, we add the name of the musician to the born_in_december array: famous_birthdays.each do |name, date| if date.month \\== 12 born_in_december << name end end When you use a block within a method, any variable in your method is available within the block. That\u2019s why we can add name to the array born_in_december . Computer scientists consider a block to be a programming language construct called a closure . Ruby has other closures, including the proc (short for procedure) and the lambda . Though blocks are common you\u2019ll seldom see procs or lambdas in ordinary Rails code. They are more common in the Rails source code where advanced programming techniques are used more frequently. The key point to know about a block (or a proc or a lambda) is that it works like a method. Though you don\u2019t see a method definition, you can use a block to evaluate a sequence of statements and obtain a result.","title":"15.26 Block"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1527-rails-and-more-keywords","text":"We\u2019ve looked at only a few of the keywords and constructs you will see in Ruby code. The exercise has improved your Ruby literacy, so you\u2019ll have an easier time reading Ruby code. Nothing in the exercise is Rails. The example code only uses keywords from the Ruby API. Rails has its own API, with hundreds of classes and methods. The Rails API uses the syntax and keywords of the Ruby language to construct new classes and create new keywords that are specific to Rails and useful for building web applications. We say Ruby is a general-purpose language because it can be used for anything. Rails is a domain-specific language (DSL) because it is used only by people building web applications (in this sense, \u201cdomain\u201d means area or field of activity). Ruby is a great language to use for building a DSL, which is why it was used for Rails. Unlike some other programming languages, Ruby easily can be extended or tweaked. For example, developers can redefine classes, add extra methods to existing classes, and use the special method_missing method to handle method calls that aren\u2019t previously defined. Software architects call this metaprogramming which simply means clever programming that twists and reworks the programming language. When you add a gem to a Rails project, you\u2019ll add additional keywords. Some of the most powerful gems add their own DSLs to your project. For example, the Cucumber gem provides a DSL for turning user stories into automated tests. Adding Rails, additional gems, and DSLs provides powerful functionality at the cost of complexity. But it all conforms to the syntax of the Ruby language. As you learn to recognize Ruby keywords and language structures, you\u2019ll be able to pick apart the complexity and make sense of any code.","title":"15.27 Rails and More Keywords"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1528-more-ruby","text":"To develop your proficiency as a Rails developer, I hope you will make an effort to learn Ruby as you learn Rails. Don\u2019t be lazy; when you encounter a bit of Ruby you don\u2019t understand, make an effort to find out what is going on. Spend time with a Ruby textbook or interactive course when you work on Rails projects.","title":"15.28 More Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#15281-collaborative-learning","text":"The best way to learn Ruby is to actually use it. That\u2019s the concept behind this site: Exercism.io With Exercism, you\u2019ll work though code exercises and get feedback from other learners.","title":"15.28.1 Collaborative Learning"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#15282-online-tutorials","text":"TryRuby.org - free browser-based interactive tutorial from Code School Codecademy Ruby Track - free browser-based interactive tutorials from Codecademy Ruby Koans - free browser-based interactive exercises from Jim Weirich and Joe O\u2019Brien Ruby in 100 Minutes - free tutorial from JumpstartLab Code Like This - free tutorials by Alex Chaffee RailsBridge Ruby - basic introduction to Ruby CodeSchool Ruby Track - instructional videos with in-browser coding exercises","title":"15.28.2 Online Tutorials"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#15283-books","text":"Learn To Program - free ebook by Chris Pine Learn To Program - expanded $18.50 ebook by Chris Pine Learn Code the Hard Way - free from Zed Shaw and Rob Sobers Beginning Ruby - by Peter Cooper Programming Ruby - by Dave Thomas, Andy Hunt, and Chad Fowler Eloquent Ruby - by Russ Olsen Books by Avdi Grimm , including Confident Ruby and Objects on Rails .","title":"15.28.3 Books"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#15284-newsletters","text":"Practicing Ruby - $8/month for access to over 90 helpful articles on Ruby RubySteps - weekly lessons by email from Pat Maddox","title":"15.28.4 Newsletters"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#15285-screencasts","text":"RubyTapas - $9/month for access to over 100 screencasts on Ruby","title":"15.28.5 Screencasts"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1529-git","text":"There\u2019s no need to save the file lib/example.rb file we created to learn Ruby. You can simply delete the file: $ rm lib/example.rb Check the Git status to make sure the file is gone: $ git status","title":"15.29 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#on-branch-master_1","text":"nothing to commit, working directory clean We\u2019ve cleaned up after our Ruby exercise. From here on, we\u2019re done with silly code examples. No more fooling around. With the next chapter, we start building a real-world Rails website.","title":"On branch master"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-16-layout-and-views","text":"In previous chapters we created a dynamic home page and learned techniques for troubleshooting. In this chapter we\u2019ll look closely at view files, particularly the application layout, so we can organize the design of our web pages. We\u2019ll also learn how to add a CSS stylesheet to improve the graphic design of our web pages. This chapter covers a lot of ground, so take a break before jumping in, or pace yourself to absorb it all.","title":"Chapter 16 Layout and Views"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#161-template-languages","text":"HTML is intended for markup, which means applying formatting to a text file. For a web application, ordinary HTML is not sufficient; we need to mix in Ruby code. We\u2019ll use a templating language that gives us a syntax for mixing HTML tags and Ruby code. The Ruby code will be processed by a templating engine built into Rails. The output will be pure HTML sent to the browser. The most popular templating language available for Rails is ERB , Embedded Ruby, which is the Rails default. In the \u201cConcepts\u201d chapter in Book One, you learned that components of Rails can be mixed for different \u201cstacks.\u201d Some developers substitute Haml or Slim for ERB. We\u2019ll use ERB in this book because it is the most popular.","title":"16.1 Template Languages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#162-introducing-the-application-layout","text":"We\u2019ve already created the view file for our home page. The file app/views/visitors/new.html.erb looks like this:","title":"16.2 Introducing the Application Layout"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#163-where-did-all-the-extra-html-come-from","text":"The final HTML file is more than twice the size of the view file. The additional tags come from the default application layout file. Rails has combined the Visitors#New view with the default application layout file. To be precise, the new method in the Visitors controller creates the home page by combining two files: the application layout file app/views/layouts/application.html.erb the Visitors#New template in the file app/views/visitors/new.html.erb We say Rails \u201crenders\u201d (or \u201cdelivers\u201d) a new view by combining two files. Let\u2019s examine the application layout file. Open the file app/views/layouts/application.html.erb : LearnRails <%= csrf_meta_tags %> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %> < %= yield %> Static pages delivered from the public folder do not use the default application layout. But every page generated by the model-view-controller architecture in the app/ folder incorporates the default application layout, unless you specify otherwise. The default application layout is where you put HTML that you want to include on every page of your website. Remember when we looked at the hidden code in the controller that renders a view? The controller uses the render method to combine the view file with the application layout. Here\u2019s the Visitors controller, again, with the hidden render method revealed: class VisitorsController < ApplicationController def new @owner \\= Owner.new render 'visitors/new' end end The render method combines the app/views/visitors/new.html.erb view file with the app/views/layouts/application.html.erb application layout. Alternatively, you could tell the controller to render the view without any application layout: render 'visitors/new', :layout \\=> false Or you could specify an alternative layout file, for example app/views/layouts/special.html.erb : render 'visitors/new', :layout \\=> 'special' An alternative layout can be useful for special categories of pages, such as administrative pages or landing pages. We won\u2019t use alternative layouts in this tutorial application, but it\u2019s good to know they are an option. The reference RailsGuides: Layouts and Rendering in Rails explains more about using alternative layouts.","title":"16.3 Where did all the extra HTML come from?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#164-yield","text":"How does the render method insert the view file in the application layout? How do the two files get combined? Notice that the default application layout contains the Ruby keyword yield . . . . <%= yield %> . . . The yield keyword is replaced with a view file that is specific to the controller and action, in this case, the app/views/visitors/new.html.erb view file. The content from the view is inserted where you place the yield keyword. The yield keyword pulls in another view file.","title":"16.4 Yield"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#165-yield-variations","text":"We won\u2019t do it, but you could also use the yield keyword to insert a sidebar or a footer. Rails provides ways to insert content into a layout file at different places. The content_for method is helpful when your layout contains distinct regions such as sidebars and footers that should contain their own blocks of content. For example, you could create an application layout that includes a sidebar. This is just an example, so don\u2019t add it to the application you are building: LearnRails <%= csrf_meta_tags %> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %> < %= yield %> < %= yield :sidebar %> This view file provides both the main content and a sidebar: <% content_for :sidebar do %>","title":"16.5 Yield Variations"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#166-erb-delimiters","text":"Earlier, we saw ERB <%= ... %> delimiters allow us to insert Ruby expressions which are replaced by the result of evaluating the code. Here is an example that displays the number 4 <%= 2 + 2 %> Look closely and you\u2019ll see this ERB delimiter is slightly different: <% 3.times do %> list item <% end %> An ERB delimiter that does not contain the = (equals) sign will execute Ruby code but will not display the result. It is commonly used to add Ruby blocks to HTML code, so you\u2019ll often see do and end statements within ERB <% ... %> delimiters. The example above will create three list items, like this: list item list item list item A third version of the ERB delimiter syntax is rarely seen: <%# this is a comment %> It is only used for adding comments. The expression within the ERB <%# ... %> delimiters will not execute and will not appear when the page is output as HTML.","title":"16.6 ERB Delimiters"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#167-introducing-view-helpers","text":"We can use ERB delimiters to create Rails view helpers . We\u2019ve seen how ERB delimiters can enclose Ruby code. In the application layout file, the <%= ... %> delimiters don\u2019t include anything that looks like Ruby code. For example, we see <%= csrf_meta_tags %> which seems to be neither HTML nor anything from the Ruby API. In fact, this expression is Ruby code, but it is from the Rails API and only found in Rails applications. Ruby is an ideal choice for a web application development platform such as Rails because it can easily be used to create a domain-specific language (or DSL ). Much of Rails is a domain-specific language. The Smalltalk programming language was famous for its slogan \u201cCode should read like a conversation.\u201d Ruby, which borrows much from Smalltalk, makes it easy to add new words to the conversation. We can add new keywords that produce complex behaviour, creating entire new APIs such as Rails. Ruby makes it easy for the Rails core team to add keywords such as csrf_meta_tags that are additions to the Ruby language. In this case, Ruby\u2019s ability to produce a domain-specific language gives us Rails view helpers . Think of Rails view helpers as \u201cmacros to generate HTML.\u201d You may have used macros to automate a series of commands in World of Warcraft or other games. If you\u2019re an office worker, you may have used macros in Microsoft Word or Excel. A Rails view helper is a keyword that expands into a longer string of HTML tags and content. In this case, the csrf_meta_tags view helper expands into two lines of HTML: Why do we need this cryptic code? It turns out that almost any website that accepts user input via a form is vulnerable to a security bug (an exploit ) named a cross-site request forgery . To prevent rampant CSRF exploits, the Rails core team includes the csrf_meta_tags view helper in the default application layout. Rails provides a number of similar features that make websites more secure. A Rails view file becomes much less mysterious when you realize that many of the keywords you see are view helpers. Strange new keywords may be part of the Rails API. Or they may be provided by gems you\u2019ve added (gem developers often use the Ruby DSL capability to create new keywords). Think of it this way: Ruby gives developers the power to create an unlimited number of new \u201cHTML tags.\u201d These tags are not really HTML because they are not part of the HTML specification. But they serve as shortcuts to produce complex snippets of HTML and content. Now that we\u2019ve learned about view helpers, we can start building our default application layout.","title":"16.7 Introducing View Helpers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#168-the-rails-layout-gem","text":"Every Rails application needs a well-designed application layout. The Rails default starter application, which we get when we run rails new , provides a barebones application layout. It is purposefully simple so developers can add the code they need to accommodate any front-end framework (we\u2019ll look closely at front-end frameworks in the next chapter). In this chapter we\u2019ll start with a simple application layout file, adding a little CSS for simple styling. In the next chapter, we\u2019ll upgrade the application layout file to use the Bootstrap front-end framework. To make it easy, we\u2019ll use the rails_layout gem to generate files for an application layout. In this chapter, we\u2019ll use the rails_layout gem to create our basic layout and CSS files. In the next chapter, we\u2019ll use the rails_layout gem to create layout files for Bootstrap. In your Gemfile , you\u2019ve already added: gem 'rails_layout' and previously run $ bundle install . Rails provides the rails generate command to run simple scripts that are packaged into gems. The rails_layout gem uses the rails generate command to set up files we need. Run: $ rails generate layout:install simple --force The \u2013force argument will force the gem to replace the existing app/views/layouts/application.html.erb file. If you have the app/views/layouts/application.html.erb file open in your text editor, it will change. The rails_layout gem will rename the file: app/assets/stylesheets/application.css to: app/assets/stylesheets/application.css.scss The gem will add (or modify) five files: app/views/layouts/application.html.erb app/assets/stylesheets/simple.css app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/_navigation_links.html.erb Examining these files closely will reveal a great deal about the power of Rails. We\u2019ll dedicate the rest of this chapter to exploring the contents of these files.","title":"16.8 The Rails Layout Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#169-basic-boilerplate","text":"Open the file app/views/layouts/application.html.erb : <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content= \"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> Some of this code is already familiar. You\u2019ll recognize the standard HTML DOCTYPE , <head> , and <body> tags. We\u2019ve already discussed the yield keyword. We\u2019ve seen the <%= ... %> delimiters surrounding the csrf_meta_tags view helper: csrf_meta_tags - generates <meta> tags that prevent cross-site request forgery The rest of the file may be unfamiliar. We\u2019ll examine it line by line.","title":"16.9 Basic Boilerplate"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1610-adding-boilerplate","text":"Webmasters who build static websites are accustomed to setting up web pages with \u201cboilerplate,\u201d or basic templates for a standard web page. The well-known HTML5 Boilerplate project has been recommending \u201cbest practice\u201d tweaks to web pages since 2010. Very few of the HTML5 Boilerplate recommendations are relevant for Rails developers, as Rails already provides almost everything required. We\u2019ll discuss one important boilerplate item and a few \u201cnice to have\u201d extras. If you want to learn more, the article HTML5 Boilerplate for Rails Developers looks at the recommendations.","title":"16.10 Adding Boilerplate"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16101-viewport","text":"The viewport metatag improves the presentation of web pages on mobile devices. Setting a viewport tells the browser how content should fit on the device\u2019s screen. The tag is required for either Bootstrap or Zurb Foundation front-end frameworks. The viewport metatag looks like this: Apple\u2019s developer documentation on Configuring the Viewport provides details.","title":"16.10.1 Viewport"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16102-title-and-description","text":"If you want to maximize traffic to your website, you should make your web pages search-engine friendly. That means adding title and description metatags. Google uses contents of the title tag to display titles in search results. And it will sometimes use the content of a description metatag in search results snippets. See Google\u2019s explanation of how it uses Site Title and Description . Good titles and descriptions improve clickthrough from Google searches. Title and description looks like this: <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content=\"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> The rails_layout gem has created a default title and description based on our project name. Later in the tutorial, we\u2019ll see how to use a content_for statement to set a title and description for each individual page. The code is complex if you haven\u2019t seen advanced Ruby before. It uses the Ruby ternary operator which maximizes compactness at the price of introducing obscurity. You\u2019ll recall from the \u201cJust Enough Ruby\u201d chapter that it is a fancy conditional statement that says, \u201cif content_for?(:title) is present in the view file, use yield(:title) to include it, otherwise just display \u2018Learn Rails\u2019.\u201d","title":"16.10.2 Title and Description"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1611-asset-pipeline","text":"You may have noticed these Rails helper methods: stylesheet_link_tag javascript_include_tag These are tags that add CSS and JavaScript to the web page using the Rails asset pipeline . The Rails asset pipeline utility is one of the most powerful features of the platform. It offers convenience to the developer and helps organize an application; more importantly, it improves the speed and responsiveness of any complex website. If you\u2019re going to do any front-end development with CSS or JavaScript in Rails, you must understand the Rails asset pipeline. Here\u2019s how it works.","title":"16.11 Asset Pipeline"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16111-assets-without-rails","text":"When building non-Rails websites, webmasters add JavaScript to a page using the <script> tag. For every JavaScript file, they add an additional <script> tag, so a page HEAD section looks like this: Page that uses multiple JavaScript files The same is true for CSS files in non-Rails websites. You add a <link> tag for each stylesheet file. With multiple stylesheets, the HEAD section of your application layout might look like this: Page that uses multiple CSS files If you want to handle CSS and JavaScript without Rails, you can place your files in the public folder. If you do so, every time you add a JavaScript or CSS file, you must modify the application layout file. Instead, use the asset pipeline and simplify this.","title":"16.11.1 Assets Without Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16112-assets-with-rails","text":"The asset pipeline consists of two folders: app/assets/javascripts/ app/assets/stylesheets/ Any JavaScript and CSS file you add to these folders is automatically added to every page. In development, when the web browser makes a page request, the files in the asset pipeline folders are combined together and concatenated as single large files, one for JavaScript and one for CSS. If you examine the application layout file, you\u2019ll see the tags that perform this service: <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> The HTML delivered to the browser looks like this: Using the asset pipeline, there is no need to modify the application layout file each time you create a new JavaScript or CSS file. Create as many files as you need to organize your JavaScript or CSS code and, in production, you\u2019ll automatically get one single file delivered to the browser. In development mode, Rails continues to deliver multiple files for easier debugging. In production, there\u2019s a big performance advantage with the asset pipeline. Requesting files from the server is a time-consuming operation for a web browser, so every extra file request slows down the browser. The Rails asset pipeline eliminates the performance penalty of multiple <script> or <link> tags. The Rails asset pipeline also compresses JavaScript and CSS files for faster page loads. The asset pipeline is an example of a Rails convention that helps developers build complex websites. It is not needed for a simple website that uses a few JavaScript or CSS files. But it is beneficial on bigger projects. The asset pipeline has limitations, especially for projects with complex front-end JavaScript. Rails developers who integrate JavaScript front-end frameworks such as React or Angular often choose not to use the asset pipeline. Instead they rely on JavaScript tooling such as Webpack to manage complex JavaScript assets. Now that you understand the purpose of the Rails asset pipeline, let\u2019s look at more of the code in the default application layout file.","title":"16.11.2 Assets With Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1612-navigation-links","text":"Every website needs navigation links. You can add navigation links directly to your application layout but many Rails developers prefer to create a partial template \u2013\u2013a \u201cpartial\u201d\u2013\u2013to better organize the default application layout.","title":"16.12 Navigation Links"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16121-introducing-partials","text":"A partial is similar to any view file, except the filename begins with an underscore character. Place the file in any view folder and you can use the render keyword to insert the partial. We\u2019re not going to add a footer to our tutorial application, but here is how we could do it. We\u2019d use the render keyword with a file named app/views/layouts/_footer.html.erb : <%= render 'layouts/footer' %> Notice that you specify the folder within the app/views/ directory with a truncated version of the filename. The render method doesn\u2019t want the _ underscore character or the .html.erb file extension. That can be confusing; it makes sense when you remember that Rails likes \u201cconvention over configuration\u201d and economizes on extra characters when possible. We\u2019re not going to add a footer to our application, but we will add navigation links by using a partial. First, let\u2019s learn about link helpers .","title":"16.12.1 Introducing Partials"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16122-introducing-link-helpers","text":"There\u2019s no rule against using raw HTML in our view files, so we could create a partial for navigation links that uses the HTML <a> anchor tag like this: Home About Contact Rails gives us another option, however. We can use the Rails link_to view helper instead of the HTML <a> anchor tag. The Rails link_to helper eliminates the crufty <> angle brackets and the unnecessary href=\"\" . More importantly, it adds a layer of abstraction, using the routing configuration file to form links. This is advantageous if we make changes to the location of the link destinations. Earlier, when we created a static \u201cAbout\u201d page, we first set the config/routes.rb file with a route to the \u201cAbout\u201d page: root to: redirect(\u2019/about.html\u2019) . Later we removed the static \u201cAbout\u201d page and set the config/routes.rb file with a route to the dynamic home page: root to: \u2019visitors#new\u2019 . If we used the raw HTML <a> anchor tag, we\u2019d have to change the raw HTML everywhere we had a link to the home page. Using the Rails link_to helper, we name a route and make any changes once, in the config/routes.rb file. When you use the Rails link_to helper, you\u2019ll avoid the problem of link maintenance that webmasters face on static websites. Some webmasters like to use absolute URLs, specifying a host name in the link, for example http://www.example.com/about.html . Absolute URLs are a headache when moving the site, for example from staging.example.com to www.example.com . The problem is avoided by using relative URLs, such as /about.html , about.html , or even ../about.html . But relative URLs are fragile, and moving files or directories often results in overlooked and broken links. Instead, with the Rails link_to helper, you always get the destination location specified in the config/routes.rb file.","title":"16.12.2 Introducing Link Helpers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16123-navigation-partial","text":"Examine the app/views/layouts/application.html.erb and you\u2019ll see the use of the navigation partial. We include the navigation partial in our application layout with the expression: . . . <%= render 'layouts/navigation' %> . . . Open the file app/views/layouts/_navigation.html.erb : < %= link\\_to 'Home', root\\_path %> < %= render 'layouts/navigation\\_links' %> You\u2019ll see the link_to helper. Here the link_to helper takes two parameters. The first parameter is the string displayed as the anchor text ( \u2019Home\u2019 ). The second parameter is the route. In this case, the route root_path has been set in the config/routes.rb file. The navigation partial includes another partial, which we\u2019ll call the navigation links partial: . . . <%= render 'layouts/navigation_links' %> . . . This demonstrates that one partial can include another partial, so that partials can be \u201cnested.\u201d","title":"16.12.3 Navigation Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16124-navigation-links-partial","text":"In our simple application, there\u2019s no obvious reason to nest another partial. But we\u2019ll see in the next chapter that it is convenient, because we can isolate the complex markup required by Bootstrap from the simple list of links we need for navigation. Open the file app/views/layouts/_navigation_links.html.erb : <%# add navigation links to this file %> As we add pages to our application, we\u2019ll add links to this file. For now, we have nothing to add.","title":"16.12.4 Navigation Links Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1613-flash-messages","text":"Rails provides a standard convention to display alerts (including error messages) and other notices (including success messages), called a flash message . The name comes from the term \u201cflash memory\u201d and should not be confused with the \u201cAdobe Flash\u201d web development platform that was once popular for animated websites. The flash message is documented in the RailsGuides: Action Controller Overview . Here\u2019s a flash message you might see after logging in to an application: Figure 16.1: Flash message in Rails. It is called a \u201cflash message\u201d because it appears on a page temporarily. When the page is reloaded or another page is visited, the message disappears. Typically, you will see only one flash message on a page. But there is no limit to the number of flash messages that can appear on a page.","title":"16.13 Flash Messages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16131-creating-flash-messages","text":"Flash messages are created in a controller. For example, we can add messages to the home page by modifying the file app/controllers/visitors_controller.rb like this: class VisitorsController < ApplicationController def new @owner \\= Owner.new flash[:notice] \\= 'Welcome!' flash[:alert] \\= 'My birthday is soon.' end end If you test the application after adding the messages to the VisitorsController, you\u2019ll see two flash messages appear on the page. Rails provides the flash object so that messages can be created in the controller and displayed on the rendered web page. In this example, we create a flash message by associating the object flash[:notice] with the string \u2019Welcome!\u2019 . We can assign other messages, such as flash[:alert] or even flash[:warning] . In practice, Rails uses only :notice and :alert as flash message keys so it is wise to stick with just these.","title":"16.13.1 Creating Flash Messages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16132-flash-and-flash-now","text":"You can control the persistence of the flash message by choosing from two variants of the flash directive. Use flash.now in the controller when you immediately render a page, for example with a render :new directive. With flash.now , the message will vanish after the user clicks any links. Use the simple variant, flash , in the controller when you redirect to another page, for example with a redirect_to root_path directive. If you use flash.now before a redirect, the user will not see the flash message because flash.now does not persist through redirects or links. If you use the simple flash directive before a render directive, the message will appear on the rendered page and reappear on a subsequent page after the user clicks a link. In our example above, we really need to use the flash.now variant because the controller provides a hidden render method. Update the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @owner \\= Owner.new flash.now[:notice] \\= 'Welcome!' flash.now[:alert] \\= 'My birthday is soon.' end end Using flash.now will make sure the message only appears on the rendered page and will not persist after a user follows a link to a new page. If you ever see a \u201csticky\u201d flash message that won\u2019t go away, you need to use flash.now instead of flash .","title":"16.13.2 Flash and Flash Now"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16133-explaining-the-ruby-code","text":"If you\u2019re new to programming in Ruby, it may be helpful to learn how the flash object works. The flash object is a Ruby hash . You\u2019ll recall from the \u201cJust Enough Ruby\u201d chapter that a hash is a data structure that associates a key to some value. You retrieve the value based upon its key. This construct is called a dictionary in other languages, which is appropriate because you use the key to \u201clook up\u201d a value, as you would look up a definition for a word in a dictionary. Hash is a type of collection . Presumably, the Rails core contributors who implemented the code chose to use a collection so that a page could be given multiple flash messages. Because we have a collection with (possibly) multiple messages, we need to retrieve each message one at a time. We learned earlier that all collections support an iterator method named each . Iterators return all the elements of a collection, one after the other. The iterator returns each key-value pair, item by item, to a block . In Ruby, a block is delimited by do and end or { } braces. You can add any code to a block to process each item from the collection. Here is simple Ruby code to iterate through a flash object, outputting each flash message in an HTML div tag and applying a CSS class for styling: flash.each do |key, value| puts '' + value + '' end In this simple example, we use each to iterate through the flash hash, retrieving a key and value that are passed to a block to be output as a string. We\u2019ve chosen the variable names key and value but the names are arbitrary. In the next example, we\u2019ll use name and msg as variables for the key-value pair. The output string will appear as HTML like this: Welcome! My birthday is soon. Let\u2019s continue examining our layout files.","title":"16.13.3 Explaining the Ruby Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#16134-the-flash-messages-partial","text":"Flash messages are a very useful feature for a dynamic website. Code to display flash messages can go directly in your application layout file or you can use a partial. Examine the file app/views/layouts/_messages.html.erb : <% flash.each do |name, msg| %> <% if msg.is_a?(String) %> <%= content_tag :div, msg, :class \\=> \"flash_#{name}\" %> <% end %> <% end %> It improves on our simple Ruby example in several ways. First, the expression if msg.is_a?(String) serves as a test to make sure we only display messages that are strings. Second, we use the Rails content_tag view helper to create the HTML div . The content_tag helper eliminates the messy soup of angle brackets and quote marks we used to create the HTML output in the example above. Finally, we apply a CSS class and combine the word \u201cflash\u201d with \u201cnotice\u201d or \u201calert\u201d to make the CSS class. We include the flash messages partial in our application layout with the expression: . . . <%= render 'layouts/messages' %> . . .","title":"16.13.4 The Flash Messages Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1614-html5-elements","text":"Let\u2019s look again at the app/views/layouts/application.html.erb file. To complete our examination of the application layout file, we\u2019ll look at a few structural elements. These elements are not unique to a Rails application and will be familiar to anyone who has done front-end development. Notice the tags that are structural elements in the HTML5 specification: <header> <main> These elements add structure to a web page. The tags don\u2019t add any new behavior but make it easier to determine the structure of the page and apply CSS styles. We wrap the navigation partial in the <header> tag: < %= render 'layouts/navigation' %> The <header> tag is typically used for branding or navigation. Notice the main tag : < %= render 'layouts/messages' %> < %= yield %> We wrap our messages partial and yield expression in a <main role=\"main\"> element. The <main> tag is among the newest HTML5 elements (see the W3C specification for details). From the specification: \u201cThe main content area of a document includes content that is unique to that document and excludes content that is repeated across a set of documents such as site navigation links, copyright information, site logos.\u201d We follow the advice of the specification and wrap our unique content in the <main> tag. The specification recommends, \u201cAuthors are advised to use ARIA role=\u2019main\u2019 attribute on the main element until user agents implement the required role mapping.\u201d ARIA , the Accessible Rich Internet Applications Suite, is a specification to make web applications more accessible to people with disabilities. That means the role=\"main\" attribute is there for any web browsers that don\u2019t yet recognize the <main> tag, and may help people with disabilities. We could add a <footer> tag. It typically contains links to copyright information, legal disclaimers, or contact information. We don\u2019t have a footer in our tutorial application but you can add the <footer> tag, with additional content, if you want.","title":"16.14 HTML5 Elements"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1615-application-layout","text":"Our application layout is complete. We don\u2019t have to add anything because the rails_layout gem has created everything we need. <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content= \"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> We have the viewport metatag, a title, and a description. We have partials for navigation links and flash messages. Finally we have HTML5 structural elements. That\u2019s all we need for now. In the next chapter, we\u2019ll revise it to support styling with Bootstrap.","title":"16.15 Application Layout"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1616-simple-css","text":"So far, we\u2019ve examined four files that were added by the rails_layout gem: app/views/layouts/application.html.erb app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/_navigation_links.html.erb Let\u2019s examine the CSS file that was created by the rails_layout gem. Open the file app/assets/stylesheets/simple.css : /* * Simple CSS stylesheet for a navigation bar and flash messages. */ main { background-color: #eee; padding-bottom: 80px; width: 100%; } header { border: 1px solid #d4d4d4; background-image: linear-gradient(to bottom, white, #f2f2f2); background-color: #f9f9f9; -webkit-box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); -moz-box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; } ul.nav li { display: inline; } ul.nav li a { padding: 10px 15px 10px; color: #777777; text-decoration: none; text-shadow: 0 1px 0 white; } .flash_notice, .flash_alert { padding: 8px 35px 8px 14px; margin-bottom: 20px; text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5); border: 1px solid #fbeed5; -webkit-border-radius: 4px; -moz-border-radius: 4px; border-radius: 4px; font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; } .flash_notice { background-color: #dff0d8; border-color: #d6e9c6; color: #468847; } .flash_alert { background-color: #f2dede; border-color: #eed3d7; color: #b94a48; } If you already know CSS, you\u2019ll see we\u2019ve set a background color for the main section of the page. We\u2019ve also set styles for a header, navigation links, and flash messages. This book is about Rails, not CSS, so we won\u2019t examine this closely. For more on CSS, there are thousands of tutorials on the web, but I like these: Codeacademy HTML Dog Remember what we learned about the Rails asset pipeline. By default, any CSS file in the app/assets/stylesheets/ folder will be added automatically to the application.css file that is included in the default application layout. In the next chapter, we remove the app/assets/stylesheets/simple.css and use Bootstrap to supply styles for the header, navigation links, and flash messages. For now, the simple.css file adds some basic styling and layout to the application.","title":"16.16 Simple CSS"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1617-test-the-application","text":"Let\u2019s run the application to see how it looks with the new application layout. The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . If you experimented with adding flash messages \u201cWelcome\u201d and \u201cMy birthday is soon,\u201d you\u2019ll see the messages when you visit the home page. Our home page now has only one navigation link, for \u201cHome.\u201d We\u2019ll add links for \u201cAbout\u201d and \u201cContact\u201d pages soon.","title":"16.17 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1618-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"update application layout\" $ git push","title":"16.18 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-17-front-end-framework","text":"This chapter discusses front-end development and design using CSS. I\u2019ll show you how to add style to a Rails application, using Bootstrap for a simple theme. What do we mean by \u201cfront-end development\u201d? A website back end is the Rails application that assembles files that are sent to the browser, plus a database and any other server-side services. A website front end is all the code that runs in the browser. Everything that controls the appearance of the website in the browser is the responsibility of a front-end developer, including page layout, CSS stylesheets, and JavaScript code. Front-end development has grown increasingly important as websites have become more sophisticated. And front-end technology has grown increasingly complex, to the degree that front-end development has become a job for specialists. Front-end developers are primarily concerned with: markup - the layout and structure of the page style - graphic design for visual communication interactivity - browser-based visual effects and user interaction Broader concerns include: cross-browser and cross-device functionality interaction design to improve website usability accessibility for users with physical or perceptual limitations For years, front-end development was haphazard; webmasters each had their own quirky techniques. Around the time that Rails became popular, front-end developers at large companies began to share best practices and establish open source projects to bring structure and consistency to front-end development, leading to development of CSS frameworks.","title":"Chapter 17 Front-End Framework"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#171-css-frameworks","text":"Web developers began putting together \u201cboilerplate\u201d CSS stylesheets as early as 2000, when browsers first began to fully support CSS. Boilerplate CSS made it easy to reuse CSS stylesheet rules from project to project. More importantly, designers often implemented \u201cCSS reset\u201d stylesheets to enforce typographic uniformity across different browsers. Engineers at Yahoo! released the Yahoo! User Interface Library (YUI) as an open source project in February 2006 . Inspired by an article by Jeff Croft , and reacting to the huge size of the YUI library, independent developers began releasing other CSS frameworks such as the 960 grid system and the Blueprint CSS framework. There are dozens of CSS frameworks . In general, they all seek to implement a common set of requirements: An easily customizable grid Some default typography A typographic baseline CSS reset for default browser styles A stylesheet for printing More recently, with the ubiquity of smartphones and tablets, CSS frameworks support responsive web design , accommodating differences in screen sizes across a range of devices. In tandem with the development of CSS frameworks, we\u2019ve seen the emergence of JavaScript libraries and frameworks.","title":"17.1 CSS Frameworks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#172-javascript-libraries-and-frameworks","text":"JavaScript has nothing like RubyGems, a built-in package manager for code libraries, so initially there were few open source JavaScript libraries. Now there are several competing JavaScript package managers and many software libraries. Prototype was one of the first open source JavaScript libraries, created by Sam Stephenson in February 2005 to improve JavaScript support in Ruby on Rails. MooTools , Dojo , and jQuery soon followed. Of these libraries, jQuery has become the most popular, largely because of thousands of modular jQuery plug-ins that implement a wide range of effects and widgets (web page features). These plug-ins are used to add visual effects and interactivity to web pages. Examples are drop-down menus, modal windows, tabbed panels, autocompletion search forms, and sliders or carousels for images. Even without plugins, jQuery is useful as a high-level interface for manipulating the browser DOM ( document object model ), to make it easy to do things like hiding or revealing HTML elements on a page. Any Rails application can use jQuery because it is included by default in any new Rails application. Libraries such as jQuery add functionality to server-side applications, such as those built with Rails. Other JavaScript libraries serve as fully featured web application development frameworks, allowing developers to build client-side applications that run in the browser and only interact with a server to read or write data. Examples of these full-fledged JavaScript frameworks are Ember.js , AngularJS , and Backbone.js . All use a variant of the model-view-controller (MVC) software design pattern to implement single-page applications which function more like desktop or mobile applications than websites. Developers who build a single-page application with one of these frameworks often use Ruby on Rails as a back end; an MVC JavaScript framework can replace all the Rails view files. None of these JavaScript frameworks dominate web application development like Ruby on Rails, but they are gaining popularity for single-page applications. We won\u2019t look at Ember.js, AngularJS, or Backbone.js in this book; they are an advanced topic and require entire books themselves. The biggest problem with adding JavaScript to Rails is the difficult-to-maintain \u201cJavaScript soup\u201d that results from adding JavaScript to Rails views. Ember.js, AngularJS, or Backbone.js are more than is needed for simply structuring JavaScript in Rails views. But there\u2019s a newer framework that can be used to dry up JavaScript soup. It\u2019s React , a JavaScript framework developed by engineers at Facebook. Unlike AngularJS or Ember.js, React only manages views, not connections to databases or routing of requests, so it is not a full-stack framework, just a framework for the view layer. React\u2019s approach to building web pages is abstract and complex. But React is a good choice for complex interactive features, if you\u2019re determined to avoid JavaScript soup in your Rails application. We won\u2019t look at JavaScript frameworks in this book, but we will use the Bootstrap framework to manage our CSS stylesheets.","title":"17.2 JavaScript Libraries and Frameworks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#173-front-end-frameworks","text":"Front-end frameworks combine CSS and JavaScript libraries. Many elements that are found on sophisticated web pages, such as modal windows or tabs, require a combination of JavaScript and CSS. Combining CSS and JavaScript libraries in a common framework makes it possible to standardize and reuse common web page features. There are many responsive front-end frameworks to choose from, including: Bootstrap Zurb Foundation Material Design Lite Bourbon Neat Semantic UI and many others Each has its fans, though Bootstrap and Zurb Foundation are the most popular among Rails developers. Each adds a library of markup, styles, and standardized web page features such as modal windows, pagination, breadcrumbs, and navigation. Bootstrap is the best-known front-end framework. It is the result of an effort to document and share common design patterns and assets across projects at Twitter, released as an open source project in August 2011. Just ahead, we\u2019ll look at why we use Bootstrap in this book. But first, you\u2019ll need to learn about Sass.","title":"17.3 Front-End Frameworks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#174-css-preprocessing-with-sass","text":"Ordinary CSS is not a programming language. As a result, CSS rules are verbose and often repetitive. To add efficiency to CSS, Bootstrap relies on a CSS preprocessor named Sass . Sass extends CSS to give it more powerful programming language features. As a result, your stylesheets can use variables, mixins, and nesting of CSS rules, just like a real programming language. For example, in Sass you can create a variable such as $blue: #3bbfce and specify colors anywhere using the variable, such as border-color: $blue . Mixins are like variables that let you use snippets of reusable CSS. Nesting eliminates repetition by layering CSS selectors. Sass is included in any new Rails application with the default sass-rails gem.","title":"17.4 CSS Preprocessing with Sass"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#175-bootstrap-or-others","text":"Which front-end framework should you use? Bootstrap or another such as Zurb Foundation? The Bootstrap team maintains a Ruby gem that provides a drop-in version of Bootstrap for Rails. Other front-end frameworks, such as Zurb Foundation, are also available as Ruby gems. But Bootstrap has a large developer community and many more third-party projects, as evidenced by a Big Badass List of Useful Twitter Bootstrap Resources . In its sheer magnitude, this list, from Michael Buckbee and Bootstrap Hero, demonstrates the popularity of Bootstrap and the vitality of its open source community. We\u2019ll use Bootstrap here because of its sheer popularity and solid support. Before I show you how to integrate Bootstrap with your Rails application, let\u2019s briefly consider matters of design.","title":"17.5 Bootstrap or Others?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#176-graphic-design-options","text":"There are three approaches to graphic design for your Rails application. If you\u2019re well-funded and well-connected, you can put together a team or hire a freelance graphic designer to implement a unique design, built from scratch using CSS or customized from a framework such as Bootstrap or Zurb Foundation. If you\u2019ve got strong design skills, or can partner with an experienced web designer, you\u2019ll get a custom design that expresses the purpose and motif of your website. A second approach is to use Bootstrap or another CSS framework to quickly add attractive CSS styling to your application. Many developers don\u2019t have the skill or resources to customize the design. Consequently, sites that use Bootstrap look very similar. If that\u2019s your situation, it\u2019s okay, really! It\u2019s better to have a decent site with the clean look of Bootstrap than to leak ugliness onto the web. A third option is to obtain a pre-designed theme for your website. You may have visited ThemeForest or other theme galleries that offer pre-built themes for a few dollars each. These huge commercial galleries offer themes for WordPress, Tumblr, or CMS applications such as Drupal or Joomla. They don\u2019t offer themes for Rails. Your best option is to convert open source themes designed with Bootstrap. You can visit sites such as Start Bootstrap , Bootswatch , or the Themestrap gallery to find Bootstrap themes. Whether you use a prepackaged theme or design your own layout, you\u2019ll need to know how to set up a front-end framework in Rails. We\u2019ll look at setting up Bootstrap next.","title":"17.6 Graphic Design Options"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#177-bootstrap-3-or-4","text":"At the time this was written, the new Bootstrap 4 version was in alpha release. The Bootstrap 4 version is significantly different from earlier versions. It has been in alpha for testing and feedback for over a year. Many Rails developers are already using the Bootstrap 4 version but almost all themes and third-party add-ons are only available for Bootstrap 3. Eventually, the Bootstrap 4 beta and final versions will be released but until then, I recommend sticking with Bootstrap 3. As a beginner, you\u2019ll find more resources and help for Bootstrap 3. We\u2019ll use it here for this tutorial.","title":"17.7 Bootstrap 3 or 4?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#178-bootstrap-gem","text":"Bootstrap provides a standard grid for layout plus dozens of reusable components for common page elements such as navigation, forms, and buttons. More importantly, it gives CSS the kind of structure and convention that makes Rails popular for back-end development. Bootstrap is packaged as a gem. In your Gemfile , you\u2019ve already added: gem 'bootstrap-sass' and previously run $ bundle install . The bootstrap-sass gem provides the files required to integrate Bootstrap 3 with Rails. Developers who want to use the new Bootstrap 4 release will use the Bootstrap 4 gem . Rather than following the installation instructions provided in the Bootstrap documentation , we\u2019ll use the rails_layout gem to set up Bootstrap and create the files we need.","title":"17.8 Bootstrap Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#179-rails-layout-gem-with-bootstrap","text":"In the previous chapter, we used the rails_layout gem to configure the default application layout with HTML5 elements, navigation links, and flash messages. Now we\u2019ll use the rails_layout gem to set up Bootstrap and generate new files for the application layout as well as the navigation and messages partials. The new files will replace the layout files we created in the previous chapter. We\u2019ll use the generator provided by the rails_layout gem to set up Bootstrap and add the necessary files. Run: $ rails generate layout:install bootstrap3 --force With the \u2013force argument, the rails_layout gem will replace existing files. The gem will create the file: app/assets/stylesheets/1st_load_framework.css.scss and modify the files: app/assets/javascripts/application.js app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/application.html.erb It will also remove the file: app/assets/stylesheets/simple.css Let\u2019s examine the files to see how our application is configured to use Bootstrap.","title":"17.9 Rails Layout Gem with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1710-renaming-the-applicationcss-file","text":"The rails_layout gem renamed the app/assets/stylesheets/application.css file as app/assets/stylesheets/application.css.scss . Note the .scss file extension. This will allow you to use the advantages of an improved syntax for your application stylesheet. You learned earlier that stylesheets can use variables, mixins, and nesting of CSS rules when you use Sass. Sass has two syntaxes. The most commonly used syntax is known as \u201cSCSS\u201d (for \u201cSassy CSS\u201d), and is a superset of the CSS syntax. This means that every valid CSS stylesheet is valid SCSS as well. SCSS files use the extension .scss . The Sass project also offers a second, older syntax with indented formatting that uses the extension .sass . We\u2019ll use the SCSS syntax. You can use Sass in any file by adding the file extension .scss . The asset pipeline will preprocess any .scss file and expand it as standard CSS. For more on the advantages of Sass and how to use it, see the Sass website or the Sass Basics RailsCast from Ryan Bates. Before you continue, make sure that the rails_layout gem renamed the app/assets/stylesheets/application.css file as app/assets/stylesheets/application.css.scss . Otherwise you won\u2019t see the CSS styling we will apply.","title":"17.10 Renaming the application.css File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1711-the-applicationcssscss-file","text":"In the previous chapter, I introduced the Rails asset pipeline . Your CSS stylesheets get concatenated and compacted for delivery to the browser when you add them to this directory: app/assets/stylesheets/ The asset pipeline helps web pages display faster in the browser by combining all CSS files into a single file (it does the same for JavaScript). Let\u2019s examine the file app/assets/stylesheets/application.css.scss : /* * This is a manifest file that'll be compiled into application.css, which will include all the files * listed below. * * Any CSS and SCSS file within this directory, lib/assets/stylesheets, or any plugin's * vendor/assets/stylesheets directory can be referenced here using a relative path. * * You're free to add application-wide styles to this file and they'll appear at the bottom of the * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS * files in this directory. Styles in this file should be added after the last require_* statement. * It is generally better to create a new file per style scope. * *= require_tree . *= require_self */ The app/assets/stylesheets/application.css.scss file serves two purposes. First, you can add any CSS rules to the file that you want to use anywhere on your website. Second, the file serves as a manifest , providing a list of files that should be concatenated and included in the single CSS file that is delivered to the browser. If you are familiar with CSS syntax, it may seem odd that the relevant lines are commented out (using asterisks). These lines are not CSS, so they must be commented out so they won\u2019t be interpreted as CSS. Though they are commented out, the Rails asset pipeline reads and understands them. It\u2019s a bit of a hack, but it works.","title":"17.11 The application.css.scss File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#17111-a-global-css-file","text":"Any CSS style rules that you add to the app/assets/stylesheets/application.css.scss file will be available to any view in the application. You could use this file for any style rules that are used on every page, particularly simple utility rules such as highlighting or resetting the appearance of links. However, in practice, you are more likely to modify the style rules provided by Bootstrap. These modifications don\u2019t belong in the app/assets/stylesheets/application.css.scss file; they will go in the app/assets/stylesheets/1st_load_framework.css.scss file. In general, it\u2019s bad practice to place a lot of CSS in the app/assets/stylesheets/application.css.scss file (unless your CSS is very limited). Instead, structure your CSS in multiple files. CSS that is used on only a single page can go in a file with a name that matches the page. Or, if sections of the website share common elements, such as themes for landing pages or administrative pages, make a file for each theme. How you organize your CSS is up to you; the asset pipeline lets you organize your CSS so it is easier to develop and maintain. Just add the files to the app/assets/stylesheets/ folder.","title":"17.11.1 A Global CSS File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#17112-a-manifest-file","text":"It\u2019s not obvious from the name of the app/assets/stylesheets/application.css.scss file that it serves as a manifest file as well as a location for miscellaneous CSS rules. For most websites, you can ignore its role as a manifest file. In the comments at the top of the file, the *= require_self directive indicates that any CSS in the file should be delivered to the browser. The *= require_tree . directive (note the Unix \u201cdot operator\u201d) indicates any files in the same folder, including files in subfolders, should be combined into a single file for delivery to the browser. If your website is large and complex, you can remove the *= require_tree . directive and specify individual files to be included in the file that is generated by the asset pipeline. This gives you the option of reducing the size of the application-wide CSS file that is delivered to the browser. For example, you might segregate a file that includes CSS that is used only in the site\u2019s administrative section. In general, only large and complex sites need this optimization. The speed of rendering a single large CSS file is faster than fetching multiple files.","title":"17.11.2 A Manifest File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1712-bootstrap-javascript","text":"Bootstrap provides both CSS and JavaScript libraries. Like the application.css.scss file, the application.js file is a manifest that allows a developer to designate the JavaScript files that will be combined for delivery to the browser. The rails_layout gem modified the file app/assets/javascripts/application.js to include jQuery and the Bootstrap JavaScript libraries: //= require jquery //= require jquery_ujs //= require turbolinks //= require bootstrap-sprockets //= require_tree . It added the directives //= require jquery and //= require jquery_ujs to make jQuery available to the application. Keep in mind that Rails 5.1 dropped jQuery and no longer includes the jquery-rails gem by default. We added the jquery-rails gem to the Gemfile (and ran bundle install ). Without the jquery-rails gem, you\u2019ll get an error when you run the application. The rails_layout command also added the directive //= require bootstrap-sprockets before //= require_tree . to enable the Bootstrap front-end framework. Some of the features offered by Bootstrap require the jQuery library which is why the rails_layout command modifies the app/assets/javascripts/application.js file.","title":"17.12 Bootstrap JavaScript"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1713-bootstrap-css","text":"The rails_layout gem added a file app/assets/stylesheets/1st_load_framework.css.scss containing: // import the CSS framework @import \"bootstrap-sprockets\"; @import \"bootstrap\"; . . . The file app/assets/stylesheets/1st_load_framework.css.scss is automatically included and compiled into your Rails application.css file by the *= require_tree . statement in the app/assets/stylesheets/application.css.scss file. The file could be named anything. However, by giving it a name beginning with \u201c1\u201d it will load before any other stylesheet files we may add later. The asset pipeline loads files in alphabetical order. We want the Bootstrap framework to load before any custom CSS files. The @import \"bootstrap\"; and @import \"bootstrap-sprockets\"; directives will import the Bootstrap CSS rules from the Bootstrap gem. You could add the Bootstrap @import code to the app/assets/stylesheets/application.css.scss file. However, it is better to have a separate app/assets/stylesheets/1st_load_framework.css.scss file. You may wish to modify the Bootstrap CSS rules; placing changes to Bootstrap CSS rules in the 1st_load_framework.css.scss file will keep your CSS better organized. In addition to the simple @import directives, the app/assets/stylesheets/1st_load_framework.css.scss contains a collection of Sass mixins. We\u2019ll look at these later in the chapter.","title":"17.13 Bootstrap CSS"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1714-using-bootstrap-css-classes","text":"Now that you\u2019ve installed Bootstrap, you have a rich library of interactive effects you can add to your pages. Take a look at the Bootstrap documentation to see your options. Here are just a few examples: buttons navigation bar alerts At a simpler level, Bootstrap provides a collection of carefully-crafted styling rules in the form of CSS classes. These are building blocks you use for page layout and typographic styling. For example, Bootstrap gives you CSS classes to set up rows and columns in a grid system. Let\u2019s take a closer look at the Bootstrap grid system.","title":"17.14 Using Bootstrap CSS Classes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#17141-bootstrap-grid","text":"The Bootstrap grid is responsive because it has \u201cbreakpoints.\u201d There are actually four grids: Extra small: browser windows 0 to 768 pixels wide (phones) Small: browser windows 768 to 992 pixels wide (tablets) Medium: browser windows 992 to 1200 pixels wide (desktops) Large: browser windows 1200 pixels and wider (large desktops) Start by designing for the extra small screen; then add classes prefixed \u201csmall,\u201d \u201cmedium,\u201d or \u201clarge\u201d if you want a different layout for larger screens. The layout will change at each breakpoint. The grid gives you 12 columns by default. You can organize your layout in horizontal and vertical sections using row and columns classes. For example, you could use Bootstrap grid classes to set up an application layout with a footer as a row with two sections: Copyright 2016 All rights reserved. The Bootstrap row class will create a horizontal break. The footer will contain two side-by-side sections. The first will be four columns wide; the second will be eight columns wide. Here\u2019s the same footer with a responsive design: Copyright 2016 All rights reserved. On desktops and tablets, the footer will contain two side-by-side sections. On phones, each section will expand to take the full browser width, appearing as stacked rows. To better understand the grid system with all its options, see the documentation for the Bootstrap grid .","title":"17.14.1 Bootstrap Grid"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#17142-presentational-versus-semantic-styles","text":"There are two schools of thought among front-end developers. Some developers are content to use Bootstrap\u2019s classes directly in Rails view files. For these developers, the Bootstrap classes are both practical and descriptive, making it easy for any developer who knows the Bootstrap framework to visualize the layout of a page. Other developers take issue with this approach. They argue that Bootstrap\u2019s markup is often presentational , with class names describing the appearance of the page. In an ideal world, all markup would be semantic , with class names describing the function or purpose of a style. For example, a submit button often needs styling. Compare these two approaches to markup: presentational: <button class=\"big red button\">Order Now</button> semantic: <button class=\"submit\">Order Now</button> Suppose your user testing indicates a green button generates more sales. With the presentational approach you\u2019d have to change both the Rails view file and the CSS file. With a semantic approach, you\u2019d just change the CSS file to reassign the color of the submit class.","title":"17.14.2 Presentational Versus Semantic Styles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#17143-use-bootstrap-classes-directly","text":"For quick and simple websites, where you don\u2019t need to be concerned about long-term maintenance, use Bootstrap\u2019s CSS classes directly. For example, you can style a button like this: <button type=\"button\" class=\"btn btn-success\">Order Now</button> The btn-success class is semantic and applies an \u201calert color\u201d which is green, by default, in Bootstrap.","title":"17.14.3 Use Bootstrap Classes Directly"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#17144-or-use-sass-mixins-with-bootstrap","text":"You can use Sass mixins to create your own semantic class names. Sass mixins add a layer of complexity that can map Bootstrap class names to your own semantic class names. For example, the Bootstrap grid system is presentational. Specifying rows and columns, and quantifying the size of columns, describes the visual appearance of sections of the layout rather than the purpose of each section. The presentational approach makes it easy to visualize the layout of a page. But you\u2019ll be tied to Bootstrap 3 class names for the life of your website. If class names change in a future version of Bootstrao, or you decide to switch to another front-end framework, it will be difficult to update your application, as you will have to carefully rebuild each view file. Is it worth the effort to add the complexity of Sass mixins just to future-proof your website? Probably not for a simple website such as the one you are building for Foobar Kadigan. The rails_layout gem uses Sass mixins to apply CSS style rules to the default application layout. In doing so, the default application layout is free of framework-specific code and can be used with either Bootstrap or Zurb Foundation. Before we examine the default application layout, let\u2019s take a look at the Sass mixins supplied by the rails_layout gem. Look again at the file app/assets/stylesheets/1st_load_framework.css.scss created by the rails_layout gem: // import the CSS framework @import \"bootstrap-sprockets\"; @import \"bootstrap\"; // make all images responsive by default img { @extend .img-responsive; margin: 0 auto; } // override for the 'Home' navigation link .navbar-brand { font-size: inherit; } // THESE ARE EXAMPLES YOU CAN MODIFY // create your own classes // to make views framework-neutral .column { @extend .col-md-6; @extend .text-center; } .form { @extend .col-md-6; } .form-centered { @extend .col-md-6; @extend .text-center; } .submit { @extend .btn; @extend .btn-primary; @extend .btn-lg; } // apply styles to HTML elements // to make views framework-neutral main { @extend .container; background-color: #eee; padding-bottom: 80px; width: 100%; margin-top: 51px; // accommodate the navbar } section { @extend .row; margin-top: 20px; } The rails_layout gem is in active development so the file you\u2019ve created may be different from the example in this tutorial. It will probably be very similar. At the top of the file we import the Bootstrap framework CSS files from the gem. We override a Bootstrap style rule so the \u201cHome\u201d navigation link matches the other links in the navigation bar. Then we use mixins to create semantic classes. Mixins can take a block of CSS styles, other mixins, or a CSS selector (a CSS class or ID). If you\u2019d like to combine CSS classes, or rename a CSS class, use the @extend directive. The first declaration column combines the Bootstrap classes col-md-6 and text-center to make a new class, column . Next we create a few classes that combine Bootstrap CSS classes. For example, the new submit class can be used for a button. When we use it in a view, this class will be purely semantic since it describes the purpose of the element, allowing us to set its appearance outside of any view file. Finally, to avoid applying Bootstrap classes in the application layout file, we apply styles to HTML elements main and section to make the views framework-neutral. We use the @extend directive to add a Bootstrap CSS class. And we directly set standard CSS properties such as background-color and margin-top . Using this technique, the file app/assets/stylesheets/1st_load_framework.css.scss becomes the single point of intersection between the Bootstrap framework and the application layout. For a simple website, this could be over-engineering and counter-productive. The rails_layout gem uses the technique so that either Bootstrap or Zurb Foundation can be used without any change to the default application layout. We\u2019ll use the CSS classes provided by the rails_layout gem in the tutorial application, but if you choose to customize the application, feel free to use Bootstrap classes directly to keep your project simple.","title":"17.14.4 Or Use Sass Mixins with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1715-application-layout-with-bootstrap","text":"Let\u2019s look at the application layout file created by the rails_layout gem: Examine the contents of the file app/views/layouts/application.html.erb : <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content=\"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> This file is almost identical to the simple application layout file we looked at in the previous chapter. Because we\u2019ve applied Bootstrap classes to the HTML element main in the app/assets/stylesheets/1st_load_framework.css.scss file, there\u2019s no need to use Bootstrap classes directly in the application layout.","title":"17.15 Application Layout with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1716-flash-messages-with-bootstrap","text":"The messages partial we use with Bootstrap is complex. Examine the file app/views/layouts/_messages.html.erb : <%# Rails flash messages styled for Bootstrap 3.0 %> <% flash.each do |name, msg| %> <% if msg.is_a?(String) %> \u00d7 < %= content\\_tag :div, msg, :id \\=> \"flash\\_#{name}\" %> <% end %> <% end %> We use each to iterate through the flash hash, retrieving a name and msg that are passed to a block to be output as a string. The expression if msg.is_a?(String) serves as a test to make sure we only display messages that are strings. We construct a div that applies Bootstrap CSS styling around the message. Bootstrap provides classes alert and alert-dismissible to style the message. We use the Ruby ternary operator to check the type of the alert. A class of either success or danger styles the message. Rails notice messages will get styled with the Bootstrap success class. Any other Rails messages, including alert messages, will get styled with the Bootstrap danger class. We use the Rails content_tag view helper to create a div containing the message. Bootstrap creates a \u201cclose\u201d icon by applying the class alert-dismissible . Bootstrap\u2019s integrated JavaScript library will hide the alert box when the \u201cclose\u201d link is clicked. Bootstrap provides detailed documentation if you want to change the styling of the alert boxes.","title":"17.16 Flash Messages with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1717-navigation-partial-with-bootstrap","text":"The layout and styling required for the Bootstrap navigation bar are in the navigation partial file. Examine the file app/views/layouts/_navigation.html.erb : <%# navigation styled for Bootstrap 3.0 %> Toggle navigation < %= link\\_to 'Home', root\\_path, class: 'navbar-brand' %> < %= render 'layouts/navigation\\_links' %> The navigation partial is now more complex, with layout and Bootstrap classes needed to produce a responsive navigation bar. At the conclusion of this chapter, you\u2019ll test the responsive navigation by resizing the window. At small sizes, the navigation links will disappear and be replaced by an icon labeled \u201cMenu.\u201d Clicking the icon will reveal a vertical menu of navigation links. The navigation menu is a great demonstration of the ability of Bootstrap to adjust to the small screen size of a tablet or smartphone. If you\u2019d like to add a site name or logo to the tutorial application, you can replace the link helper <%= link_to \u2019Home\u2019, root_path %> . It is important to preserve the enclosing layout and classes, even if you don\u2019t want to display a site name or logo. The enclosing layout is used to generate the navigation menu when the browser window shrinks to accommodate a tablet or smartphone. You\u2019ll see we wrap the nested partial render \u2019layouts/navigation_links\u2019 with Bootstrap classes to complete the navigation bar.","title":"17.17 Navigation Partial with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1718-navigation-links-partial","text":"The file app/views/layouts/_navigation_links.html.erb is unchanged: <%# add navigation links to this file %> Later we\u2019ll add links to \u201cAbout\u201d and \u201cContact\u201d pages. The navigation links partial will be simply a list of navigation links. We\u2019re following the separation of concerns principle here. By separating the links from the styling that creates the navigation bar, we segregate the code that is unique to Bootstrap. In the future, if the Bootstrap layout or CSS classes change, we can make changes without touching the navigation links. If we wish, we can replace the navigation partial and substitute one that uses a different framework instead of Bootstrap, leaving the navigation links intact.","title":"17.18 Navigation Links Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1719-test-the-application","text":"Let\u2019s see how the application looks with Bootstrap. The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You should see a new page design that displays Bootstrap styling. Thanks to the open source efforts of the Bootstrap core team and contributors, we\u2019ve added powerful front-end features to our website with little effort. You can click the \u201cX\u201d close icons to hide the flash messages, thanks to the integrated CSS and JavaScript of the Bootstrap framework. Next we\u2019ll add \u201cAbout\u201d and \u201cContact\u201d pages to the application. After we update the navigation links, you\u2019ll see how the Bootstrap responsive web design adjusts the navigation bar at different browser widths.","title":"17.19 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1720-remove-the-flash-messages","text":"Before we continue, we\u2019ll remove the flash messages we created for our demonstration. Update the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @owner \\= Owner.new end end","title":"17.20 Remove the Flash Messages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1721-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"front-end framework\" $ git push","title":"17.21 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-18-add-pages","text":"Let\u2019s begin adding pages to our web application. There are three types of web pages in a Rails application. We\u2019ve looked at two types so far: static pages in the public/ folder that contain no Ruby code dynamic pages such as our home page that use the application layout There\u2019s another type of web page that is required on many websites. It has static content; that is, no dynamic data is needed on the page. But it uses the default application layout to maintain consistency in the website look and feel. We classify this type of page as a: static view that uses the application layout Examples include: \u201cAbout\u201d page Legal page FAQ page It\u2019s possible to place these pages in the public/ folder and copy the HTML and CSS from the default application layout but this leads to duplicated code and maintenance headaches. And dynamic elements such as navigation links can\u2019t be included. For these reasons, developers seldom create static pages in the public/ folder. Alternatively, a dynamic page can be created that has no model, a nearly-empty controller, and a view that contains no instance variables. This solution is quite common for static views that use the application layout. This solution is implemented so frequently that many developers create a gem to encapsulate the functionality. We\u2019re going to use the best-known of these gems, the high_voltage gem created by the Thoughtbot consulting firm. We\u2019ll use the High Voltage gem to create an \u201cAbout\u201d Page. We also will create a Contact page. We\u2019ll again use the High Voltage gem, but only for the first version of the Contact page. Later we\u2019ll discard the page we created with the High Voltage gem and replace it with a full model-view-controller implementation. The process will show the difference between an older form of web application architecture and a newer \u201cRails way.\u201d","title":"Chapter 18 Add Pages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#181-high-voltage-gem","text":"We can add a page using the High Voltage gem almost effortlessly. The gem implements Rails \u201cconvention over configuration\u201d so well that there is nothing to configure. There are alternatives to its defaults which can be useful but we won\u2019t need them; visit the GitHub home page for the high_voltage gem if you want to explore all the options. In your Gemfile , you\u2019ve already added: gem 'high_voltage' and previously run $ bundle install .","title":"18.1 High Voltage Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#182-views-folder","text":"Create a folder app/views/pages : $ mkdir app/views/pages Any view files we add to this directory will automatically use the default application layout and appear when we use a URL that contains the filename. The High Voltage gem contains all the controller and routing magic required for this to happen. Let\u2019s try it out.","title":"18.2 Views Folder"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#183-about-page","text":"Create a file app/views/pages/about.html.erb : <% content_for :title do %>About<% end %>","title":"18.3 \u201cAbout\u201d Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#184-contact-page","text":"For the initial version of the Contact page, create a file app/views/pages/contact.html.erb : <% content_for :title do %>Contact<% end %>","title":"18.4 Contact Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#185-routing-for-the-high-voltage-gem","text":"The High Voltage gem provides a PagesController. You\u2019ll never see it; it is packaged inside the gem. In addition to providing a controller, the High Voltage gem provides default routing so any URL with the form http://localhost:3000/pages/about will obtain a view from the app/views/pages directory. Like the PagesController, the code that sets up the route is packaged inside the gem. For details about the syntax of routing directives, refer to RailsGuides: Routing from the Outside In .","title":"18.5 Routing for the High Voltage Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#186-update-the-navigation-partial","text":"You can use a Rails route helper to create a link to any view in the app/views/pages directory like this: link_to 'About', page_path('about') Let\u2019s add links to the \u201cAbout\u201d and \u201cContact\u201d pages. Replace the contents of the file app/views/layouts/_navigation_links.html.erb with this: <%# add navigation links to this file %> < %= link\\_to 'About', page\\_path('about') %> < %= link\\_to 'Contact', page\\_path('contact') %> With an updated navigation bar, we can test the application.","title":"18.6 Update the Navigation Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#187-test-the-application","text":"The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Links to the pages \u201cAbout\u201d and \u201cContact\u201d should work. If you get an error \u201cuninitialized constant PagesController,\u201d make sure the config/routes.rb file looks like this: Rails.application.routes.draw do root to: 'visitors#new' end Watch what happens when you resize the page. At smaller sizes, the navigation bar changes to display a menu icon. Clicking the menu icon reveals a drop-down menu of navigation links. You\u2019re seeing the power of the Bootstrap framework. Here\u2019s a troubleshooting tip. If clicking the menu icon doesn\u2019t reveal a drop-down menu, the application may not be loading the Bootstrap JavaScript library. Make sure that the file app/assets/javascripts/application.js contains: //= require jquery //= require jquery_ujs //= require turbolinks //= require bootstrap-sprockets //= require_tree .","title":"18.7 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#188-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add 'about' and 'contact' pages\" $ git push There is nothing more we need for our \u201cAbout\u201d page. In the next chapter, we\u2019ll explore two different implementations for the Contact page.","title":"18.8 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-19-contact-form","text":"Forms are ubiquitous on the web, to the degree we seldom notice how often they are used for data entry, whether we\u2019re logging into a website or posting a blog comment. To build any interactive website, you\u2019ll need to understand forms. Here we\u2019ll build a contact form for our tutorial application. A contact form is common on many websites. If you think about it, contact forms are often unnecessary; simply displaying an email address is sufficient, more convenient, and easier to implement. But building a contact form is an excellent way to learn how to handle user data input. We\u2019ll pretend that our odd client, Mr. Foobar Kadigan, insists that he needs a contact form on his website. We\u2019re not backing the tutorial application with a database so we won\u2019t store the contact data after the information is submitted. Instead, in a subsequent chapter we\u2019ll learn how to send the contents of the form by email to the website owner.","title":"Chapter 19 Contact Form"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#191-the-old-way-and-the-rails-way","text":"In this chapter, we\u2019ll explore two ways to implement a contact form. The first way will be familiar to anyone who has used PHP or similar web platforms. It is an obvious and straightforward way to handle a form. As we look closer, we\u2019ll see the approach has limitations. We\u2019ll discard our first approach and rebuild the Contact page, discovering how the \u201cRails way\u201d is more powerful. You may wonder why I\u2019m going to show you two different ways to implement the contact form. First, it is worthwhile to see there is more than one way to implement a web application. Maturity as a software developer means imagining different approaches and evaluating your options. With this exercise, you\u2019ll contrast two approaches and see how we make choices about software architecture. More importantly, it is not always obvious why we do things in a \u201cRails way.\u201d It would be easy to simply walk you through the steps to build a contact form without showing you alternative implementations (that\u2019s how most tutorials do it). But you\u2019ll gain a deeper understanding of Rails by building the contact form in a less sophisticated fashion and then seeing the more elegant Rails approach.","title":"19.1 The \u201cOld Way\u201d and the \u201cRails Way\u201d"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#192-user-story","text":"Let\u2019s plan our work with a user story: *Contact Page* As a visitor to the website I want to fill out a form with my name, email address, and some text In order to send a message to the owner of the website Our first step will be to create a route to a controller that will process the submitted form.","title":"19.2 User Story"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#193-routing","text":"We\u2019re going to create a ContactsController to process the submitted form data. Every form must have a destination URL that receives the form submission. We need to set a route to generate the destination URL. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do post 'contact', to: 'contacts#process_form' root to: 'visitors#new' end The route post \u2019contact\u2019, to: \u2019contacts#process_form\u2019 will create a route helper that generates a URL and hands off the request to a controller. You can run the rails routes command to see our routes in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contact POST /contact(.:format) contacts#process_form root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command is somewhat cryptic but confirms we\u2019ve created the routes we need. The first item in the rails routes output indicates we can add \u201ccontact\u201d to \u201c_path\u201d to get our route helper, contact_path : contact_path - a route helper that can be used in a controller or view The second item indicates the request will be handled with the HTTP POST protocol: POST - HTTP method to submit form data The third item indicates the application will respond to the following URL: http://localhost:3000/contact - URL generated by the route helper The fourth item indicates a request to the URL will be handled by: contacts - the name of the controller process_form - a controller action For details about the syntax of routing directives, refer to RailsGuides: Routing from the Outside In . The route won\u2019t work yet; we need to create a ContactsController. But first we\u2019ll create the form.","title":"19.3 Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#194-adding-a-form-to-the-contact-page","text":"Let\u2019s add the code for a contact form to the Contact page. Forms were simple in the early days of the web. An HTML <form> tag creates a container for a form. The form element specifies a URL (an \u201caction\u201d) which receives and processes the form submission. Form fields accept input such as text or checkboxes. A submit button gathers the input and sends a request to the URL specified in the form action. Rails tries to simplify forms and make them more powerful. First, to simplify forms, Rails provides a set of view helpers for forms. These view helpers automate the creation of the necessary HTML elements. Some developers use an alternative set of form helpers (such as the SimpleForm gem ) which make the syntax of forms even simpler. Form helpers such as SimpleForm add a dependency that I like to avoid (sometimes the gem is not updated or breaks). We\u2019ll use the standard Rails form helpers. Rails also makes forms more powerful by providing a form builder that can be associated with a model. Associating a model with a form allows Rails to perform validation on the input data. We\u2019ll first build a form without a model (the \u201cold way\u201d) and then add a model (the \u201cRails way\u201d). Unfortunately, in the quest for simplicity and power, the Rails maintainers have made forms much more complicated than the original HTML specification. A large part of the complication is a new forms syntax introduced in Rails 5.1. Prior to Rails 5.1, Rails provided two different ways to create forms. One approach, using the form_tag directive, was simpler and didn\u2019t use a form builder and associated model. The second approach, using the form_for directive, was more powerful and widely used because it enabled validation of form data using an associated model. In Rails 5.1, the Rails maintainers introduced a third approach, using the form_with directive. The form_with approach replaces both the form_tag and form_for directives, combining both earlier approaches in one set of view helpers. There is very little documentation to explain how to use the form_with approach. As of this writing, the RailsGuides: Rails Form Helpers official document has not been updated for the new form_with syntax. Most tutorials (and Stack Overflow answers) explain forms using the form_tag or form_for helpers. The only official documentation is the Rails API document . These are persuasive reasons not to use the new form_with syntax. However, a future version of Rails will deprecate (remove) the form_tag or form_for helpers. It\u2019s best to learn to use form_with for your forms. Our tutorial will use form_with . Replace the contents of the file app/views/pages/contact.html.erb : <% content_for :title do %>Contact<% end %>","title":"19.4 Adding a Form to the Contact Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#195-controller","text":"We need code to process the form data. The form data is sent to the server as a POST request attached to a URL. As we\u2019ve learned, in Rails we use controllers to respond to browser requests. For this implementation, we\u2019ll create a ContactsController to process the submitted form data. Create a file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def process_form Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash[:notice] \\= \"Received request from #{params[:name]}\" redirect_to root_path end end The ContactsController inherits the behavior of the base ApplicationController. We create a process_form method to respond when the form is submitted. Later we\u2019ll learn that process_form doesn\u2019t fit the \u201cRails way.\u201d We\u2019ll use it for now. Before we look closely at the code for the process_form method, we need to learn about the params hash.","title":"19.5 Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1951-params-hash","text":"Take a close look at these two lines: Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash\\[:notice\\] \\= \"Received request from #{params\\[:name\\]}\" Notice the params object. Earlier we learned about the Ruby Hash class. It is a data structure for key/value pairs and Hash instances are ideal for storing form data. Each field on the form can be mapped as label and data , or key and value, and stored in a Hash. Rails does all the work of extracting the form data from the browser\u2019s POST request. Rails creates a hash with the form field data mapped to the form field labels. Here\u2019s part of the hash: {... \"name\"\\=>\"Daniel\", \"email\"\\=>\" [email protected] \", \"content\"\\=>\"hi\" ...} The full params hash actually contains more data which we can see with a debug command: {\"utf8\"\\=>\"\u2713\", \"authenticity_token\"\\=>\"...\", \"name\"\\=>\"Daniel\", \"email\"\\=>\" [email protected] \", \"content\"\\=>\"hi\", \"commit\"\\=>\"Submit\", \"controller\"\\=>\"contacts\", \"action\"\\=>\"process_form\"} The params hash includes these elements: the utf8 checkmark character forces browsers to recognize Unicode the authenticity token prevents CSRF ( Cross Site Request Forgery ) form data current controller current action You will see the contents of the params hash in the console log after you submit the form. We\u2019ll look at the console log when we test the implementation.","title":"19.5.1 Params Hash"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1952-process_form-method","text":"Now that we know about the params hash, take a look again at the process_form method: def process_form Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash[:notice] \\= \"Received request from #{params[:name]}\" redirect_to root_path end We use a logger.debug method to reveal the form data in our console log by revealing the contents of the params hash. The inspect method shows the parameters in an easy-to-read list. Then we extract the data posted to the name field of the form and construct a flash message. A hash containing the data from the contact form is nested inside the params hash. We can retrieve the value of the name field with the expression params[:name] . We use double quotes and string interpolation to form the message using the #{...} syntax that evaluates a Ruby expression and combines it with a string. Finally we use the redirect_to directive to render the home page. We haven\u2019t actually sent the contact data to anyone. We\u2019ll add code for that later, after we refactor the controller to be a better example of the \u201cRails way.\u201d Before we do that, let\u2019s test the current implementation. We\u2019ve already set up routing for the new controller.","title":"19.5.2 Process_form Method"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#196-test-the-application","text":"If you need to start the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link; then fill out and submit the form. You should see the flash message \u201cReceived request from \u2026\u201d on the home page. If you see the message \u201cMy birthday is soon\u201d you need to delete your earlier experiment from the Visitors controller. If you get an error message \u201cuninitialized constant ContactsController,\u201d make sure you created the file app/controllers/contacts_controller.rb as instructed above. Notice what appears in the console log: Started POST \"/contact\" for 127.0.0.1 at 2017-07-19 16:22:13 +0800 Processing by ContactsController#process_form as JS Parameters: {\"utf8\"=>\"\u2713\", \"authenticity_token\"=>\"..\", \"name\"=>\"Daniel\", \"email\"=>\" [email protected] \", \"content\"=>\"hi\", \"commit\"=>\"Submit\"} DEBUG: params are \"\u2713\", \"authenticity_token\"=>\"...\", \"name\"=>\"Daniel\", \"email\"=>\" [email protected] \", \"content\"=>\"hi\", \"commit\"=>\"Submit\", \"controller\"=>\"contacts\", \"action\"=>\"process_form\"} permitted: false> Redirected to http://localhost:3000/ Completed 200 OK in 7ms The console log is our most important tool for debugging. Let\u2019s analyze what we see: Started POST - shows the server is responding to an HTTP POST request \u201c/contact\u201d - the path portion of the URL at \u2026 - timestamp Processing by ContactsController - the controller process_form - the controller action (the method that handles the request) as JS - the standard syntax (not XML or some other markup) Parameters: - the params hash containing all the submitted data \u201cutf8\u201d=\u201d\u2713\u201d - a Rails workaround to set the language encoding in Internet Explorer \u201cauthenticity token\u201d - prevents CSRF security exploits the form data \u201ccommit\u201d - the \u201cSubmit\u201d label from the button DEBUG - our debug message containing the form data Redirected to http://localhost:3000/ - responded by displaying the home page Completed 200 OK - HTTP response status code 200 indicating success in 7ms - time required to process the request That\u2019s a lot of data. For now, we really only care about the form data buried in the params hash. You can see that we really don\u2019t need the debug message because the console log shows us the contents of the params hash.","title":"19.6 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#197-the-validation-problem","text":"It looks like we\u2019ve got everything we need to handle a form submission. As a next step, we could implement code to send an email message using form data extracted from the params hash. But consider a potential problem. What if the email address is poorly formed? The visitor will think the message has been sent but it will never be delivered. Or what if the name field or message is blank? It\u2019s not just a problem for the hapless visitor. An evildoer could repeatedly click the submit button, filling Foobar Kadigan\u2019s email inbox with endless empty messages. We need validation of the form data before we process it. We could dig into the Rails String API and look for a way to test if the string is empty or contains only whitespaces. And we could raise an Exception if the string is blank. Here\u2019s what validation code could look like. We won\u2019t use this code (because there\u2019s a better way to do this): class ContactsController < ApplicationController def process_form if params[:name].blank? raise 'Name is blank!' end if params[:email].blank? raise 'Email is blank!' end if params[:content].blank? raise 'Message is blank!' end message \\= \"Received request from #{params[:name]}\" redirect_to root_path, :notice \\=> message end end We would need additional code to test for invalid email addresses (it will be a complex regex , or regular expression ). And we would need a nicer way of showing the error to the visitor (right now, raising the exception displays an error message that makes it appear the application is broken). If we were implementing this on another web application platform, we might go further down this path, googling for code examples, and implementing a lengthy but bulletproof validation function. Rails offers a better way.","title":"19.7 The Validation Problem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#198-remove-the-contact-page","text":"We will implement a model-view-controller architecture for our Contact feature. That means we need a Contact model, a Contacts controller, and view files in the app/views/contacts/ folder. We no longer need the Contact page in the app/views/pages/ folder. Let\u2019s get started by removing the file app/views/pages/contact.html.erb : $ rm app/views/pages/contact.html.erb Before we implement a model-view-controller architecture, let\u2019s take time to understand the advantages of the Rails model-view-controller approach.","title":"19.8 Remove the Contact Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#199-implementing-the-rails-way","text":"Our initial implementation of the contact form is consistent with the earliest approach to web application development. That\u2019s why I call it the \u201cold way.\u201d It is an approach that originated in 1993 with a specification for CGI, the Common Gateway Interface . Before CGI, every page on the web existed only as a static HTML file. CGI made it possible to run a program, or CGI script, that dynamically generated HTML. In the early years of the web, every web URL matched either an HTML file or a CGI script. This is the \u201cpage paradigm\u201d of the web. So far, we\u2019re following the \u201cpage paradigm.\u201d Our Contact page hosts the form. Clicking the submit button makes a request to another page that is actually a program that returns HTML. Until the late 1990s, this is how the web worked. But soon after the introduction of CGI, developers began exploring the possibility of running a single program (an application server) that responds to any URL, parsing the URL to establish routing, and generating pages dynamically. This was the genesis of the \u201cweb application paradigm.\u201d It\u2019s how Rails works. The web application paradigm frees us from one-to-one correspondence of a URL with a single file or script. It allows us to refactor our code into object-oriented classes and methods that can be inherited rather than duplicated, which means we don\u2019t repeat the same code on every page that processes a form. The web application paradigm makes it possible to use the model-view-controller architecture. Instead of looking at the web as URLs that return pages, we see requests that are routed to controllers that render views. We can segregate any code that manipulates data into a model class, instead of mixing HTML with data manipulation in a single script. With the \u201cweb application paradigm,\u201d we can have a generic model class that isolates the code that connects to a database or validates form data. We can create models that inherit the generic behavior from a parent class and get a database connection or validation \u201cfor free.\u201d Unlike the \u201cpage paradigm,\u201d we\u2019ll avoid duplicating validation code every time we need to process a form. Consider our process_form method again: class ContactsController < ApplicationController def process_form if params[:name].blank? raise 'Name is blank!' end if params[:email].blank? raise 'Email is blank!' end if params[:content].blank? raise 'Message is blank!' end message \\= \"Received request from #{params[:name]}\" redirect_to root_path, :notice \\=> message end end We\u2019ll replace it with something better. Our \u201csegregation of concerns\u201d philosophy suggests that validation belongs in a model, since validation is a type of data manipulation (strictly speaking, a test of data integrity). Furthermore, it would be nice to make the validation tests generic so they could be used to validate data submitted from any form. Rails, as a framework, provides all this for us. We call it the \u201cRails way.\u201d","title":"19.9 Implementing the \u201cRails Way\u201d"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1910-activemodel","text":"Rails extracts and generalizes common code that every website requires. The code that websites need for access to databases is abstracted into the Rails ActiveRecord class. ActiveRecord includes code from the ActiveModel class that handles interaction with forms and data validation. The ActiveModel class interfaces with SimpleForm to provide sophisticated validation and error handling. We can mix in behavior from the ActiveModel class to add validation and error handling to any model we create. SimpleForm will recognize ActiveModel methods if we provide a model as an argument to the SimpleForm view helper. SimpleForm will give the form a name that matches the model name. And SimpleForm will automatically generate a destination URL for the form based on the model name. More significantly, SimpleForm will add sophisticated error handling to the form. If a visitor doesn\u2019t enter a name or submits an invalid email address, and we declare in our model that we require validation, SimpleForm will highlight the invalid field and display an inline message indicating the problem. Compared to what we\u2019ve implemented so far, this kind of error handling provides a vastly superior user experience. Instead of displaying a message that the application failed, the form will be redisplayed with the problem marked and noted. Now that we\u2019ve seen the advantages of the \u201cRails way,\u201d let\u2019s re-implement our contact form using the model-view-controller architecture.","title":"19.10 ActiveModel"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1911-model","text":"When we build database-backed applications with Rails, we base our models on a parent class named ActiveRecord. We are not using a database for our tutorial application, so we\u2019ll mix in behavior from ActiveModel, which adds validation and error handling to our model. Let\u2019s set up a model that doesn\u2019t require a database. Create a file app/models/contact.rb : class Contact include ActiveModel::Model attr_accessor :name, :email, :content validates_presence_of :name validates_presence_of :email validates_presence_of :content validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i validates_length_of :content, :maximum \\=> 500 end When you copy this, be careful to keep the long regex expression ( with: /.../i ) on one line (no line breaks). We give the model the name \u201cContact.\u201d We mix in behavior from the ActiveModel class using include ActiveModel::Model . We create attributes (data fields) for the model by using the attr_accessor keyword. The attributes match the fields in the contact form. If we were using a database for our tutorial application, we would not need to use attr_accessor because ActiveRecord would create access methods for reading and writing attributes directly from the database. ActiveModel gives us validation methods named validates_presence_of , validates_format_of , and validates_length_of . We check that name , email , and content exist (no blanks are allowed). We provide a complex regex , or regular expression , to test if the email address is valid. Finally, we declare that the message content cannot exceed 500 characters. The model is elegant. We describe the fields we need and state our validation requirements. ActiveModel does all the rest. Next we\u2019ll add a new Contact page by creating a view in the app/views/contacts/ folder. The new contact form will use our new model.","title":"19.11 Model"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1912-create-a-new-contact-page","text":"First, let\u2019s create the app/views/contacts/ folder: $ mkdir app/views/contacts/ Create a file app/views/contacts/new.html.erb : <% content_for :title do %>Contact<% end %>","title":"19.12 Create a New Contact Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1913-seven-controller-actions","text":"Consider all the possibilities for managing a list. It\u2019s a list of anything: users, inventory, thingamajigs. We use a web application to manage the list, so we\u2019ll fill out a form to record each item in our list. The web application offers seven features to help us manage our records: index - display a list of all items show - display a record of one item new - display an empty form create - save a record of a new item edit - display a record for editing update - save an edited record destroy - delete a record You can manage any list using these seven actions. There are a few extra actions that are helpful, such as: pagination - displaying a portion of a list sorting - displaying the list in a different order bulk edit - changing multiple items at once But seven basic actions are all you need for managing any list of items. The \u201cRails way\u201d is about taking advantage of structure and convention to leverage the power of the framework. The ApplicationController contains code to implement each of the seven standard actions. When we create a controller that inherits from the ApplicationController, we get these standard actions \u201cfor free.\u201d That\u2019s why our new method in our VisitorsController was so simple. The controller knew to render a view file named new.html.erb from the views/visitors/ folder because of behavior inherited from the ApplicationController. Just like the Rails directory structure provides consistency to make it easy for any Rails developer to collaborate with other Rails developers, relying on the seven standard controller actions makes it easy for other team members to understand how your controllers work. A controller that uses these actions is said to be \u201cRESTful\u201d (a term that refers to representational state transfer , a software design abstraction). Experienced Rails developers follow the \u201cRails way\u201d and try to use RESTful controller methods when possible. When necessary, you will add other controller actions. For example, imagine you\u2019ve built a subscription website. When a user\u2019s subscription ends, you may not want to destroy the subscriber record. Instead you might add a controller expire or suspend action that marks the subscriber record as expired so you can continue to access the subscriber\u2019s contact information for customer service or renewal offers. To the extent you can, use the seven standard controller actions and be cautious about adding more. Earlier, I said our ContactsController process_form method isn\u2019t suitable for the \u201cRails way.\u201d With our model-view-controller architecture, we can piggyback on the ApplicationController to display our empty contact form and process the form when it is submitted. We\u2019ll use only two of the seven standard controller actions: new - display the empty contact form create - validate and process the submitted form Our ContactsController will know to render a view from the app/views/contacts/new.html.erb file when we call the controller new method. We won\u2019t piggyback on behavior from the ApplicationController create method. But we\u2019ll implement a create method because, by convention, the form will submit the data to the controller\u2019s create method. SimpleForm will create a destination URL that corresponds to the ContactsController#create action.","title":"19.13 Seven Controller Actions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1914-controller","text":"Replace the contents of the file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def new @contact \\= Contact.new end def create @contact \\= Contact.new(secure_params) if @contact.valid? # TODO send message flash[:notice] \\= \"Message sent from #{@contact.name}.\" redirect_to root_path else render :new end end private def secure_params params.require(:contact).permit(:name, :email, :content) end end We\u2019ve dropped the \u201cold school\u201d process_form method and added the \u201cRails way\u201d new and create methods. The controller new action will instantiate an empty Contact model, assign it to the @contact instance variable, and render the app/views/contacts/new.html.erb view. We\u2019ve already created the view file containing the form. SimpleForm will set a destination URL that corresponds to the ContactsController#create action. The create method will instantiate a new Contact model using the data from the form (we take steps to avoid security vulnerabilities first\u2014more on that later). The ActiveModel class provides a method valid? which we can call on the Contact model. Our conditional statement if @contact.valid? checks each of the validation requirements we\u2019ve set in the model. If all the Contact fields are valid, we can send a message (which we\u2019ll add later), prepare a flash message, and redirect to the home page. Notice that we don\u2019t need to dig into the params hash for the visitor\u2019s name; it is now available as @contact.name directly from the model. If any validation fails, the controller create action will render the app/views/contacts/new.html.erb view. This time, appropriate error messages are set and the form object\u2019s error_notification method will highlight the invalid field and display a matching prompt. You\u2019re looking at the tightly bound interaction of the \u201cRails way\u201d model, view, and controller. The only element we are missing is routing. But first, let\u2019s look closer at the steps we take to avoid security exploits.","title":"19.14 Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#19141-mass-assignment-vulnerabilities","text":"Rails protects us from a class of security exploits called \u201cmass-assignment vulnerabilities.\u201d Rails won\u2019t let us initialize a model with just any parameters submitted on a form. Suppose we were creating a new user and one of the user attributes was a flag allowing administrator access. A malicious hacker could create a fake form that provides a user name and sets the administrator status to \u201ctrue.\u201d Rails forces us to \u201cwhite list\u201d each of the parameters used to initialize the model. We create a method named secure_params to screen the parameters sent from the browser. The params hash contains two useful methods we use for our screening: require(:contact) - makes sure that params[:contact] is present permit(:name, :email, :content) - our \u201cwhite list\u201d With this code, we make sure that params[:contact] only contains :name, :email, :content . If other parameters are present, they are stripped out. Rails will raise an error if a controller attempts to pass params to a model method without explicitly permitting attributes via permit . In older versions of Rails (before Rails 4.0), the mass-assignment exploit was blocked by using a \u201cwhite list\u201d of acceptable parameters with the attr_accessible keyword in a model. You\u2019ll see this code in examples and tutorials that were written before Rails 4.0 introduced \u201cstrong parameters\u201d in the controller.","title":"19.14.1 Mass-Assignment Vulnerabilities"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#19142-private-methods","text":"If you paid close attention to the code you added to the Contacts controller, you may have noticed the keyword private above the secure_params method definition. This is a bit of software architecture that limits access to the secure_params method (plus any more methods we might add beneath it). Very simply, adding the private keyword restricts access to the secure_params method so only methods in the same class can use it. You might be puzzled; after all, how else could it be accessed? We haven\u2019t explored calling methods from other classes, so I\u2019ll just say that without the private keyword, the secure_params method could be used from code anywhere in our application. In this case, we apply the private keyword because we want to be sure the secure_params method is only used in the ContactsController class. It\u2019s just a bit of \u201cbest practice\u201d and for now, you can simply learn that secure_params method should be a private method. Now let\u2019s look at routing for controllers that are built the \u201cRails way.\u201d","title":"19.14.2 Private Methods"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1915-routing","text":"Rails routing is aware of the seven standard controller actions. In fact, it takes only one keyword (with one parameter) to generate seven different routes for any controller. The keyword is resources and supplying a name that matches a model and controller provides all seven routes. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do resources :contacts, only: [:new, :create] root to: 'visitors#new' end Here we\u2019ve added resources :contacts, only: [:new, :create] . We only want two routes so we\u2019ve added the restriction only: [:new, :create] . The new route has these properties: new_contact_path - route helper contacts - name of the controller (ContactsController) new - controller action http://localhost:3000/contacts/new - URL generated by the route helper GET - HTTP method to display a page The create route has these properties: contacts_path - route helper contacts - name of the controller (ContactsController) create - controller action http://localhost:3000/contacts - URL generated by the route helper POST - HTTP method to submit form data You can run the rails routes command to see these in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contacts POST /contacts(.:format) contacts#create new_contact GET /contacts/new(.:format) contacts#new root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command shows we\u2019ve created the routes we need. Our new route new_contact_path can now be used. We\u2019ve completed our move to the model-view-controller architecture by adding the appropriate routes.","title":"19.15 Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1916-change-navigation-links","text":"With our new model-view-controller architecture, we need to change the navigation links. Change the file app/views/layouts/_navigation_links.html.erb : <%# add navigation links to this file %> < %= link\\_to 'About', page\\_path('about') %> < %= link\\_to 'Contact', new\\_contact\\_path %> We\u2019re ready to test the model-view-controller implementation of the Contact feature. Be sure you\u2019ve removed the file app/views/pages/contact.html.erb , as it is no longer used.","title":"19.16 Change Navigation Links"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1917-test-the-application","text":"If you need to restart the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link; then fill out and submit the form. You should see the flash message \u201cMessage sent from \u2026\u201d on the home page. Try submitting the form with a blank name. You\u2019ll see a warning message, \u201cPlease review the problems below.\u201d Try submitting the form with an invalid email address such as \u201c [email protected] \u201d. The form will re-display with a message, \u201cPlease review the problems below,\u201d and next to the email field, \u201cis invalid.\u201d Combining SimpleForm error handling with ActiveModel validation is powerful. If validation fails after the form is submitted, the page will redisplay and SimpleForm will display an appropriate error message.","title":"19.17 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#1918-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"contact form\" $ git push We\u2019ve built a sophisticated Contact form.","title":"19.18 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-20-send-mail","text":"Email sent from a web application is called transactional email . As a website visitor, you\u2019ve probably seen transactional email such as these messages: sign up confirmation email response to a password reset request acknowledgment of a purchase notice of a change to a user profile setting A web application can send email to a visitor. It can also send messages to its owner or webmaster. On large active sites, email notices can be impractical (an admin interface is better) but for our small-volume tutorial application, it makes sense to email the contact request directly to the site owner (Foobar Kadigan is retired and enjoys receiving email).","title":"Chapter 20 Send Mail"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#201-user-story","text":"Let\u2019s plan our work with a user story: *Send Contact Message* As the owner of the website I want to receive email messages with a visitor's name, email address, and some text In order to communicate with visitors To implement the user story, let\u2019s create a feature that sends the contact data as an email message.","title":"20.1 User Story"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#202-implementation","text":"Rails makes it easy to send email. The ActionMailer gem is part of any Rails installation. Implementation of email closely follows the model-view-controller architecture. To implement email, you\u2019ll need: model view mailer The \u201cmailer\u201d is similar to a controller, combining data attributes from a model with a view file. Any methods we add to the mailer class can be called from a controller, triggering delivery of an email message. The model can be any we\u2019ve already created. In this case, we\u2019ll use the Contact model, since it gives us access to the visitor\u2019s name, email address, and message. We\u2019ll create a mail-specific view file in the app/views/user_mailer/ folder. Our folder for mail-specific views will go in the app/views/ directory as a sibling of the app/views/layouts folder. The Rails directory structure already gives us a folder app/mailers/ for the mailer class and, not surprisingly, it is a sibling of the app/controllers/ folder. We don\u2019t have to create the necessary folders and files manually, as the rails generate command runs a utility to create what we need.","title":"20.2 Implementation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#203-create-view-folder-and-mailer","text":"Use the rails generate command to create a mailer with a folder for views: $ rails generate mailer UserMailer The name of the mailer isn\u2019t important; we\u2019ll use UserMailer because it is obvious. The rails generate command will create a file: app/mailers/user_mailer.rb It also creates test files which we won\u2019t use in this tutorial. It uses three additional files which are provided by default in a Rails 5 application: app/mailers/application_mailer.rb app/views/layouts/mailer.html.erb app/views/layouts/mailer.text.erb This implements our model-view-mailer architecture.","title":"20.3 Create View Folder and Mailer"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#204-edit-the-mailer","text":"Add a contact_email method to the mailer by editing the file app/mailers/user_mailer.rb : class UserMailer < ApplicationMailer default from: \" [email protected] \" def contact_email(contact) @contact \\= contact mail(to: Rails.application.secrets.owner_email, from: @contact.email, :subject \\=> \"Website Contact\") end end The UserMailer class inherits behavior from the ApplicationMailer class. We\u2019ll create a method definition that assigns the contact argument to the instance variable @contact . Like a controller that combines a model with a view, our mailer class makes the instance variable available in the view. The name of the method isn\u2019t important; it can be anything obvious. We\u2019ll use it in the ContactsController to trigger mail delivery. Like the render method in a web page controller, the ActionMailer parent class has a mail method that renders the view. You\u2019ll need to use your email address in the mailer. You should have already set a configuration variable for your email address in the file config/secrets.yml . If you haven\u2019t done so, do it now. By inserting the configuration variable with your email address after to: , your inbox will receive the message. If Foobar Kadigan was a real person, we\u2019d supply his email address here. We need to insert a \u201cfrom\u201d address in two places. First there is a default, for all messages that do not set a \u201cfrom\u201d address. We will use \u201c [email protected] \u201d for the default \u201cfrom\u201d address. The email is originating from a web application that does not receive email, so this indicates the email address should not be used for replies. For emails going to website visitors, it would be best to provide a default email address for a customer service representative on the \u201cfrom\u201d line, so the recipient can easily reply. We\u2019re not sending email messages to visitors so we can ignore this nicety. For our contact_email method, we\u2019ll insert the email address of the visitor as the \u201cfrom\u201d address since we are sending a message to the site owner. This makes it easy for Foobar Kadigan to click \u201creply\u201d when he is reading the contact messages in his inbox. You can see our use of the email attribute from the Contact model in the expression from: @contact.email . That\u2019s all we need for mailer class. Next we\u2019ll create a view containing the message.","title":"20.4 Edit the Mailer"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#205-create-mailer-view","text":"There are two types of mailer views. One contains plain text, for recipients who don\u2019t like formatted email (some people still read email from the Unix command line). The other type contains HTML markup to provide formatting. It\u2019s good to create a message of both types, though most recipients will benefit from HTML formatting. The mailer view for formatted email looks very similar to a web page view file. It contains HTML markup plus Ruby expressions embedded in <%= ... %> delimiters. In the UserMailer class, we\u2019ve assigned the Contact model to the instance variable @contact so any attributes are available for use in the message. Create a file app/views/user_mailer/contact_email.html.erb :","title":"20.5 Create Mailer View"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#206-modify-controller","text":"We\u2019ll add code to the ContactsController: UserMailer.contact_email(@contact).deliver_now Replace the contents of the file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def new @contact \\= Contact.new end def create @contact \\= Contact.new(secure_params) if @contact.valid? UserMailer.contact_email(@contact).deliver_now flash[:notice] \\= \"Message sent from #{@contact.name}.\" redirect_to root_path else render :new end end private def secure_params params.require(:contact).permit(:name, :email, :content) end end The UserMailer class is available to any controller in the application. We call the contact_email method we\u2019ve created, passing the @contact instance variable as an argument, which renders the email message. Finally, the deliver_now method initiates delivery. For more on sending email from a Rails application, see RailsGuides: Action Mailer Basics .","title":"20.6 Modify Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#207-test-the-application","text":"If your web server is not running, start it: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link and try submitting the form. The email message should be visible in the console. If you didn\u2019t get an email message in your inbox, make sure you set your config/environments/development.rb file to perform deliveries as described in the \u201cConfiguration\u201d chapter. Be sure to restart your server if you change the configuration file.","title":"20.7 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#208-troubleshooting","text":"If you get an error, you can practice troubleshooting. You\u2019ve set up a complex system with many dependencies. It\u2019s great if it works, but there are several opportunities for errors. The most likely errors are a missing user name or password. We are trying to connect to the SendGrid email service. SendGrid expects your SendGrid user name. Mine is DanielKehoe (it is not my email address). SendGrid also expects a password.","title":"20.8 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2081-user-name-issues","text":"If you get the error message, \u201cSMTP-AUTH requested but missing user name,\u201d SendGrid is not receiving a user name it recognizes. Check that the user name is set in your Unix environment variables: $ echo \"$SENDGRID_USERNAME\" You should see your SendGrid user name. Make sure you\u2019ve used underscores consistently. If your Unix environment variable is SENDGRID_USER_NAME and the config/secrets.yml file contains SENDGRID_USERNAME , you\u2019ll have a problem.","title":"20.8.1 User Name Issues"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2082-password-issues","text":"If you get the error message, \u201cSMTP-AUTH requested but missing secret phrase,\u201d SendGrid is not receiving the SendGrid password. Check that the SendGrid password is set in your Unix environment variables: $ echo \"$SENDGRID_PASSWORD\" You should see the long cryptic string in the console response. Again, make sure you\u2019ve used underscores consistently, and SENDGRID_PASSWORD is used for the Unix environment variable as well as the config/secrets.yml file.","title":"20.8.2 Password Issues"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2083-problems-with-environment-variables","text":"First, close and reopen your terminal to make sure your environment reflects any recent changes you\u2019ve made to your shell configuration. Then try echo \"$SENDGRID_USERNAME\" to see if you get the credentials you set in your .bash_profile or .bashrc files. If you\u2019ve set up Unix environment variables but echo \"$SENDGRID_USERNAME\" doesn\u2019t return the correct variable in the console, you may have a problem with the way you\u2019ve set Unix environment variables. Most computers use the bash shell and you can set environment variables in your .bash_profile or .bashrc files. But not every system is alike. If it seems Unix environment variables are not working, you may have to find a colleague who can help you troubleshoot. If your Unix environment variables are not working, you can hardcode the variables in your config/secrets.yml file: Replace the following: development: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> with: development: email_provider_username: example email_provider_password: 's#cr*t' In a YAML file, you do not need quotes unless your string contains special characters. If your password contains any of these characters you should surround the string with single quotes: : { } [ ] & * # ? | - < > = ! % @ \\ Remember the security rule: Don\u2019t commit the config/secrets.yml file to Git if it contains any secrets. Test the application and finish your troubleshooting. Then remove the hardcoded values from the config/secrets.yml file before committing to Git.","title":"20.8.3 Problems with Environment Variables"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#209-asynchronous-mailing","text":"You may notice a delay in the responsiveness of the Contact form after adding the email feature. Unfortunately, there\u2019s a performance penalty with our new feature. Our controller code connects to the SendGrid server and waits for a response before it renders the home page and displays the acknowledgment message. The performance penalty can be avoided by changing the implementation so that the controller doesn\u2019t wait for a response from the SendGrid server. We call this asynchronous behavior because sending email does not need to be \u201cin sync\u201d with displaying the acknowledgment. Eliminating a delay improves the user experience and makes the site feel more responsive. Asynchronous mailing requires a queueing system for background jobs . For our tutorial application, and for a typical small business website, the delay caused by lack of queueing is no big deal. Keep in mind, though, as you tackle bigger projects in Rails, you will need to implement a queueing system. Rails includes the Active Job feature for background processing. The Mailing List with Active Job tutorial in the Capstone Rails Tutorials series explains how to use it.","title":"20.9 Asynchronous Mailing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2010-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"sending mail\" $ git push You\u2019ve created a Rails application that handles a form and sends email to the site owner. Mail is a practical way to connect with site visitors. Let\u2019s implement a feature that collects email addresses for mass mailing of a newsletter.","title":"20.10 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-21-mailing-list","text":"Even as other messaging avenues become increasingly popular, such as messaging apps or Facebook messages, email remains the most practical way to stay in touch with website visitors. Encouraging a visitor to provide an email address means offering an invitation to a dialog and a relationship beyond a single visit. If you have a legitimate reason to stay in touch, and you\u2019ve motivated the visitor to leave an email address, you\u2019ll need a mailing list service. You\u2019ve seen how Rails can send an email message. From what you\u2019ve seen so far, you can imagine it would not take much code to loop through a list of email addresses from a database, sending a message to each. In the early days of the web, it was easy for any system administrator to write a script for mass mailings. Since there is negligible cost to sending bulk email, unscrupulous and ignorant operators sent email to any address they could scrape, borrow, or steal. The resulting flood of spam made checking one\u2019s inbox an icky experience and destroyed much of the early culture of the Internet. Fortunately, services such as Gmail arose to filter email. There is now a thick (but leaky) layer of screening protocols that redirect spam to a junk folder. One reason you won\u2019t use a Rails application to send bulk email is that a web application server is not the most efficient tool for sending email. More significantly, there\u2019s a good chance your email won\u2019t go through or, if it does (and someone complains), you\u2019ll quickly see your IP address blacklisted. That\u2019s why we use mailing list services to send bulk email such as newsletters or promotional offers. Considerable expertise is required to keep email from being filtered as spam (see MailChimp\u2019s article Email Delivery For IT Professionals . Email service providers increase reliability of delivery. These services track deliveries and show how well your email is being delivered. You\u2019ll also get features such as management of \u201cunsubscribe\u201d requests and templates to design attractive messages. There are at least a dozen well-established email service providers that allow a Rails application to programmatically connect to the service (via an API) to add or remove email addresses. For a list, see the article Send Email with Rails . For this tutorial application, we\u2019ll use MailChimp because there is no cost to open an account and you can send up to 12,000 emails/month to list of 2000 or fewer subscribers for free. Spam is unsolicited email. Don\u2019t ever send spam, whether for yourself, a client, or an employer. If recipients complain, your IP address and domain name will be blacklisted. So be very careful to only send to subscribers who signed up, send what subscribers expect, and be sure to offer value. If you get complaints, or the unsubscribe rate is high, stop. We\u2019ll assume we\u2019ve discussed the rules with Foobar Kadigan and he is eager to offer a newsletter to his visitors that will be genuinely appreciated.","title":"Chapter 21 Mailing List"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#211-user-story","text":"Let\u2019s plan our work with a user story: *Subscribe to Mailing List* As a visitor to the website I want to sign up for a mailing list In order to receive news and announcements To implement the user story, we\u2019ll add a mailing list feature.","title":"21.1 User Story"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#212-implementation","text":"We\u2019ll use the Rails model-view-controller architecture. We\u2019ll need: Visitors model view for visitors#new Visitors controller with new and create methods routing for visitors#new and visitors#create We\u2019ll add a Visitor model that has a data attribute for an email address. We already have a Visitors controller that renders the home page using the file in the app/views/visitors/ folder. We\u2019ll replace the contents of the view file with a nice photo, a marketing message, and a form. Our Visitors controller new and create methods will be very similar to what we created for the Contacts controller. Instead of connecting to SendGrid to send a message, we\u2019ll call a method to save the visitor\u2019s email address to a MailChimp mailing list.","title":"21.2 Implementation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#213-gibbon-gem","text":"The Gibbon gem is a convenient wrapper for the MailChimp API . We could connect to the MailChimp API using other gems that provide low-level plumbing such as HTTP connections ( httparty ) and data parsing ( multi_json ), but other developers have already done the work of wrapping the plumbing in a higher-level abstraction that easily fits into a Rails application. Amro Mousa\u2019s Gibbon gem is popular and actively maintained. In your Gemfile , you\u2019ve already added: gem 'gibbon' and previously run $ bundle install .","title":"21.3 Gibbon Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#214-home-page","text":"Earlier we built a home page that provided a simple demonstration of the Ruby language. We\u2019ll discard it and replace it with a page that you could adapt for a typical small-business website. We want a nice photo, space for a marketing message, and the \u201csign up\u201d form. Replace the contents of the file app/views/visitors/new.html.erb : <% content_for :title do %>Foobar Kadigan<% end %> <% content_for :description do %>Website of Foobar Kadigan<% end %>","title":"21.4 Home Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2141-photo-options","text":"You\u2019re free to modify this page as you wish, as long as you keep the form intact. You might wish to modify the placeholder photo. If you don\u2019t like cats, try http://lorempixel.com/1170/600/nightlife/1 or any other categories from the lorempixel.com service. You can change the size by modifying the dimensions from 1170 (pixel width) by 600 (pixel height). You can replace the placeholder photo with your own. Look for the app/assets/images folder and add an image. Instead of the HTML <img> tag, use the Rails image_tag view helper, like this: <%= image_tag \"myphoto.jpg\" %> We\u2019ll need a Visitor model to initialize the form.","title":"21.4.1 Photo Options"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#215-visitor-model","text":"The Visitor model is almost identical to the Contact model we created earlier, except there is just one data attribute for the email field. We\u2019ll also add a subscribe method to add a visitor to a MailChimp list. We\u2019ll call this method from the controller when we process the submitted form. Create a file app/models/visitor.rb : class Visitor include ActiveModel::Model attr_accessor :email validates_presence_of :email validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i def subscribe mailchimp \\= Gibbon::Request.new(api_key: Rails.application.secrets.mailchimp_api_key) list_id \\= Rails.application.secrets.mailchimp_list_id result \\= mailchimp.lists(list_id).members.create( body: { email_address: self.email, status: 'subscribed' }) Rails.logger.info(\"Subscribed #{self.email} to MailChimp\") if result end end When you copy this, be careful to keep the long regex expression with: /.../i on one line (no line breaks). Just as we did for the Contact model, we use include ActiveModel::Model to mix in behavior from the ActiveModel class. This is the best way to create a model that does not use a database. In other applications, where models use a database, you will create a model class that inherits from ActiveRecord instead. We create the email attribute using the attr_accessor keyword. We set validation requirements using validates_presence_of and validates_format_of keywords. To subscribe a visitor to a mailing list, you need to provide: list_id - identify the MailChimp list email_address - address of the visitor status - subscribed, pending, or unsubscribed We specify \u201csubscribed\u201d to immediately add the address without asking the user for confirmation. We could specify \u201cPending\u201d if we wanted to add the address with double-opt-in so the visitor receives a request to confirm the email address before they are subscribed. Our subscribe method does the work of connecting to the MailChimp server to add the visitor to the mailing list. We instantiate the Gibbon object which provides all the connectivity, providing the mailchimp_api_key value, which we\u2019ve set in the config/secrets.yml file. We assign the Gibbon object to the mailchimp variable (we could name it anything). We set the list_id from a configuration variable in the config/secrets.yml file. The visitor\u2019s email_address is an attribute of the model we obtain from self . We must set the status property to \u2019subscribed\u2019 to indicate the visitor should receive mailings. Finally, if the application successfully adds the new subscriber, we write a message to the logger. If we get an error when trying to add the subscriber, Gibbon will raise an exception.","title":"21.5 Visitor Model"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#216-visitors-controller","text":"We already have a Visitors controller that contains a simple new method. We\u2019ll change the new method, add a create method, and provide a secure_params private method to secure the controller from mass assignment exploits. Replace the contents of the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @visitor \\= Visitor.new end def create @visitor \\= Visitor.new(secure_params) if @visitor.valid? @visitor.subscribe flash[:notice] \\= \"Signed up #{@visitor.email}.\" redirect_to root_path else render :new end end private def secure_params params.require(:visitor).permit(:email) end end Our new method now assigns the Visitor model to an instance variable instead of the Owner model. The create method is almost identical to the Contacts controller create method. We instantiate the Visitor model with scrubbed parameters from the submitted form. If the validation check succeeds, we subscribe the visitor to the MailChimp mailing list with the @visitor.subscribe method. All the work of connecting to MailChimp happens in the Visitor model. If the validation check fails, we redisplay the home page (the new action).","title":"21.6 Visitors Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#217-clean-up","text":"We no longer use the Owner model, so we can delete the file app/models/owner.rb : $ rm app/models/owner.rb There\u2019s no harm if it remains but it is good practice to remove code that is no longer used.","title":"21.7 Clean Up"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#218-routing","text":"Our routing is now more complex. In addition to rendering the visitors# new view as the application root (the home page), we need to handle the create action. We can use a \u201cresourceful route\u201d as we did with the Contacts controller. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do resources :contacts, only: [:new, :create] resources :visitors, only: [:new, :create] root to: 'visitors#new' end The root path remains visitors#new . Order is significant in the config/routes.rb file. As the final designated route, the root path will only be active if nothing above it matches the route. We\u2019ve added resources :visitors, only: [:new, :create] . We only want two routes so we\u2019ve added the restriction only: [:new, :create] . The new route has these properties: new_visitor_path - route helper visitors - name of the controller (VisitorsController) new - controller action http://localhost:3000/visitors/new - URL generated by the route helper GET - HTTP method to display a page The create route has these properties: visitors_path - route helper visitors - name of the controller (VisitorsController) create - controller action http://localhost:3000/visitors - URL generated by the route helper POST - HTTP method to submit form data You can run the rails routes command to see these in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contacts POST /contacts(.:format) contacts#create new_contact GET /contacts/new(.:format) contacts#new visitors POST /visitors(.:format) visitors#create new_visitor GET /visitors/new(.:format) visitors#new root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command shows we\u2019ve created the routes we need.","title":"21.8 Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#219-test-the-application","text":"If you need to start the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see our new home page with the placeholder photo and the \u201csign up\u201d form. Enter your email address and click the \u201csign up\u201d button. You should see the page redisplay with an acknowledgment message. Try entering an invalid email address such as \u201c [email protected] @\u201d, or click the submit button without entering an email address, and you should see an error message. You\u2019ll have to log in to MailChimp and check your list of subscribers to see if the new email address was added successfully. With MailChimp, you can send a welcome message automatically when the visitor signs up for the mailing list. Use the welcome message to inform the visitor that they\u2019ve successfully subscribed to the mailing list and will receive the next newsletter email. It\u2019s a bit difficult to find the MailChimp option to create a welcome message. Strangely, MailChimp considers a welcome message a \u201cform.\u201d Here\u2019s how to find it. On the MailChimp \u201cLists\u201d page, click the \u201cdown arrow\u201d for a list and click \u201cSignup forms.\u201d Then click \u201cGeneral forms.\u201d On the \u201cCreate Forms\u201d page, there is a drop-down list of \u201cForms & Response Emails.\u201d The gray box shows \u201cSignup form.\u201d Click the down arrow. Select the menu item named \u201cFinal \u2018Welcome\u2019 Email\u201d and you\u2019ll be able to create a welcome message.","title":"21.9 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2110-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"mailing list\" $ git push Our tutorial application is feature complete. Let\u2019s deploy it so we can see it running as a real website.","title":"21.10 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-22-deploy","text":"You\u2019ve been running the default web server on your local machine. If you wanted, you could leave your computer running, set up a managed DNS service , and your web application would be accessible to anyone. But even if you wanted to leave your computer running 24 hours a day, you\u2019re probably not a security expert, your web server isn\u2019t tuned to handle much traffic, and your computer is distant from the interconnection hubs where most websites are hosted. For these reasons, when we move a web application from development to production, we deploy it to a web hosting service that provides a hosting platform on a server located in a strategically-located data center . Data centers offer colocation services , renting rack-mounted computers with fast Internet connections that can be configured as web servers. In the early days of the web, deploying a web application required system administration skills to configure and maintain a web server. Today, some developers like to set up their web servers \u201cfrom bare metal\u201d using virtual private servers from Linode, Slicehost, Rackspace, Amazon EC2, or others. With sufficent skills and study, they say there is a feeling of satisfaction from doing it yourself. But not everyone wants to be a system administrator. Most Rails developers simply use a hosted platform as a service (PaaS) provider such as Heroku , DigitalOcean , EngineYard , OpenShift , or Pivotal Cloud Foundry . If you\u2019ve previously built web sites, you may already be using a shared web hosting service such as GoDaddy or DreamHost. Be skeptical if a shared web hosting service, designed for WordPress or static websites, claims to support Rails applications; most do so badly. Shared hosting services offer file space for static websites on servers that are shared by thousands of websites. A Rails application requires considerably greater computing resources and specialized expertise. In contrast, a platform as a service provider offers a hardware and software stack optimized for application performance and developer convenience. Heroku is the best known and most popular PaaS provider and we\u2019ll use it to deploy the tutorial application. Using Heroku or another PaaS provider means you don\u2019t need skills as a system administrator to manage your web server. Instead, you\u2019ll have experts maintaining the production environment, tuning system performance, and keeping the servers running.","title":"Chapter 22 Deploy"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#221-heroku-costs","text":"It costs nothing to set up a Heroku account and deploy as many applications as you want. You\u2019ll pay only if you upgrade your hosting to accommodate a busy website. Heroku pricing is based on a measure of computing resources the company calls a \u201cdyno.\u201d Think of a dyno as a virtual server (though it is not). For personal projects, you can run your Rails application on a single dyno and never incur a charge, as long as it is not active more than 12 hours a day. A single dyno idles after one hour of inactivity, \u201cgoing to sleep\u201d until it receives a new web request. For a personal project, this means your web application will respond with a few seconds delay if it hasn\u2019t received a web request in over an hour. After it wakes up, it will respond quickly to every browser request. If you want your web application running 24 hours per day and responding to every request without delay, Heroku will charge $7 per month for a \u201chobby\u201d account. You\u2019ll be able to set up a custom domain, using your own domain name. Heroku offers the option of adding dynos to handle more traffic for $25 per month; here\u2019s an article that compares Heroku costs . A single dyno can serve thousands of requests per second, but performance depends greatly on your application. As a default, Heroku supports Puma , the recommended web server for Rails 5. Serving a typical Rails application that takes 100ms on average to process each request, Puma can accommodate about 50 requests per second per dyno, which is adequate for a personal project. If traffic surges on your website and exceeds 50 requests per second, you can scale up with more dynos. Heroku is ideal for hosting our application: no system administration expertise is required hosting is free performance is excellent For this tutorial application, we won\u2019t concern ourselves with the possibility that the website may get a lot of traffic. I\u2019m sure you\u2019ll join me in offering hearty thanks to Heroku for providing a convenient service that beginners can use for free. Let\u2019s deploy!","title":"22.1 Heroku Costs"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#222-test-the-application","text":"Before deploying an application to production, a professional Rails developer runs integration or acceptance tests. If the developer follows the discipline of test-driven development , he or she will have a complete test suite that confirms the application runs as expected. Often the developer uses a continuous integration server which automatically runs the test suite each time the code is checked into the GitHub repository. We haven\u2019t used test-driven development to build this application so no test suite is available. You\u2019ve tested the application manually at each stage.","title":"22.2 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#223-preparing-for-heroku","text":"You\u2019ll need to prepare your Rails application for deployment to Heroku.","title":"22.3 Preparing for Heroku"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2231-gemfile","text":"We need to modify the Gemfile for Heroku. We add a group :production block for a gem that Heroku needs: pg - PostgreSQL gem Heroku doesn\u2019t support the SQLite database; the company provides a PostgreSQL database. Though we won\u2019t need it for our tutorial application, we must include the PostgreSQL gem for Heroku. We\u2019ll mark the sqlite3 gem to be used in development only. Open your Gemfile and replace the contents with the following: Gemfile source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2'","title":"22.3.1 Gemfile"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#rails-defaults","text":"gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end","title":"Rails defaults"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#learn-rails","text":"gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' gem 'sqlite3' end group :production do gem 'pg' end We have to run bundle install because we\u2019ve changed the Gemfile. The gem we\u2019ve added is only needed in production so we don\u2019t install it on our local machine. When we deploy, Heroku will read the Gemfile and install the gem in the production environment. We\u2019ll run bundle install with the \u2013without production argument so we don\u2019t install the new gem locally: $ bundle install --without production You\u2019ll see: . . . Gems in the group production were not installed. Use `bundle show [gemname]` to see where a bundled gem is installed. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"gems for Heroku\" $ git push","title":"learn-rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2232-asset-pipeline-in-production","text":"It is important to understand that assets are compiled by Heroku at the time of deployment. Rails compiles assets to make our application faster for the user. The Rails asset pipeline produces single CSS and JavaScript files that combine all the files in the folders app/assets/javascripts/ and app/assets/stylesheets/ . In development mode, the Rails asset pipeline \u201clive compiles\u201d all CSS and JavaScript files so any changes are reflected immediately. But compiling assets adds processing overhead. In production, a web application would be slowed unnecessarily if assets were compiled for every web request. Consequently, assets are precompiled by Heroku at the time we deploy our application to production. When assets are compiled, the Rails asset pipeline will automatically produce concatenated and minified application.js and application.css files from files listed in the manifest files app/assets/javascripts/application.js and app/assets/stylesheets/application.css.scss . The result will be several files added to the public/assets/ folder. The filenames will contain a long unique identifier that prevents caching when you change the application CSS or JavaScript. You can precompile assets manually with the command rails assets:precompile but ordinarily it is not necessary. It is a likely indicator that the asset pipeline is not working or assets are not compiled if CSS styling is missing from your web pages. If you want to learn more about the asset pipeline, refer to the Rails Guide on the Asset Pipeline or an article from LaunchSchool .","title":"22.3.2 Asset Pipeline in Production"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2233-option-to-ban-spiders","text":"Do you want your website to show up in Google search results? If there\u2019s a link anywhere on the web to your site, within a few days (sometimes hours) the Googlebot spider will visit your site and add it to the database for the Google search engine. Most webmasters want their sites to be found in Google search results. If that\u2019s not what you want, you may want to modify the file public/robots.txt to prevent indexing by search engines. Only change this file if you want to prevent your website from appearing in search engine listings:","title":"22.3.3 Option to Ban Spiders"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#see-httpwwwrobotstxtorgrobotstxthtml-for-documentation","text":"","title":"See http://www.robotstxt.org/robotstxt.html for documentation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#_3","text":"","title":""},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#to-ban-all-spiders-from-the-entire-site-uncomment-the-next-two-lines","text":"","title":"To ban all spiders from the entire site uncomment the next two lines:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#user-agent","text":"","title":"User-agent: *"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#disallow","text":"To block all search engine spiders, remove the commenting from the User-Agent and Disallow lines. You can learn more about the format of the robots exclusion standard .","title":"Disallow: /"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2234-humanstxt","text":"Many websites include a robots.txt file for nosy bots so it\u2019s only fair that you offer a humans.txt file for nosy people. Few people will look for it but you can add a file public/humans.txt to credit and identify the creators and software behind the website. The HTML5 Boilerplate project offers an example file or you can borrow from RailsApps .","title":"22.3.4 Humans.txt"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#224-sign-up-for-a-heroku-account","text":"In the chapter, \u201cAccounts You May Need,\u201d I suggested you sign up for a Heroku account. To deploy an app to Heroku, you must have a Heroku account. Visit https://id.heroku.com/signup/devcenter to set up an account. Be sure to use the same email address you used to configure Git locally. You can check the email address you used for Git with: $ git config --get user.email","title":"22.4 Sign Up for a Heroku Account"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#225-heroku-toolbelt","text":"Heroku provides a command line utility for creating and managing Heroku apps. Visit https://toolbelt.heroku.com/ to install the Heroku Toolbelt. A one-click installer is available for Mac OS X, Windows, and Linux. The installation process will install the Heroku command line utility. It also installs the Foreman gem which is useful for duplicating the Heroku production environment on a local machine. The installation process will also make sure Git is installed. To make sure the Heroku command line utility is installed, try: $ heroku version heroku-toolbelt/... You\u2019ll see the heroku-toolbelt version number. You should be able to login using the email address and password you used when creating your Heroku account: $ heroku login Enter your Heroku credentials. Email: [email protected] Password: Could not find an existing public key. Would you like to generate one? [Yn] Generating new SSH public key. Uploading ssh public key /Users/adam/.ssh/id_rsa.pub The Heroku command line utility will create SSH keys if necessary to guarantee a secure connection to Heroku.","title":"22.5 Heroku Toolbelt"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#226-heroku-create","text":"Be sure you are in your application root directory and you\u2019ve committed the tutorial application to your Git repository. Use the Heroku create command to create and name your application. $ heroku create myapp Replace myapp with something unique. Heroku demands a unique name for every hosted application. If it is not unique, you\u2019ll see an error, \u201cname is already taken.\u201d Chances are, \u201clearn-rails\u201d is already taken. The name must start with a letter and can only contain lowercase letters, numbers, and dashes. If you don\u2019t specify your app name ( myapp in the example above), Heroku will supply a placeholder name. You can easily change Heroku\u2019s placeholder name to a name of your choice with the heroku apps:rename command (see Renaming Apps from the CLI ). Don\u2019t worry too much about getting the \u201cperfect name\u201d for your Heroku app. The name of your Heroku app won\u2019t matter if you plan to set up your Heroku app to use your own domain name. You\u2019ll just use the name for access to the instance of your app running on the Heroku servers; if you have a custom domain name, you\u2019ll set up DNS ( domain name service ) to point your domain name to the app running on Heroku. The heroku create command sets your Heroku application as a Git remote repository. That means you\u2019ll use the git push command to deploy your application to Heroku.","title":"22.6 Heroku Create"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#227-enable-email","text":"You\u2019ll need to enable email for production or else you\u2019ll get errors when your application tries to send email from Heroku. To use SendGrid, add the following to your config/environments/production.rb file:","title":"22.7 Enable Email"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#email-enabled-in-production","text":"config.action_mailer.smtp_settings \\= { address: \"smtp.sendgrid.net\", port: 587, domain: Rails.application.secrets.domain_name, authentication: \"plain\", enable_starttls_auto: true, user_name: Rails.application.secrets.email_provider_username, password: Rails.application.secrets.email_provider_password }","title":"email enabled in production"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#actionmailer-config","text":"config.action_mailer.default_url_options \\= { :host \\=> Rails.application.secrets.domain_name } config.action_mailer.delivery_method \\= :smtp config.action_mailer.perform_deliveries \\= true config.action_mailer.raise_delivery_errors \\= false You can use port 25, 587, or 2525 (some ISPs restrict connections on port 25). Be sure to add the new settings before the end keyword in the file. The settings can be added anywhere, as long as they precede the end keyword! You\u2019ll need to specify the unique name you\u2019ve selected for your hosted application. We\u2019re using the Rails.application.secrets.domain_name configuration variable in two places in the file. The config/secrets.yml file provides configuration variables for use in production. Be sure to commit your code to the Git local repository: $ git add -A $ git commit -m \"email set for Heroku\" $ git push Next we\u2019ll set Heroku environment variables.","title":"ActionMailer Config"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#228-set-heroku-environment-variables","text":"When you run your application, configuration values are obtained from the config/secrets.yml file, which contains Unix environment variables which are set in the .bash_profile or .bashrc files. Heroku doesn\u2019t have a .bash_profile or .bashrc file, so you\u2019ll need a way to set environment variables on Heroku. You can use the heroku config:add command. $ heroku config:add SENDGRID_USERNAME\\='example' $ heroku config:add SENDGRID_PASSWORD\\='secret' $ heroku config:add MAILCHIMP_API_KEY\\='my-key' $ heroku config:add MAILCHIMP_LIST_ID\\='mylistid' $ heroku config:add OWNER_EMAIL\\=' [email protected] ' $ heroku config:add DOMAIN_NAME\\='myapp.herokuapp.com' Don\u2019t use the values shown above. Instead, look in your .bash_profile or .bashrc files and copy the values you find there. When you set myapp.herokuapp.com , replace myapp with the name that Heroku is using for your application. If you want to use a custom domain name, you\u2019ll need to set up DNS ( domain name service ), which we won\u2019t cover in this tutorial. You don\u2019t need to set SECRET_KEY_BASE , even though it is in your config/secrets.yml file. Heroku sets it automatically. Check that the environment variables are set with: $ heroku config See the Heroku documentation on Configuration and Config Vars and the article Rails Environment Variables for more information.","title":"22.8 Set Heroku Environment Variables"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#229-push-to-heroku","text":"After all this preparation, you can finally push your application to Heroku. Be sure to commit any recent changes to the Git local repository before you push to Heroku. You commit your code to Heroku just like you push your code to GitHub. Here\u2019s how to push to Heroku: $ git push heroku master You may see a message, \u201cThe authenticity of host \u2018heroku.com\u2019 can\u2019t be established. Are you sure you want to continue connecting (yes/no)?\u201d. You can answer \u201cyes\u201d and safely continue. The push to Heroku takes several minutes. You\u2019ll see a sequence of diagnostic messages in the console, beginning with: Counting objects... and finishing with: remote: Verifying deploy.... done.","title":"22.9 Push to Heroku"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2210-updating-the-application","text":"It is likely you\u2019ll make changes to your application after deploying to Heroku. Each time you update your site and push the changes to GitHub, you\u2019ll also have to push the new version to Heroku. A typical update scenario looks like this: $ git add -A $ git commit -m \"revised application\" $ git push $ git push heroku master","title":"22.10 Updating the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2211-visit-your-site","text":"Your application will be running at http://my-app-name.herokuapp.com/ . You can open any web browser and visit the site. For a shortcut, you can open your default web browser and visit your site from the command line: $ heroku open If you\u2019re using hosted development such as Cloud9, you\u2019ll need to open a browser manually to visit the site. If you\u2019ve configured everything correctly, you should be able to sign up for the newsletter and send a contact request.","title":"22.11 Visit Your Site"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2212-customizing","text":"For a real application, you\u2019ll likely want to use your own domain name for your app. See Heroku\u2019s article about custom domains for instructions. You may also want to improve website responsiveness by adding page caching with a content delivery network such as CloudFlare . CloudFlare can also provide an SSL connection for secure connections between the browser and server. Heroku offers many add-on services . These are particularly noteworthy: Adept Scale - automated scaling of Heroku dynos New Relic - performance monitoring For an in-depth look at your options, see the Rails Heroku Tutorial .","title":"22.12 Customizing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2213-troubleshooting","text":"When you get errors, troubleshoot by reviewing the log files: $ heroku logs If necessary, use the Unix tail flag to monitor your log files. Open a new terminal window and enter: $ heroku logs -t to watch the server logs in real time.","title":"22.13 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2214-where-to-get-help","text":"Your best source for help with Heroku is Stack Overflow . Use the tag \u201cheroku,\u201d \u201clearn-ruby-on-rails,\u201d or \u201crailsapps\u201d when you post your question. Your issue may have been encountered and addressed by others. You can also check the Heroku Dev Center or the Heroku Google Group .","title":"22.14 Where to Get Help"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-23-analytics","text":"In earlier chapters, we built the tutorial application and deployed it for hosting on Heroku. We\u2019ve left something out. Though not obvious, it\u2019s very important: analytics. Analytics services provide reports about website traffic and usage. You\u2019ll use the data to increase visits and improve your site. Analytics close the communication loop with your users; your website puts out a message and analytics reports show how visitors respond. Google Analytics is the best known tracking service. It is free, easy to use, and familiar to most web developers. In this chapter we\u2019ll integrate Google Analytics with the tutorial application. There are several ways to install Google Analytics for Rails. The article on Analytics for Rails looks at various approaches and explains how Google Analytics works. For this tutorial, we\u2019ll use the Segment.com service. The service provides an API to send analytics data to dozens of different services, including Google Analytics.","title":"Chapter 23 Analytics"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#231-segmentcom","text":"Segment.com is a subscription service that gathers analytics data from your application and sends it to dozens of different services, including Google Analytics. The service is free for low-volume websites, accommodating 1000 tracked users per month at no cost. There is no charge to sign up for the service. Using Segment.com means you install one JavaScript library and get access to reports from dozens of analytics services. You can see a list of supported services . The company offers helpful advice about which analytics tools to choose from . For low-volume sites, many of the analytics services are free, so Segment.com makes it easy to experiment and learn about the available analytics tools. The service is fast and reliable, so there\u2019s no downside to trying it.","title":"23.1 Segment.com"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#232-accounts-you-will-need","text":"You will need an account with Segment.com. Sign up for Segment.com . You will need accounts with each of the services that you\u2019ll use via Segment.com. You\u2019ll likely want to start with Google Analytics, so you\u2019ll need a Google Analytics account and tracking ID. Visit the Google Analytics website to obtain the Tracking ID for your website. You\u2019ll need to know the domain name of your website to get an account for your website. If you\u2019ve deployed to Heroku without a custom domain, use the domain that looks like \u201cmyapp.herokuapp.com\u201d. Or use your custom domain if you have one. Use it for fields for \u201cWebsite Name,\u201d \u201cWeb Site URL,\u201d and \u201cAccount Name.\u201d Choose the defaults when you create your Google Analytics account and click \u201cGet Tracking ID.\u201d Your tracking ID will look like this: UA-XXXXXXX-XX . You won\u2019t need the tracking code snippet as we will use the Segment.com JavaScript snippet instead. You\u2019ll check your Google Analytics account later to verify that Google is collecting data.","title":"23.2 Accounts You Will Need"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#233-installing-the-javascript-library","text":"Segment.com provides a JavaScript snippet that sets an API token to identify your account and installs a library named analytics.js . This is similar to how Google Analytics works. The Segment.com library loads asynchronously, so it won\u2019t affect page load speed. The Segment.com JavaScript snippet should be loaded on every page and it can be included as an application-wide asset using the Rails asset pipeline. We\u2019ll add the Segment.com JavaScript snippet to a file named app/assets/javascripts/segment.js . The manifest directive //= require_tree . in the file app/assets/javascripts/application.js will ensure that the new file is included in the concatenated application JavaScript file. If you\u2019ve removed the //= require_tree . directive, you\u2019ll have to add a directive to include the app/assets/javascripts/segment.js file. Create a file app/assets/javascripts/segment.js and include the following: (function(){ // Create a queue, but don't obliterate an existing one! var analytics \\= window.analytics \\= window.analytics || []; // If the real analytics.js is already on the page return. if (analytics.initialize) return; // If the snippet was invoked already show an error. if (analytics.invoked) { if (window.console && console.error) { console.error('Segment snippet included twice.'); } return; } // Invoked flag, to make sure the snippet // is never invoked twice. analytics.invoked \\= true; // A list of the methods in Analytics.js to stub. analytics.methods \\= [ 'trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'reset', 'group', 'track', 'ready', 'alias', 'debug', 'page', 'once', 'off', 'on' ]; // Define a factory to create stubs. These are placeholders // for methods in Analytics.js so that you never have to wait // for it to load to actually record data. The `method` is // stored as the first argument, so we can replay the data. analytics.factory \\= function(method){ return function(){ var args \\= Array.prototype.slice.call(arguments); args.unshift(method); analytics.push(args); return analytics; }; }; // For each of our methods, generate a queueing stub. for (var i \\= 0; i < analytics.methods.length; i++) { var key \\= analytics.methods[i]; analytics[key] \\= analytics.factory(key); } // Define a method to load Analytics.js from our CDN, // and that will be sure to only ever load it once. analytics.load \\= function(key){ // Create an async script element based on your key. var script \\= document.createElement('script'); script.type \\= 'text/javascript'; script.async \\= true; script.src \\= ('https:' \\=== document.location.protocol ? 'https://' : 'http://') + 'cdn.segment.com/analytics.js/v1/' + key + '/analytics.min.js'; // Insert our script next to the first script element. var first \\= document.getElementsByTagName('script')\\[0\\]; first.parentNode.insertBefore(script, first); }; // Add a version to keep track of what's in the wild. analytics.SNIPPET_VERSION \\= '4.0.0'; // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load(\"YOUR_WRITE_KEY\"); })(); You can get the newest version of the code from the Segment.com Quickstart page. If you copy a newer version of the code, remove the <script type=\"text/javascript\"> and </script> tags from the top and bottom. The Rails asset pipeline will add the code to the application.js file which already contains the necessary <script> tags. If you copy the code from the Segment.com Quickstart instructions, also remove: // Make the first page call to load the integrations. If // you'd like to manually name or tag the page, edit or // move this call however you'd like. analytics.page(); We\u2019ll add analytics.page(); later, wrapping it in additional code to accommodate Rails Turbolinks. Note that the Segment.com website offers a minified version of the snippet for faster page loads. We\u2019ve used the non-minified version so you can read the code and comments. If you want, you can get minified version from the Segment.com website for improved speed.","title":"23.3 Installing the JavaScript Library"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#234-replace-the-write-key","text":"You must replace YOUR_WRITE_KEY with your Segment.com \u201cWrite Key.\u201d After you log in to Segment.com , click on your \u201cworkspace,\u201d then choose a \u201csource,\u201d click \u201csettings,\u201d and click \u201cAPI Keys\u201d in the side navigation bar. Add the \u201cWrite Key\u201d in the file where you see this line: // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load(\"YOUR_WRITE_KEY\"); Now you must add extra code to the Segment.com JavaScript snippet. The extra code accommodates Turbolinks, plus page view and event tracking, which we\u2019ll look at next.","title":"23.4 Replace the Write Key"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#235-add-integration-code","text":"To make sure every page is tracked when Rails Turbolinks is used, plus track page views and events, you must add the following JavaScript to the end of the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { console.log('page loaded'); analytics.page(); analytics.trackForm($('#new_visitor'), 'Signed Up'); analytics.trackForm($('#new_contact'), 'Contact Request'); }) Add it after the last line. Add it after the orthographic car wreck that looks like })(); . I\u2019ll explain the purpose of this code next.","title":"23.5 Add Integration Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#236-page-view-tracking-with-turbolinks","text":"To make sure every page is tracked when Rails Turbolinks is used, we\u2019ve added the following JavaScript to the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { . . . analytics.page(); . . . }) Rails 4.0 introduced a feature named Turbolinks to increase the perceived speed of a website. Turbolinks makes an application appear faster by only updating the body and the title of a page when a link is followed. By not reloading the full page, Turbolinks reduces browser rendering time and trips to the server. With Turbolinks, the user follows a link and sees a new page but Segment.com or Google Analytics thinks the page hasn\u2019t changed because a new page has not been loaded. To resolve the issue, you could disable Turbolinks by removing the turbolinks gem from the Gemfile. However, it\u2019s nice to have both the speed of Turbolinks and tracking data, so I\u2019ll show you how to get tracking data with Turbolinks. Turbolinks fires a load event when a page has been replaced. The code listens for the load event and calls the Segment.com analytics.page() method. This code will work even on pages that are not visited through Turbolinks (for example, the first page visited).","title":"23.6 Page View Tracking with Turbolinks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#237-event-tracking","text":"Segment.com gives us a convenient method to track page views. Page view tracking gives us data about our website traffic, showing visits to the site and information about our visitors. It\u2019s also important to learn about a visitor\u2019s activity on the site. Site usage data helps us improve the site and determine whether we are meeting our business goals. This requires tracking events as well as page views. The Segment.com JavaScript library gives us two methods to track events: trackLink trackForm Link tracking can be used to send data to Segment.com whenever a visitor clicks a link. It is not useful for our tutorial application because we simply record a new page view when a visitor clicks a link on our site. However, if you add links to external sites and want to track click-throughs, you could use the trackLink method. The method can also be used to track clicks that don\u2019t result in a new page view, such as changing elements on a page. The trackForm method is more useful for our tutorial application. We\u2019ve already appended it to the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { console.log('page loaded'); analytics.page(); analytics.trackForm($('#new_visitor'), 'Signed Up'); analytics.trackForm($('#new_contact'), 'Contact Request'); }) I\u2019ve included a console.log(\u2019page loaded\u2019) statement so you can check the browser JavaScript console to see if the code runs as expected. The trackForm method takes two parameters, the ID attribute of a form and a name given to the event. Form tracking will show us how many visitors sign up for the newsletter or submit the contact request form. Obviously we can count the number of subscribers in MailChimp or look in the site owner\u2019s inbox to see how many contact requests we\u2019ve received. But form tracking helps us directly correlate the data with visitor data. For example, we can analyze our site usage data and see which traffic sources result in the most newsletter sign-ups. You can read more about the Segment.com JavaScript library in the Segment.com documentation .","title":"23.7 Event Tracking"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#238-troubleshooting","text":"Click \u201cDebugger\u201d in the navigation bar so you can monitor data sent to Segment.com from your application. When you test the application locally, you should see the results of page visits and form submissions within seconds in the Segment.com debugger. If you don\u2019t see your page visits in the Segment.com debugger, open the browser JavaScript console, visit a page, and check for the message \u201cpage loaded\u201d in the JavaScript console. In the Chrome browser, the JavaScript console is available under the item \u201cDeveloper\u201d in the \u201cView\u201d menu.","title":"23.8 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#239-segmentcom-integrations","text":"After installing the Segment.com JavaScript snippet in your application, go to your \u201csources\u201d page and click the \u201cintegrations\u201d link to visit the integrations page to select the services that will receive your data. Each service requires a different configuration information. At a minimum, you\u2019ll have to provide an account identifier or API key that you obtained when you signed up for the service. For Google Analytics, enter your Google Analytics tracking id. It looks like UA-XXXXXXX-XX . With Google Analytics enabled as a Segment.com integration, you\u2019ll see form submissions appear in the Google Analytics Real-Time report, under the \u201cEvents\u201d heading. Note that Google doesn\u2019t process their data in real-time in most of its reports. Data appears immediately in the Google Analytics Real-Time report. Other Google Analytics reports, such as the Audience report, won\u2019t show data immediately. Check the next day for updated reports.","title":"23.9 Segment.com Integrations"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2310-deploy","text":"Commit to the Git repo and deploy to Heroku: $ git add -A $ git commit -m \"analytics\" $ git push Then you can deploy to Heroku: $ git push heroku master When you visit the site, you should see real-time tracking of data sent to Segment.com in the Segment.com debugger. Log into your Google Analytics account to see real-time tracking of visits to your website. Under \u201cStandard Reports\u201d see \u201cReal-Time Overview.\u201d You\u2019ll see data within seconds after visiting any page.","title":"23.10 Deploy"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2311-improving-the-user-experience","text":"Website analytics can be used to improve visitors\u2019 experience of the website. Deploying the website is not the last step in your project. Unlike many earlier forms of communication (such as releasing a film, publishing a book, or broadcasting an advertisement), we can see how every visitor responds to the website. That means your work is not done when you deploy the site. Look at your usage data to see which elements of the site are getting attention and which are being used. Does no one visit the \u201cAbout\u201d page? Maybe the navigation link is difficult to find. Do many people visit the Contact page but few submit a contact request form? Maybe you should change the label on the button or offer other ways to contact the site owner. Effective and successful websites often are the result of systematic A/B testing (sometimes called split testing ). A/B testing is a technique of creating variations on a web page, such as changing text, layout, or button colors, and using website analytics to measure the effect of the change. You can learn more about services such as Content Analytics in Google Analytics, Optimizely , or Visual Website Optimizer . These services provide complete \u201cdashboards\u201d to set up usage experiments and measure results ( Optimizely is available as a Segment.com integration).","title":"23.11 Improving the User Experience"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2312-conversion-tracking","text":"You may only be interested in knowing that people visit your site, without measuring visitors\u2019 engagement or response to the site. But in most cases, if you build a website, you\u2019ll offer a way for visitors to respond, whether it is by purchasing a product, signing up for a newsletter, or clicking a \u201clike\u201d button. The ultimate measure of website effectiveness is the conversion rate . The term comes from the direct marketing industry and originally referred to a measure of how people responded to \u201cjunk mail\u201d offers. For a website, the conversion rate indicates the proportion of visitors who respond to a call to action , which may be an offer to make a purchase, register for a membership, sign up for a newsletter, or any other activity which shows the visitor is engaged and interested. For our tutorial application, we can measure our website effectiveness by looking at the conversion rate for newsletter sign-ups. We\u2019re tracking page views which will give us a count of visits to the website home page. And we\u2019ve got event tracking in place to count newsletter sign-ups. If 100 people visit the home page and 10 people request a newsletter, we\u2019ve got a conversion rate of 10%. We can try to improve the conversion rate by improving the user experience (perhaps through A/B testing) or focusing on increasing traffic from sources that provide a higher conversion rate. You can monitor your site\u2019s conversion rate by setting up events as goals in Google Analytics. Segment.com also integrates with many services which provide conversion tracking.","title":"23.12 Conversion Tracking"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2313-enjoy-what-youve-achieved","text":"You\u2019ve completed building the tutorial application. If your project was to build an application for someone else, whether the company you work for, or a client like Foobar Kadigan, you\u2019ve completed the deliverable . You started with project planning, in the form of user stories. You implemented the application using a variety of technologies supported by the Ruby on Rails development platform. And you\u2019ve deployed the application for others to use, with analytics in place to track traffic and usage. Not every manager or client will appreciate the effort or the complexity of the project you\u2019ve built. Mr. Kadigan\u2019s happiness may depend on how well you\u2019ve understood his goals and the degree to which you\u2019ve met his expectations. If you\u2019re working for yourself, or launching your startup, you may be your own toughest boss, because there is always more to do. With technology projects, like many other aspects of life, though it seems you\u2019ll never get it right, and never get it done, there are moments when you can savor a sense of accomplishment. This is one of those moments. Before you start thinking about adding one more feature, or updating the application for the new releases that inevitably came out during the time you were working, take time to bask in the satisfaction of seeing the results of your work. Software development has its own unique rhythm of frustration and satisfaction. As software developers, we subject ourselves to hours, days, or weeks of struggle with code that is cryptic and resists understanding. We gain mastery for a few minutes and then turn to the next problem. With each feature you implement, or issue you resolve, you\u2019ll experience brief elation before resuming the grind of development. But at each milestone, and at the completion of the project, you\u2019ve built something tangible that you can use. You can try it out yourself and show it to others. Give yourself full credit. You\u2019ve built something extraordinary with little more than intelligence and attention. You\u2019ve leveraged the work of other developers who have contributed to the open source Ruby on Rails platform and you\u2019ve created your own unique product. This is what drives us as developers; to create something from nothing, using only our collective intelligence and ambition.","title":"23.13 Enjoy What You\u2019ve Achieved"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-24-testing","text":"You don\u2019t need to read this chapter if you will always be a student, or a hobbyist, working on personal projects. But if you wish to work as a professional Rails developer, or launch your own startup, with money and reputation at stake, you must learn about testing. In this chapter, I\u2019ll introduce the basic concepts of testing and show how to build a test suite for the tutorial application.","title":"Chapter 24 Testing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#241-why-test","text":"Software applications are fragile. When you write a song, you can include a wrong note and the song won\u2019t break. In a film, technical flaws like a \u201cjump cut\u201d or a microphone in the frame won\u2019t ruin an entire movie. But an unseen error in a software program can disrupt a key feature or crash the entire application. Software applications are never finished. Songs and movies reach a stage of completion and are delivered to their audience, with no expectation that the completed work will change. With software applications, there\u2019s always an upcoming version with bug fixes or new features. As web developers, we continue to make changes to the applications that our customers are actively using. Sometimes new features are delivered within minutes, or hours, of committing new code to the repository. Software applications are complex. A web application, or any software program, is a machine with intricately connected parts, or dependencies . As an application grows, the connections quickly grow more complex, to the point where no one is able to see all the dependencies at once. Plus, web applications are often a collaborative effort, so no one person is familiar with every line of code. Combine the evolving nature of an application, with the complexity of the product, and the likelihood that flaws will be immediately noticed by users, and you\u2019ll realize why testing is so important to the software development process. Testing was once considered the sole responsibility of a quality assurance (QA) department. Senior developers created new features or fixed bugs. When the work was \u201cdone,\u201d lesser paid (and lower status) developers \u201cin QA\u201d clicked through screens, with written notes or scripts, as if they were users testing every feature of a program. Invariably, manual testing led to oversights, because testing notes were out of date, \u201cedge cases\u201d were overlooked, and the work was monotonous. In the best-run companies, QA engineers are now expert consultants on testing methods and a source of guidance for other developers. We now rely on automated testing . Even more important, the job of writing test code now belongs to the developer who creates a feature or fixes a bug. It\u2019s our responsibility to write adequate tests for any code we add to the repository.","title":"24.1 Why Test?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#242-what-are-tests","text":"Developers talk about testing as if it were an activity different from writing code. It is not. Testing is something we do while writing code. We create tests with the same text editor we use use to write code. The tests themselves are written in Ruby, just like any other part of a Rails application. You\u2019ll put the test code in either a tests/ or spec/ folder, committed to the Git repository with all the other code. You\u2019ll use the specialized API of a testing framework for the methods of your tests, either Minitest or RSpec . Test code is different from code that implements features in one significant way: Instead of supporting interactions with a user, test code interacts with the code you\u2019ve written, verifying the code behaves as intended.","title":"24.2 What Are Tests?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#243-scripted-or-exploratory","text":"When testing is used for quality assurance, the goal is to create a suite of automated tests that will reveal any bugs that creep into code and break the application. Sometimes this is called scripted testing . These tests are checked into the software repository and maintained with the application. Often developers will set up a system for continuous integration (CI), which will automatically run the test suite whenever the repository is updated. Developers can set up a CI server such as Jenkins or use a hosted CI service such as Travis CI , CircleCI , or Semaphore to run tests automatically. Automated testing with continuous integration serves as a safety net for developers. There is another role for testing, which is often called exploratory testing , or developer testing . These tests may end up in an application test suite, but the primary purpose is to help a developer construct an application. Many developers, after gaining experience in writing tests for quality assurance, realize that writing tests can be a useful first step in figuring out how a feature should be implemented. It may seem odd to write tests first, but exploratory testing can clarify what behavior will be required, and help the developer think through alternatives and edge cases. This approach is called test-first development , and many developers will tell you that when you write tests first, you\u2019ll be more satisfied; you\u2019ll be more focused; and you\u2019ll avoid tangents and detours of the \u201cnice-to-have-but-not-really-needed\u201d variety. We\u2019ll look closely at test-first development in conjunction with Test-Driven Development (TDD) and Behavior-Driven Development (BDD) at the end of this chapter. First, let\u2019s gain an understanding of testing terminology and practice.","title":"24.3 Scripted or Exploratory"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#244-regression-and-acceptance","text":"We describe tests by the purpose they serve. In addition to exploratory testing used in test-first development, there are several kinds of tests used for quality assurance. Regression tests are run every time we change code. Sometimes we want to make sure new features don\u2019t break the existing application. More often, we run tests after changing existing code to make it more readable, elegant, or effective. We call this tinkering \u201c refactoring .\u201d Refactoring is very similar to what we call editing or rewriting when we work with the written word. Before we refactor, we need to know what results we expect from our code, and we need automated tests to execute our code and check for the expected results. If our automated tests are adequate, we can use the tests as regression tests, making sure our refactoring hasn\u2019t introduced new bugs. Acceptance tests are sometimes identical to regression tests, and may use the same test code. The purpose is different, so we give this kind of testing a different name. Acceptance tests provide accountability and serve a management function. These are tests that determine if a feature has been implemented as expected. It is common to run acceptance tests when an outside contractor delivers code, so we can determine if the team has delivered what we requested. We can also use acceptance tests to determine if our internal team has implemented the stated requirements. Proponents of behavior-driven development claim that the process of creating acceptance tests clarifies the product requirements. Obviously, if we want adequate acceptance tests, we need to plan carefully when specifying the product requirements. If we\u2019ve planned well, we can turn our user stories into automated tests that serve as acceptance tests.","title":"24.4 Regression and Acceptance"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#245-units-and-integration","text":"We also describe tests by their relationship to the rest of the code. Unit tests probe the internal workings of the machine. If we\u2019ve written our code well, a small section of the code, such as a class or a method, will be a discrete unit that can be tested independently of all other units. Unit tests inspect the integrity of small parts of the application in isolation. When a unit test fails, we can quickly identify and fix broken code. We use integration tests to make sure the entire application works as expected. Integration tests mimic the behavior of real users. For a web application, an integration test may simulate a user signing in, filling out forms, clicking between pages, and verifying that contents of pages match expected results. Integration tests can also be called feature tests if they are designed to confirm that product features work as expected. Our feature tests can serve as acceptance tests if we use the test suite to determine if we\u2019ve correctly implemented our user stories or other product specifications. Sometimes these tests are called black box tests because the code is tested as if the application was a black box, with the internal workings of the application hidden from the observer. They are also called system tests or end-to-end tests .","title":"24.5 Units and Integration"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#246-sample-data","text":"When we write tests, either feature tests or unit tests, we often want to check whether a method returns the data we expect. That means we have to create the data we need in advance of the test. Either we populate a database with the data we expect, or we disconnect the database and instantiate an object that provides the data we expect. Test frameworks give us a tool named a factory or a fixture to create sample data. Developers argue about what is better, factories or fixtures, but you\u2019ll encounter factories more often, particularly the popular FactoryGirl gem. A factory is an object that creates other objects. When you use FactoryGirl, you have the option of saving your object to the database (which is slow) or building your object in memory only (which is faster). Fixtures are used to populate a database with sample data before your tests run. If you use fixtures, you\u2019ll save sample data in a configuration file. Before tests run, Rails automatically loads all fixtures from configuration files in the test/fixtures folder. As you gain experience with testing, you\u2019ll become familiar with both factories and fixtures.","title":"24.6 Sample Data"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#247-test-doubles","text":"In unit testing, to isolate small parts of the application, sometimes we artificially decouple the code from the rest of the application. For example, with a unit test, we don\u2019t want to connect to an external service with an API to obtain data. Or we simply want a method to get a predictable response from another object. Test doubles stand in for external dependencies. The term is borrowed from Hollywood, where stunt doubles stand in for actors in action scenes. A test double is any kind of pretend object used in place of a real object for testing purposes. There are two types of test doubles, stubs and mocks . Stubs provide canned answers to calls made during the test, only responding when queried by the test. Sometimes stubs record information about the call, for example, the message sent or the number of times called. Mocks are pre-programmed objects that reproduce the behavior of the object they represent, forming a specification of an object\u2019s behavior. It takes time to write stubs and mocks and lots of experience to use them correctly, so as a beginner, you probably won\u2019t write stubs and mocks without help. As you can gain experience, you\u2019ll better understand the difference between stubs and mocks and learn how to use them. For now, it is enough to recognize the terminology and remember that tests run faster and better when we reduce coupling and complexity with test doubles.","title":"24.7 Test Doubles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#248-minitest-and-rspec","text":"You\u2019ve already learned that Rails developers mix and match gems to create a favorite technology stack . Not everyone likes ERB for view templates. Some prefer Haml or Slim syntax for mixing HTML and Ruby in a view. Developers often stray from the default Rails stack when it comes to testing. Since the release of Ruby 1.9, Minitest has been supplied as a standard gem with all Ruby installations. Yet most Rails developers use RSpec for testing. In this tutorial, I\u2019ll use Minitest to introduce you to testing. Minitest is easier to set up and offers a syntax that is very similar to RSpec. Some developers say that there is no reason to use RSpec because Minitest provides almost all the convenience of RSpec with smaller size, faster speed, and less complexity. Other developers insist that RSpec is more expressive and flexible. Realistically, if you want a job working on most Rails teams, you\u2019ll need to learn RSpec. Get started with Minitest to learn the basics of testing. When you\u2019re ready for the next step, the Capstone Rails Tutorials will take you deeper. I also recommend the books Rails 4 Test Prescriptions by Noel Rappin and Everyday Rails Testing with RSpec by Aaron Sumner.","title":"24.8 Minitest and RSpec"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#249-capybara-the-ghost-in-the-machine","text":"Unit tests are simple, in principle and often in practice. The tests are just Ruby code, supplemented with methods from the test framework API. If we want unit tests for all the methods of a User class, we instantiate the class and write code that calls each method and verifies if the response matches our expectations. Using methods from the Minitest or RSpec test framework, we output a message that indicates whether each unit test passes or fails. Integration tests, or feature tests, require more of a framework than unit tests. We want our tests to be as realistic as possible, as if a robot was using a web browser and interacting with our web application. Fortunately, the maintainers of the Capybara gem have created such a robot. To create integration tests, we add the Capybara gem, using it with either Minitest or RSpec. Capybara gives us a visit method that simulates a user visiting a page. After we call the visit method, Capybara gives us a page object and allows us to test whether the page contains the content we expect. Every Rails application relies on a layer of middleware named Rack that ties into a web server. Capybara interacts with the web application, via calls to Rack, as if it was a browser making requests and receiving HTML files as a response. When we use Capybara, by default it operates in headless mode , interacting directly with the Rails application via Rack. \u201cHeadless\u201d means there is no graphical user interface (as if the absent screen was a computer\u2019s head). In headless mode, JavaScript is unavailable. If some of our application features require JavaScript, we must set up Capybara to act as a robot using a real web browser. Capybara has a built-in driver (named Selenium ) that gives our robot the option of automatically launching and using a real web browser for each test. By default, Capybara will use the Firefox web browser if it is installed on your computer. What you\u2019ll see is amazing. When you run tests using Capybara with the JavaScript option, the Firefox web browser will pop open on your desktop and you\u2019ll watch a ghost flying through your web application. With Capybara, you now have a ghostly QA department running your integration tests.","title":"24.9 Capybara, the Ghost in the Machine"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2410-four-phases-of-feature-tests","text":"Test code is easier to understand when you recognize that tests proceed in stages, or phases. Code that simulates a user visiting a web page tends to be organized in four phases: set up visit page verify page contents neutralize The setup phase may include creating a user, signing in, or any other activity that creates the conditions for a test. With Capybara, the test visits the page, which requires Capybara to simulate a browser request to the Rails application. Then, in the third stage, we check if the server response contains the data we expect. Finally, we may need to clean up, resetting the original state of the application, or removing any data the test added to the database.","title":"24.10 Four Phases of Feature Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2411-four-phases-of-unit-tests","text":"Unit tests also are organized in four stages: set up exercise verify teardown When you test a small part of the application in isolation, you\u2019ll focus on an object or method which we call the \u201csystem under test.\u201d The setup phase prepares the system under test. Often this means instantiating an object. Here is an example: user \\= User.new(email: ' [email protected] ') During the exercise phase, something is executed. Often this is a method call: user.save During verification, the result of the exercise is verified against the developer\u2019s expectations: user.email.must_equal ' [email protected] ' During teardown, the system under test is reset to its initial state. Rails integrates with Minitest or RSpec to reset a database to its initial state. You will seldom write code for the teardown phase. Now that you\u2019ve learned about the basic concepts of testing, let\u2019s set up Minitest for our first tests.","title":"24.11 Four Phases of Unit Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2412-set-up-minitest","text":"We\u2019ll set up testing with both Minitest and Capybara, so we can write both unit tests and feature tests. Minitest is a standard Ruby gem, installed when you install Ruby in your environment. We\u2019ll install the minitest-spec-rails gem which makes it easy to use an RSpec-like syntax with Minitest. We\u2019ll also add the minitest-rails-capybara gem to integrate Capybara with Minitest and Rails. Open your Gemfile and replace the contents with the following: Gemfile source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2'","title":"24.12 Set Up Minitest"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#rails-defaults_1","text":"gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end","title":"Rails defaults"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#learn-rails_1","text":"gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' gem 'sqlite3' end group :production do gem 'pg' end group :test do gem 'minitest-spec-rails' gem 'minitest-rails-capybara' end We\u2019ve added the two gems to the test group. Now, some gems are loaded only when we\u2019re writing code (during development), some are loaded only when the application is running on Heroku (deployed to production), and our newest additions only are loaded when we run tests. Next, install the additional gems: $ bundle install The bundle install command will download and install the gems from the rubygems.org server.","title":"learn-rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24121-run-tests","text":"The command rails test will execute Minitest. Let\u2019s see what happens when we run tests: $ rails test Running via Spring preloader in process 29254 /Users/danielkehoe/workspace/learn-rails/db/schema.rb doesn't exist yet. Run `rails db:migrate` to create it, then try again. If you do not intend to use a database, you should instead alter /Users/danielkehoe/workspace/ /learn-rails/config/application.rb to limit the frameworks that will be loaded. Run options: --seed 35136","title":"24.12.1 Run Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#running","text":"Finished in 0.005570s, 0.0000 runs/s, 0.0000 assertions/s. 0 runs, 0 assertions, 0 failures, 0 errors, 0 skips Rails Minitest informs us that our application is not set up to use a database. The easiest way to resolve the issue is to run rails db:migrate which sets up the database schema file. We\u2019re not using a database for this application so the database schema file will be empty. $ rails db:migrate The rails db:migrate command doesn\u2019t produce any result in the terminal but it will create a new db/schema.rb file. Try running rails test again: $ rails test Running via Spring preloader in process 29468 Run options: --seed 46952","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#running_1","text":"Finished in 0.005945s, 0.0000 runs/s, 0.0000 assertions/s. 0 runs, 0 assertions, 0 failures, 0 errors, 0 skips The output shows that Minitest executes but we have no tests for it to run. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"set up minitest\" $ git push","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2413-unit-test-standard-syntax","text":"In its default form, Minitest uses the syntax of the older test_unit framework that was supplied with Ruby before version 1.9. The test_unit syntax uses explicit Ruby to set up tests. Here\u2019s an example of Minitest using the test_unit syntax: require 'test_helper' class VisitorTest < ActiveSupport::TestCase def valid_params { email: ' [email protected] ' } end def test_valid visitor \\= Visitor.new valid_params assert visitor.valid?, \"Can't create with valid params: #{visitor.errors.messages}\" end def test_invalid_without_email params \\= valid_params.clone params.delete :email visitor \\= Visitor.new params refute visitor.valid?, \"Can't be valid without email\" assert visitor.errors[:email], \"Missing error when without email\" end end Notice that we must declare a class VisitorTest that inherits from ActiveSupport::TestCase . Then we must define a new method for each test case using the def keyword. This syntax is not popular with Rails developers. RSpec offers its own DSL (domain specific language) that hides the overhead of setting up classes and methods behind convenience methods. Minitest offers its own version of the the RSpec DSL, allowing us to use the more popular syntax. I\u2019ll use the new RSpec-like syntax in this tutorial, since you are likely to encounter RSpec more frequently.","title":"24.13 Unit Test (Standard Syntax)"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2414-unit-test-spec-syntax","text":"For our first test, let\u2019s create a simple unit test for our Visitor model. Every time we run our tests, we want to know that we\u2019re able to create a Visitor model. We\u2019ll also check that the Visitor model contains a method that returns an email address. The default Rails directory structure already contains a test/models/ folder. Thanks to Rails conventions, we know exactly where to create our test file. Create a file test/models/visitor_test.rb : require 'test_helper' describe Visitor do let(:visitor_params) { {email: ' [email protected] '} } let(:visitor) { Visitor.new visitor_params } it 'is valid when created with valid parameters' do visitor.must_be :valid? end it 'is invalid without an email' do # Delete email before visitor let is called visitor_params.delete :email visitor.wont_be :valid? # Must not be valid without email visitor.errors[:email].must_be :present? # Must have error for missing email end end The test above, written in the RSpec-like syntax, is functionally identical to the previous example, written in the old test_unit syntax. Take a close look at both, so the structure and keywords will be familiar when you see it again. We need require \u2019test_helper\u2019 to enable the test framework and apply any configuration settings. The keywords describe , let , and it are keywords that are also used in the RSpec DSL (domain-specific language). When you see these keywords, you know you are looking at test code, either Minitest or RSpec. The purpose of a unit test is to describe the system under test, in terms of its expected behavior. We create a do ... end block using the describe keyword and specifying a class we wish to test: describe Visitor do . . . end","title":"24.14 Unit Test (Spec Syntax)"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24141-create-a-test-class-with-describe","text":"The describe keyword creates a test class. In this case, the describe keyword will create a class named VisitorTest that inherits from ActiveSupport::TestCase . Using the old test_unit syntax, we could do this with class VisitorTest < ActiveSupport::TestCase but the describe keyword is more convenient. When Minitest runs, it recognizes and executes test classes. By including our code inside a test class, we get to use methods such as let and it which are useful for writing tests. Minitest will recognize various classes like models or controllers and provide appropriate behavior.","title":"24.14.1 Create a Test Class With Describe"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24142-setup-phase","text":"We must set up everything we need for the test. Minitest provides a simple way to set up everything before a test using the before keyword: before do do_some_setup end We could initialize the Visitor model using a before block and setting instance variables: before do @visitor_params \\= {email: ' [email protected] '} @visitor \\= Visitor.new(visitor_params) end Instead of using a before block, we\u2019ll use the convenient let keyword: let(:visitor_params) { {email: ' [email protected] '} } let(:visitor) { Visitor.new visitor_params } The let keyword is a specialized version of the before keyword. It caches the objects that you create so they are ready for every test you write in the test class. And it is lazy-loaded , which means it does not require any processing overhead until the first time it is used.","title":"24.14.2 Setup Phase"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24143-do-it","text":"Each test is defined by the it keyword and a do ... end block that contains the exercise and verify phases of the test. The it keyword must be accompanied by a description. The description will be displayed if the test fails. For our first test, we want to check if the Visitor model can be created when we provide a valid email address. Before the test runs, the let statement makes sure the Visitor object is instantiated with an email value. The verification phase of each test consists of a comparison between the results of an operation and our expectations. We expect that each time we create a Visitor object with a valid email address, the visitor.valid? method will return true. We can create a test: it 'is valid when created with valid parameters' do assert_equal visitor.valid?, true end The keyword assert_equal is the old test_unit syntax. It compares the result of visitor.valid? with true and tells Minitest the test has passed or failed. We can write the same thing using the new RSpec-style syntax: it 'is valid when created with valid parameters' do visitor.must_be :valid? end The method must_be is an expectation . You can see a Minitest cheat sheet with a list of all the expectation methods. As you might guess, must_be functions as a comparison operator, checking if a call to visitor.valid? returns true. For our second test, we want to make sure the Visitor object is invalid when no email address is provided: it 'is invalid without an email' do # Delete email before visitor let is called visitor_params.delete :email visitor.wont_be :valid? # Must not be valid without email visitor.errors[:email].must_be :present? # Must have error for missing email end We created the visitor_params hash with a let statement. Before we invoke the Visitor object and call the visitor.valid? method, we delete the email address from the visitor_params hash. When the Visitor object is invoked, it will be created by the let statement without an email address. The wont_be expectation confirms that the result of visitor.valid? method is false . Then we check if a validation error message is present. At this point, don\u2019t expect to be ready to write unit tests for every model method. You\u2019ll need to spend time with the documentation for Minitest expectations or the Minitest cheat sheet to become familiar with all the possible ways to write tests. This introduction should help you recognize the syntax of tests, understand the structure, and give you the background you need to learn more about unit testing.","title":"24.14.3 Do It"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2415-run-tests","text":"Let\u2019s run our unit tests: $ rails test Running via Spring preloader in process 29585 Run options: --seed 7800","title":"24.15 Run Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#running_2","text":".. Finished in 0.020289s, 98.5770 runs/s, 147.8655 assertions/s. 2 runs, 3 assertions, 0 failures, 0 errors, 0 skips The output shows that our tests pass.","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24151-breaking-the-test","text":"Let\u2019s see what happens if we purposefully break our Visitor model. Modify the file app/models/visitor.rb : class Visitor include ActiveModel::Model attr_accessor :email # validates_presence_of :email # validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i def subscribe mailchimp \\= Gibbon::Request.new(api_key: Rails.application.secrets.mailchimp_api_key) list_id \\= Rails.application.secrets.mailchimp_list_id result \\= mailchimp.lists(list_id).members.create( body: { email_address: self.email, status: 'subscribed' }) Rails.logger.info(\"Subscribed #{self.email} to MailChimp\") if result end end When you copy this, be careful to keep the long regex expression (/\\A\u2026\\z/i) on one line (no line breaks). We\u2019ve commented out the statements that require validation for the email attribute. Let\u2019s run the tests again: $ rails test Running via Spring preloader in process 29655 Run options: --seed 45089","title":"24.15.1 Breaking the Test"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#running_3","text":"F Failure: Visitor#test_0002_is invalid without an email [/Users/danielkehoe/workspace//learn-rails/test/models/visitor_test.rb:15]: Expected # , @messages={}, @details={}>> to not be valid?. bin/rails test test/models/visitor_test.rb:12 . Finished in 0.008457s, 236.4993 runs/s, 236.4993 assertions/s. 2 runs, 2 assertions, 1 failures, 0 errors, 0 skips The output shows a failure. The diagnostic message displays the description of the failing test, \u201cVisitor#test_0002_is invalid without an email\u201d, and indicates the line number where the test failed. Now you know what a failing test looks like. Before you continue, restore the file app/models/visitor.rb to its original state, and make sure the tests pass. If you wish, you can continue writing unit tests. You could create a similar unit test for the Contact model. With more experience, or some independent research, you could create a test for the subscribe method in the Visitor model. This method connects to an external API, so it requires test doubles to fake the response of the external services. Our goal here is to introduce you to the concepts of testing, so we\u2019ll put aside advanced work on unit tests, and take a look at feature tests.","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2416-feature-test","text":"Let\u2019s start with a user story for our home page. It might seem trivial to call the home page a \u201cfeature\u201d and describe it with a user story, but it illustrates a process that works just as well with more complex features. Here\u2019s our user story: *Feature: Home page* As a visitor I want to visit a home page And see a welcome message For our test, we know we want to visit the home page and check if the words \u201cStay in touch\u201d appear on the page. This is the scenario we\u2019ll test: *Scenario: Visit the home page* Given I am a visitor When I visit the home page Then I see \"Stay in touch\" If you think of your application as a collection of features, and you describe each feature in terms of \u201cAs a (role), I want (goal), In order to (benefit),\u201d and then imagine scenarios for each feature using the \u201cGiven\u2026, When\u2026, Then\u2026\u201d formula, you\u2019ll be able to write automated tests to cover every feature in the application. Let\u2019s try it for the home page. Examine the folders within the test/ directory. Remember that feature tests are also called integration tests. You\u2019ll see a folder test/integration/ . That\u2019s where we\u2019ll add our feature tests. Create a file test/integration/home_page_test.rb : require 'test_helper'","title":"24.16 Feature Test"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#feature-home-page","text":"","title":"Feature: Home page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#as-a-visitor","text":"","title":"As a visitor"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#i-want-to-visit-a-home-page","text":"","title":"I want to visit a home page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#so-i-can-learn-more-about-the-website","text":"feature 'Home page' do # Scenario: Visit the home page # Given I am a visitor # When I visit the home page # Then I see \"Welcome\" scenario 'visit the home page' do visit root_path page.must_have_content 'Stay in touch' end end I\u2019ve included the user story and scenario description in comments. There\u2019s no convention to do so, but it will help you to see the relationship between testing and the product planning process. It should be easy to transform a \u201cGiven\u2026 When\u2026 Then\u2026\u201d scenario into the code needed for a feature test.","title":"So I can learn more about the website"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24161-feature","text":"When we created a unit test, we used the describe keyword to create a test class. The feature keyword creates a test class that inherits from the Capybara::Rails::TestCase class, giving us methods such as visit and page . Feature tests are created with a do ... end block using the feature keyword and providing a description of the feature: feature 'Home page' do . . . end Notice that the description is placed in quotes. In this case, Minitest will automatically generate a class named HomePageTest .","title":"24.16.1 Feature"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24162-scenario","text":"Typically we test a single feature with multiple scenarios in a single test file. The scenario keyword is similar to the it keyword you\u2019ve seen in unit tests. Each feature test is defined by the scenario keyword and a do ... end block that contains the visit and verify phases of the test. The scenario keyword must be accompanied by a description. The description will be displayed if the test fails. scenario 'visit the home page' do visit root_path page.must_have_content 'Stay in touch' end The directive visit is a Capybara method that takes a URL or Rails route as an argument. You could specify either visit \u2019/\u2019 or visit root_path to direct Capybara to retrieve the home page. Capybara provides other actions in addition to visit . You can see the documentation for Capybara actions that include actions for filling in a form and clicking a button. Capybara creates a page object for us as a response to the visit. The page object is a representation of the HTML file returned by the application. We can call the must_have_content method, testing if the string \u201cStay in touch\u201d is present in the page. Capybara gives us a collection of methods we can use to verify our expectations. The documentation for Capybara expectations provides an extensive collection of methods we can use to verify what\u2019s on a web page. For example, must_have_link checks for a link. With Capybara expectations, you can check almost anything on a page. Combining Capybara actions and expectations allows you to build a powerful page-checking robot.","title":"24.16.2 Scenario"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2417-run-tests","text":"Let\u2019s run all our tests: $ rails test Running via Spring preloader in process 30144 Run options: --seed 51858","title":"24.17 Run Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#running_4","text":"... Finished in 0.459255s, 6.5323 runs/s, 8.7098 assertions/s. 3 runs, 4 assertions, 0 failures, 0 errors, 0 skips We have three tests (in two test files) making four assertions, all passing.","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24171-troubleshooting","text":"You might get an error message: rails aborted! NoMethodError: undefined method `feature' for main:Object You\u2019ll see this error message if you neglected to modify the test/test_helper.rb file to allow use of the Capybara test framework methods.","title":"24.17.1 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24172-breaking-the-test","text":"Let\u2019s see what happens if we purposefully break our home page. Modify the file app/view/visitors/new.html.erb : <% content_for :title do %>Foobar Kadigan<% end %> <% content_for :description do %>Website of Foobar Kadigan<% end %> <section> <img src\\=\"http://lorempixel.com/1170/600/cats/1\">","title":"24.17.2 Breaking the Test"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#running_5","text":"F Failure: Home page Feature Test#test_0001_visit the home page [/Users/danielkehoe/workspace//learn-rails/test/integration/home_page_test.rb:15]: Expected to find text \"Stay in touch\" in \"Toggle navigation Home About Contact GO AWAY!\". bin/rails test test/integration/home_page_test.rb:13 .. Finished in 5.124522s, 0.5854 runs/s, 0.7806 assertions/s. 3 runs, 4 assertions, 1 failures, 0 errors, 0 skips The output shows a failure. The diagnostic message displays the description of the failing test, \u201cHome page Feature Test#test_0001_visit the home page\u201d, showing a failure, \u201cExpected to include \u2018Stay in touch\u2019.\u201d Before you continue, restore the file app/view/visitors/new.html.erb to its original state, and make sure the tests pass. Now that we have written a few basic tests, let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add tests\" $ git push You\u2019ve written a complete application with tests. Very good!","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#24173-using-capybara","text":"There is an art to developing feature tests. You can test that all the text on the home page is exactly what you want. That would make your test files large. And your tests would be \u201cbrittle,\u201d because any changes you made in development, even the slightest changes to the words on the page, would break your tests. For good integration tests, focus on the features that are essential to your application. For example, use the Capybara robot to make sure the user can follow a critical path through your application, visiting important pages, filling in forms, clicking buttons, and seeing results. Capybara lets you select any HTML element on a page, so you can check an ID or class attribute of an HTML tag, not just text on a page. You\u2019ll want to be confident that application navigation and page flow continues to work after any code changes. That will serve you better than tests that tell you a word changed here or there.","title":"24.17.3 Using Capybara"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2418-other-tests","text":"The art of testing lies in making good choices about what to test. It\u2019s common to write feature tests because they will test the entire application from the viewpoint of the user. It is also common to write unit tests for models because models contain much of the uniqueness of an application. Every other aspect of a Rails application can be tested, including controllers, helpers, and views. Developers seldom write tests for every aspect of a Rails application. If your controllers contain only the standard RESTful actions, with no extra logic, you probably don\u2019t need to write unit tests for your controllers. If you only have simple HTML markup in helpers, helpers don\u2019t need to be tested. And views are rarely tested with unit tests (use feature tests if you want to make sure a page contains what you expect). As a beginner, you\u2019ll make a good start if you concentrate on unit tests for models and integration tests for your page flow.","title":"24.18 Other Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2419-behavior-driven-development","text":"In Book One, you learned about the software development approach called Behavior-Driven Development (BDD), or sometimes, Behavior-Driven Design. In writing the feature tests for the home page, you saw it in action. With BDD, you turn user stories into detailed scenarios that are accompanied by tests. BDD is a powerful approach for managing software development. It helps you define your product requirements, refine your project scope, and divide your project into well-defined tasks. The BDD process is complete when each feature has automated tests, when you enter rails test on the command line and see that every feature is implemented and functioning as expected. You may feel lost or overwhelmed when you attempt to build a Rails application for the first time, especially if your only experience is following the step-by-step instructions of a tutorial. When you experience that panic, BDD is your lifeline. Start by writing user stories for a few simple features. Write feature tests and implement the code required to make the tests pass. As you focus on the process of writing scenarios and tests, and implementing the code for each feature, you\u2019ll begin to gain momentum, and before you know it, you\u2019ll be over the first hurdle.","title":"24.19 Behavior-Driven Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2420-test-driven-development","text":"You can see how the BDD approach refines the product requirements and user experience. At a microscopic level, a similar discipline, named test-driven development , helps refine the implementation. Where BDD is driven by feature tests, TDD is focused on unit tests. TDD is an approach to software development that emphasizes that all code should be written to be tested. Excellent test coverage, allowing easy refactoring, is not the only goal of TDD. Just as important, the developer focuses on what needs to be accomplished and thinks through alternatives and edge cases. Some TDD aficionados say testing is a tool to write better code, and regression tests are a side effect. Unit tests are at the heart of TDD, and easiest to write when code is carefully decoupled into systems that can be tested in isolation. An application that is composed of decoupled units with clearly defined interfaces is a well-designed application that is easy to extend and maintain. If you make it a practice to write unit tests in conjunction with all the code you write, you\u2019ll write better code, and you\u2019ll be practicing TDD.","title":"24.20 Test-Driven Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2421-test-first-development","text":"Often when you are practicing TDD, you\u2019ll write tests before you write implementation code. Earlier in this chapter, I referred to test-first development and explained that it serves a different purpose than testing for quality assurance. In some situations, test-first development is simply exploratory testing, a means of describing the behavior of the code that must be built. Test-first development is particularly useful when you\u2019ve solved a similar problem and know exactly what results to expect, making it easy to write tests before writing the implementation. Test-first development leads to a \u201cred-green-refactor\u201d workflow. A developer imagines the results of an operation, writes a test that checks for the results, and runs tests which fail (with the right configuration, failing tests display as red in the console). Then the developer writes code that produces the correct results and runs the tests again, improving the code until the tests pass (displaying in green). At this point, the developer has an adequate regression test and can begin to refactor to improve the implementation, checking that the tests continue to pass. Developers like the rhythm and coherency of the \u201cred-green-refactor\u201d workflow. Writing tests creates discrete, manageable tasks. When tests pass, turning green, there is a feeling of satisfaction, of a job well-done. By postponing concerns about improving the code to a refactoring phase, it\u2019s easier to get the job done without trying to get it perfect. And perfection can be pursued in the refactoring phase without worrying about regressing to a broken state. David Heinemeier Hansson, the creator of Rails, famously declared that TDD is dead. Long live testing. . He pointed out that sometimes ardent advocates of TDD will try out an implementation before writing tests, to determine what needs to be done, or to clarify a problem. In the real world, even though developers recommend writing tests first, there are often times when a developer will write tests only after writing code and settling on an approach. TDD, which emphasizes the benefit of writing tests as a first step, doesn\u2019t really require that you write tests before you write code, or even that you write tests for all code. The test-first emphasis of TDD is a recommendation, not a rule. You\u2019ll be a better developer if you find opportunities to get \u201cin the zone\u201d with the red-green-refactor workflow of test-first development, but testing is worthwhile whether it comes first or last.","title":"24.21 Test-First Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2422-words-of-encouragement","text":"Testing often intimidates the newcomer. It is difficult to find good examples. The syntax of Minitest and RSpec has evolved over time, so there is little consistency among examples you\u2019ll find. Older examples are not a good guide to current practices. But once you gain familiarity with the concepts in this chapter, you can start writing tests. Testing is one of the few things in Rails that you can jump into without getting just right. You can\u2019t screw up your code base by writing incorrect tests. Experienced developers seem to worry that inexperienced developers will write slow tests, but in truth, a slow test is better than no test. Tests won\u2019t affect the performance of your application in production. If your code is clumsy, don\u2019t worry, you\u2019ll get better with practice. What\u2019s most important is that you\u2019ve begun writing tests. That\u2019s an indication you are committed to Rails best practices. Your tests are only \u201cbad\u201d if they don\u2019t cover your code adequately or if they give you a false sense of assurance. You will only discover this over time, as you find bugs you didn\u2019t anticipate (which is inevitable). It\u2019s better to just begin testing, even if you\u2019re not sure you\u2019re doing it right, than to not test at all.","title":"24.22 Words of Encouragement"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-25-rails-composer","text":"I\u2019m going to show you how to skip all the work you already did, and build a ready-to-use Rails application in less than five minutes. When you\u2019re done with this chapter, you may wonder why you read the rest of the book. Watch the video for a demonstration of Rails Composer: Rails Composer","title":"Chapter 25 Rails Composer"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#251-building-starter-applications","text":"This chapter is about Rails Composer , a tool for building starter applications. Rails Composer makes building applications so easy, it feels like a guilty pleasure. In the introductory \u201cCreate the Application\u201d chapter, you learned that developers often use a starter application instead of assembling an application from scratch. You\u2019ve seen how the rails new command gives you a rudimentary starter application. Developers typically add a front-end framework, a testing framework, and a handful of favorite gems before they get started on any custom development. Since most applications start with the same basic components, it makes sense to rely on an open source effort to stitch them together, so any integration issues or update problems are quickly resolved by the community. That\u2019s the idea behind the RailsApps project . The project provides a collection of starter applications, plus Rails Composer, a tool that creates the starter applications. I\u2019ve been leading the RailsApps project for several years because I think the project saves time for developers and makes things easier. I may be biased, so take a look and judge for yourself.","title":"25.1 Building Starter Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#252-build-learn-rails-in-less-than-five-minutes","text":"In less than five minutes, we can build our tutorial application using Rails Composer. It will be identical to the application you\u2019ve built, but we\u2019ll call it \u201cfoobar-kadigan.\u201d It\u2019s a new application, so if you\u2019re still in the workspace/learn-rails/ project directory, move up a level to the workspace/ project directory: $ cd ../ $ pwd /Users/danielkehoe/workspace Or jump to it directly, if it\u2019s one level below your home directory: $ cd ~/workspace $ pwd /Users/danielkehoe/workspace Use the \u201clearn-rails\u201d gemset we created earlier: $ rvm use [email protected] Now create the \u201cfoobar-kadigan\u201d application: $ rails new foobar-kadigan -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb We\u2019re using the rails new command and designating \u201cfoobar-kadigan\u201d as the name for the application. The -m flag applies an application template , which is a script that generates an application. The application template can be on your local computer, or retrieved from a remote server. Rails Composer is an application template that is stored on GitHub. When you run the rails new command as shown above, a new Rails application is built and then modified by the Rails Composer script. Here\u2019s the first prompt you\u2019ll see: option Build a starter application? 1) Build a RailsApps example application 2) Contributed applications 3) Custom application choose Enter your selection: Options #2 and #3 are not for beginners. We\u2019ll skip any contributed applications. And the \u201cCustom application\u201d option is strictly for experts. Enter 1 to select \u201cBuild a RailsApps example application.\u201d You\u2019ll see a list of available starter applications: option Choose a starter application. 1) learn-rails 2) rails-bootstrap 3) rails-foundation 4) rails-mailinglist-activejob 5) rails-omniauth 6) rails-devise 7) rails-devise-roles 8) rails-devise-pundit 9) rails-signup-download 10) rails-stripe-checkout 11) rails-stripe-coupons choose Enter your selection: We\u2019ll explore the list later. For now, enter 1 to select \u201clearn-rails\u201d. Here\u2019s your chance to get news and announcements about Rails Composer: Get on the mailing list for Rails Composer news? option Enter your email address: Enter your email address (if you want news) or press \u201creturn\u201d to skip it (if you\u2019re shy). In less than the time it took me to write a few sentences, you\u2019ll have a new Rails application. Look for it in your folder: $ ls -1 foobar-kadigan learn-rails You\u2019ve just created a new application named \u201cfoobar-kadigan\u201d that is almost identical to the \u201clearn-rails\u201d application you created from scratch. If you have a file compare tool on your computer, you can compare the folders and see that the only differences are the application name embedded in the application, plus a few configuration settings such as the secret keys in the config/secrets.yml file. Move into the project directory: $ cd foobar-kadigan As soon as you move into the foobar-kadigan/ folder, RVM will automatically begin using the gemset named \u201cfoobar-kadigan.\u201d That\u2019s because Rails Composer created hidden .ruby-gemset and .ruby-version files. Run bundle install to install the necessary gems in the RVM gemset: $ bundle install Try running the application. $ cd foobar-kadigan $ rails server \\=> Booting Puma . . . Open a web browser window and navigate to http://localhost:3000/ . Try it out. You\u2019ll see our new home page with the placeholder photo and the \u201csign up\u201d form. The application will be almost identical to the one you already built. Compare the project files side-by-side in your editor. The files will be nearly identical. In fact, if you made mistakes when you built the tutorial application, Rails Composer will give you the newest and most correct version of the application so you can check for your mistakes with a file compare tool. You are probably already aware that a perfect version of the tutorial application is already on GitHub, in the learn-rails GitHub repository . You could use git clone to get a copy to use as a starter application. The version generated by Rails Composer differs in one important respect. Rails Composer generates the application with any name you give it, so there\u2019s no need to search and change every use of the name in the application. I hope you\u2019re not irritated that I asked you to spend hours building the \u201clearn-rails\u201d application, and then showed you how to build the same application in less than five minutes. I promise you the time you spent with the book is worthwhile, because you\u2019ve gained a knowledge of Rails you can\u2019t get from using Rails Composer.","title":"25.2 Build \u2018Learn Rails\u2019 in Less Than Five Minutes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#253-a-collection-of-starter-applications","text":"Since you\u2019ve already built the \u201clearn-rails\u201d application, the identical \u201cfoobar-kadigan\u201d application may not be interesting. Let\u2019s look at the other applications you can generate with Rails Composer.","title":"25.3 A Collection of Starter Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2531-rails-bootstrap","text":"The \u201crails-bootstrap\u201d application provides an integration of Rails and Bootstrap , the popular front-end framework. This application gives you everything you built in this book\u2019s chapters on \u201cLayout and Views\u201d and \u201cFront-End Framework,\u201d including flash messages and navigation, set up for Bootstrap. It\u2019s a good beginning point for many custom applications. You can examine the example application on GitHub, in the rails-bootstrap repository. If you have subscribed for the Capstone Rails Tutorials, you can read the Bootstrap Quickstart Guide to understand the code.","title":"25.3.1 Rails Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2532-rails-foundation","text":"The \u201crails-foundation\u201d application is just like the \u201crails-bootstrap\u201d application, only with the Zurb Foundation front-end framework instead of Bootstrap. It\u2019s a stripped-down version of the \u201clearn-rails\u201d application you just built, without the contact form or mailing list sign-up, using Foundation. If you want to build a custom application, starting with nothing more than Foundation and an \u201cabout\u201d page, generate the \u201crails-foundation\u201d application. You can examine the example application on GitHub, in the rails-foundation repository. There\u2019s a Foundation Quickstart Guide with the Capstone Rails Tutorials.","title":"25.3.2 Rails Foundation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2533-rails-mailing-list-with-active-job","text":"Rails 4.2 added the Active Job feature for background processing. The Mailing List with Active Job tutorial explains how to use it. You can use Rails Composer to generate the rails-mailinglist-activejob starter application. In the \u201cSend Mail\u201d chapter I wrote about \u201cAsynchronous Mailing\u201d which provides a queueing system for background jobs. For a production website, it is smart to use Active Job for better website performance for users. The Mailing List with Active Job tutorial in the Capstone Rails Tutorials series explains the code.","title":"25.3.3 Rails Mailing List with Active Job"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2534-rails-omniauth","text":"OmniAuth is a gem for authentication. Most web applications need a way for users to sign in, allowing access to some features of the application only for signed-in users. OmniAuth allows a user to sign in using an account they already have with a service such as Facebook, Twitter, or GitHub. If you\u2019re building an application that needs quick and easy sign-in, this is a useful starter application. You can examine the example application on GitHub, in the rails-omniauth repository. You can read the OmniAuth Tutorial in the Capstone Rails Tutorials series to learn about authentication with OmniAuth.","title":"25.3.4 Rails OmniAuth"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2535-rails-devise","text":"Devise is the most popular gem for authentication. Devise provides user management and authentication, letting a user sign up to create an account and log in with an email address and password. Most websites need email/password authentication, so this is a popular starter application. You can examine the example application on GitHub, in the rails-devise repository. You can read the Devise Quickstart Guide in the Capstone Rails Tutorials series to learn about user management and authentication with Devise.","title":"25.3.5 Rails Devise"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2536-rails-devise-roles","text":"Devise is a popular gem for authentication , verifying a user\u2019s registered identity. In conjunction with authentication, authorization limits access to pages of a web application. With role-based authorization, a user can be assigned a role such as \u201cuser,\u201d \u201cadmin,\u201d or \u201cVIP\u201d (a \u201cvery important person\u201d). If you want to control access to features of the website by checking a user\u2019s role, this is a useful starter application. You can examine the example application on GitHub, in the rails-devise-roles repository. You can read the Rails Authorization Tutorial in the Capstone Rails Tutorials series to learn about authorization.","title":"25.3.6 Rails Devise Roles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2537-rails-devise-pundit","text":"To keep controllers skinny, Rails developers often use the Pundit gem for authorization. It improves upon simple role-based authorization to move access control code from controllers to separate \u201cpolicy objects.\u201d For complex applications with elegant architecture, use the \u201crails-devise-pundit\u201d starter application. You can examine the example application on GitHub, in the rails-devise-pundit repository. You can read the Pundit Quickstart Guide in the Capstone Rails Tutorials series to learn about authorization with Pundit.","title":"25.3.7 Rails Devise Pundit"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2538-other-starter-applications","text":"Other applications in the Rails Composer collection include: rails-signup-download rails-stripe-checkout rails-stripe-coupons You can use the rails-signup-download application to build a website where a user can download a PDF file after registering with an email address. Using the code in the Signup and Download Tutorial , you could customize the \u201clearn-rails\u201d application so visitors could download an ebook by Foobar Kadigan after they sign up for his newsletter. Stripe is a popular service used to accept credit card payments. Stripe offers two approaches to implementing payment processing. Stripe Checkout is Stripe\u2019s entry-level approach. Stripe Checkout competes with the button-based payment options from Google, PayPal, or Amazon, adding a pop-up payment form to any web page. Stripe Checkout is very limited because the pop-up payment form cannot be customized for use with a Rails application. Our Stripe Checkout Tutorial in the Capstone Rails Tutorials series shows how to combine Stripe Checkout with Devise for simple applications. Stripe.js is optimal for use with a Rails application, allowing full customization of a payment form and integration with Rails form processing. The rails-stripe-coupons application implements a payment feature using Stripe JS so a visitor pays to download a PDF file. The application accommodates promotional coupons and adds payment forms to landing pages, for real-world payment processing. Our Stripe JS With Coupons tutorial in the Capstone Rails Tutorials series provides the details.","title":"25.3.8 Other Starter Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#254-rails-composer-options","text":"If all Rails Composer did was copy example applications from GitHub repos, it would be convenient but not very interesting. When you built the \u201cfoobar-kadigan\u201d application with Rails Composer, it simply built a replica of our tutorial application. When you build the other starter application, the options get more interesting. Rails Composer lets developers customize their starter applications for their favorite stack (we discussed stacks in the \u201cConcepts\u201d chapter in Book One). Let\u2019s see what options we get when we build the powerful rails-devise-roles starter application. Jump to your workspace/ folder so we can create a new application: $ cd ~/workspace $ pwd /Users/danielkehoe/workspace It\u2019s okay to start with the \u201clearn-rails\u201d gemset. We have to start with a gemset that already has the Rails gem installed. After that, Rails Composer will create a new gemset for the new project. $ rvm use [email protected] Now generate the \u201crails-devise-roles\u201d starter application: $ rails new rails-devise-roles -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb Don\u2019t worry if some of the prompts are different from the ones I describe here. Rails Composer changes often. At the time I wrote this, I saw: option Build a starter application? 1) Build a RailsApps example application 2) Contributed applications 3) Custom application choose Enter your selection: Enter 1 to select \u201cBuild a RailsApps example application.\u201d option Choose a starter application. 1) learn-rails 2) rails-bootstrap 3) rails-foundation 4) rails-mailinglist-activejob 5) rails-omniauth 6) rails-devise 7) rails-devise-roles 8) rails-devise-pundit 9) rails-signup-download 10) rails-stripe-checkout 11) rails-stripe-coupons choose Enter your selection: Select \u201crails-devise-roles\u201d (it was #7 when I wrote this, but the list may have changed). Get on the mailing list for Rails Composer news? option Enter your email address: Another chance to get on the mailing list. Just hit \u201creturn\u201d if you already signed up. option Web server for development? 1) Puma (default) 2) Thin 3) Unicorn 4) Phusion Passenger (Apache/Nginx) 5) Phusion Passenger (Standalone) choose Enter your selection: Our first option! We\u2019ve always used Puma since it is the Rails default. Choose \u201cPuma\u201d to keep things familiar. option Web server for production? 1) Same as development 2) Thin 3) Unicorn 4) Puma 5) Phusion Passenger (Apache/Nginx) 6) Phusion Passenger (Standalone) choose Enter your selection: We could get fancy for deployment. Choose \u201cSame as development\u201d to stay in our comfort zone. option Database used in development? 1) SQLite 2) PostgreSQL 3) MySQL choose Enter your selection: We haven\u2019t explored applications that use databases in this book, but Devise and role-based authorization require saving a User model to a database. Choose \u201cSQLite,\u201d which is built-in and ready to run in the Mac or Ubuntu environments. Developers prefer PostgreSQL for production applications, but it takes extra effort to set up, so we\u2019ll stick with SQLite for now. option Template engine? 1) ERB 2) Haml 3) Slim choose Enter your selection: In this book, all our view templates were written using the ERB template language. In the \u201cConcepts\u201d chapter in Book One, you learned that components of Rails can be mixed for different stacks. Some developers substitute Haml or Slim for ERB. I\u2019ve written an article on Haml and Rails if you\u2019d like to know more. Choose \u201cERB\u201d for now. option Test framework? 1) None 2) RSpec with Capybara choose Enter your selection: You\u2019ve had an introduction to testing with Minitest in the \u201cTesting\u201d chapter of this book. RSpec is popular among many developers, so Rails Composer offers an \u201cRSpec with Capybara\u201d option. Rails Composer will install a test suite for the rails-devise-roles application when RSpec is selected. You can read the RSpec Quickstart Guide in the Capstone Rails Tutorials series to get started with RSpec. Choose \u201cnone\u201d for now. option Front-end framework? 1) None 2) Bootstrap 4.0 3) Bootstrap 3.3 4) Bootstrap 2.3 5) Zurb Foundation 5.5 6) Zurb Foundation 4.0 7) Simple CSS choose Enter your selection: You learned to use Bootstrap 3 in this book. Let\u2019s stick with that. Choose \u201cBootstrap 3.3.\u201d option Add support for sending email? 1) None 2) Gmail 3) SMTP 4) SendGrid 5) Mandrill choose Enter your selection: Devise will need to send email for its \u201cforgot password\u201d feature. Configuring email took some time for our tutorial application. Rails Composer will instantly set up everything we need to send email using our choice of services. Choose \u201cSendGrid\u201d for now. option Devise modules? 1) Devise with default modules 2) Devise with Confirmable module 3) Devise with Confirmable and Invitable modules choose Enter your selection: Choose \u201cDevise with default modules.\u201d Devise has options, like a Confirmable module that requires users to click a link in an email message to confirm a new account. The Invitable module provides a feature that allows administrators or other users to invite users to establish accounts. We won\u2019t need these extra features. option Admin interface for database? 1) None 2) Thoughtbot Administrate choose Enter your selection: Thoughtbot Administrate adds an administrative interface to a database application. Choose \u201cNone\u201d for now. option Use a form builder gem? 1) None 2) SimpleForm choose Enter your selection: We could add the SimpleForm gem to make it easy to build forms. We didn\u2019t use it in this book, so we\u2019ll choose \u201cnone.\u201d Next you\u2019ll see a menu of page layout options from Rails Composer. These are available if you use Bootstrap 3. option Add Bootstrap page templates? 1) None 2) 1 Col Portfolio 3) 2 Col Portfolio 4) 3 Col Portfolio 5) 4 Col Portfolio 6) Bare 7) Blog Home 8) Business Casual 9) Business Frontpage 10) Clean Blog 11) Full Width Pics 12) Heroic Features 13) Landing Page 14) Modern Business 15) One Page Wonder 16) Portfolio Item 17) Round About 18) Shop Homepage 19) Shop Item 20) Simple Sidebar 21) Small Business 22) Stylish Portfolio 23) The Big Picture 24) Thumbnail Gallery choose Enter your selection: You\u2019ll get an option to install any of 23 different Bootstrap page templates. Some of these are simple one page layouts. Others are complex, multipage websites. If you\u2019d like to see what all the templates look like, browse the Start Bootstrap website to see the gallery of Bootstrap themes & templates. I like the \u201cModern Business\u201d template for several ready-made website pages, so choose 14 to install the template. option Install page-view analytics? 1) None 2) Google Analytics 3) Segment.com choose Enter your selection: In our \u201cAnalytics\u201d chapter, I said every application needs a way to analyze traffic. Let\u2019s choose \u201cSegment.com\u201d since we learned about it already. option Segment.com Write Key? You can enter your Segment.com Write Key here, if you know it. Otherwise, hit return and you\u2019ll get a placeholder you can replace later. option Prepare for deployment? 1) no 2) Heroku 3) Capistrano choose Enter your selection: This option sets up your starter application for deployment to Heroku. Choose \u201cno\u201d for now. Some developers find Rails Turbolinks annoying when they wish to integrate JavaScript with their Rails applications. option Disable Rails Turbolinks? (y/n) We\u2019re not adding any JavaScript so choose \u201cn\u201d to use Rails Turbolinks. option Set a robots.txt file to ban spiders? (y/n) In the \u201cDeploy\u201d chapter you learned that you can leave your website out of Google search results with the robots.txt file. Let\u2019s answer \u201cy\u201d or \u201cyes\u201d and play it safe. option Create a GitHub repository? (y/n) Rails Composer will create a GitHub repository for your starter application if your credentials are set up correctly. Let\u2019s play it safe and answer \u201cn\u201d or \u201cno\u201d to skip the repository option. Rails Composer has all the answers it needs. On my computer, with a fast Internet connection in the heart of San Francisco, Rails composer takes about thirty seconds to build the starter application. It installs every needed gem; sets configuration files; and generates views, models, controllers, and routes. The developers who maintain the Rails Composer project have worked out any tricky integration issues so you can expect the starter application to work without any problems.","title":"25.4 Rails Composer Options"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#255-try-it-out","text":"You\u2019ve added a new application to your collection of projects: $ ls -1 foobar-kadigan learn-rails rails-devise-roles Let\u2019s examine the application. $ cd rails-devise-roles $ git log --oneline 087167a rails_apps_composer: extras 6d4f710 rails_apps_composer: add Bootstrap page layouts be68589 rails_apps_composer: navigation links 3126403 rails_apps_composer: set up database 53a029f rails_apps_composer: add README files 7c78031 rails_apps_composer: add analytics 99e9c0c rails_apps_composer: add pages 1886d2c rails_apps_composer: front-end framework 38242d7 rails_apps_composer: add roles to a User model 839749f rails_apps_composer: devise 62753db rails_apps_composer: set email accounts 0754893 rails_apps_composer: generators 09104b9 rails_apps_composer: Gemfile b61cd18 rails_apps_composer: initial commit Rails Composer set up a Git repository and committed files as it built the application. We can see a list of Git commits with the git log \u2013oneline command. When you move into the rails-devise-roles/ folder, RVM will automatically begin using the gemset named \u201crails-devise-roles\u201d because of the hidden .ruby-gemset and .ruby-version files. Run bundle install to install the necessary gems in the RVM gemset: $ bundle install Let\u2019s try running the application: $ rails server \\=> Booting Puma . . . Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see a navigation bar with \u201cSign in\u201d and \u201cSign up\u201d links that implement an authentication feature using Devise. Sign in with the email address \u201c [email protected] \u201d and the password \u201cchangeme\u201d. You\u2019ll see a link to the Users page in the navigation bar that is only seen by administrators. Click the \u201cUsers\u201d link and you\u2019ll see a list of users (just one initially). The first user (created by Rails Composer) is automatically assigned administrator privileges. Sign out and sign up to create a new account with your own email address and password. You\u2019ll see a message \u201cWelcome! You have signed up successfully.\u201d You will not see the \u201cUsers\u201d link. Your new account is an ordinary user without administrator privileges, so you are not allowed to see the list of all users. Notice the navigation link \u201cEdit account.\u201d It displays a page for account management where you can change your name, email address, or password. Sign out and sign in again with the administrative account \u201c [email protected] \u201d and the password \u201cchangeme\u201d. Now you can view the list of users. You can change the role of any user. You\u2019ve got a useful starter application. Without Rails Composer, an experienced developer needs at least an hour or two to set up a similar starter application (and possibly more time if version updates have created integration issues). Examine the application in your editor. Here\u2019s where a starter application can be useful as a learning tool. Given what you\u2019ve learned so far, what do recognize as familiar? Every Rails application shares a similar structure, so you will recognize files such as the Gemfile; and folders such as app/models/ , app/controllers/ , and app/views/ . Explore the application. Try to guess the purpose of the unfamiliar files and code. If you\u2019re overwhelmed by unfamiliar files and code, try building one of the simpler starter applications, such as rails-bootstrap or rails-devise . Every line of code is explained in the Capstone Rails Tutorials series so there\u2019s no mystery code. As a beginner, you can use Rails Composer for two purposes. You can quickly build apps that are guaranteed to work and then pick them apart. A \u201cbreakable toy\u201d can be a wonderful instrument for learning. Make an effort to understand everything in the RailsApps example applications and you\u2019ll gain a solid understanding of the basic components used in real-world Rails projects. Secondly, start building custom applications based on the Rails Composer starter applications. By starting with Rails Composer, you\u2019ll skip the frustrating preliminaries of setting up a front-end framework, authentication, or authorization and jump right into implementing your ideas for new features. Rails Composer is often used at hackathons, where teams race to build interesting applications for a prize, to avoid the time sink of setting up a basic application. A final word: Use Rails Composer judiciously. It\u2019s intended to be a tool for experienced developers who already know how to build starter applications from scratch using databases, front-end frameworks, authentication, or authorization, and all the bells and whistles offered in the Rails Composer options. Use it to pinpoint what you need to learn, or use it to turbocharge your learning process, but don\u2019t use it as a crutch to avoid learning the basics. To learn Rails, you must be able to build every starter application from scratch, without Rails Composer. To learn more about Rails Composer, see the Rails Composer home page and the README for the Rails Composer project on GitHub.","title":"25.5 Try It Out"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#chapter-27-credits-and-comments","text":"Was the book useful to you? Follow @rails_apps on Twitter and tweet some praise. I\u2019d love to know you were helped out by the tutorial. You can find me on Facebook or Google+ . I\u2019m happy to connect if you want to stay in touch. If you\u2019d like to recommend the book to others, the landing page for the book is here: http://learn-rails.com/learn-ruby-on-rails.html I\u2019d love it if you mention the book online, whether it is a blog post, Twitter, Facebook, or online forums. Recommending the book with a link makes it easier for people to find the book.","title":"Chapter 27 Credits and Comments"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#271-credits","text":"The book was created with the encouragement, financial support, and editorial assistance of hundreds of people in the Rails community. Daniel Kehoe wrote the book and implemented the application.","title":"27.1 Credits"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two%20-%20Roy/#2713-technical-editors","text":"Rails and Ruby experts are very busy. I am very grateful for the assistance I received from my colleagues for the technical review of individual chapters. Kirsten Jones , reviewed the chapter \u201cRequest and Response\u201d Pat Shaughnessy , author of Ruby Under a Microscope , reviewed the chapter \u201cJust Enough Ruby\u201d Noel Rappin , author of Rails Test Prescriptions , reviewed chapters 1-7, and the \u201cTesting\u201d chapter Aaron Sumner , author of Everyday Rails Testing with RSpec , reviewed the \u201cTesting\u201d chapter Ken Collins reviewed the \u201cTesting\u201d chapter Buy their books. I recommend them.","title":"27.1.3 Technical Editors"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/","text":"Learn Ruby on Rails: Book Two Version 4.2.0, 2 August 2017 Daniel Kehoe Contents Chapter 1 Version Check, Videos, and More 1.1 Version Check 1.2 Get the Videos Chapter 2 Introduction 2.1 Is It for You? 2.2 What To Expect 2.2.1 About Book One 2.2.2 What\u2019s in This Book 2.2.3 A Warning About Links 2.2.4 What Comes Next 2.2.5 Staying In Touch 2.2.6 A Note to Reviewers and Teachers 2.2.7 Using the Book in the Classroom 2.2.8 Let\u2019s Get Started Chapter 3 Get Help When You Need It 3.1 Example Code 3.2 Version Check 3.3 Getting Help With the Book 3.4 Getting Help With Rails 3.4.1 Video Option 3.4.2 Where To Go For Help? 3.5 References 3.5.1 RailsGuides 3.5.2 Cheatsheets 3.5.3 API Documentation 3.6 Meetups, Hack Nights, and Workshops 3.7 Pair Programming 3.8 Pairing With a Mentor 3.9 Code Review 3.10 Staying Up-to-Date Chapter 4 Accounts You May Need 4.1 GitHub 4.2 MailChimp 4.3 SendGrid 4.4 Heroku Chapter 5 Get Started 5.1 Text Editor and Terminal Applications 5.2 Copying and Pasting Code 5.3 Your Computer 5.3.1 Hosted Computing 5.4 Try the Terminal 5.5 Installing Ruby 5.5.1 MacOS 5.5.2 Ubuntu Linux 5.5.3 Hosted Computing 5.5.4 Windows 5.6 Your Workspace 5.6.1 Video Option 5.7 Understanding Version Numbers 5.8 Ruby and Rails Version Check 5.9 RVM 5.10 Project-Specific Gemset Chapter 6 Create the Application 6.1 Starter Applications 6.2 Workspace Folder and RVM Gemset 6.3 Use \u201cRails New\u201d to Build the Application 6.4 Make a Sticky Gemset 6.5 Test the Application 6.5.1 Launching the Web Server 6.5.2 Errors for Linux Users 6.5.3 Viewing in the Web Browser 6.5.4 Watch Log Messages 6.5.5 Multiple Terminal Windows 6.5.6 Stop the Web Server 6.6 Get Organized for Efficiency Chapter 7 The Parking Structure 7.1 Video Option 7.2 Project Directory 7.3 Get to Know the Folders and Files 7.3.1 Important Folders and Files 7.3.2 Not-So-Important Folders and Files 7.3.3 Folders for Testing 7.4 The App Directory 7.4.1 Folders of Future Importance Chapter 8 Time Travel with Git 8.1 Git 8.2 Is Git Installed? 8.3 Is Git Configured? 8.4 Create a Repository 8.5 GitIgnore 8.6 Git Workflow 8.6.1 Untracked Files 8.6.2 Staging 8.6.3 Committing 8.6.4 Git Log 8.6.5 Repositories 8.6.6 Pushing to GitHub 8.7 The README Chapter 9 Gems 9.1 Videos 9.2 RubyGems 9.3 Rails Gems 9.4 Gems for a Rails Default Application 9.5 Where Do Gems Live? 9.6 Gemfile 9.7 Gemfile for a Rails Default Application 9.8 Adding Gems 9.9 About the Rails Version 9.10 Install the Gems 9.10.1 Troubleshooting 9.11 Git Chapter 10 Configure 10.1 Configuration Security 10.2 Videos 10.3 About Environment Variables 10.4 Viewing Hidden Files 10.5 Set Environment Variables 10.5.1 SendGrid 10.5.2 MailChimp 10.5.3 Owner Email 10.5.4 Restart the Terminal Session 10.5.5 Troubleshooting 10.6 The Secrets File 10.6.1 Domain Name 10.6.2 Securing the Secrets File 10.6.3 Troubleshooting 10.7 Secret Key Base 10.8 Configure Email 10.8.1 Connect to an Email Server 10.8.2 Perform Deliveries in Development 10.9 Git Chapter 11 Static Pages and Routing 11.1 Add a Home Page 11.2 Routing Error 11.3 Add an About Page 11.3.1 Introducing TDD 11.4 Introducing Routes 11.5 Using the \u201cAbout\u201d Page Chapter 12 Request and Response 12.1 Investigating the Request Response Cycle 12.1.1 Inside the Browser 12.1.2 Inside the Server 12.2 How the Browser Works 12.2.1 Document Object Model 12.2.2 Rendering 12.3 How the Application Works 12.3.1 Video Option 12.3.2 The Model View Controller Concept 12.4 Remove the About Page Chapter 13 Dynamic Home Page 13.1 User Story 13.2 Routes, Model, View, and Controller 13.3 The Name Game 13.4 Naming Conventions 13.5 Routing 13.6 Model 13.7 View 13.8 Controller 13.9 Scaffolding 13.10 Test the Application 13.11 Git Chapter 14 Troubleshoot 14.1 Git 14.2 Interactive Ruby Shell 14.2.1 IRB for Blocks of Code 14.2.2 Quitting IRB 14.2.3 Learn More About IRB 14.2.4 Beyond IRB 14.3 Rails Console 14.4 Rails Logger 14.5 Revisiting the Request-Response Cycle 14.6 The Stack Trace 14.7 Raising an Exception 14.8 Git Chapter 15 Just Enough Ruby 15.1 Reading Knowledge of Ruby 15.2 Ruby Example 15.3 Ruby Keywords 15.3.1 API Documentation 15.4 Ruby Files 15.4.1 Using IRB 15.5 Whitespace and Line Endings 15.6 Comments 15.7 The Heart of Programming 15.8 Assignment 15.9 Object-Oriented Terminology 15.9.1 Houses 15.9.2 Vehicles 15.9.3 Cookies 15.9.4 Limitations of Metaphors 15.9.5 Definitions 15.10 Classes 15.11 Methods 15.12 Dot Operator 15.12.1 Question and Exclamation Methods 15.13 Initialize Method 15.14 Method Parameters 15.15 Variable 15.15.1 Symbol 15.16 Attributes 15.17 Instance Variable 15.17.1 Instance Variables in Rails 15.18 Double Bar Equals Operator 15.19 Conditional 15.20 Ternary Operator 15.21 Interpolation 15.22 Access Control 15.23 Hash 15.24 Array 15.25 Iterator 15.26 Block 15.27 Rails and More Keywords 15.28 More Ruby 15.28.1 Collaborative Learning 15.28.2 Online Tutorials 15.28.3 Books 15.28.4 Newsletters 15.28.5 Screencasts 15.29 Git Chapter 16 Layout and Views 16.1 Template Languages 16.2 Introducing the Application Layout 16.3 Where did all the extra HTML come from? 16.4 Yield 16.5 Yield Variations 16.6 ERB Delimiters 16.7 Introducing View Helpers 16.8 The Rails Layout Gem 16.9 Basic Boilerplate 16.10 Adding Boilerplate 16.10.1 Viewport 16.10.2 Title and Description 16.11 Asset Pipeline 16.11.1 Assets Without Rails 16.11.2 Assets With Rails 16.12 Navigation Links 16.12.1 Introducing Partials 16.12.2 Introducing Link Helpers 16.12.3 Navigation Partial 16.12.4 Navigation Links Partial 16.13 Flash Messages 16.13.1 Creating Flash Messages 16.13.2 Flash and Flash Now 16.13.3 Explaining the Ruby Code 16.13.4 The Flash Messages Partial 16.14 HTML5 Elements 16.15 Application Layout 16.16 Simple CSS 16.17 Test the Application 16.18 Git Chapter 17 Front-End Framework 17.1 CSS Frameworks 17.2 JavaScript Libraries and Frameworks 17.3 Front-End Frameworks 17.4 CSS Preprocessing with Sass 17.5 Bootstrap or Others? 17.6 Graphic Design Options 17.7 Bootstrap 3 or 4? 17.8 Bootstrap Gem 17.9 Rails Layout Gem with Bootstrap 17.10 Renaming the application.css File 17.11 The application.css.scss File 17.11.1 A Global CSS File 17.11.2 A Manifest File 17.12 Bootstrap JavaScript 17.13 Bootstrap CSS 17.14 Using Bootstrap CSS Classes 17.14.1 Bootstrap Grid 17.14.2 Presentational Versus Semantic Styles 17.14.3 Use Bootstrap Classes Directly 17.14.4 Or Use Sass Mixins with Bootstrap 17.15 Application Layout with Bootstrap 17.16 Flash Messages with Bootstrap 17.17 Navigation Partial with Bootstrap 17.18 Navigation Links Partial 17.19 Test the Application 17.20 Remove the Flash Messages 17.21 Git Chapter 18 Add Pages 18.1 High Voltage Gem 18.2 Views Folder 18.3 \u201cAbout\u201d Page 18.4 Contact Page 18.5 Routing for the High Voltage Gem 18.6 Update the Navigation Partial 18.7 Test the Application 18.8 Git Chapter 19 Contact Form 19.1 The \u201cOld Way\u201d and the \u201cRails Way\u201d 19.2 User Story 19.3 Routing 19.4 Adding a Form to the Contact Page 19.5 Controller 19.5.1 Params Hash 19.5.2 Process_form Method 19.6 Test the Application 19.7 The Validation Problem 19.8 Remove the Contact Page 19.9 Implementing the \u201cRails Way\u201d 19.10 ActiveModel 19.11 Model 19.12 Create a New Contact Page 19.13 Seven Controller Actions 19.14 Controller 19.14.1 Mass-Assignment Vulnerabilities 19.14.2 Private Methods 19.15 Routing 19.16 Change Navigation Links 19.17 Test the Application 19.18 Git Chapter 20 Send Mail 20.1 User Story 20.2 Implementation 20.3 Create View Folder and Mailer 20.4 Edit the Mailer 20.5 Create Mailer View 20.6 Modify Controller 20.7 Test the Application 20.8 Troubleshooting 20.8.1 User Name Issues 20.8.2 Password Issues 20.8.3 Problems with Environment Variables 20.9 Asynchronous Mailing 20.10 Git Chapter 21 Mailing List 21.1 User Story 21.2 Implementation 21.3 Gibbon Gem 21.4 Home Page 21.4.1 Photo Options 21.5 Visitor Model 21.6 Visitors Controller 21.7 Clean Up 21.8 Routing 21.9 Test the Application 21.10 Git Chapter 22 Deploy 22.1 Heroku Costs 22.2 Test the Application 22.3 Preparing for Heroku 22.3.1 Gemfile 22.3.2 Asset Pipeline in Production 22.3.3 Option to Ban Spiders 22.3.4 Humans.txt 22.4 Sign Up for a Heroku Account 22.5 Heroku Toolbelt 22.6 Heroku Create 22.7 Enable Email 22.8 Set Heroku Environment Variables 22.9 Push to Heroku 22.10 Updating the Application 22.11 Visit Your Site 22.12 Customizing 22.13 Troubleshooting 22.14 Where to Get Help Chapter 23 Analytics 23.1 Segment.com 23.2 Accounts You Will Need 23.3 Installing the JavaScript Library 23.4 Replace the Write Key 23.5 Add Integration Code 23.6 Page View Tracking with Turbolinks 23.7 Event Tracking 23.8 Troubleshooting 23.9 Segment.com Integrations 23.10 Deploy 23.11 Improving the User Experience 23.12 Conversion Tracking 23.13 Enjoy What You\u2019ve Achieved Chapter 24 Testing 24.1 Why Test? 24.2 What Are Tests? 24.3 Scripted or Exploratory 24.4 Regression and Acceptance 24.5 Units and Integration 24.6 Sample Data 24.7 Test Doubles 24.8 Minitest and RSpec 24.9 Capybara, the Ghost in the Machine 24.10 Four Phases of Feature Tests 24.11 Four Phases of Unit Tests 24.12 Set Up Minitest 24.12.1 Run Tests 24.13 Unit Test (Standard Syntax) 24.14 Unit Test (Spec Syntax) 24.14.1 Create a Test Class With Describe 24.14.2 Setup Phase 24.14.3 Do It 24.15 Run Tests 24.15.1 Breaking the Test 24.16 Feature Test 24.16.1 Feature 24.16.2 Scenario 24.17 Run Tests 24.17.1 Troubleshooting 24.17.2 Breaking the Test 24.17.3 Using Capybara 24.18 Other Tests 24.19 Behavior-Driven Development 24.20 Test-Driven Development 24.21 Test-First Development 24.22 Words of Encouragement Chapter 25 Rails Composer 25.1 Building Starter Applications 25.2 Build \u2018Learn Rails\u2019 in Less Than Five Minutes 25.3 A Collection of Starter Applications 25.3.1 Rails Bootstrap 25.3.2 Rails Foundation 25.3.3 Rails Mailing List with Active Job 25.3.4 Rails OmniAuth 25.3.5 Rails Devise 25.3.6 Rails Devise Roles 25.3.7 Rails Devise Pundit 25.3.8 Other Starter Applications 25.4 Rails Composer Options 25.5 Try It Out Chapter 26 Version Notes 26.1 Version 4.2.0 26.2 Version 4.1.0 26.3 Version 4.0.2 26.4 Version 4.0.1 26.5 Version 4.0.0 26.6 Version 3.1.0 26.7 Version 3.0.2 26.8 Version 3.0.1 26.9 Version 3.0.0 26.10 Version 2.2.2 26.11 Version 2.2.1 26.12 Version 2.2.0 26.13 Version 2.1.6 26.14 Version 2.1.5 26.15 Version 2.1.4 26.16 Version 2.1.3 26.17 Version 2.1.2 26.18 Version 2.1.1 26.19 Version 2.1.0 26.20 Version 2.0.2 26.21 Version 2.0.1 26.22 Version 2.0.0 26.23 Version 1.19 26.24 Version 1.18 26.25 Version 1.17 Chapter 27 Credits and Comments 27.1 Credits 27.1.1 Kickstarter 27.1.2 Financial Backers for the First Edition 27.1.3 Technical Editors 27.1.4 Editors and Proofreaders 27.1.5 Photos 27.2 Comments Chapter 1 Version Check, Videos, and More Before you get started, I want you to have the most current version of my book. Also, I\u2019ll tell you how to get the videos and advanced tutorials. 1.1 Version Check If you have the PDF, ePub, or Mobi versions of the book, check the title page for the version number and look on the webpage for the learn-rails GitHub repository to make sure you have the newest version of the book. I suggest to use the online edition as you build the tutorial application. It is always up to date. 1.2 Get the Videos You can watch videos as you read the book. A subscription is only $19 per month (there\u2019s also a discount when you get the video series plus advanced tutorials). It\u2019s easy and you\u2019ll learn more: Get the Videos and Advanced Tutorials The videos are a great introduction to Rails. With the videos and the advanced tutorials, I promise there is no better way to learn Rails. Chapter 2 Introduction Welcome. This is Book Two in my Ruby on Rails book series . It is written for Rails 5.1. In this book, you\u2019ll build a working web application so you\u2019ll gain hands-on experience. Along the way, you\u2019ll practice techniques used by professional Rails developers. And I\u2019ll help you understand why Rails is a popular choice for web development. Read Book One to get the big picture that\u2019s missing from other tutorials. Read it anywhere, on your phone or tablet. It introduces key concepts so you\u2019ll have a solid foundation for continued study. You can start this book before you finish Book One. This book (Book Two) is for hands-on learning so you\u2019ll need your computer to follow this tutorial. In this book, I also provide links to videos. You can get the videos along with advanced tutorials at the tutorials.railsapps.org site. Figure 2.1: The application you will build. 2.1 Is It for You? You don\u2019t need to be a programmer to succeed with this book. You\u2019ll be surprised how quickly you become familiar with the Unix command line interface and the Ruby programming language even if you\u2019ve never tried programming before. Book One provides a primer for the Unix command line, the terminal, and a text editor. If you have no experience with Unix commands, the terminal window, or a text editor, read Book One first. Everything else you need is self-contained in this book. With this book, my aim is to introduce you to Rails and the techniques of web application development so you can launch a startup or begin a new career. 2.2 What To Expect There is deep satisfaction in building an application and making it run. With this book, I\u2019ll give you everything you need to build a real-world Rails application. More importantly, I\u2019ll explain everything you build, so you understand how it works. There will be no mystery code. When you\u2019ve completed this tutorial, you will be ready for more advanced self-study, including the Capstone Rails Tutorials , textbook introductions to Rails such as Michael Hartl\u2019s Ruby on Rails Tutorial , or workshops and code camps that provide intensive training in Ruby on Rails. 2.2.1 About Book One Here\u2019s what is covered in Book One, in case you missed it. In Book One, I explain the culture and practices of the Rails community. I introduce the basic concepts you\u2019ll need to understand web application development. Book One will teach you how to be a successful beginner. There is a roadmap, or study guide, in the \u201cLevel Up\u201d chapter. It helps to have a map because there is so much to learn. More importantly, to become a skilled Rails developer, you\u2019ll need to start writing code, and Book One contains a chapter, \u201cCrossing the Chasm,\u201d that will give you a strategy for building your own applications. 2.2.2 What\u2019s in This Book You\u2019ll start coding immediately in this book. It\u2019s a hands-on tutorial that leads you through the code needed to build a real-world web application. Don\u2019t skip around in this book. The tutorial is designed to unfold in steps, one section leading to another, until you reach the \u201cTesting\u201d chapter. You can complete this book in one long weekend, though it will take concentration and stamina. If you work through the book over a longer timespan, try to set aside uninterrupted blocks of two hours or more for reading and coding, as it takes time to focus and concentrate. 2.2.3 A Warning About Links My books are densely packed with links for background reading. If you click every link, you\u2019ll be a well-informed student, but you may never finish the book! It\u2019s up to you to master your curiosity. Follow the links only when you want to dive deeper. 2.2.4 What Comes Next The best way to learn is by doing; when it comes to code, that means building applications. Hands-on learning with actual Rails applications is the key to absorbing and retaining knowledge. After you read this book, you\u2019ll be able to work with the example applications from the RailsApps Project . The project provides open source example applications for Rails developers, for free. Each application is accompanied by a tutorial in the Capstone Rails Tutorials series, so there\u2019s no mystery code. Each application can be generated in a few minutes with the Rails Composer tool, which professional developers use to create starter applications. The open source project is solely supported by subscriptions to the video series and sales of the Capstone Rails Tutorials . If you get the videos or the advanced tutorials, you\u2019ll have my sincere appreciation for your support. 2.2.5 Staying In Touch If you obtained this book from Amazon or a download site, take a moment to get on the mailing list for the book. I\u2019ll let you know when I release updates to the book. Get on the mailing list for the book 2.2.6 A Note to Reviewers and Teachers This book approaches the subject differently than most introductions to Rails. In this book, rather than show the student how to use scaffolding, I introduce the model-view-controller design pattern by creating the components manually. Lastly, though every other Rails tutorial shows how to use a database, this book doesn\u2019t, because I want the book to be a short introduction and I believe the basic principles of a web application stand out more clearly without adding a database to the application. Though this tutorial is not a typical Rails introduction, I hope you\u2019ll agree that it does a good job in preparing Rails beginners for continued study, whether it is a course or more advanced books. 2.2.7 Using the Book in the Classroom If you\u2019ve organized a workshop, course, or code camp, and would like to assign the book as recommended reading, contact me at [email protected] to arrange access to the book for your students at no charge. 2.2.8 Let\u2019s Get Started In the next chapter, we\u2019ll learn how to get help when you need it. Chapter 3 Get Help When You Need It This chapter appears in the first book in this series, but I\u2019ve included an expanded version here in Book Two because it is important. 3.1 Example Code If you follow this tutorial closely, you\u2019ll have a working application that closely matches the example app in the learn-rails GitHub repository. If your application doesn\u2019t work after following the tutorial, compare the code to the example app in the GitHub repository, which is known to work. 3.2 Version Check The code in this tutorial was tested by many people and worked flawlessly at the time this was written. The learn-rails example application on GitHub serves as a \u201creference implementation\u201d if you have problems. The example application is updated more frequently than the published tutorial. You\u2019ll find the version number and release date on the first page of this book (under the book title). Check the learn-rails GitHub repository to find out if you have the newest version of the book. The README page on the GitHub repo always shows the most recent version number for the book and the tutorial application. Don\u2019t worry if the learn-rails GitHub repository seems complicated or difficult to understand. You\u2019ll get to know GitHub over time and it will become familiar. For now, it is only important to know that it is there in case you have problems. Take a moment now to look at the open issues on GitHub to see what problems you may encounter as you work your way through the tutorial. You can look at the closed issues to see some of the solved problems. If you have trouble building the application in this book, and suspect something may be out of date, you can compare the Gemfile in the repo to see if we\u2019ve changed gems or specified version numbers to avoid compatibility issues. You can also check the CHANGELOG and look at recent commits to see the current state of the application. 3.3 Getting Help With the Book Let\u2019s consider what to do if you encounter problems as you build the tutorial application in this book. If you are in a classroom, or studying in a group, ask a peer to look at your problem. Most problems are caused by simple typos or formatting errors. Your classmate may see what you overlooked. Stack Overflow provides a question-and-answer forum for readers of this book. As the author of this book, I can\u2019t solve your individual problems or help you directly by email. If I did, I would not have time to create the tutorials and videos that benefit so many people. However, I watch for questions on Stack Overflow. Everyone benefits when solutions are made public. tag your questions on Stack Overflow with railsapps for extra attention If your questions aren\u2019t answered on Stack Overflow, try the Reddit forum: /r/rails I sincerely hope you won\u2019t encounter obstacles as you build the tutorial application. Thousands of beginners have successfully completed the book and, unless a gem has recently changed, you should have no problem. Now let\u2019s consider where to look for help when you are working on your own Rails projects. 3.4 Getting Help With Rails 3.4.1 Video Option Watch the six minute video if you have subscribed: Get Help with Rails 3.4.2 Where To Go For Help? What will you do when you get stuck? \u201cGoogle it,\u201d of course. But here\u2019s a trick to keep in mind. Google has options under \u201cSearch tools\u201d to show only recent results from the past year. Use it to filter out stale advice that pertains only to older versions of Rails. Stack Overflow is as important as Google for finding answers to programming problems. Stack Overflow answers are often included in Google search results, but you can go directly to Stack Overflow to search for answers to your questions. Like Google, answers from Stack Overflow are helpful if you check carefully to make sure the answers are recent. Also be sure to compare answers to similar questions; the most popular answer is not always the correct answer to your particular problem. Requests for advice (especially anything that provokes opinions) are often rejected on Stack Overflow. Instead, try Reddit for advice or recommendations. You\u2019ll find discussion forums (\u201csubreddits\u201d) devoted to Rails and Ruby . You can also visit the Quora question-and-answer site for topics devoted to Rails and Ruby . 3.5 References Here are suggestions for the most important references. If you feel overwhelmed by all the links, remember that you can use this book to build the tutorial application without any additional resources. Right now, it\u2019s important to know additional help is available when you need it. 3.5.1 RailsGuides The Rails Guides are Rails\u2019s official documentation, written for intermediate-level developers who already have experience writing web applications. The Rails Guides are an excellent reference if you want to check the correct syntax for Rails code. You\u2019ll be able to use the Rails Guides after completing this tutorial. 3.5.2 Cheatsheets Tobias Pfeiffer has created a useful Rails Beginner Cheat Sheet that provides a good overview of Rails syntax and commands. Even better than a cheatsheet, for Mac users, is an application named Dash that offers fingertip access to reference documentation for Ruby, Rails, HTML, CSS, JavaScript, and many other languages and frameworks. 3.5.3 API Documentation The API documentation for Ruby and Rails shows every class and method. These are extremely technical documents (the only thing more technical is reading the source code itself). The documents offer very little help for beginners, as each class and method is considered in isolation, but there are times when checking the API documentation is the only way to know for certain how something works. Rails Documentation - official API docs apidock.com/rails - Rails API docs with usage notes apidock.com/ruby - Ruby API docs with usage notes I recommend Dash as a tool to look up classes, modules, and methods in Ruby and Rails. Dash is a macOS app; use Zeal on Linux. Dash and Zeal run offline (they don\u2019t need an Internet connection) so you can use them anywhere. 3.6 Meetups, Hack Nights, and Workshops I\u2019d like to urge you to find ways you can work with others who are learning Rails. Peer support is really important when you face a challenge and want to overcome obstacles. Most large urban areas have meetups or user group meetings for Rails developers. Try Meetup.com or google \u201cruby rails (my city)\u201d. The community of Rails developers is friendly and eager to help beginners. If you are near a Rails meetup, it is really worthwhile to connect to other developers for help and support. You may find a group that meets weekly for beginners who study together. Local user groups often sponsor hack nights or hackathons which can be evening or weekend collaborative coding sessions. You don\u2019t have to be an expert. Beginners are welcome. You can bring your own project which can be as simple as completing a tutorial. You will likely find a study partner at your level or a mentor to help you learn. If you are a woman learning Rails, look for one of the free workshops from RailsBridge or Rails Girls . These are not exclusively for women; everyone considered a \u201cminority\u201d in the tech professions is encouraged to participate; and men are included when invited by a woman colleague or friend. 3.7 Pair Programming Learning to code is challenging, especially if you do it alone. Make it social and you\u2019ll learn faster and have more fun. There\u2019s a popular trend in the workplace for programmers to work side-by-side on the same code, sharing a keyboard and screen. It\u2019s effective, both to increase productivity and to share knowledge, and many coders love it. When programmers are not in the same office, they share a screen remotely and communicate with video chat. Look for opportunities to pair program. It\u2019s the best way to learn to code, even if your pairing partner is only another beginner. Learn more about pair programming on the site pairprogramwith.me and find a pairing partner at codermatch.me or letspair.net . Remote pair programming requires tools for screen sharing and video chat. Pairing sessions often use: Google+ Hangouts Screenhero Floobits Cloud9 IDE More tools are emerging as remote pair programming becomes popular. 3.8 Pairing With a Mentor By far, the best way to learn is to have a mentor at your side as you undertake a project. That is an opportunity that is seldom available, unless you\u2019ve been hired to be part of a team in a company that encourages pair programming. You can try RailsMentors , a network of volunteer mentors offering free help. If you can pay for help, find a mentor using HackHands or AirPair . Market rates are expensive for a student, obviously, but if you are learning on the job or building an application for your own business, connecting online with a mentor might be a godsend. AirPair connects developers for real-time help using video chat and screen sharing. Experts set their own rate and the site matches you according to your budget. Expect to pay market rates for consulting ranging from USD $40 per hour to $150 per hour or more. HackHands promises to instantly connect you with a qualified expert at a cost of one dollar per minute for mentorship using video chat and screen sharing. 3.9 Code Review Code review is an essential part of the development process. There\u2019s always more than one way to implement a feature, and some ways are better than others, but you may not know it unless you ask someone to look at your code. When you pair with a mentor, you get the benefit of code review. But even if you don\u2019t have a mentor, you can get code review online. StackExchange, the parent of StackOverflow, has a free site for code review, and a new service promises code review as a service: codereview.stackexchange.com Expert code review will accelerate your learning faster than anything else. Knowing where to go for help is important; it is just as important to stay current. 3.10 Staying Up-to-Date Rails changes frequently and its community is very active. Changes to Rails, expert blog articles, and new gems can impact your projects, even if you don\u2019t work full-time as a Rails developer. Consequently, I urge you to stay up-to-date with news from the community. I suggest signing up for two weekly email newsletters: Ruby Weekly Green Ruby News Another weekly email newsletter is more technical, and focused on code arriving in the next version of Rails: This Week in Rails For daily news about Rails, check Peter Cooper\u2019s RubyFlow site which lists new blog posts from Rails developers each day. Also take a look at this list of top blogs for Rails developers: 45 Ruby Blogs If you like podcasts, check out Ruby Rogues and Envy Labs\u2019s Ruby5 . Finally, you can follow @rails_apps on Twitter for news about the RailsApps project. Chapter 4 Accounts You May Need You\u2019ll need accounts with four services before you begin building the application in this book. This tutorial will show you how to save your work using GitHub . You can sign up for a GitHub account for free. Every experienced Rails developer has a GitHub account; it is where we collaborate on our code, both commercial and open source projects. We\u2019ll create a form that allows website visitors to \u201copt-in\u201d to a mailing list. You\u2019ll need a MailChimp account, which is free. If you send email to a mailing list, you will find it is useful to have an account with MailChimp or a similar service. We\u2019ll also send email from the application, which will require a SendGrid account. SendGrid is a transactional email service that lets you send email messages efficiently and reliably. SendGrid offers a free account that allows you to send 12,000 messages per month for free. Finally, we\u2019ll deploy the tutorial application to Heroku which provides Rails application hosting. It costs nothing to set up a Heroku account and deploy as many applications as you want. It is the easiest way to deploy a Rails application and most Rails developers use Heroku at some time in their careers. 4.1 GitHub Rails developers use GitHub for collaboration and remote backup of projects. For this tutorial, I suggest you get a free personal GitHub account if you don\u2019t already have one. As a developer, your GitHub account establishes your reputation in the open source community. If you\u2019re seeking a job as a developer, employers will look at your GitHub account. When you work with other developers, they may check to see what you\u2019ve worked on recently. Don\u2019t be reluctant to set up a GitHub account, even if you\u2019re a beginner. It shows you are serious about learning Rails. You\u2019ll be asked to provide a username. This can be a nickname or short version of your real name (for example, your Twitter username). You\u2019ll be asked to provide an email address. It\u2019s very important that you use the same email address for your GitHub account that you use to configure Git locally (there will be more about configuring Git later). If you create a Heroku account to deploy and host your Rails applications, you should use the same email address. After you create your GitHub account, log in and look for the button \u201cEdit Your Profile.\u201d Take a few minutes to add some public information to your account. It is really important to provide your real name and a public email address. Displaying your real name on your GitHub account makes it easy for people to associate you with your work when they meet you in real life, for example at a meetup, a hackathon, or a conference. Providing a public email address makes it possible for other developers to reach you if you ask questions or submit issues. If you can, provide a website address (even just your Twitter or Facebook page). In general, you won\u2019t be exposed to stalkers or spammers (except some recruiters) if you are open about yourself on GitHub. Later I\u2019ll show you how to set up and use Git and GitHub. 4.2 MailChimp This tutorial shows how website visitors can sign up to receive a newsletter provided by a MailChimp mailing list. MailChimp allows you to send up to 12,000 emails/month to a list of 2000 or fewer subscribers for free. There is no cost to set up an account. MailChimp will ask you to provide a website address and company details for your account. These details are included when email messages are sent to your subscribers. If you don\u2019t have your own website, you can enter the URL for your GitHub account for now. Use your own name for a company if you don\u2019t have one. After you have set up a MailChimp account, create a new mailing list where you can collect email addresses of visitors who have asked to subscribe to a newsletter. The MailChimp \u201cLists\u201d page has a button for \u201cCreate List.\u201d The list name and other details are up to you. If you get frustrated with the complex and confusing MailChimp interface, try to remember that the friendly MailChimp monkey is laughing with you, not at you. 4.3 SendGrid Earlier editions of this book showed how to use a Gmail account to send email from the application. Google has taken steps to make Gmail more secure and now it can be difficult to send email from a Rails application using Gmail. This tutorial provides instructions for SendGrid . SendGrid offers a free account that allows you to send 12,000 messages per month for free. Scroll to the bottom of the SendGrid pricing page to see details about the free plan. Click the \u201cTry for Free\u201d link to set up an account. No credit card is needed. 4.4 Heroku We\u2019ll use Heroku to host the tutorial application so anyone can reach it. To deploy an app to Heroku, you must have a Heroku account. Visit https://signup.heroku.com/devcenter to set up an account. Be sure to use the same email address you used to register for GitHub. It\u2019s very important that you use the same email address for GitHub and Heroku accounts. Chapter 5 Get Started Before you can start building, you\u2019ll need to install Ruby (the language) and Rails (the gem). I\u2019ll provide links to installation instructions that are up to date. Even if you\u2019ve already installed Rails, please review the instructions to make sure your development environment is set up correctly. Other books and tutorials often skip important details. 5.1 Text Editor and Terminal Applications I\u2019ve explained how to use a text editor and terminal application in Book One. If you haven\u2019t used the Unix command line before, refer to Book One for an introduction. I recommend the Atom text editor but you may use Sublime Text or any others that provide syntax highlighting. Refer to Book One for important instructions about setting up the text editor so you can open a file from the command line. 5.2 Copying and Pasting Code In the next chapter you\u2019ll begin building a Rails application. You need to get the code from this tutorial into your computer. You could just read and imagine, but really, building a working application is the only way to learn. The most obvious way is to copy and paste from this tutorial into your text editor, assuming you are reading this on your computer (not a tablet or printed pages). It\u2019s a bit tedious and error-prone but you\u2019ll have a good opportunity to examine the code closely. Some students like to type in the code, character by character. If you have patience, it\u2019s a worthwhile approach because you\u2019ll become more familiar with the code than by copying and pasting. Don\u2019t feel shy about copying code; it\u2019s how you will learn. Working programmers spend a lot of time copying code from others. At first, you will copy a lot of code. As you gain proficiency, you will copy code and adapt it, more extensively as you gain confidence and skill. Only when you\u2019ve been working full-time as a coder for months or years will you find yourself writing code from scratch; even then, when you encounter new problems, you will still look for code examples to copy and adapt. Box 5.1. Warning About the PDF and Kindle Versions This book is available in several formats, including online (HTML), PDF, ePub (Apple iBooks), and mobi (Kindle) versions. Use the online edition of the book if you can. With the online edition, you\u2019ll be able to copy and paste the code without any problem. The ePub version (using Apple iBooks) also preserves line breaks and indentation when copying code. Copying without line breaks will cause code errors. You\u2019ll lose line breaks when copying code with the following versions: PDF version on macOS using the Preview application mobi (Kindle) If you use Adobe Acrobat you\u2019ll be able to copy the line breaks (though indenting is lost). You can also open a PDF file in Chrome or Safari web browsers and copy code with line breaks. With the mobi (Kindle) version, you\u2019ll have to carefully reformat the code after pasting into your text editor. Indentation makes code more readable, so try to preserve the indentation you see in the code samples. In YAML files (with the file extension .yml ), indentation is required (your application will break without it). 5.3 Your Computer You can develop web applications with Rails on computers running Mac OS X, Linux, or Microsoft Windows operating systems. Most Rails developers use macOS or Linux because the underlying Unix operating system has long been the basis for open source programming. Later in this chapter, I\u2019ll give links to installation instructions for macOS and Linux. For Windows users, I have to say, installing Rails on Windows is frustrating and painful. Readers and workshop students often tell me that they\u2019ve given up on learning Rails because installation of Ruby on Windows is difficult and introduces bugs or creates configuration issues. Even when you succeed in getting Rails to run on Windows, you will encounter gems you cannot install. For these reasons, I urge you to use Cloud9, a browser-based development environment, on your Windows laptop. 5.3.1 Hosted Computing If you are using Windows, or have difficulty installing Ruby on your computer, try using Cloud9. Cloud9 provides a hosted development environment. That means you set up an account and then access a remote computer from your web browser. The Cloud9 service is free for ordinary use. There is no credit card required to set up an account. You\u2019ll only be charged if you add extra computer memory or disk space (which you don\u2019t need for ordinary Rails development). The Cloud9 service gives you everything you need for Rails development, including a Unix shell with Ruby pre-installed, plus a browser-based file manager and text editor. Any device that runs a web browser will give you access to Cloud9, including a tablet or smartphone, though you need a broadband connection, a sizable screen, and a keyboard to be productive. 5.4 Try the Terminal Look for the Terminal application in the following places: MacOS: Applications - Utilities - Terminal Linux: Applications - Accessories - Terminal Windows: Taskbar Start Button - Command Prompt On the Mac, search for the macOS Terminal application by pressing the Command-Spacebar combination (which Apple calls \u201cSpotlight Search\u201d) and searching for \u201cTerminal.\u201d The magnifying glass in the upper right corner of your screen will also launch \u201cSpotlight Search.\u201d Or look in the Applications/Utilities/ folder for the Terminal application. You\u2019ll need to click the name of the application to launch the Terminal. For Linux or Windows, The Command Line Crash Course explains how to launch a terminal application . Launch your terminal application now. Try out the terminal application by entering a shell command. $ whoami Don\u2019t type the $ character. The $ character is a cue that you should enter a shell command. This is a longtime convention that indicates you should enter a command in the terminal application or console. The Unix shell command whoami returns your username. Don\u2019t type the $ prompt. You might see: command not found: $ which indicates you typed the $ character by mistake. If you are new to programming, using a text editor and the shell will seem primitive compared to the complexity and sophistication of Microsoft Word or Photoshop. Software developers edit files with simple text editors and run programs in the shell. That\u2019s all we do. We have to remember the commands we need (or consult a cheatsheet) because there are no graphical menus or toolbars. Yet with nothing more than a text editor and the command line interface, programmers have created everything that you use on your computer. 5.5 Installing Ruby Your first challenge in learning Rails is installing Ruby on your computer. Frankly, this can be the most difficult step in learning Rails because no tutorial can sort out the specific configuration of your computer. Get over this hump and everything else becomes easy. The focus of this book is learning Rails, not installing Ruby, so to keep the book short and readable, I\u2019m going to give you links to articles that will help you install Ruby. You\u2019ll spend at least an hour installing Ruby and Rails, so be sure to allow enough time for the task. 5.5.1 MacOS See this article for macOS installation instructions: Install Ruby on Rails - MacOS 5.5.2 Ubuntu Linux See this article for Ubuntu installation instructions: Install Ruby on Rails - Ubuntu 5.5.3 Hosted Computing Cloud9 is a browser-based development environment. Cloud9 is free for small projects. If you have a fast broadband connection to the Internet, this is your best choice for developing Rails on Windows. And it is a good option if you have any trouble installing Ruby on Mac or Linux because the Cloud9 hosted environment provides everything you need, including a Unix shell with Ruby and RVM pre-installed, plus a browser-based file manager and text editor. Using a hosted development environment is unconventional but leading developers do so and it may be the wave of the future. See this article for Cloud9 installation instructions: Install Ruby on Rails - Cloud9 The article shows how to get started with Cloud9. If you use Cloud9, be sure to pick the \u201cBlank\u201d template for your workspace, not the \u201cRuby\u201d or \u201cRuby on Rails\u201d templates that provide a prebuilt Rails application. We\u2019re building from scratch in this tutorial. 5.5.4 Windows Here are your choices for Windows: Use the Cloud9 hosted development environment Install the Railsbridge Virtual Machine Use RubyInstaller for Windows Cloud9 is ideal if you have a fast Internet connection. If not, download the Railsbridge Virtual Machine to create a virtual Linux computer using Vagrant . Other tutorials may suggest using RailsInstaller , but it will not provide an up-to-date version of Ruby or Rails. Also, RVM does not run on Windows. 5.6 Your Workspace Take a moment to think about where on your computer you\u2019ll do your work and store your files. You may have a documents/ folder. You could make a similar folder named projects/ or code/ or workspace/ for your programming projects. Use the Unix mkdir command to create a folder or create it with your file browser. If you haven\u2019t done so already, make a folder to contain your programming projects. You don\u2019t need to do this if you already created a workspace/ folder in the Unix chapter in Book One. $ cd ~ $ pwd /Users/danielkehoe $ mkdir workspace $ cd workspace In this tutorial, the terms \u201cfolders\u201d and \u201cdirectories\u201d mean the same thing. Use the Unix cd command to change directories. When you enter the Unix command cd ~ , you\u2019ll move to your home (or \u201cuser\u201d) directory. The squiggly ~ \u201ctilde\u201d character is a Unix shortcut that indicates your home folder. The Unix pwd command shows the \u201cpresent working directory,\u201d where you are. The Unix mkdir command creates an empty folder and we move into it with the Unix cd command. 5.6.1 Video Option Watch the four minute video if you have subscribed: UNIX Commands Basics 5.7 Understanding Version Numbers Rails follows a convention named semantic versioning : The first number denotes a major version (Rails 4) The second number denotes a minor release (Rails 4.2) The third number denotes a patch level (Rails 4.2.1) A major release includes new features, including changes which break backward compatibility. For example, switching from Rails 3.2 to Rails 4.0 required a significant rewrite of every Rails application. A minor release introduces new features but doesn\u2019t break anything. For example, Rails 3.2 added the asset pipeline, and Rails 4.2 added the Active Job feature for background processing. A patch release fixes bugs but doesn\u2019t introduce significant features. Usually this means you can change the version number in the Gemfile and run bundle update without making any other changes to your application. 5.8 Ruby and Rails Version Check Check that appropriate versions of Ruby and Rails are installed in your development environment. You\u2019ll need: The Ruby language (version 2.3 or newer) The Rails gem (version 5.1 or newer) Open your terminal application and enter: $ ruby -v You might see: ruby 2.4.1p0 (...) You\u2019ve got Ruby version 2.4.1, patch level \u201cp0\u201d (Ruby versions add an extra patch level to semantic versioning). If you\u2019ve got a newer version of Ruby, no problem; minor updates to Ruby don\u2019t affect Rails. Try: $ rails -v You might see: Rails 5.1.2 If you see: Rails is not currently installed on this system. You are not using an RVM gemset where the Rails gem is installed. Go to the Installing Rails instructions for your computer if you have not set up Rails. The next section explains more about RVM gemsets which may be all you need to find Rails. If you have Rails 4.2 or older versions, you must update to Rails 5.1. See the Installing Rails instructions for your computer. Versions such as 5.0.0.beta3 or 5.0.0.rc1 are beta versions or \u201crelease candidates.\u201d You can use a release candidate in the weeks before a final release becomes available. If you\u2019ve got Rails 5.1.3 or newer, that\u2019s fine. It means minor bugs have been fixed since this was written, but the book is still current. You can check for the current version of Rails here. Box 5.2. Rails 5.1 This edition of the book was prepared using Rails 5.1.2. The newest version of the book is listed on the README page of the learn-rails GitHub repository. 5.9 RVM I promised that this book would introduce you to the practices of professional Rails developers. One of the most important utilities you\u2019ll need in setting up a real-world Rails development environment is RVM, the Ruby Version Manager . RVM lets you switch between different versions of Ruby. Right now, that might not seem important, but as soon as a new version of Ruby is released, you\u2019ll need to upgrade, and it is best to be ready by installing the current version of Ruby with RVM, so you can easily add a new version of Ruby later, and still switch back to older versions as needed. RVM also helps you manage your collections of gems, by letting you create multiple gemsets . Each gemset is the collection of gems you need for a specific project. Rails changes frequently; with RVM, you can install a specific version of Rails in a project gemset, along with all the gems you need for the project. When a new version of Rails is released, you can create a new gemset with the new Rails version when you start a new project. Your old project will still have the version of Rails it needs in its own gemset. If you\u2019ve followed the instructions in the article Installing Rails and installed RVM, you\u2019ll be ready to handle multiple versions of Ruby, and multiple versions of Rails. That\u2019s as it should be. Most professional Rails developers have more than one version of Ruby or Rails, and RVM makes it easy to switch. RVM will show you a list of available Ruby versions: $ rvm list You can see a list of available gemsets associated with the current Ruby version: $ rvm gemset list You will see an arrow that shows which gemset is active. You will see a global gemset as well as any others you have created, such as a gemset for Rails5.0 . Here\u2019s how to switch between gemsets: $ rvm gemset use global And switch back to another: $ rvm gemset use default After you\u2019ve worked on a few Rails applications, you\u2019ll see several project-specific gemsets if you are using RVM in the way most developers do. RVM is not the only utility you can use to manage multiple Ruby versions. Some developers like Chruby or rbenv . Don\u2019t be worried if you hear debates about RVM versus Chruby or rbenv; developers love to compare the merits of their tools. RVM is popular, well-supported, and an excellent utility to help a developer install Ruby and manage gemsets; that\u2019s why we use it. 5.10 Project-Specific Gemset For our learn-rails application, we\u2019ll create a project-specific gemset using RVM. We\u2019ll give the gemset the same name as our application. By creating a gemset for our tutorial application, we\u2019ll isolate the current version of Rails and the gems we need for this project. Whether you use RVM or another Ruby version manager, this will introduce you to the idea of \u201csandboxing\u201d (isolating) your development environment so you can avoid conflicts among projects. After we create the project-specific gemset, we\u2019ll install the Rails gem into the gemset. Enter these commands: $ rvm use [email protected] --create $ gem install rails This will install the newest version of Rails 5.0. It takes a few minutes to automatically install all the gems that are needed for Rails. It\u2019s absolutely necessary to create a gemset and install Rails so we can move on to creating the application in the next chapter. If you have trouble at this point, refer to the article Installing Rails or the RVM website . Linux users may need to check instructions for Integrating RVM . Let\u2019s make sure Rails is ready to run. Open a terminal and type: $ rails -v You should see the message \u201cRails 5.1.2\u201d (or something similar). Now let\u2019s explore the rails new command and get started building the tutorial application. Chapter 6 Create the Application In this chapter, we\u2019ll begin building the tutorial application. But first, let\u2019s consider the options you have for starter applications. 6.1 Starter Applications Rails provides a framework ; that is, a software library that provides utilities, conventions, and organizing principles to allow us to build complex web applications. Without a framework, we\u2019d have to code everything from scratch. Rails gives us the basics we need for many websites. Still, the framework doesn\u2019t give us all the features we need for many common types of websites. For example, we might want users to register for an account and log in to access the website (\u201cuser management and authentication\u201d). We might want to restrict portions of our website to just administrators (\u201cauthorization\u201d). We also might want to add gems that enhance Rails to aid development (gems for testing, for example) or improve the look and feel of our application (the Bootstrap or Foundation front-end frameworks). Developers often mix and match components to make a customized Rails stack. Developers often use a starter application instead of assembling an application from scratch. You might call this a \u201ctemplate\u201d but we use that term to refer to the view files that combine HTML with Ruby code to generate web pages. Most experienced developers have one or more starter applications that save time when beginning a new project. The RailsApps project was launched to provide open source starter applications so developers could collaborate on their starter applications and avoid duplicated effort. After you gain some skill with this tutorial, you might use the RailsApps starter apps to instantly generate a Rails application with features like authentication, authorization, and an attractive design. At the end of this book, you\u2019ll learn about Rails Composer , a tool for building starter applications. For now, we\u2019ll begin with the Rails default starter application. 6.2 Workspace Folder and RVM Gemset Are you in the folder named workspace/ you created earlier? $ pwd /Users/danielkehoe/workspace/ If you\u2019re not in your workspace folder, enter a Unix command to move to the folder: $ cd ~/workspace We already created a project-specific gemset using RVM. Make sure it\u2019s ready to use: $ rvm use [email protected] $ rvm gemset list gemsets for ruby-2.4.1... (default) global \\=> learn-rails You should see an arrow pointing to the learn-rails gemset. If not, go back to the previous \u201cGet Started\u201d chapter. 6.3 Use \u201cRails New\u201d to Build the Application Let\u2019s go! We have selected a gemset, we have Rails installed, and we\u2019re in our workspace/ folder. Let\u2019s build a Rails application! To create the Rails default starter application, type: $ rails new learn-rails This will create a new Rails application named \u201clearn-rails.\u201d It takes a few minutes when the build script runs bundle install . Don\u2019t worry; just give it enough time to finish (but no more than five minutes even if your Internet connection is very slow). In the future, you can give your application a different name. For this tutorial, it is VERY IMPORTANT that you use the name \u201clearn-rails.\u201d You\u2019ll be copying code that assumes the name is \u201clearn-rails;\u201d it will save you trouble to use this name. The rails new command will create ten folders and 93 files. It will install 62 gems into your gemset. After you create the application, switch to its folder to continue work directly in the application: $ cd learn-rails This is your project directory. It is also called the application root directory. You\u2019ll spend all your time inside this folder. Box 6.1. Spring After creating a new Rails application, you may see a message to run a command: $ bundle exec spring binstub --all The command sets up Spring. Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don\u2019t need to stop and restart it when you make changes. After you change into the project directory, you can run the command. Type the ls command to show the folders and files in a directory. Soon we\u2019ll learn more about each of these folders and files. $ ls Gemfile Rakefile config lib test Gemfile.lock app config.ru log tmp README.md bin db public vendor 6.4 Make a Sticky Gemset RVM gives us a convenient technique to make sure we are always using the correct gemset when we enter the project directory. It will create hidden files to designate the correct Ruby version and project-specific gemset. Enter this command to create the hidden files: $ rvm use [email protected] --ruby-version The \u2013ruby-version argument creates two files, .ruby-version and .ruby-gemset , that set RVM every time we cd to the project directory. Without these two hidden files, you\u2019d need to remember to enter rvm use [[email protected]](/cdn-cgi/l/email-protection) every time you start work on your project after closing the console. If you see \u201cERROR: Gemset \u2018learn-rails\u2019 does not exist\u201d, perhaps you overlooked an earlier step in the Project-Specific Gemset section (in the previous chapter) where we created the learn-rails gemset. After creating the two hidden files, check if they are there: $ ls -1pa ./ ../ .gitignore .ruby-gemset .ruby-version Gemfile Gemfile.lock README.md Rakefile app/ bin/ config/ config.ru db/ lib/ log/ public/ test/ tmp/ vendor/ The \u201ca\u201d flag in the Unix ls -1pa command displays hidden files. Each hidden file is listed with a dot (period or full stop) at the beginning of the filename. You\u2019ll notice .ruby-gemset and .ruby-version . You\u2019ll also see two \u201cspecial files\u201d which are not files at all: ./ - an alias that represents the current directory ../ - an alias that represents the parent directory Box 6.2. Hidden Files in Cloud9 If you\u2019re using Cloud9, you must change preferences to see hidden files. In the window that contains the file list, there is a gear icon (dark in color and difficult to see). Clicking the gear option will give you options: Show Root File System Show Home in Favorites Show Hidden Files You must select all three options to see the hidden files. That\u2019s a brief diversion into Unix; let\u2019s try running our new Rails application. 6.5 Test the Application You\u2019ve created a simple default web application. It\u2019s ready to run. 6.5.1 Launching the Web Server You can launch the application by entering the command: $ rails server Alternatively, to save typing, you can abbreviate the rails server command: $ rails s If you are using the Cloud9 hosted service, you\u2019ll need to enter bin/rails server -p $PORT -b $IP . You\u2019ll see: \\=> Booting Puma \\=> Rails 5.1.2 application starting in development on http://localhost:3000 \\=> Run `rails server -h` for more startup options \\=> Ctrl-C to shutdown server Puma starting in single mode... * Version 3.4.0 (ruby 2.4.1-p0), codename: Owl Bowl Brawl * Min threads: 5, max threads: 5 * Environment: development * Listening on tcp://localhost:3000 Use Ctrl-C to stop The rails server command launches the Puma web server that is provided with Rails. 6.5.2 Errors for Linux Users If you enter the command rails server and get an error message: ... Could not find a JavaScript runtime ... You need to install Node.js. For help, see Install Ruby on Rails - Ubuntu . 6.5.3 Viewing in the Web Browser To see your application in action, open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see the Rails default information page. Box 6.3. Viewing on a Hosted Platform It is easy to see your web application in action on your local computer. If you are using a hosted service such as Cloud9, it is a little more complicated. If you are using Cloud9 , click the \u201cPreview\u201d link in the IDE menu (at the top of the page). There is a \u201cRun\u201d link, too, but it doesn\u2019t work if you have created your Rails application in a folder within the workspace/ folder. You can also open a browser tab or window and enter the URL for the application, as hosted by Cloud9. When you launch the Rails server, Cloud9 displays a helpful message showing the URL where you can view your application. 6.5.4 Watch Log Messages Notice that messages scroll in the console window when your browser requests the Rails default web page. Open the file log/development.log and you\u2019ll see the same messages. When a browser sends requests to the Puma web server, diagnostic messages are written to the console and to the log/development.log file. These diagnostic messages are an important tool for troubleshooting when you are developing. 6.5.5 Multiple Terminal Windows You can keep more than one terminal window open. For convenience, you may want to keep a terminal window open for running the web server and watching diagnostic messages. In the Terminal or iTerm2 applications, Command-t opens additional console sessions in new \u201ctabs.\u201d Developers typically open more than one terminal window when they work on a Rails application. They\u2019ll start the server with the rails server command in one window (or tab) and watch the log messages. In another window (or tab), they\u2019ll enter commands as they build the application. They might create folders with a Unix command, run generators, or try out code with the rails console command (you\u2019ll learn about the rails console command in the \u201cTroubleshoot\u201d chapter). To some people, the text editor and the terminal window look very similar. When you work on a file in a text editor, you make changes to one file, in one place. The terminal window is very different. Your computer can run multiple programs at once. You can open multiple terminal windows. In each terminal window, you can use the command line to launch a different program. Each program you start in a terminal window is a separate process and multiple processes can run simultaneously. You can end a process by pressing Control-c (in most cases), Control-d (in some cases), or closing the terminal window (almost always). From this perspective, a terminal window is a tool you use to launch processes and your computer is a machine that runs processes. 6.5.6 Stop the Web Server You can stop the server with Control-c to return to the command prompt. When we say Control-c, we mean hold down the Control key as you press the letter \u201cc\u201d. Most of the time you\u2019ll keep the web server running as you add or edit files in your project. Changes will automatically appear when you refresh the browser or request a new page. There is a tricky exception, however. If you make changes to the Gemfile, or changes to configuration files, the web server must be shut down and relaunched for changes to be activated. As a rule of thumb, files that produce web pages can be changed without a restart. This includes any file in the app/ folder which creates web pages, as well as the config/routes.rb file. Changes to files that create the environment for the web application, such as gems or configuration files, and are loaded at web server launch, won\u2019t be seen until the web server is restarted. 6.6 Get Organized for Efficiency Before we learn about the Rails directory structure, take a minute to organize your screen real estate. During development, you\u2019ll jump between the console in a terminal application, your text editor, and a web browser window. As a Rails developer, you\u2019ll do this constantly, so think about how you can do this efficiently. Multiple screens make it easy, but even on a laptop you can get organized for efficiency. Figure 6.1: Getting organized for efficiency. Here\u2019s some ideas. Open a window in the terminal application, place it on the left side of your screen, and stretch it to the maximum vertical height of your screen. Open multiple tabs in your terminal application. Keep one tabbed window open for entering shell commands (like cd or ls ) and another terminal window open for running the rails server command and viewing the log output. Place your text editor window next to the terminal window and stretch it to full vertical height. If you are using Atom or Sublime Text, you can open two editor panels side-by-side. Some developers find it helpful to leave the file browser panel open to navigate the project directory; others hide the file browser panel to save space. If you have enough screen space, leave your web browser open and place it next to your text editor. If your screen space is limited, you may have to overlap the web browser with the text editor, but position your web browser window so you can bring it to the front with a single click. You\u2019ll need multiple tabs open in your web browser. Unless you like constant distraction, close Gmail, Facebook, Twitter, and Hacker News. Open tabs for http://localhost:3000/ , this tutorial, and additional references or documentation. On the Mac, there are window management utilities that reposition windows with just a click or keyboard command; I use Moom but you can find others if you search for \u201cmac window management utilities.\u201d This is just a guide; I\u2019m sure you can improve upon these suggestions. Chapter 7 The Parking Structure We\u2019ve created the default Rails starter application. The rails new command has created a project directory for us. It is a parking structure for our code. Unlike an ordinary parking structure, where you park anywhere you like, this garage has assigned parking. You have to park your code in the right place. This is Rails, where convention brings order to the development process. As you develop a web application, you\u2019ll do all your work in the project directory. It is important to know your way around and understand the purpose of each folder and file. If you\u2019ve built simple websites with HTML and CSS, or built websites with unstructured platforms such as Perl or PHP, you\u2019ll be surprised at the complexity of the Rails project directory. Rails is a software machine with many moving parts; the project directory provides a structure to manage the complexity. The logic and order of the project directory structure is familiar to every Rails developer, and consistent for every Rails application, which makes it easy to collaborate, maintain an application, and create open source projects. 7.1 Video Option Watch the eleven minute video if you have subscribed: Rails Project Directory 7.2 Project Directory Use the Unix ls command to list the contents of the project directory. For a one-column list that shows each subdirectory (marked with a slash), we\u2019ll add the -1p option to the command. $ ls -1p You\u2019ll see: Gemfile Gemfile.lock README.md Rakefile app/ bin/ config/ config.ru db/ lib/ log/ public/ tmp/ vendor/ Now is a good time to open a file browser window and look at the contents of the project directory. On the Mac, there\u2019s a command you can use to open the graphical file browser from the console. If you\u2019re in the project directory, type open . . The period (or \u201cdot\u201d) is a Unix symbol that means \u201cthe directory I\u2019m in.\u201d $ open . Figure 7.1: Rails directory structure. You\u2019ll learn more about each file and folder as you proceed through the tutorial. 7.3 Get to Know the Folders and Files To get you started, here are three tables. The first describes the files and folders that are important for every beginner. The second table describes the files and folders that you can ignore. The third table is a preview of things to come. 7.3.1 Important Folders and Files These folders and files are important to beginners. This is where you will spend your time in Rails. Gemfile Lists all the gems used by the application. Gemfile.lock Lists gem versions and dependencies. README.md A page for documentation. app/ Application folders and files. config/ Configuration folders and files. db/ Database folders and files. public/ Files for web pages that do not contain Ruby code, such as error pages. 7.3.2 Not-So-Important Folders and Files These folders and files are not important to beginners. Rakefile Scripts for the Rake utility program. bin/ Folder for binary (executable) programs. config.ru Configuration file for Rack (a software library for web servers). lib/ Folder for miscellaneous Ruby code. log/ Folder for application server logfiles. tmp/ Temporary files created when your application is running. vendor/ Folder for Ruby software libraries that are not gems. 7.3.3 Folders for Testing spec/ Folder for the popular RSpec testing framework. test/ Folder for the default Rails testing framework. The test/ folder is present in the default Rails starter app. You\u2019ll use the test/ folder when you learn about test-driven development. Many Rails developers use a different gem for testing, named RSpec, and your RSpec tests will go in a spec/ folder. 7.4 The App Directory Take time to drill down into the app/ folder in the project directory. This is easiest using the file browser. Figure 7.2: Rails app folder. You can also use your text editor to view the folder. Or do it with Unix commands: $ cd app $ ls -1p assets/ channels/ controllers/ helpers/ jobs/ mailers/ models/ views/ Whether you use the file browser, Unix commands, or your text editor, you are looking at the same file system. Most of the work of developing a Rails application happens in the app/ folder. Earlier we described Rails as \u201ca set of files organized with a specific structure.\u201d We said the structure is the same for every Rails application. The app/ directory is a good example. The folders in the app/ directory are the same in every Rails application. This makes it easy to collaborate with other Rails developers, providing consistency and predictability. assets channels controllers helpers jobs mailers models views You may recall our earlier description of Rails from the perspective of a software architect. In this folder, you\u2019ll see evidence of the model\u2013view\u2013controller design pattern. Three folders named models/ , views/ , and controllers/ enforce the software architect\u2019s \u201cseparation of concerns\u201d and impart structure to our code. As you build the application, we\u2019ll explain the role of the MVC components in greater detail. Five folders play supporting roles. The mailers folder is for code that sends email messages. The helpers folder is for Rails view helpers , snippets of reusable code that generate HTML. Later, when we learn more about views , we\u2019ll say view helpers are like \u201cmacros\u201d that expand a short command into a longer string of HTML tags and content. Rails 3.1 added the assets/ folder as a location for CSS and JavaScript files. The jobs/ folder is for background jobs built with the Rails ActiveJob feature. Rails 5.0 added the channels/ folder for the ActionCable feature which uses WebSockets for real-time communication between web server and browser. 7.4.1 Folders of Future Importance You won\u2019t encounter these when you are a beginner: policies/ Folder for code that controls access to features services/ Folder for code that reduces the complexity of models and controllers If you join a project to work on a large and complex Rails application, you may see folders such as these in the app/ directory. As an application grows in complexity, an experienced software architect may suggest reducing the size of models and controllers by moving code to \u201cPOROs\u201d ( plain old Ruby objects ). Code in any folder in the app/ directory is shared throughout a Rails application without any additional configuration (in contrast, code you add to the lib/ directory is only available with some extra work). Rails provides a basic model\u2013view\u2013controller framework but it is often necessary to extend it with code in a services/ folder. Similarly, a policies/ folder can be used to consolidate code that controls access to various features or pages of a web application. Use the cd .. command (\u201cchange directory dot dot\u201d) to return to the project directory. $ cd .. $ pwd /Users/danielkehoe/workspace/learn-rails As a Rails developer, you\u2019ll spend most of your time navigating the hierarchy of folders as you create and edit files. And because Rails provides a consistent structure, you\u2019ll quickly find your way on any unfamiliar project. Chapter 8 Time Travel with Git Now that we\u2019ve looked at our Rails project directory from the viewpoint of a programmer and software architect, let\u2019s consider the viewpoint of the time traveler. This chapter will introduce you to software source control , also called version control or revision control . The terms all have the same meaning. At first sight, the concept seems rather dull, like sorting your socks. But it makes professional software development possible and, at the core, it is essentially a form of time travel. To understand time travel, we need to understand state . It\u2019s a term you\u2019ll encounter often in software development. We know about states of matter. Water can be ice, liquid, or steam. Imagine a machine with a button that, each time it is pressed, changes water from one state to another. We call this a state machine . Almost every software program is a state machine. When a program receives an input, it transitions from one state to another. Like flipping a light switch, there\u2019s no in-between. Light or dark. Ice, liquid, or steam. Or, in a web application: logged in, logged out. When we write software code, there\u2019s a lot of in-between. We look things up, we think, we type errors and we make corrections. As humans, we spend a lot of time in a flow of undetermined state. We can save our work at any time, but we may be saving typos or unfinished code that doesn\u2019t work. Every so often, we get to a point where a task is finished; we\u2019ve fixed all our errors and our code runs. We want to preserve the state of our work. That\u2019s when we need a version control system. A version control system does more than a software application\u2019s \u201cSave\u201d command. Like a \u201cSave\u201d command, it preserves the current state of our files. It also allows us to add a short note that describes the work we\u2019ve done. More importantly, it archives a snapshot of the current state in a repository where it can be retrieved if needed. Here\u2019s where the time travel comes in. We can go back and recover the state of our work at any point where we committed a snapshot to the repository. In software development, travel to the past is essential because we often make mistakes or false starts and have to return to a point where we know things were working correctly. What about time travel to the future? Often we need to try out code we may decide to discard, without disturbing work we\u2019ve done earlier. Version control systems allow us to explore alternative futures by creating a branch for our work. If we like what we\u2019ve done in our branch, we can merge it into the main trunk of our software project. Unlike time travel in the movies, we can\u2019t travel back to any arbitrary point in the flow of time. We can only travel to past or future states we\u2019ve marked as significant by checking our work into the repository. 8.1 Git The dominant version control system among Rails developers is Git , created by the developer of the Linux operating system. Unlike earlier version control systems, Git is ideal for wide-scale distributed open source software development. Combined with GitHub , the \u201csocial coding\u201d website, Git makes it easy to share and merge code. When you work with others on a project, your Git commit messages (the notes that accompany your snapshot) offer a narrative about the progress of the project. Well-written commit messages describe your work to co-workers or open source collaborators. GitHub\u2019s support for forking (making your own copy of a repository) makes it possible to take someone else\u2019s project and modify it without impacting the original. That means you can customize an open source project for your own needs. You can also fix bugs or add a feature to an open source project and submit a pull request for the project maintainer to add your work to the original. Fixing bugs (large or small) and adding features to open source projects are how you build your reputation in the Rails community. Your GitHub account, which shows all your commits, both to public projects and your own projects, is more important than your resum\u00e9 when a potential employer considers hiring you because it shows the real work you have done. Collaboration is easy when you use a branch in Git. If you and a coworker are working on the same codebase, you can each make a branch before adding to the code or making changes. Git supports several kinds of merges , so you can integrate your branch with the trunk when your task is complete. If your changes collide with your coworker\u2019s changes, Git identifies the conflict so you can resolve the collision before completing the merge. All the power of Git comes at a price. Git is difficult for a beginner to learn, largely because many of its procedures have no real-world analog. Have you noticed how time travel movies require mental gymnastics, especially when you try to make sense of alternative futures and intersecting timelines? Git is a lot like that, mostly because we use it to do things we don\u2019t ordinarily do in the real world. In this tutorial, you won\u2019t encounter Git\u2019s advanced procedures, like resolving merges or reverting to earlier versions. We\u2019ll stick to the basics of archiving our work (and in one case, discarding work that we\u2019ve done for practice). You can build the tutorial project without using Git. But I urge you to use Git and a GitHub account for this project, for two reasons. First, with your tutorial application on GitHub, you\u2019ll show potential employers or collaborators that you\u2019ve successfully built a useful, functioning Rails application. More importantly, you must get to know Git if you plan to do any serious coding, either as a professional or a hobbyist. Before I show you Git commands, I want to mention that some people use graphical client applications to manage Git. MacOS has GitHub for Mac , Git Tower , and other Mac Git clients . Graphical applications for Git are useful for colleagues who don\u2019t use a Terminal application, such as graphic designers or writers. There\u2019s no need for you to install these applications. Every developer I\u2019ve met uses Git from the command line. It will take effort to master Git; the commands are not intuitive. But it is absolutely necessary to become familiar with Git basics. Before you do any work on the tutorial application, I\u2019ll show you the basics of setting up and using Git. 8.2 Is Git Installed? As a first step, make sure Git is installed on your computer: $ which git /usr/local/bin/git $ git version git version ... If Git is not found, install Git. See the article Rails with Git and GitHub for installation instructions. 8.3 Is Git Configured? Make sure Git knows who you are. Every time you update your Git repository with the git commit command, Git will identify you as the author of the changes. $ git config --get user.name $ git config --get user.email You should see your name and email address. If not, configure Git: $ git config --global user.name \"Real Name\" $ git config --global user.email \" [email protected] \" Use your real name so people will associate you with your work when they meet you in real life. There\u2019s no reason to use a clever name unless you have something to hide. And use your full name, not just your first name. Use the same email address for Git, your GitHub account, and Heroku to avoid headaches. 8.4 Create a Repository Now we\u2019ll add a Git repository to our project. It\u2019s a basic step you\u2019ll repeat every time you create a new Rails project. Extending the time traveler analogy, initializing a Git repository is equivalent to setting up the time machine. Be sure you are in your project directory, not your user home directory or somewhere else. Use the pwd command to check: $ pwd /Users/danielkehoe/workspace/learn-rails The git init command sets up a Git repository (a \u201crepo\u201d) in the project directory. We add the Unix symbol that indicates Git should be initialized in the current directory (git init dot): $ git init . Initialized empty Git repository in ... It creates a hidden folder named .git/ in the project directory. You can peek at the contents: $ ls -1p .git HEAD config description hooks/ info/ objects/ refs/ All Git commands operate on the hidden files. The hidden files record the changing state of your project files each time you run the git commit command. There is no reason to ever edit files inside the hidden .git/ folder (doing so could break your time machine). 8.5 GitIgnore The hidden .git/ folder contains the Git repository with all the snapshots of your changing project. The snapshots are highly compressed, only containing records of changes, so the repository takes up very little file space relative to the project as a whole. Not every file should be included in a Git snapshot. Here are some types of files that should be ignored: log files created by the web server database files configuration files that include passwords or API keys Git gives us an easy way to ignore files. A hidden file in the project directory named .gitignore can specify a list of files that are never seen by Git. The rails new command creates a .gitignore file with defaults that include log files and database files. Later, when we add configuration files that include secrets, we\u2019ll update the .gitignore file. Take a look at the contents of the .gitignore file. We use the Unix cat command to display the contents of the file: $ cat .gitignore See https://help.github.com/articles/ignoring-files for more about ignoring files. If you find yourself ignoring temporary files generated by your text editor or operating system, you probably want to add a global ignore instead: git config --global core.excludesfile '~/.gitignore_global' Ignore bundler config. /.bundle Ignore the default SQLite database. /db/*.sqlite3 /db/*.sqlite3-journal Ignore all logfiles and tempfiles. /log/* /tmp/* !/log/.keep !/tmp/.keep Ignore Byebug command history file. .byebug_history For a .gitignore file that ignores more, see an example .gitignore file from the RailsApps project. 8.6 Git Workflow Your workflow with Git will move through four distinct phases as you add or edit files. 8.6.1 Untracked Files The first phase is a \u201cdirty\u201d state of untracked and changed files, before any snapshot. The git status command lists all folders or files that are not checked into the repository. $ git status On branch master Initial commit Untracked files: (use \"git add ...\" to include in what will be committed) .gitignore Gemfile Gemfile.lock README.md Rakefile app/ bin/ config.ru config/ db/ lib/ log/ public/ test/ tmp/ vendor/ nothing added to commit but untracked files present (use \"git add\" to track) In the online version of this book (the HTML version), the example above appears in green. In the terminal window on your computer, it will be red, showing you untracked files. Here the git status command tells us that we have many untracked files. We have created new files and they are saved on the computer\u2019s hard disk but nothing has been recorded in the Git repository. 8.6.2 Staging I call this step, \u201cPose for your snapshot.\u201d Recording files in the Git repository takes two steps: staging and committing. There will be times when you change many files at once. For example, you may fix a bug, add a new graphic, and change a form. You might think you\u2019d like to have Git automatically record all the changes as you save each file. But the story of your project would be confusing and overly detailed. Git requires you to mark one or more files (\u201cstaging\u201d) before recording the changes (\u201ccommitting\u201d). This gives you fine-grained control over the recorded history of your project. You can mark individual files to be staged: $ git add Gemfile Adding individual files allows you to selectively record the history of your project. For example, you might stage and commit a series of bug fixes before you stage and commit new features. Applying the time traveler analogy, it will be easier to travel back to look at bug fixes if they are not mixed in with new features. More often, you\u2019ll mark all the files to be staged. Do so now: $ git add -A Running git status will show you a long list of files that are staged and ready to commit. There are three forms of the git add command: git add foo.txt adds a file named foo.txt git add . adds all new files and changed files, except deleted files git add -A adds everything, including deletions If it seems nonsensical that the command git add -A \u201cadds deletions,\u201d don\u2019t worry. Like time travel, Git will stretch your understanding of what makes sense. Most often, you can simply use the git add -A form of the command. Now that you\u2019ve marked the files that will be committed to the repository, you\u2019ve told everyone to pose, and you\u2019re ready to take the snapshot. 8.6.3 Committing The previous step, the \u201cposing\u201d step, or staging, gives you an opportunity to select particular files before you commit. If you\u2019ve only worked on one feature, you\u2019ll likely stage and commit all your files. The next step is a \u201ccommit\u201d which I like to call, \u201cclicking the snapshot.\u201d When you \u201cmake a commit\u201d, you include a message that describes the work you\u2019ve done. For a time traveler, the \u201ccommit message\u201d is important; you are leaving a trail to help you find your way into the past. Google will show you dozens of blog posts about \u201cwriting better commit messages\u201d but common sense can be your guide. For example, writing \u201cfix registration form to catch blank email addresses\u201d will be more helpful than merely writing \u201cfix bugs.\u201d And if you wonder why commit messages are commonly written in the imperative not past tense (\u201cfix\u201d not \u201cfixed\u201d), it\u2019s a time traveler convention. Now commit your project to the repository: $ git commit -m \"Initial commit\" The -m flag lets you add a message for the commit. The pristine state of your new Rails application is now recorded in the repository on your local computer. Running git status will tell you \u201cnothing to commit, working directory clean.\u201d $ git status On branch master nothing to commit, working directory clean You\u2019ve recorded your snapshot locally. Next let\u2019s see a list of previous snapshots. Then we\u2019ll learn how to save your snapshots remotely to GitHub. 8.6.4 Git Log You can use the git log command to see your project history: $ git log commit 8da41eec9e864ed91b4a445d8cefdf7893e2faf6 Author: Daniel Kehoe < [email protected] > Date: Fri Dec 18 10:30:12 2015 +0700 Initial commit The long string of characters that follows \u201ccommit\u201d is an ID, or marker, that will help you travel back in time if you need to do so. If you get \u201cstuck\u201d in git log , type q to return to the command prompt. I like to use the git log command with an option for a compact listing: $ git log --oneline 8da41ee Initial commit Don\u2019t worry if your console doesn\u2019t show 8da41ee . The ID for your commit will be different. The listing is easier to review when it is displayed in a compact format. The commit ID is abbreviated but it is all you need to travel back in time. 8.6.5 Repositories When we talk about repositories, or \u201crepos,\u201d we mean the archive of our git commits. The local repo is located in the hidden folder named .git/ in the project directory. Of course, if your hard drive crashes, or your computer is lost or stolen, you\u2019ll lose your local repo along with your project. So it is wise to save your repository in the cloud. The GitHub site is a place to save repositories. GitHub is also a place for collaboration. Most Rails developers save their repositories to Github, as either a public repo for open source projects, or a private repo for proprietary projects. 8.6.6 Pushing to GitHub We\u2019ve seen three phases of the Git workflow: untracked , staged , and committed . A fourth stage is important when you work with others: pushing to GitHub. The repositories hosted on your GitHub account establish your reputation as a Rails developer for employers and developers you may work with. Even if your first project is copied from a tutorial, it shows you are serious about learning Rails and studying conscientiously. Did you create a GitHub account? Now would be a good time to add your repo to GitHub. Go to GitHub and create a new empty repository for your project. Name the repository \u201clearn-rails\u201d and give it a description. If the repository is public, hosting on GitHub is free. Don\u2019t be reluctant to go public with an unfinished or half-baked project; everyone expects projects on GitHub to be works in progress. Add GitHub as a remote repository for your project and push your local project to GitHub. Before you copy and paste the command, notice that you need to insert your own GitHub account name. In other words, change YOUR_GITHUB_ACCOUNT in the command shown below. Box 8.1. Warning STOP! Be sure to change YOUR_GITHUB_ACCOUNT to your GitHub user name. If you don\u2019t, you will create a mess that you have to fix with the instructions here . $ git remote add origin https://github.com/YOUR_GITHUB_ACCOUNT/learn-rails.git $ git push -u origin master The -u option sets up Git so you can use git push in the future without explicitly specifying GitHub as the destination. Now you can view your project repository on GitHub at: https://github.com/YOUR_GITHUB_ACCOUNT/learn-rails Obviously you must change YOUR_GITHUB_ACCOUNT in the web address to see your own repository. Take a look. It\u2019s an exact copy of the project on your local computer. If you haven\u2019t used GitHub before, take some time to explore. GitHub is absolutely essential to all open source Rails development. You may notice that the README.md file is automatically incorporated into the home page of the project repository on GitHub. For our next step, we\u2019ll update the README file, commit it to the local repo, and push it up to GitHub. It will be good practice for using Git. 8.7 The README Changing the README file is a good way to practice with Git. It\u2019s also a good habit to edit the README file whenever you create a new project. It\u2019s easy to neglect the README for little projects that you\u2019ve just started. But replacing a default README file shows you are a disciplined, conscientious developer who will be a good collaborator. The new README file can be brief. Just state your intentions and acknowledge any code you\u2019ve borrowed. For this project you could say, \u201cExcited to learn Rails with help from Daniel Kehoe\u2019s book!\u201d In your text editor, open the file README.md and replace the contents: # Learning Rails Learning Rails with a tutorial from [learn-rails.com](http://learn-rails.com/). GitHub lets you add formatting using your choice of markup syntax, depending on the file extension you add to the filename: README.md uses the GitHub Flavored Markdown syntax README.textile uses the Textile syntax README.rdoc uses the rdoc syntax We\u2019ll use Markdown syntax by adding the # character before the first line of text to force a headline. And we\u2019ll add a link that leads to the learn-rails.com website. There\u2019s no requirement that you use Markdown syntax in your README file. Markdown simply is a popular way to add formatting to improve readability. Use git status to see what has changed: $ git status On branch master Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: README.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Here\u2019s our typical workflow. We\u2019ll stage and commit the change: $ git add -A $ git commit -m \"update README\" Then we\u2019ll push the change to GitHub: $ git push origin master If you decide not to use GitHub for this tutorial, you can skip this step (and skip it throughout the tutorial). Take a look at your GitHub repository (refresh the web page). Very cool! The README file has been updated. The git log command will display your project history: $ git log --oneline 69b9b6c update README 8da41ee Initial commit To learn more about Git, I recommend the book Learn Enough Git to Be Dangerous by my colleague Michael Hartl. An online version is available for free. Now that you\u2019re comfortable with Git, we can begin customizing our new Rails application. Chapter 9 Gems The art of selecting gems is at the heart of Rails development. I explained earlier that gems are packages of code, \u201csoftware libraries,\u201d that have been developed and tested by other developers. Some gems add functionality or features to a website. Other gems play a supporting role, making development easier or implementing basic infrastructure. Gems are open source. They are available at no charge and can be freely copied and modified. 9.1 Videos If you have subscribed, two short videos introduce gems: What Are Rubygems Find Rubygems 9.2 RubyGems It is a mark of honor to release a gem for public use, and a developer\u2019s reputation can be established when a gem becomes popular and widely used. Gems are often created when a developer has used the same code as a component in more than one web application. He or she will take time to release the code as a gem. That\u2019s how the Rails ecosystem was built, gem by gem since 2004. There is no evaluation or review process in publishing gems. Gems are hosted on a public server, rubygems.org . Gems are mostly text files (like any other Ruby code), organized in a particular format with some descriptive information (in a gemspec file), and compressed and archived as a single file. A single command, gem push , uploads a gem to the rubygems.org server for anyone to use. Over 50,000 gems have been released since rubygems.org was established. Some of these gems are used by one or two developers on their own projects. Many others have been neglected and abandoned due to lack of interest. Only a few thousand gems are popular and widely used. As a Rails developer, you must master the art of finding and evaluating gems so you can base your applications on the tried-and-true work of others. There is no single authoritative source of recommendations for gems. The Ruby Toolbox website categorizes and ranks many gems by popularity, and it is a good place to begin hunting for useful gems. Other than that, it is useful to study example applications and search for blog posts to find which gems are most often recommended. When you find an interesting gem, search Stack Overflow or Google to see what people are saying. Look at the gem\u2019s GitHub repository and check: How many issues are open? How many are closed? How recent are the commits of patches or updates? Is there a CHANGELOG file? Is the gem well-documented? How many \u201cstars\u201d (people favoriting) or \u201cforks\u201d (people hacking)? Popular gems are likely to have many reported issues, some of which are trivial problems or feature requests. Gems that are actively maintained will have many closed issues and, ideally, only a few open issues. When you find a gem that has many open issues and no recently closed issues, you\u2019ve probably found a gem that has been abandoned. Also look at the commit log, which you\u2019ll find on the GitHub project page in a tab at the top of the page. Regular and recent activity in the commit log indicates the gem is actively maintained. 9.3 Rails Gems Rails itself is a gem that, in turn, requires a collection of other gems. This becomes clear if you look at the summary page for Rails on the rubygems.org site. On that page, you\u2019ll see photos of the Rails core team. More importantly, you\u2019ll see a list of gems that are required to use Rails: actioncable - real-time communication using WebSockets actionmailer - framework for email delivery and testing actionpack - framework for routing and responding to web requests actionview - view templates and rendering activejob - queueing slow tasks to run in the background activemodel - architecture for model objects activerecord - framework for connections to databases activesupport - utility classes and Ruby library extensions bundler - utility to manage gems railties - console commands and generators sprockets-rails - support for the Rails asset pipeline These are the \u201cruntime dependencies\u201d for Rails. Each of these gems has its own dependencies as well. When you install Rails, a total of 63 gems are automatically installed in your development environment. 9.4 Gems for a Rails Default Application In addition to the Rails gem and its dependencies, a handful of other gems are included in every rails new default starter application: sqlite3 - adapter for the SQLite database puma - web application server sass-rails - enables use of the SCSS syntax for stylesheets uglifier - JavaScript compressor coffee-rails - enables use of the CoffeeScript syntax for JavaScript turbolinks - faster loading of webpages jbuilder - utility for encoding JSON data You may not need a SQLite database, SCSS for stylesheets, or the others, but many developers use these tools so they are included in the default starter application. 9.5 Where Do Gems Live? Gems are files saved in the computer\u2019s disk storage, containing someone else\u2019s code that you can use in your own application. When you run a Rails application, gems are loaded into the computer\u2019s working memory immediately before your own custom code is loaded. Gems are handled by the Ruby interpreter no differently than your own code. It\u2019s all Ruby code, whether you or someone else wrote it. When you are building an application in Rails, you don\u2019t need to think about where gems are stored in your file system. It\u2019s all handled automatically. Experienced programmers who have used software libraries in other languages might wonder how it works. Here\u2019s the technical explanation from the experts. Ruby has a require method that allows you to import software libraries into your programs. RubyGems extends the require method, adding gem directories to a $LOAD_PATH . When Rails loads, it will automatically require each of the gems listed in your Gemfile, finding the gems in the $LOAD_PATH directories. If you\u2019re a curious person, you might like to see where the gems live. You can run the gem env command to reveal the RubyGems environment details which are normally hidden from you: $ gem env RubyGems Environment: - RUBYGEMS VERSION: 2.6.4 - RUBY VERSION: 2.4.1 (2016-04-26 patchlevel 112) [x86_64-darwin14] - INSTALLATION DIRECTORY: /Users/danielkehoe/.rvm/gems/ [email protected] - USER INSTALLATION DIRECTORY: /Users/danielkehoe/.gem/ruby/2.3.0 - RUBY EXECUTABLE: /Users/danielkehoe/.rvm/rubies/ruby-2.4.1/bin/ruby - EXECUTABLE DIRECTORY: /Users/danielkehoe/.rvm/gems/ [email protected] /bin - SPEC CACHE DIRECTORY: /Users/danielkehoe/.gem/specs - SYSTEM CONFIGURATION DIRECTORY: /Users/danielkehoe/.rvm/rubies/ruby-2.4.1/etc - RUBYGEMS PLATFORMS: - ruby - x86_64-darwin-14 - GEM PATHS: - /Users/danielkehoe/.rvm/gems/ [email protected] - /Users/danielkehoe/.rvm/gems/ [email protected] . . . If you use RVM, gems are saved to a hidden .rvm folder in your user directory. A global subfolder contains the Bundler gem. If you\u2019ve followed the instructions in the \u201cGet Started\u201d chapter to install Rails, the project-specific learn-rails subfolder contains the Rails gem. If you use Chruby or Rbenv instead of RVM, your gems will be stored in a different location. Run the gem which command and you\u2019ll see where the gems live: $ gem which bundler /Users/danielkehoe/.rvm/gems/ [email protected] /gems/bundler-1.12.5/lib/bundler.rb $ gem which rails /Users/danielkehoe/.rvm/gems/ [email protected] /gems/railties-5.1.2/lib/rails.rb These are details you\u2019ll never need to know, because Ruby on Rails handles it for you. You\u2019ll never move or delete gems directly. Instead you\u2019ll manage gems using the Bundler utility. The key to Bundler is the Gemfile. 9.6 Gemfile Every Rails application has a Gemfile. Earlier, I described Rails from the viewpoint of the \u201cgem hunter,\u201d the developer who wants to assemble an application from the best open source components he or she can find. To the gem hunter, the Gemfile is the most important file in the application. It lists each gem that the developer wants to use. The Gemfile provides the information needed by the Bundler utility to manage gems. Bundler\u2019s bundle install command reads the Gemfile, then downloads and saves each listed gem to the hidden gem folder. Bundler checks to see if the gem is already installed and only downloads gems that are needed. Bundler checks for the newest gem version and records the version number in the Gemfile.lock file. Bundler also downloads any gem dependencies and records the dependencies in the Gemfile.lock file. Between the Gemfile, with its list of gems that will be used by the application, and the Gemfile.lock file, with its list of dependencies and version numbers, you have a complete specification of every gem required to run the application. More importantly, when other developers install your application, Bundler will automatically install all the gems (including dependencies and correct versions) needed to run the application. When you deploy the application to production for others to use, automated deployment scripts (such as those used by Heroku) install all the required gems. Bundler provides a bundle update command when we want to replace any gems with newer versions. If you run bundle update , any new gem versions will be downloaded and installed and the Gemfile.lock file will be updated. Be aware that updating gems can break your application, so only update gems when you have time to test and resolve any issues. You can run bundle outdated to see which gems are available in newer versions. If you want to prevent your fellow developers (or yourself) from accidentally updating gems, you can specify a gem version number for any gem in the Gemfile. The Gemfile gives fine-grained control over rules for updating: gem \u2019rails\u2019, \u20195.0.0\u2019 is \u201cabsolute\u201d only version 5.0.0 will be used gem \u2019rails\u2019, \u2019>= 5.0.0\u2019 is \u201coptimistic\u201d any version newer than 5.0.0 will be used gem \u2019rails\u2019, \u2019~> 5.0.0\u2019 is \u201cpessimistic\u201d \u201cPessimistic\u201d versioning needs some explanation. ~> 5.0.0 means use any version greater than 5.0.0 and less than 5.1 (any patch version can be used). ~> 5.0 means use any version greater than 5.0 and less than 6.0 (any minor version can be used). In general, during development we only lock down any gem versions in the Gemfile if we know newer versions introduce problems. Let\u2019s take a look at the Gemfile created by the rails new command. 9.7 Gemfile for a Rails Default Application Open the Gemfile with your text editor: source 'https://rubygems.org' git_source(:github) do |repo_name| repo_name \\= \"#{repo_name}/#{repo_name}\" unless repo_name.include?(\"/\") \"https://github.com/#{repo_name}.git\" end # Bundle edge Rails instead: gem 'rails', github: 'rails/rails' gem 'rails', '~> 5.1.2' # Use sqlite3 as the database for Active Record gem 'sqlite3' # Use Puma as the app server gem 'puma', '~> 3.7' # Use SCSS for stylesheets gem 'sass-rails', '~> 5.0' # Use Uglifier as compressor for JavaScript assets gem 'uglifier', '>= 1.3.0' # See https://github.com/rails/execjs#readme for more supported runtimes # gem 'therubyracer', platforms: :ruby # Use CoffeeScript for .coffee assets and views gem 'coffee-rails', '~> 4.2' # Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks gem 'turbolinks', '~> 5' # Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder gem 'jbuilder', '~> 2.5' # Use Redis adapter to run Action Cable in production # gem 'redis', '~> 3.0' # Use ActiveModel has_secure_password # gem 'bcrypt', '~> 3.1.7' # Use Capistrano for deployment # gem 'capistrano-rails', group: :development group :development, :test do # Call 'byebug' anywhere in the code to stop execution and get a debugger console gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] # Adds support for Capybara system testing and selenium driver gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do # Access an IRB console on exception pages or by using <%= console %> anywhere in the code. gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # Windows does not include zoneinfo files, so bundle the tzinfo-data gem gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby] The file you see will be very similar. Some version numbers may be different if a newer Rails version was released since this was written. The first line, source \u2019https://rubygems.org\u2019 , directs Bundler to use the rubygems.org server as a source for any gems. Notice that the second uncommented line directs Bundler to use Rails and specifies a range of acceptable versions. In this case, the Gemfile indicates we can use any version between 5.1.2 and 5.2. In the Gemfile you\u2019ll see the gems for a Rails default application, such as the sqlite3 database gem, which we described earlier. Other gems are commented out (the lines begin with the # character). These are suggestions and we can ignore them or remove them. We won\u2019t use a database for our application but we\u2019ll keep the gem \u2019sqlite3\u2019 entry. Configuring Rails for no database is complicated; it is easier to keep the sqlite3 gem and not use it. If you are developing your application on a computer using the Linux operating system, you may need to uncomment and use the statement gem \u2019therubyracer\u2019, platforms: :ruby . Linux doesn\u2019t have a built-in JavaScript interpreter so you must install Node.js in your environment or else add the therubyracer gem to each project Gemfile. For help, see Install Ruby on Rails - Ubuntu . It\u2019s wise to specify the Ruby version we\u2019re using. This is needed for automated deployment scripts such as those used by Heroku. We can add that to the Gemfile: ruby '2.4.1' If you add the Ruby version and remove the extra clutter in the Gemfile it will look like this: source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end Try it now. Replace the Gemfile with the simplified code above. 9.8 Adding Gems I\u2019ve identified several gems that will be useful for our tutorial application. I learned about these gems from several places: Ruby Toolbox RubyFlow various blog posts example code and starter apps on GitHub recommendations from colleagues We\u2019re adding these gems at the beginning of our development process since we already know which gems we\u2019ll need. On a real project, you\u2019ll often discover useful gems and add them to the Gemfile during the ongoing process of development. Here are gems we\u2019ll add to the Gemfile: bootstrap-sass - front-end framework gibbon - access to the MailChimp API high_voltage - for static pages like \u201cabout\u201d jquery-rails - adds the jQuery JavaScript library Box 9.1. jQuery and Rails 5.1 Versions of Rails prior to Rails 5.1 included the jquery-rails gem by default. The gem was dropped from Rails 5.1. We\u2019ll add the jquery-rails gem because it is required by the Bootstrap front-end framework. We\u2019ll also add utilities that make development easier: better_errors - helps when things go wrong rails_layout - generates files for an application layout Open your Gemfile and replace the contents with the following: source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' end Notice that we\u2019ve placed two gems inside a \u201cgroup.\u201d Specifying a group for development or testing ensures a gem is not loaded in production, reducing the application\u2019s memory footprint. Rails let you specify groups for development , test , or production . 9.9 About the Rails Version The version of Rails specified in your Gemfile should match the version that is installed in your gemset. If you\u2019ve got Rails 5.1, there\u2019s no need to make additional changes to the Gemfile. Any version beginning with 5.1, such as 5.1.1, will be fine. If you have Rails 5.2 (which was not available when this was written), you must get a new version of this book. The newest available version of the book is listed on the README page of the learn-rails GitHub repository. If a newer version of the book is not available, you can install Rails 5.0. See the articles Install Rails and Updating Rails for details about installing and switching between Rails versions. 9.10 Install the Gems Each time you edit the Gemfile, you will run bundle install and restart your web server. You\u2019ve edited the Gemfile. Install the required gems on your computer: $ bundle install The bundle install command will download the gems from the rubygems.org server and save them to a hidden directory that is managed by the RVM gemset you\u2019ve specified. We\u2019ll see all the gems and their dependencies: Fetching gem metadata from https://rubygems.org/ Fetching version metadata from https://rubygems.org/ Fetching dependency metadata from https://rubygems.org/ Resolving dependencies... Using rake 11.3.0 Using concurrent-ruby 1.0.2 Using i18n 0.7.0 Using minitest 5.9.1 . . . (many more gems not shown... you get the idea) . . . Bundle complete! 20 Gemfile dependencies, 73 gems now installed. Use `bundle show [gemname]` to see where a bundled gem is installed. You can use your text editor to view the contents of Gemfile.lock and you will see a detailed listing of every gem and each dependency, with version numbers. There\u2019s no reason to edit a Gemfile.lock file; if it is ever in error, delete it and run bundle install to recreate it. Run gem list to see all the gems that are loaded into the development environment: $ gem list The list of gems loaded in the environment is the same as the list specified in the Gemfile.lock file. Here\u2019s how it works. RVM makes a place for the gems to be stored (the RVM gemset); the Gemfile lists the gems you want to use; bundle install reads the Gemfile and installs the gems into the RVM gemset; the Gemfile.lock file records dependencies and version numbers; and gem list shows you the gems that are in the gemset and available for use. 9.10.1 Troubleshooting If your development environment is set up correctly, there should be no difficulty installing gems with the bundle install command. If your development environment is not set up correctly, you may see error messages when Bundler attempts to install the Nokogiri gem. Nokogiri is often needed by other gems (it is a dependency of some gems) and Nokogiri can become a problem to install. Unlike most gems that are written in pure Ruby, parts of Nokogiri are written in the C language and must be compiled using system tools that vary with different operating systems. If you get an error while installing gems, and the message says, \u201cAn error occurred while installing nokogiri,\u201d ask for help on Stack Overflow . 9.11 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add gems\" $ git push origin master After your first use of git push origin master , you can use the shortcut git push . If you get a message: fatal: Not a git repository (or any of the parent directories): .git It indicates you are in a folder that has not been initialized with Git. You are probably not in your project directory. Use the Unix command pwd to see where you are. If you get a message: fatal: 'origin' does not appear to be a git repository fatal: The remote end hung up unexpectedly It shows that you can\u2019t connect to GitHub to push the changes. To investigate, enter: $ git remote show origin It is not absolutely necessary to use GitHub for this tutorial. We\u2019re only using it so you\u2019ll be familiar with the workflow of professional development. We\u2019re ready to configure the application. Chapter 10 Configure Rails is known for its \u201cconvention over configuration\u201d guiding principle. As applied, the principle reduces the need for many configuration files. It\u2019s not possible to eliminate all configuration files, however. Many applications require configuration of settings such as email account credentials or API keys for external services. In our tutorial application, we\u2019ll need to store an API key to access MailChimp, which we\u2019ll use to add visitors\u2019 email addresses to a mailing list. We\u2019ll also need to store credentials so we can send email using the SendGrid transactional email service. Rails provides the config/secrets.yml file for our configuration settings. Any variable that is set in the config/secrets.yml file can be used elsewhere in our Rails application, providing a single location for all our configuration variables. 10.1 Configuration Security GitHub is a good place to store and share code. But when your repos are public, they are not a good place for secret account credentials. In fact, any shared Git repository, even a private repo, is a bad place to store email account credentials or private API keys. Operating systems (Linux, macOS, Windows) provide mechanisms to set local environment variables , as does Heroku and other deployment platforms. With a bit of Unix savvy, you can set environment variables using the Unix shell. Environment variables can be accessed from Rails applications and provide an ideal place to set configuration settings that must remain private. For the best security, set credentials as Unix environment variables and only use Unix environment variables in the config/secrets.yml file. The article Rails Environment Variables shows alternatives to using Unix environment variables, if for any reason you cannot set environment variables on your machine. 10.2 Videos If you have subscribed, now\u2019s a good time to watch: UNIX Environment Variables Rails Environment Variables 10.3 About Environment Variables Unix environment variables are typically set in a file that is read when starting an interactive shell. The shell is the program that gives us the command line interface we see in the Terminal or console application. Unix gives you a choice of shell programs (with names like sh , bash , ksh , and zsh ); each has a slightly different way to set environment variables. The most common shell program is bash. Let\u2019s find out what shell you are using: $ echo $SHELL /bin/bash If you see /bin/bash , that\u2019s great! If not, you may have to do some research to find out how to set environment variables in your shell. You might be surprised to see a dollar sign in the command. You don\u2019t type the first dollar sign (it is just the convention that indicates you are entering a Unix command). You\u2019ll type echo $SHELL to ask the operating system to show the variable SHELL . The dollar sign in the command tells Unix to return a variable named SHELL . Try typing echo SHELL without the dollar sign and you\u2019ll see echo just displays what you type. When you open a console window, the bash shell reads a configuration file in your user home directory. You can use a Unix command to list all the files in your user home directory (the ~ \u201ctilde\u201d character represents your home directory): $ ls -1pa ~ . . . .bash_profile . . . On the Mac, you\u2019ll see .bash_profile . On Linux systems, you\u2019ll see .bashrc . 10.4 Viewing Hidden Files The files .bash_profile or .bashrc are hidden in the file browser. You can force the Mac to display hidden files by entering the following command in the Terminal application: defaults write com.apple.finder AppleShowAllFiles TRUE; killall Finder Hidden files will appear in gray in the Finder window. Use your text editor (Atom or Sublime) to open the .bash_profile or .bash_rc file. To open the .bash_profile file with Atom: $ atom ~/.bash_profile In Unix, the squiggle (tilde) character is a shortcut to your user home folder. Open either file and you\u2019ll likely find a command such as: export PATH=~/.bin:$PATH That is a command that sets the PATH environment variable. The command might not be exactly the same but it is likely you will see some export commands. You can add the environment variables anywhere in the file. For convenience, add the environment variables near the end of the file, above any existing EXPORT statement. You should use quotes to surround configuration values (credentials) in the .bash_profile or .bashrc files. If you don\u2019t have a .bash_profile or .bashrc file in your user home directory, you can create one. 10.5 Set Environment Variables You\u2019ll set the following environment variables in your .bashrc or .bash_profile file: SENDGRID_USERNAME SENDGRID_PASSWORD MAILCHIMP_API_KEY MAILCHIMP_LIST_ID OWNER_EMAIL Here are details. 10.5.1 SendGrid You\u2019ll need your SendGrid username and password. The credentials are the same you use to sign in to the SendGrid website. Add your SendGrid username and password to your .bash_profile or .bashrc file: export SENDGRID_USERNAME=\"example\" export SENDGRID_PASSWORD=\"secret\" Obviously, change \u201cexample\u201d and \u201csecret\u201d to your own credentials. 10.5.2 MailChimp When visitors sign up to receive a newsletter, we\u2019ll add them to a MailChimp list. Add an environment variable for the MailChimp API key: MAILCHIMP_API_KEY . Sign in to MailChimp to get your API key. Click your name at the top of the navigation menu, then click \u201cAccount.\u201d Click \u201cExtras,\u201d then \u201cAPI keys.\u201d You have to generate an API key; MailChimp doesn\u2019t create one automatically. The MailChimp API key is a long string of characters like a secret code that works like a password. Enter it in your .bash_profile or .bashrc file: export MAILCHIMP_API_KEY=\"Your_MailChimp_API_Key\" You\u2019ll need to create a MailChimp mailing list in preparation for our \u201cMailing List\u201d chapter. Have you already created a MailChimp mailing list? If not, the MailChimp \u201cLists\u201d page has a button for \u201cCreate List.\u201d The list name and other details are up to you. We\u2019ll need the MAILCHIMP_LIST_ID for the mailing list you\u2019ve created. To find the list ID, on the MailChimp \u201cLists\u201d page, click the \u201cdown arrow\u201d for a menu and click \u201cSettings.\u201d At the bottom of the \u201cList Settings\u201d page, you\u2019ll find the unique ID for the mailing list. export MAILCHIMP_LIST_ID=\"Your_List_ID\" Your environment variables are set up to use MailChimp. 10.5.3 Owner Email You\u2019ll send email messages to this address when a visitor submits a contact request form. Set OWNER_EMAIL with an email address where you receive mail. export OWNER_EMAIL=\" [email protected] \" Enter an email address and your environment variables will be set up with the site owner email address. 10.5.4 Restart the Terminal Session Close and reopen your terminal to make sure the environment is updated with any recent changes. 10.5.5 Troubleshooting Check that the SendGrid user name is set in your Unix environment variables: $ echo \"$SENDGRID_USERNAME\" You should see your SendGrid user name in the console response. Make sure you\u2019ve used underscores consistently and you\u2019ve used SENDGRID_USERNAME not SENDGRID_USER_NAME . If you have trouble, remember to close and reopen your terminal to make sure the environment includes any recent changes. On Linux, if you\u2019ve entered the environment variables in your .bashrc file but they don\u2019t seem to work, try setting them in your .bash_profile file instead. If you\u2019ve set up Unix environment variables but echo \"$SENDGRID_USERNAME\" doesn\u2019t return the correct variable in the console, you may have a problem with the way you\u2019ve set Unix environment variables. Most computers use the bash shell and you can set environment variables in your .bash_profile or .bashrc files. But not every system is alike. If it seems Unix environment variables are not working, you may have to find a colleague who can help you troubleshoot. If you are having problems, you can continue with the tutorial and add the credentials directly to the config/secrets.yml file. 10.6 The Secrets File Use your text editor to add the Unix environment variables to the file config/secrets.yml : # Be sure to restart your server when you modify this file. # Your secret key is used for verifying the integrity of signed cookies. # If you change this key, all old signed cookies will become invalid! # Make sure the secret is at least 30 characters and all random, # no regular words or you'll be exposed to dictionary attacks. # You can use `rails secret` to generate a secure secret key. # Make sure the secrets in this file are kept private # if you're sharing your code publicly. # Shared secrets are available across all environments. # shared: # api_key: a1B2c3D4e5F6 # Environmental secrets are only available for that specific environment. development: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> domain_name: example.com mailchimp_api_key: <%= ENV[\"MAILCHIMP_API_KEY\"] %> mailchimp_list_id: <%= ENV[\"MAILCHIMP_LIST_ID\"] %> owner_email: <%= ENV[\"OWNER_EMAIL\"] %> secret_key_base: very_long_random_string test: secret_key_base: very_long_random_string # Do not keep production secrets in the unencrypted secrets file. # Instead, either read values from the environment. # Or, use `bin/rails secrets:setup` to configure encrypted secrets # and move the `production:` environment over there. production: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> domain_name: example.com mailchimp_api_key: <%= ENV[\"MAILCHIMP_API_KEY\"] %> mailchimp_list_id: <%= ENV[\"MAILCHIMP_LIST_ID\"] %> owner_email: <%= ENV[\"OWNER_EMAIL\"] %> secret_key_base: <%= ENV[\"SECRET_KEY_BASE\"] %> Be sure to use spaces, not tabs. Make sure there is a space after each colon and before the value for each entry or you will get a message \u201cInternal Server Error: mapping values are not allowed\u201d when you start the web server. You used quotes to surround configuration values in the .bashrc or .bash_profile files. Here, in the config/secrets.yml file, you don\u2019t need quotes when you are importing Unix environment variables. 10.6.1 Domain Name We\u2019ll need a domain name when we configure email for delivery in production. For development, use example.com . If you have your own domain name, you can use that instead. There\u2019s no need to keep the domain_name configuration variable secret, so we don\u2019t need to set it in a Unix environment variable. You can decide for yourself if the owner_email variable really needs to be secret. Just for caution, I\u2019m suggesting you set it as a Unix environment variable. 10.6.2 Securing the Secrets File Some developers take steps to prevent the config/secrets.yml file from being checked into Git. To prevent the file from being saved to your repo you could add the filename to the .gitignore file in your application root directory. However, you don\u2019t need to keep the config/secrets.yml file from being checked into Git if you\u2019ve used Unix environment variables in the config/secrets.yml file. If you only reveal the SECRET_KEY_BASE used for development or testing, and no one can access your development machine, no useful secrets will be revealed in your GitHub repo. When you deploy to Heroku, the config/secrets.yml file must be in your Git repository. For that reason, I suggest you save the file in your Git repo and keep your secrets safe by using environment variables. 10.6.3 Troubleshooting Remember, in YAML files (with the file extension .yml ), indentation is required (your application will break without it). Be sure to use spaces, not tabs. Make sure there is a space after each colon and before the value for each entry. If you have trouble setting Unix environment variables, you can add credentials directly to the config/secrets.yml file. If you do so, you should not check the file into Git until you\u2019ve deleted the secrets from the file. Replace the following if you are troubleshooting: development: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> with: development: email_provider_username: example email_provider_password: 's#cr*t' In a YAML file, you do not need quotes unless your string contains special characters. If your password contains any of these characters you should surround the string with single quotes: : { } [ ] & * # ? | - < > = ! % @ \\ Again, DON\u2019T CHECK THE FILE INTO GIT if you\u2019ve hardcoded your credentials directly in the config/secrets.yml file. The article Rails Environment Variables shows alternatives to using Unix environment variables, if for any reason you cannot set environment variables on your machine. 10.7 Secret Key Base It\u2019s not necessary to set SECRET_KEY_BASE as an environment variable on the computer you use for development. Rails generates a unique SECRET_KEY_BASE in the config/secrets.yml file each time you create a new Rails application and you don\u2019t need to replace it. If someone sees the SECRET_KEY_BASE in the config/secrets.yml file in your GitHub repo, there isn\u2019t anything they can do with it, since they don\u2019t have access to your local machine. For your future reference, in case you want to change the SECRET_KEY_BASE , here\u2019s how. Go to your Rails application directory and create a new secret token: $ rails secret very_long_random_string And, if you wish, add it to your .bash_profile or .bashrc file: export SECRET_KEY_BASE=\"very_long_random_string\" You should always use the environment variable <%= ENV[\"SECRET_KEY_BASE\"] %> in the production section of your config/secrets.yml file, otherwise, someone who sees the secret token in your GitHub repo can gain access to your application in production. You\u2019ll set the environment variables for production when you deploy to Heroku. 10.8 Configure Email Email messages are visible in the console and the log file when you test the application. If you don\u2019t want to actually send email, you can skip this step. But it\u2019s more fun when your application can actually send email. You can learn more in the article Send Email with Rails . 10.8.1 Connect to an Email Server Web servers don\u2019t send email. Our Rails application has to connect to an email server (also known as a mail transfer agent or \u201cmail relay\u201d). In the early days of the Internet, an experienced system administrator could set up an SMTP server to distribute email. Now, because of efforts to reduce spam, it is necessary to use an established email service to ensure deliverability. In production, for high volume transactional email and improved deliverability, it is best to use a service such as SendGrid . Alternatives are: Amazon SES (Simple Email Service) Mailgun Mailjet Mandrill PostageApp Postmark SparkPost For our tutorial application, we\u2019ll connect to SendGrid to send email. For convenience during development, some developers use their own Gmail account to send email. Google has increased security measures for Gmail, so it is difficult to use Gmail to send email from a Rails application. SendGrid is easier to set up and you\u2019re more likely to use it for a real application. That\u2019s why we\u2019ll use it. In the file config/environments/development.rb , near the end of the file, find the statement: config.assets.debug \\= true Immediately following, add this: config.action_mailer.smtp_settings \\= { address: \"smtp.sendgrid.net\", port: 587, domain: Rails.application.secrets.domain_name, authentication: \"plain\", enable_starttls_auto: true, user_name: Rails.application.secrets.email_provider_username, password: Rails.application.secrets.email_provider_password } # ActionMailer Config config.action_mailer.default_url_options \\= { :host \\=> 'localhost:3000' } config.action_mailer.delivery_method \\= :smtp config.action_mailer.raise_delivery_errors \\= true # Send email in development mode? config.action_mailer.perform_deliveries \\= true You can use port 25, 587, or 2525 (some ISPs restrict connections on port 25). It\u2019s important to add these changes in the body of the configuration file, before the end keyword. The order isn\u2019t important but don\u2019t add the configuration statements after the end keyword. Notice that we are using configuration variables that are set in the config/secrets.yml file: Rails.application.secrets.email_provider_username Rails.application.secrets.email_provider_password We could \u201chard code\u201d a username and password here but that would expose confidential data if your GitHub repository is public. Using configuration variables that are set in the config/secrets.yml file keeps your secrets safe. Again, if you need to troubleshoot, you can enter the SendGrid username and password directly in this file instead of the configuration variables. But for security, don\u2019t commit to Git with the password hardcoded in this file. 10.8.2 Perform Deliveries in Development If you want to send real messages when you test the application in development mode, modify the file config/environments/development.rb . After the code you just added, add the statement: # Send email in development mode? config.action_mailer.perform_deliveries \\= true This changes the configuration to send email when you\u2019re working on the application. Make sure any code you\u2019ve added to the config/environments/development.rb file is placed before the final end keyword. If you add code after the final end keyword, your application will fail with errors when you start the web server. Later, after we add a contact form to the tutorial application, the application will be ready to send email messages. 10.9 Git Make sure you\u2019re in your application root directory. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add configuration\" $ git push We\u2019re ready to create a home page for the application. Chapter 11 Static Pages and Routing A Rails application can deliver static web pages just like an ordinary web server. The pages are delivered fast and no Ruby code is required. We\u2019ll look at simple static pages and learn about Rails routing before we explore the complexities of dynamic web pages in Rails. 11.1 Add a Home Page Make sure you are in your project directory. Start the application server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see the Rails default information page. For the next step, you\u2019ll need to know how to use a text editor such as Atom or Sublime Text . You can find free tutorials on YouTube. Or, if you prefer a book, try Michael Hartl\u2019s Learn Enough Text Editor to Be Dangerous . Use your text editor to create and save a file public/index.html : Hello World Refresh the browser window and you\u2019ll see the \u201cHello World\u201d message. The Rails application server looks for any pages in the public folder by default. If no filename is specified in the URL, the server will attempt to respond with a file named index.html . This is a convention that dates to 1993; if no filename was specified, one of the first web servers ever built (the NCSA httpd server) would return a list of all files in the directory, unless a file named index.html was present. Since then, index.html has been the default filename for a home page. 11.2 Routing Error What happens when no file matches the requested web address? Enter the URL http://localhost:3000/about.html in your browser. You\u2019ll see an error page that shows a routing error. If you are using Cloud9, add \u201c/about.html\u201d to the URL in the preview browser window. 11.3 Add an About Page Use your text editor to create and save a file public/about.html : About Visit the URL http://localhost:3000/about.html in your browser. You\u2019ll see the new \u201cAbout\u201d page. By the way, you\u2019ve just done test-driven development (TDD). 11.3.1 Introducing TDD With test-driven development, a developer tests behavior before implementing a feature, expecting to see an error condition. Then the developer implements the feature and sees a successful result to the test. That\u2019s exactly what you\u2019ve done, in the simplest way. Beginners tend to think TDD is scary and complicated. Now that you\u2019ve experienced a simple form of TDD, maybe it won\u2019t be intimidating. Real TDD means writing tests in Ruby before implementing features, but the principle is the same. 11.4 Introducing Routes The guiding principle of \u201cconvention over configuration\u201d governs Rails routing. If the web browser requests a page named \u201cindex.html\u201d, Rails will deliver the page from the public folder by default. No configuration is required. But what if you want to override the default behavior? Rails provides a configuration file to control web request routing. If you\u2019ve got only one terminal window open, you\u2019ll have to stop the Rails server with Control-c to get your terminal prompt. Here is where it is helpful to have two terminal sessions going in different tabs. Let\u2019s set the \u201cAbout\u201d page as the home page. Open the file config/routes.rb . Remove all the comments and replace the file with this: Rails.application.routes.draw do root to: redirect('/about.html') end This snippet of Rails routing code takes any request to the application root ( http://localhost:3000/ ) and redirects it to the about.html file (which is expected to be found in the public folder). There is no need to restart your application server to see the new behavior. If you need to start the server: $ rails server Visit the page http://localhost:3000/ . You\u2019ll see the \u201cAbout\u201d page. If you still see the \u201cHello World\u201d page, you didn\u2019t remove the the public/index.html file. Rails will use the index file in the public folder before it checks the routing file for a redirect. You\u2019ve just seen an example of Rails magic. Some developers complain that the \u201cconvention over configuration\u201d principle is black magic. It\u2019s not obvious why pages are delivered from the public folder; it just happens. If you don\u2019t know the convention, you could be left scratching your head and looking for the code that maps http://localhost:3000/ to the public/index.html file. The code is buried deep in the Rails framework. However, if you know the convention and the technique for overriding it, you have both convenience and power at your disposal. 11.5 Using the \u201cAbout\u201d Page We\u2019ve created an \u201cAbout\u201d page so we can learn about routing. For the next chapter, we\u2019ll use the static \u201cAbout\u201d page to investigate how a web application works. Later in the tutorial we\u2019ll create a new \u201cAbout\u201d page using a different approach. Chapter 12 Request and Response You\u2019ve configured the tutorial application, created static pages, and seen the magic of Rails routing. In this chapter, we\u2019ll investigate the web request-response cycle and look at the model-view-controller design pattern so you\u2019ll be prepared to build a dynamic home page. 12.1 Investigating the Request Response Cycle Remember, at its core, the World Wide Web is nothing more than web browsers that request files from web servers. Web browsers make requests . A web server responds to a request by sending an HTML file. Depending on the headers in the HTML file, the web browser may make additional requests and get additional CSS, JavaScript, and image files. The beauty and simplicity of the World Wide Web architecture, as conceived by Tim Berners-Lee in 1990, is that the web is nothing more than a request from a web browser and a response from a web server. Some web pages now include streaming video, or music, requiring an open \u201cpipe\u201d between the web server and the web browser, but even so, an initial request-response cycle delivers the page that sets up the stream. We can reduce the mystery of how the web works to its simplest components when we investigate the request-response cycle. We\u2019ll see that everything that happens in a web application takes place within the flow of the request-response cycle. Let\u2019s look at the request-response cycle. Figure 12.1: The request-response cycle. 12.1.1 Inside the Browser We can see the actual request, and the actual response, by using the diagnostic tools built into the web browser. Start the application server if it is not already running: $ rails server Developers use various web browsers during development. I\u2019ll provide instructions for Chrome, since it is the most popular. Even if you prefer Mozilla Firefox or Apple Safari, try this in Chrome, so you can follow along with the text. Start our investigation by putting Chrome into \u201cIncognito Mode\u201d with Command-Shift-N (on a Mac). On Linux, use Ctrl-Shift-N to get in incognito mode with Chrome. Alternatively, you can clear the browser cache. This clears any files that were previously cached by the browser. The Developer Tools view is your primary diagnostic tool for front-end (browser-based) development, including CSS and JavaScript. In Chrome on macOS, press Command-Option-I to open the Developer Tools View in a section of the browser window. Alternatively, you can find the menu item under View/Developer/Developer Tools. In Chrome on Windows or Linux platforms, press Shift-Ctrl-I or select Menu/Tools/Developer Tools. Initiate the request-response cycle by visiting the \u201cAbout\u201d page at http://localhost:3000/about.html . In the Developer Tools view, under the Network tab, you\u2019ll see files received by the browser from the web server. There is only one: \u201cabout.html\u201d. This is the file that the browser evaluates to display a web page. Figure 12.2: Viewing a request in the Developer Tools View. Be sure to select the Network tab in the Developer Tools view. Click the \u201cabout.html\u201d file icon. Then click the tab \u201cHeaders.\u201d The diagnostic window shows the entire request sent to the server and the entire response received by the browser. Figure 12.3: Viewing request headers in the Developer Tools View. Under the heading \u201cGeneral,\u201d you can see the request is composed of: request URL (http://localhost:3000/about.html) request method (GET) status code (200 OK or 304 Not Modified) You can also see request and response headers: request headers (including the User Agent identifier) response headers (including last-modified date/time) You can see the HTML sent to the browser by clicking the Preview or Response tabs in the view under the Network tab. Here\u2019s the point of the exercise: The browser\u2019s Developer Tools view shows all the data exchanged between the browser and server. You\u2019re looking at everything that passes through the plumbing. 12.1.2 Inside the Server The browser\u2019s Developer Tools view doesn\u2019t show you what happens on the server. For that, go to the server logs or the console window. Started GET \"/\" for ::1 at ... Notice how the diagnostic messages in the console window match the headers in the browser Developer Tools view. The browser\u2019s \u201cRequest Method:GET\u201d matches the server\u2019s \u201cStarted GET.\u201d Notice there are no console log messages for pages delivered from the public folder. Soon we\u2019ll see much more in the console window, after we\u2019ve built a dynamic web page that is assembled by the application server. 12.2 How the Browser Works What happens after the browser receives a response from the server? The response is not complete until all files are received (or the browser reaches a time-out limit). Modern browsers retrieve files asynchronously; the order and location of the files in the initial HTML file doesn\u2019t matter because the browser will try to load all the files before displaying the page. 12.2.1 Document Object Model When the web browser receives an HTML file, it creates an internal representation of the page in computer memory, called the Document Object Model (DOM). It provides a structural representation of the document. The DOM works like an API for HTML documents, allowing you to modify the content and visual presentation of the page by using JavaScript. Later in the tutorial, we\u2019ll see how a JavaScript library such as jQuery can be used to do things like hiding or revealing HTML elements on a page by manipulating the DOM. 12.2.2 Rendering Each time the DOM changes, the browser engine converts the DOM to a visual representation of the page and renders it in the browser window. Knowing about the DOM will help you understand what happens in the browser when it receives a web response. And understanding the DOM will help you work with JavaScript for front-end programming. But in this book, our focus is on building a server-side web application in Rails. Let\u2019s see how a Rails application responds to a web request. 12.3 How the Application Works Now that we\u2019ve investigated the request-response cycle, let\u2019s dig deeper to understand what happens inside the Rails application in response to a browser request. To do so, we\u2019ll need to understand the model\u2013view\u2013controller concept. 12.3.1 Video Option This eight minute video introduces the model\u2013view\u2013controller concept: Model View Controller in Rails 12.3.2 The Model View Controller Concept The model\u2013view\u2013controller concept is key to understanding how a Rails application responds to a browser request. Here is a diagram that shows what happens in the server during the request-response cycle. Figure 12.4: Model\u2013View\u2013Controller in Rails. You learned earlier that, from the perspective of a software architect, Rails is organized to conform to the model\u2013view\u2013controller software design pattern. This enforces \u201cseparation of concerns\u201d to keep code manageable and organized. The MVC design pattern is optimal for web applications and is a central organizing principle for Rails. The MVC design pattern originated in the design of desktop applications. \u201cModel\u201d classes manipulated data; \u201cview\u201d classes created the user interface; and a \u201ccontroller\u201d class responded to user interaction. Some computer scientists feel the architecture of web applications doesn\u2019t quite match the original MVC design pattern of desktop applications. We can see the reason for the quibble in the next diagram. The diagram shows the MVC architecture as part of the Rails software stack. At the base of the stack is the web browser. A request flows upward through the layers and encounters the router which dispatches the request to an appropriate controller. In a Rails application, there is a single routing file, config/routes.rb , and multiple controllers, models, and views. Figure 12.5: Model\u2013View\u2013Controller stack in Rails. Considering the importance of the router, perhaps we should call our Rails architecture the RCMV , or Routing-Controller-Model-View, pattern. Despite the quibble about nomenclature, the architecture is well understood and used by all Rails developers. Here\u2019s the step-by-step walk-through of what happens. When the web browser makes a request, a router component will check the config/routes.rb file and determine which controller should handle the request, based on the web address and HTTP protocol. The controller will obtain any needed data from a model . After obtaining data, the controller will render a response combining data from the model with a view component that provides markup and layout. The response is an HTML file that the controller assembles for the browser to display. The model, view, and controller are files you create containing Ruby code. Each file has a certain structure and syntax based on foundation model, view, and controller classes defined in the Rails framework. The model, view, and controller classes you create will inherit behavior from parent classes that are part of the framework, so you will have less code to write yourself. In most Rails applications, a model obtains data from a database, though some models obtain data from a remote connection to another server. For example, a User model might retrieve a user name and email address from a local database. A User model could also obtain a user\u2019s recent tweets from Twitter or a user\u2019s hometown from Facebook. The controller can obtain data from more than one model if necessary. A controller can have more than one action . For example, a User controller might have actions to display a list of users, or add or delete a user from a list. The config/routes.rb file matches a web request to a controller action. In the software architects\u2019 terminology, each action is a method of the controller class . We use the terms action and method interchangeably when we talk about a Rails controller; to be precise, controller actions are implemented as methods. In practice, Rails developers try to limit controllers to seven standard actions: index , show , new , create , edit , update and destroy actions. A controller that offers these actions is said to be \u201cRESTful\u201d (a term that refers to representational state transfer , another software design abstraction). It\u2019s not important to understand the abstract principles of RESTful design; recognizing the term and knowing that Rails controllers have seven standard actions is sufficient for beginners. A view file combines Ruby code with HTML markup. Typically there will be a view file associated with each controller action that displays a page. An index view might show a list of users. A \u201cshow\u201d view might provide details of a user\u2019s profile. View files look much like ordinary HTML files but typically contain data in the form of Ruby variables. Often you\u2019ll see Ruby statements such as blocks that iterate through lists to create tables. Following the \u201cseparation of concerns\u201d principle, it is considered good practice to limit Ruby code in view files to only displaying data; anything else belongs in a model. Not every controller action has its own view file. In many controllers, on completion, the destroy action will redirect to the index view, and create will redirect to either show or new . This conceptual overview will be easier to grasp when you actually see the code for a model, view, and controller. We\u2019ll create model, view, and controller files in the next chapter. 12.4 Remove the About Page We\u2019ve been using the static \u201cAbout\u201d page to investigate the request-response cycle. We\u2019re done, so delete the file public/about.html : $ rm public/about.html Earlier, we set up the config/routes.rb file. You can leave it in place. We\u2019ll change it in the next chapter. Now we\u2019ll look at ways to implement the home page using the full power of Rails. Chapter 13 Dynamic Home Page Earlier, we saw how Rails can deliver simple static web pages. Here we\u2019ll build a dynamic home page, illustrating basic concepts you\u2019ll need to understand Rails. 13.1 User Story We\u2019ll plan our work with a user story: *Birthday Countdown* As a visitor to the website I want to see the owner's name I want to see the owner's birthdate I want to see how many days until the owner's next birthday In order to send birthday greetings This silly home page will help us explore Rails and learn about the Ruby language. Our goal is to build a practical web application that you can really use. Later we\u2019ll replace this silly home page with a useful web page that encourages visitors to sign up for a mailing list. 13.2 Routes, Model, View, and Controller We\u2019ll use the model-view-controller design pattern as we build our new home page. First, we\u2019ll set up a route so a request URL gets directed to the appropriate controller. We\u2019ll set up a model so we obtain data we need for the home page. We\u2019ll set up a view that contains the HTML needed to display our home page. And finally, we\u2019ll create a controller that responds to the request, obtaining data from the model and rendering the view, sending a response to the web browser. We can create the routes, model, view, and controller in any order. All must exist before our web application will respond to a request for a home page. In this tutorial, I\u2019ve chosen to create the routes, model, view, and controller in an order that is convenient for learning. 13.3 The Name Game Much of the art of programming lies in choosing suitable names for our creations. We\u2019ll need a model as a source for data about the site owner. Choosing the most obvious name, we\u2019ll call it the Owner model: Owner - the file will be app/models/owner.rb What about a name for the controller that will render our home page? How about \u201cHome controller\u201d or \u201cWelcome controller?\u201d Those names are acceptable. But if we consider our user story, the name \u201cVisitors controller\u201d is best. A visitor is the actor, so \u201cVisitors controller\u201d is appropriate: VisitorsController - the file will be app/controllers/visitors_controller.rb Later we\u2019ll see this is a good choice because we\u2019ll create a Visitor model to handle data about the website visitor. In Rails, there is often a model with the same name as a controller (though a controller can use data from multiple models). 13.4 Naming Conventions Rails is picky about class names and filenames. That\u2019s because of the \u201cconvention over configuration\u201d principle. By requiring certain naming patterns, Rails avoids complex configuration files. Before we look at class and filename conventions, here\u2019s a note about typographic terminology: a string is a sequence of characters you\u2019re looking at an example of lowercase strings separated by spaces (words!) Titlecase means there is an Initial Capital Letter in a string CamelCase contains a capital letter in the middle of a string snake_case combines words with an underscore character instead of a space When you write code, you\u2019ll follow rules for class names: class Visitor - the model class name is capitalized and singular class VisitorsController < ApplicationController - for a controller, combine a pluralized model name with \u201cController\u201d in CamelCase Here are the rules for filenames. They are always lowercase, with words separated by underscores (snake_case): the model filename matches the model class name, but lowercase, for example app/models/visitor.rb the controller filename matches the controller class name, but snake_case, for example app/controllers/visitors_controller.rb the views folder matches the model class name, but plural and lowercase, for example app/views/visitors At first the rules may seem arbitrary, but with experience they will make sense. The rule about no capital letters or spaces in filenames has its origins in computer antiquity. If you stray from these naming conventions, you\u2019ll encounter unexpected problems and frustration. 13.5 Routing We\u2019ll create the route before we implement the model and controller. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do root to: 'visitors#new' end Any request to the application root ( http://localhost:3000/ ) will be directed to the VisitorsController new action. Don\u2019t be overly concerned about understanding the exact syntax of the code. It will become familiar soon and you can look up the details in the reference documentation, RailsGuides: Routing from the Outside In . In general, when you change a configuration file you must restart your application server. However, the config/routes.rb file is an exception. You don\u2019t need to restart the server after changing routes. If you need to start the server: $ rails server Visit the page http://localhost:3000/ . You\u2019ll see an error message because we haven\u2019t implemented the controller. The error message, \u201cuninitialized constant VisitorsController,\u201d means Rails is looking for a VisitorsController and can\u2019t find it. 13.6 Model Most Rails models obtain data from a database. When you use a database, you can use the rails generate model command to create a model that inherits from the ActiveRecord class and knows how to connect to a database. To keep things simple, our tutorial application doesn\u2019t need a database. Instead of inheriting from ActiveRecord, we create a Ruby class with methods that return the owner\u2019s name, birthdate, and days remaining until his birthday. This simple class provides an easy introduction to Ruby code. Create a file app/models/owner.rb (don\u2019t include the colon punctuation that follows): class Owner def name name \\= 'Foobar Kadigan' end def birthdate birthdate \\= Date.new(1990, 12, 22) end def countdown today \\= Date.today birthday \\= Date.new(today.year, birthdate.month, birthdate.day) if birthday > today countdown \\= (birthday - today).to_i else countdown \\= (birthday.next_year - today).to_i end end end This is your first close look at Ruby code. The oddest thing you\u2019ll see is the owner\u2019s name, \u201cFoobar Kadigan.\u201d Everything else will make sense with a bit of explanation. Keep in mind that we are using a text file to create an abstraction that we can manipulate in the computer\u2019s memory. Software architects call these abstractions objects . In Ruby, everything we create and manipulate is an object . To distinguish one object from another, we define it as a class , give it a class name , and add behavior in the form of methods . The first line class Owner defines the class and assigns a name. At the very end of the file, the end keyword completes the class definition. We define three methods, starting with def (for \u201cmethod definition\u201d) and ending with end . def name \u2026 end def birthdate \u2026 end def countdown \u2026 end Each method contains simple Ruby code that assigns data to a variable. Later, we\u2019ll retrieve the data for use in our view file by instantiating the class and calling a method. Don\u2019t be discouraged by the software architects\u2019 terminology; the concepts are simple and we\u2019ll soon see everything in action. Ruby makes it easy for a method to return data when called; the value assigned by the last statement will be delivered when the method is called. Looking more closely at the Ruby code inside the method definitions, you\u2019ll see Ruby uses the = (equals) sign to assign values to a variable. The variable is named on the left side of the equals sign; a value is assigned on the right side. We call the equals sign an assignment operator . We can assign any value to a variable, including a string (a series of characters that can be a word or name) such as \u201cFoobar Kadigan.\u201d Ruby recognizes a string when characters are enclosed in single or double quotes. Not surprisingly, a number also can be assigned to a variable, either a whole number (an integer ) or a decimal fraction (a float ). More interestingly, any Ruby object can be assigned to a variable. That helps us \u201cmove around\u201d any object very easily, giving us access to the object\u2019s class methods anywhere we use the variable. We can create our own objects, as we have by creating the Owner class. Or we can use the library of objects that are supplied with Ruby. Ruby\u2019s prefabricated objects are defined by the Ruby API ( application programming interface ); essentially the API is a catalog of prebuilt classes that are building blocks for any application. The Rails API gives us additional classes that are useful for web applications. Learning the syntax of Ruby code gets you started with Ruby programming; knowing the API classes leads to mastery of Ruby. The Date class is provided by the Ruby API. It is described in the Ruby API reference documentation . The Date class has a Date.new method which instantiates (creates) a new date when supplied with year, month, and day parameters . You can see this syntax when we assign Date.new(1990, 12, 22) to the birthdate variable. Note that Ruby has specific expectations about the syntax of numbers. The Date.new(...) method expects integers. Imagine a September birthday. You must use Date.new(1990, 9, 22) . If you enter a date in the format Date.new(1990, 09, 22) , you\u2019ll get a syntax error \u201cInvalid octal digit\u201d when you test the application. Ruby expects numbers that begin with zero to be octal numbers ; you\u2019ll get an error because octal numbers can\u2019t contain the digit \u201c9.\u201d Our countdown method contains the most complex code in the class. First, we set a variable today with today\u2019s date. The Date.today method creates an object that represents the current date. When the Date.today method is called, Ruby gets the current date from the computer\u2019s system clock. Next we create a birthday variable and assign a new date that combines today\u2019s year with the month and day of the birthdate . This gives us the date of Foobar Kadigan\u2019s birthday this year. The Date class can perform complex calendar arithmetic. The variables birthdate and today are instances of the Date class. We can use a greater-than operator to determine if Foobar Kadigan\u2019s birthday is in the future or the past. The if ... else ... end structure is a conditional statement . If the birthday is in the future, we subtract today from birthday to calculate the number of days remaining until the owner\u2019s birthday, which we assign to the countdown variable. If the birthday has already passed, we apply a next_year method to the birthday to get next year\u2019s birthday. Then we subtract today from birthday.next_year to calculate the number of days remaining until the owner\u2019s birthday, which we assign to the countdown variable. The result might be fractional so we use the utility method to_i to convert the result to a whole number (integer) before assigning it to the countdown variable. This shows you the power of programming in Ruby. Notice that I needed 16 paragraphs and over 600 words to explain 15 short lines of code. We used only seven Ruby abstractions but they represent thousands of lines of code in the Ruby language implementation. With knowledge of Ruby syntax and the Ruby API, a few short lines of code in a text file gives us amazing ability. In an upcoming chapter, we\u2019ll look more closely at the syntax and keywords of the Ruby language. But without knowing more than this, we can build a simple web application. Let\u2019s see how we can put this functionality to use on a web page. 13.7 View The Owner model provides the data we want to see on the Home page. We\u2019ll create the markup and layout in a View file and add variables that present the data. View files go in folders in the app/views/ directory. In a typical application, one controller can render multiple views, so we make a folder to match each controller. You can make a new folder using your file browser or text editor. Or use the Unix mkdir command: $ mkdir app/views/visitors Create a file app/views/visitors/new.html.erb (don\u2019t include the colon punctuation that follows): Home Welcome to the home of < %= @owner.name %>. I was born on < %= @owner.birthdate %>. Only < %= @owner.countdown %> days until my birthday! We\u2019ve created a visitors/ folder within the app/views/ directory. We have only a single new view but if we had more views associated with the Visitors controller, they\u2019d go in the app/views/visitors/ folder. We name our View file new.html.erb , adding the .erb file extension so that Rails will use the ERB templating engine to interpret the markup. There are several syntaxes that can be used for a view file. In this tutorial, we\u2019ll use the ERB syntax that is most commonly used by beginners. Some experienced developers prefer to add gems that provide the Haml or Slim templating engines. As you might guess, a View that uses the Haml templating syntax would be named new.html.haml . Our HTML markup is minimal, using only the <h3> and <p> tags. The only ERB markup we add are the <%= ... %> delimiters. This markup allows us to insert Ruby code which will be replaced by the result of evaluating the code. In other words, <%= @owner.name %> will appear on the page as Foobar Kadigan. You may have noticed that we refer to the Owner model with the variable @owner . It will be clear when we create the Visitors controller why we use this syntax (a variable name that begins with the @ character is called an instance variable ). Obviously, if all we wanted to do was include the owner\u2019s name on the page, it would be easier to simply write the text. The Rails implementation becomes useful if the name is retrieved from a database or created programmatically. We can better see the usefulness of the Owner model when we look at the use of <= @owner.countdown %> . There is no way to display a calculation using only static HTML, so Rails gives us a way to display the birthday countdown calculation. If you\u2019re a programmer, you might wonder why we only output the variable on the page. Since we can use ERB to embed any Ruby code, we could perform the calculation right on the page by embedding <%= (Date.new(today.year, @owner.birthdate.month, @owner.birthdate.day) - Date.today).to_i %> . If you\u2019ve used JavaScript or PHP, you may have performed calculations like this, right on the page. Rails would allow us to do so, but the practice violates the \u201cseparation of concerns\u201d principle that encourages us to perform complex calculations in a model and only display data in the view. Before we can display the home page, we need to create the Visitors controller. 13.8 Controller The Visitors controller is the glue that binds the Owner model with the VisitorsController#new view. Note: When we refer to a controller action, we use the notation \u201cVisitorsController#new,\u201d joining the controller class name with the action (method) that renders a page. In this context, the # character is only a documentation convention. Note: VisitorsController will be the class name and visitors_controller.rb will be the filename. The class name is written in camelCase (with a hump in the middle, like a camel) so we can combine two words without a space. Unix commands get messy when filenames include spaces so we create a filename that combines two words with an underscore (sometimes called \u201csnake_case\u201d). Create a file app/controllers/visitors_controller.rb (don\u2019t include the colon punctuation that follows): class VisitorsController < ApplicationController def new @owner \\= Owner.new end end We define the class and name it class VisitorsController , inheriting behavior from the ApplicationController class which is defined in the Rails API. We only need to define the new method. We create an instance variable named @owner and assign an instance of the Owner model. Any instance variables (variables named with the @ character) will be available in the corresponding view file. If we don\u2019t instantiate the Owner model, we\u2019ll get an error when the controller new action attempts to render the view because we use the @owner instance in the view file. Keep in mind the purpose of the controller. Each controller action (method) responds to a request by obtaining a model (if data is needed) and rendering a view. You\u2019ve already created a view file in the app/views/visitors folder. The new action of the VisitorsController renders the template app/views/visitors/new.html.erb . The new method is deceptively simple. Hidden behavior inherited from the ApplicationController does all the work of rendering the view. We can make the hidden code explicit if we wish to. It would look something like this: class VisitorsController < ApplicationController def new @owner \\= Owner.new render 'visitors/new' end end This is an example of Rails magic. Some developers complain this is black magic because the \u201cconvention over configuration\u201d principle leads to obscurity. Rails often offers default behavior that looks like magic because the underlying implementation is hidden in the depths of the Rails code library. This can be frustrating when, as a beginner, you want to understand what\u2019s going on. Revealing the hidden code, we see that invoking the new method calls a render method supplied by the ApplicationController parent class. The render method searches in the app/views/visitors directory for a view file named new (the file extension .html.erb is assumed by default). The code underlying the render method is complex. Fortunately, all we need to do is define the method and instantiate the Owner model. Rails takes care of the rest. As a beginner, simply accept the magic and don\u2019t confound yourself trying to find how it works. As you gain experience, you can dive into the Rails source code to unravel the magic. 13.9 Scaffolding This tutorial aims to give you a solid foundation in basic concepts. The model\u2013view\u2013controller pattern is one of the most important. I\u2019ve found the best way to understand model\u2013view\u2013controller architecture is to create and examine the model, view, and controller files. As you continue your study of Rails, you\u2019ll find other tutorials that use the scaffolding shortcut. For example, Rails Guides: Getting Started with Rails includes a section \u201cGetting Up and Running Quickly with Scaffolding\u201d which shows how to use the rails generate scaffold command to create model, view, and controller files in a single operation. Students often use scaffolding to create simple Rails applications. In practice, I\u2019ve observed that working Rails developers seldom use scaffolding. There\u2019s nothing wrong with it; it just seems that scaffolding doesn\u2019t offer much that can\u2019t be done as quickly by hand. 13.10 Test the Application We\u2019ve created a model, view, and controller. Now let\u2019s run the application. Enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see our new home page. Figure 13.1: Dynamic home page shows days until a birthday. It\u2019s a very simple web page but it uses Ruby to calculate the countdown to the birthday. And the underlying code conforms to the conventions and structure of Rails. 13.11 Git At this point, you might have the Rails server running in your console window. We\u2019re going to run a git command in the console now. You might think you have to enter Control-c to shut down the server and get the command prompt. But that\u2019s not necessary. You can open more than one console view. Your terminal application lets you open multiple windows or tabs. If you open multiple tabs, you can easily switch between console views without using a lot of screen real estate. If you haven\u2019t tried it, now is a good time. On the Mac, Command+t opens a new tab in the terminal application. It is convenient to have a console tab open for the server and another for various Unix commands. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"dynamic home page\" $ git push Now let\u2019s take a look at troubleshooting. Chapter 14 Troubleshoot In the last chapter, we built a dynamic home page and learned about the model\u2013view\u2013controller architecture of Rails. There was a lot to learn, but the code was simple, and I hope it worked the first time you tried it. Before we do any more work on our tutorial application, we need to learn about troubleshooting and debugging. As a software developer, you\u2019ll spend a lot of time with code that doesn\u2019t work. You\u2019ll need tools and techniques to diagnose problems. 14.1 Git In this chapter we\u2019ll make changes to the application just for troubleshooting. Before you get started, make sure the work you\u2019ve done is committed to your git repository. Use the git status command to check: $ git status You should see: On branch master nothing to commit, working directory clean If git status reports any uncommitted changes, go back to the last step in the previous chapter and commit your work to the git repository before continuing. At the end of this chapter, we\u2019re going to throw away the work we\u2019ve done in this chapter. We don\u2019t want to accidentally throw away work from the previous chapter so make sure it is committed to the repository. 14.2 Interactive Ruby Shell There will be times when you want to try a snippet of Ruby code just to see if it works. Your tool will be IRB, the Interactive Ruby shell. IRB is a Ruby interpreter that runs from the command line. It executes any Ruby code and provides an immediate response, allowing you to experiment in real-time. Let\u2019s try it. $ irb >> The command irb launches the program and displays a prompt that shows your Ruby version, a line number, and an arrow. I\u2019ll just show a simple prompt in the examples, instead. If you enter a valid Ruby expression, the interpreter will display the result of evaluating the expression. Try simple arithmetic: >> n \\= 2 => 2 >> n + 2 => 4 Wow! You are using your computer for simple math. Maybe you can delete the calculator app from your phone. IRB will evaluate any Ruby expression and helps you quickly determine if syntax and logic is correct. 14.2.1 IRB for Blocks of Code At first glance, it appears IRB works on just one line of code. Actually, IRB can handle multiple lines of code. Try it: >> n \\= 10 \\=> 10 >> if n < 10 >> puts \"small\" >> else ?> puts \"big\" >> end big \\=> nil >> Here we set n = 10 and then enter a conditional statement line-by-line. After we enter the final end , IRB interprets the code and outputs the result. You\u2019ll often enter more than one line of code in IRB. If you find yourself frustrated because you\u2019ve entered typos and had to enter the same code repeatedly, you can use IRB to load code you\u2019ve saved in a file: >> load './mytest.rb' 14.2.2 Quitting IRB It can be very frustrating to find you are stuck inside IRB. Unlike most shell commands, you can\u2019t quit with Control-c. Enter Control-d or type exit to quit IRB: $ irb >> exit 14.2.3 Learn More About IRB Here\u2019s an entertaining way to learn about IRB: Why\u2019s (Poignant) Guide to Ruby (with a Basic Introduction to IRB) Here\u2019s a more conventional way to learn about IRB: The Pragmatic Programmer\u2019s Guide 14.2.4 Beyond IRB If you ask experienced Rails developers for help with IRB, they\u2019ll often recommend you switch to Pry. Pry is a powerful alternative to the standard IRB shell for Ruby. As you gain experience, you might take a look at Pry to see what the enthusiasm is all about. But for now, as a beginner trying out a few lines of Ruby code, there\u2019s no need to learn Pry. 14.3 Rails Console IRB only evaluates expressions that are defined in the Ruby API. IRB doesn\u2019t know Rails. It\u2019d be great to have a tool like IRB that evaluates any expression defined in the Rails API. The tool exists; it\u2019s called the Rails console. It is particularly useful because it loads your entire Rails application. Your application will be running as if the application was waiting to respond to a web request. Then you can expose behavior of any pieces of the web application. $ rails console ... Loading development environment (Rails 5.x.x) >> The Rails console behaves like IRB but loads your Rails development environment. The prompt shows it is ready to evaluate an expression. Let\u2019s use the Rails console to examine our Owner model: >> myboss \\= Owner.new => # We\u2019ve created a variable named myboss and created a new instance of the Owner class. The Rails console responds by displaying the unique identifier it uses to track the object. The identifier is not particularly useful, except to show that something was created. If you\u2019re unsure about the difference between an instance and a class , we\u2019ve just seen that we can make one or more instances of a class by calling the Owner.new method. When we specify the Owner class, the class definition is loaded into the computer\u2019s working memory (our development environment) from the class definition file on disk. Then we can use the Owner.new method to make one or more instances of the Owner class. Each instance is a unique object with its own data attributes but the same behavior as other objects instantiated from its class. Let\u2019s assign the name of our boss to a variable called name : >> name \\= myboss.name => \"Foobar Kadigan\" Our variable myboss is an instance of an Owner class so it responds to the method Owner.name by returning the owner\u2019s name. We want to show respect to our boss so we\u2019ll perform some string manipulation : >> name \\= 'Mr. ' + name => \"Mr. Foobar Kadigan\" We\u2019re done for now. When we quit the Rails console or shut down the computer the Owner class definition remains stored on disk but the instances disappear. The bits that were organized to create the variable name will evaporate into the ether. Actually, the bits are still there, in the form of logic states in the computer\u2019s chips, but they have no meaning until another program uses them. Enter Control-d or type exit to quit the Rails console. The Rails console is a useful utility. It is like a handy calculator for your code. Use it when you need to experiment or try out short code snippets. 14.4 Rails Logger As you know, a Rails application sends output to the browser that makes a web request. On every request, it also sends diagnostic output to the server log file . Depending on whether the application is running in the development environment or in production, the log file is here: log/development.log log/production.log In development, everything written to the log file appears in the console window after you run the rails server command. Scrolling the console window is a good way to see diagnostics for every request. Here\u2019s what you see in the log after you visit the application home page: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML Rendering visitors/new.html.erb within layouts/application Rendered visitors/new.html.erb within layouts/application (6.6ms) Completed 200 OK in 650ms (Views: 634.4ms | ActiveRecord: 0.0ms) You may have more than one console window open in the terminal application. If you don\u2019t see your log output in your terminal, check if you have tabs with other windows. Here\u2019s the best part. You can add your own messages to the log output by using the Rails logger. Let\u2019s try it out. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name end end Visit the home page again and you\u2019ll see this in the console output: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application Rendered visitors/new.html.erb within layouts/application (1.1ms) Completed 200 OK in 81ms (Views: 72.2ms | ActiveRecord: 0.0ms) If you really needed to do so, you could add a logger statement at every step in the application. You could see how the application behaves, step by step. And you could \u201cprint\u201d the value of every variable at every step. You\u2019ll never need diagnostics at this level of detail in Rails, but the logger is extremely useful when you are trying to understand unexpected behavior. Let\u2019s add logger statements to the Owner model. Modify the file app/models/owner.rb : class Owner def name name \\= 'Foobar Kadigan' end def birthdate birthdate \\= Date.new(1990, 12, 22) end def countdown Rails.logger.debug 'DEBUG: entering Owner countdown method' today \\= Date.today birthday \\= Date.new(today.year, birthdate.month, birthdate.day) if birthday > today countdown \\= (birthday - today).to_i else countdown \\= (birthday.next_year - today).to_i end end end We added the Rails.logger.debug statement to the Owner.countdown method. Visit the home page and here\u2019s what you\u2019ll see in the console output: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application DEBUG: entering Owner countdown method Rendered visitors/new.html.erb within layouts/application (0.7ms) Completed 200 OK in 69ms (Views: 61.1ms | ActiveRecord: 0.0ms) You\u2019ll often need to \u201cget inside\u201d the model or controller to see what\u2019s happening. The Rails logger is the best tool for the job. Here are some tricks for the Rails logger. In a controller, you can use the method logger on its own. In a model, you have to write Rails.logger (both class and method). You can use any of the methods logger.debug , logger.info , logger.warn , logger.error , or logger.fatal to write log messages. By default, you\u2019ll see any of these messages in the development log. Log messages written with the logger.debug method will not be recorded in a production log file. If you want your log messages to stand out, you can add formating code for color: Rails.logger.debug \"\\033[1;34;40m[DEBUG]\\033[0m \" + 'will appear in bold blue' For more about the Rails logger, see the RailsGuide: Debugging Rails Applications . 14.5 Revisiting the Request-Response Cycle Earlier, when we investigated the request-response cycle, we looked in the server log to see the response to the web browser request. Now, with debug statements in the controller and model, we\u2019ll see messages showing the server\u2019s traverse of the model-view-controller architecture. Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application DEBUG: entering Owner countdown method Rendered visitors/new.html.erb within layouts/application (0.7ms) Completed 200 OK in 69ms (Views: 61.1ms | ActiveRecord: 0.0ms) Notice how the diagnostic messages in the console window match the headers in the browser Developer Tools view. The browser\u2019s \u201cRequest Method:GET\u201d matches the server\u2019s \u201cStarted GET.\u201d The browser\u2019s \u201cStatus Code: 200\u201d matches the server\u2019s \u201cCompleted 200 OK\u201d (you might have to clear the browser\u2019s cache if the browser is showing \u201c304 Not Modified\u201d). We can see evidence of the model-view-controller architecture. \u201cProcessing by VisitorsController#new\u201d shows the program flow entering the controller. Our debug statements show we enter the new method and reveal the value of the Owner name. The next debug statement reveals the flow has passed to the Owner model. A diagnostic message shows the controller has rendered the visitors/new.html.erb view file. Finally, the \u201cCompleted 200 OK\u201d message indicates the response has been sent to the browser. As we learned, the model-view-controller architecture is an abstract design pattern. We\u2019ve seen it reflected in the file structure of the Rails application directory. Now we can see it as activity in the server log. 14.6 The Stack Trace The Rails logger is extremely useful if you want to insert messages to show program flow or display variables. But there will be times when program flow halts and the console displays a stack trace . Let\u2019s deliberately create an error condition and see an error page and stack trace. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name DISASTER end end Visit the home page and you\u2019ll see an error page: Figure 14.1: Error page. You\u2019ll see this error page because we\u2019ve installed the better_errors gem. Without the better_errors gem, you\u2019d see the default Rails error page which is quite similar. In the console log, the stack trace will show everything that happens before Rails encounters the error: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Completed 500 Internal Server Error in 8ms (ActiveRecord: 0.0ms) NameError - uninitialized constant VisitorsController::DISASTER: app/controllers/visitors_controller.rb:7:in `new' . . . To save space, I\u2019m only showing the top line of the stack trace. I\u2019ve eliminated about sixty lines from the stack trace. Don\u2019t feel bad if your reaction to a stack trace is an immediate, \u201cTMI!\u201d Indeed, it is usually Too Much Information. There are times when it pays to carefully read through the stack trace line by line, but most often, only the top line of the stack trace is important. In this case, both the error page and the top line of the stack trace show the application failed (I prefer to say, \u201cbarfed\u201d) when it encountered an \u201cuninitialized constant\u201d at line 7 of the app/controllers/visitors_controller.rb file in the new method. It\u2019s easy to find line 7 in the file and see that is exactly where we added a string that Rails doesn\u2019t understand. The point of this exercise is to encourage you to read the top line of the stack trace and use it to diagnose the problem. I\u2019m always surprised how many developers ignore the stack trace, probably because it looks intimidating. 14.7 Raising an Exception As you just saw, you can purposefully break your application by adding characters that Rails doesn\u2019t understand. However, there is a better way to force your program to halt, called raising an exception . Let\u2019s try it. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name raise 'Deliberate Failure' end end You can throw an error by using the raise keyword from the Ruby API. You can provide any error message you\u2019d like in quotes following raise . Here\u2019s the console log after you try to visit the home page: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Completed 500 Internal Server Error in 6ms (ActiveRecord: 0.0ms) RuntimeError - Deliberate Failure: app/controllers/visitors_controller.rb:7:in `new' . . . Before we continue, let\u2019s remove the deliberate failure. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name end end Rails and the Ruby API provide a rich library of classes and methods to raise and handle exceptions. For example, you might want to display an error if a user enters a birthdate that is not in the past. Rails includes various exception handlers to display errors in production so users will see a helpful web page explaining the error. 14.8 Git There\u2019s no need to save any of the changes we made for troubleshooting. You could go to each file and carefully remove the debugging code you added. But there\u2019s an easier way. Check which files have changed: $ git status Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: app/controllers/visitors_controller.rb modified: app/models/owner.rb no changes added to commit (use \"git add\" and/or \"git commit -a\") Use Git to revert your project to the most recent commit: $ git reset --hard HEAD The Git command git reset \u2013hard HEAD discards any changes you\u2019ve made since the most recent commit. Check the status to make sure: $ git status On branch master nothing to commit, working directory clean We\u2019ve cleaned up after our troubleshooting exercise. Chapter 15 Just Enough Ruby Experienced Rails developers debate whether beginners should study Ruby before learning Rails. By all means, if you love the precision and order of programming languages, dive into the study of Ruby from the beginning. But most people don\u2019t delay starting Rails while learning Ruby; realistically, you\u2019ll retain more knowledge of Ruby if you learn it as you build things in Rails. That is the approach we\u2019ve taken in this book. You\u2019ve already built a simple Rails application and used Ruby as you did so. 15.1 Reading Knowledge of Ruby What you need, more than anything, when you start working with Rails, is reading knowledge of Ruby. With a reading knowledge of Ruby you\u2019ll avoid feeling overwhelmed or lost when you encounter code examples or work through a tutorial. Later, as you tackle complex projects and write original code, you\u2019ll need to know enough of the Ruby language to implement the features you need. But as a student, you\u2019ll be following tutorials that give you all the Ruby you need. Your job is to recognize the language keywords and use the correct syntax when you type Ruby code in your text editor. To that end, this chapter will review the Ruby keywords and syntax you\u2019ve already learned. And you\u2019ll extend your knowledge so you\u2019ll be prepared for the Ruby you\u2019ll encounter in upcoming chapters. 15.2 Ruby Example To improve your reading knowledge of Ruby, we\u2019ll work with an example file that contains a variety of Ruby expressions. We won\u2019t use this file in our tutorial application, so you\u2019ll delete it at the end of this chapter. But we\u2019ll approach it as real Ruby code, so make a file and copy the code using your text editor. First we have to consider where the file should go. It will not be a model, view, controller, or any other standard component of Rails. Rails has a place for miscellaneous files that don\u2019t fit in the Rails API. We\u2019ll create the file in the lib/ folder. That\u2019s the folder you\u2019ll use for any supporting Ruby code that doesn\u2019t fit elsewhere in the Rails framework. Create a file lib/example.rb : class Example < Object # This is a comment. attr_accessor :honorific attr_accessor :name attr_accessor :date def initialize(name,date) @name \\= name @date \\= date.nil? ? Date.today : date end def backwards_name @name.reverse end def to_s @name end def titled_name @honorific ||= 'Esteemed' titled_name \\= \"#{@honorific} #{@name}\" end def december_birthdays born_in_december \\= [ ] famous_birthdays.each do |name, date| if date.month \\== 12 born_in_december << name end end born_in_december end private def famous_birthdays birthdays \\= { 'Ludwig van Beethoven' \\=> Date.new(1770,12,16), 'Dave Brubeck' \\=> Date.new(1920,12,6), 'Buddy Holly' \\=> Date.new(1936,9,7), 'Keith Richards' \\=> Date.new(1943,12,18) } end end In some ways, this Ruby code is like a poem from Lewis Carroll: 'Twas brillig, and the slithy toves Did gyre and gimble in the wabe; All mimsy were the borogoves, And the mome raths outgrabe. \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch! Beware the Jubjub bird, and shun The frumious Bandersnatch!\" The poem corresponds to the rules of English syntax but is nonsense. The code follows the rules of Ruby syntax, and unlike the poem, uses meaningful words. But it is unclear how the author intends anyone to use the code. If you\u2019re beginning a career as a Rails developer, this won\u2019t be the last time you look at code and wonder what the author was intending. In this case, I just want to give you some code that illustrates typical Ruby syntax and structure. 15.3 Ruby Keywords When reading Ruby code, the first challenge is determining which words are Ruby keywords and which were made up by the developer. Code is only strings of characters. But some strings have special meaning for everyone and all others are arbitrary words that only have meaning to an individual developer. As you gain experience, you\u2019ll recognize Ruby keywords because you\u2019ve seen them before. You\u2019ll also recognize a developer\u2019s made-up words because of their position relative to other words and symbols. Some made-up words will be obvious because they are just too idiosyncratic to be part of the Ruby language. For example, you\u2019ll rightly guess that myapp or fluffycat are not part of the Ruby language. If you\u2019re reading a Lewis Carroll poem, you could look up words in a dictionary to see if you find them. There is only one way to be sure which words are part of the Ruby language: Check the Ruby API. As an exercise, pick one of the words from the example code that you think might be a Ruby keyword and search the API to find it. If you want to be a diligent student, you can check every keyword in the example code to find out whether it is in the Ruby API. It is more practical to learn to recognize Ruby keywords, which we\u2019ll do next. 15.3.1 API Documentation The Ruby API documentation lists every keyword in the language: ruby-doc.org - the official Ruby API apidock.com/ruby - Ruby API docs with usage notes 15.4 Ruby Files When we write code, we save it in files. We\u2019ve added our miscellaneous example file to the lib/ folder. By convention, Ruby files end with the file extension .rb . 15.4.1 Using IRB In the \u201cTroubleshooting\u201d chapter, you used IRB (the Interactive Ruby Shell) to try out Ruby code. You can use IRB to try out the example code in the console. $ irb >> load 'lib/example.rb' \\=> true >> require 'date' \\=> true >> ex \\= Example.new('Daniel',nil) \\=> #<Example:0x007fb46c9eecd8 @name=\"Daniel\", @date=# \\> list \\= ex.december\\_birthdays \\=> [\"Ludwig van Beethoven\", \"Dave Brubeck\", \"Keith Richards\"] >> Entering the load directive and the filename brings the code into IRB. The require \u2019date\u2019 statement loads the Ruby date library. The statement ex = Example.new(\u2019Daniel\u2019,nil) creates an object from the Example class. The ex.december_birthdays method returns an array of names. Remember you can use Control-d to exit from IRB. Now, for practice, we\u2019ll read the Ruby code. 15.5 Whitespace and Line Endings Whitespace characters such as spaces and tabs are generally ignored in Ruby code, except when they are included in strings. There are several special cases where whitespace is significant in Ruby expressions but you are not likely to encounter these cases as a beginning Rails developer. Some programming languages (Java and the C family) require a semicolon as a terminator character at the end of statements. Ruby does not require a semicolon to terminate a statement. Instead, if the Ruby code on a line is a complete expression, the line ending signifies the end of the statement. If the line ends with a + or other operator, or a backslash character, the statement is split into multiple lines. 15.6 Comments Ruby ignores everything that is marked as a comment. Use comments for notes to yourself or other programmers. # This is a comment. You can also turn code into comments if you don\u2019t want the code to run. This is a common trick when you want to \u201cturn off\u201d some part of your code but you don\u2019t want to delete it just yet, because you are trying out alternatives. 15.7 The Heart of Programming Three principles are at the heart of all programming: syntax conditional execution transformation Computers allow no ambiguity. Code must exactly follow the syntax of a language. Typos, guesses, and code that is almost-but-not-quite right will simply fail, often without any helpful error messages. Computers seem intelligent because they can execute code conditionally . You can write a program so that given one set of conditions, certain parts of the code will execute, and given different conditions, other parts of the code will execute. Lastly, programs are written to transform abstractions from one form to another. That\u2019s why computer programs look like math. When we learn simple arithmetic, we learn we can take the symbols for numbers and add them together to make a different number. Computer programs do more than add numbers; a program can transform words and other abstractions. 15.8 Assignment In Ruby, like many other programming languages, the equals sign indicates we are assigning a value. name \\= 'Foobar Kadigan' Assignment is the first step to transformation. Here \u2019Foobar Kadigan\u2019 is a string of letters. The equals sign is the assignment operator. And name is a variable that stores the value so it can be easily reused. We don\u2019t have to type \u2019Foobar Kadigan\u2019 every time we need a name; we can use name instead. Just as we can assign a value to a variable, we can reassign a new value whenever we want. That is why we call them variables; the value can vary. name \\= 'Mr. Foobar Kadigan' Variables can be assigned strings of letters, numbers, or anything else. \u201cAnything else\u201d is very broad because we can use Ruby to make complex structures that contain data and also \u201cdo work.\u201d These complex structures are objects and we say that Ruby is object-oriented because it is easy to work with objects in Ruby. 15.9 Object-Oriented Terminology Software architects use a common vocabulary to talk about programming languages: class instance or object method attribute or property inheritance class hierarchy There are three ways to learn what these words mean. You can memorize the definitions. You can write code and intuitively grasp the meanings. Or you can gain an understanding by applying metaphors. 15.9.1 Houses For example, some programming textbooks attempt to explain a class like this: A blueprint for a house design is like a class definition . All the houses built from that blueprint are objects of a class we could call House. 15.9.2 Vehicles Or: The concept of \u201cvehicle\u201d is like a class . Vehicles can have attributes , like color or number of doors. They have behavior, or methods , like buttons that turn on lights or honk a horn. The concepts of \u201ctruck\u201d or \u201ccar\u201d are also classes, inheriting common characteristics from a superclass \u201cvehicle.\u201d The blue car in your driveway with four doors is an object, a particular instance of the class \u201ccar.\u201d 15.9.3 Cookies I like the cookie metaphor the best. A class definition is like a cookie cutter. Bits in the computer memory are like cookie dough. The cookie cutter makes as many individual cookies as you want. Each cookie is an instance of the Cookie class, with the same shape and size as the others. Cookies are objects . You can decorate each cookie with sprinkles, which are attributes that are unique to each instance. Some cookies get red sprinkles, some get green, but the shape remains the same. Running a program is like baking. The cookies change state from raw to cooked. Sticking a toothpick in a cookie is like calling a method . The method returns a result that tells you about the state: Is it done? 15.9.4 Limitations of Metaphors Metaphors are imperfect. If baking was like running a program, all the cookies would disappear as soon as the oven was turned off. When a software program contains a \u201ccar\u201d model, it doesn\u2019t fully model cars in the physical world. It represents an abstraction of characteristics a programmer deems significant. Let\u2019s make a model for a Person that contains an attribute Gender. What values are possible for the attribute Gender? For many years, Facebook offered two choices, male and female. In 2014, Facebook suddenly offered a choice of over fifty gender terms. As Sarah Mei discusses in a blog post, Why Gender is a Text Field on Diaspora , your assumptions have consequences when you build a model. Most classes in software APIs don\u2019t model anything in the real world. They typically represent an abstraction, like an Array or a Hash, which inherits characteristics from another abstraction, for example, a Collection. Given the limitations of metaphors, maybe it is easier to simply say that software allows us to create abstractions that are \u201cmade real\u201d and then manipulated and transformed. Terminology such as class and instance describe the abstractions and the relationships among them. 15.9.5 Definitions Here are definitions for some of the terms we encounter when we consider Rails from the perspective of a software architect: class an abstraction that encapsulates data and behavior class definition written code that describes a class instance or object a unique copy of a class that exists only while a program is running *inheritance a way to make a class by borrowing from another class class hierarchy classes that are related by inheritance method a command that returns data from an object *attribute or property data that can be set or retrieved from the object variable a name that can be assigned a value or object expression or statement*** any combination of variables, classes, and methods that returns a result Some of these terms are abstractions that are \u201cmade real\u201d in the Ruby API (such as class and method); others are just terms that describe code, much like we use terms such as \u201cadjective\u201d or \u201cnoun\u201d to talk about the grammar of the English spoken language. 15.10 Classes You don\u2019t have to create classes to program in Ruby. If you only write simple programs, you won\u2019t need classes. Classes are used to organize your code and make your software more modular. For the software architect, classes make it possible to create a structure for complex software programs. To use Rails, you\u2019ll use the classes and methods that are defined in the Rails API. There is one class at the apex of the Ruby class hierarchy: BasicObject . BasicObject is a very simple class, with almost no methods of its own. The Object class inherits from BasicObject . All classes in the Ruby and Rails APIs inherit behavior from Object . Object provides basic methods such as nil? and to_s (\u201cto string\u201d) for every class that inherits from Object . We create a class Example and inherit from Object with the < \u201cinherits from\u201d operator: class Example < Object . . . end The end statement indicates all the preceding code is part of the Example class. In Ruby, all classes inherit from the Object class, so we don\u2019t need to explicitly subclass from Object as we do here. The example just shows it for teaching purposes. Here is the Example class without the explicit subclassing from Object : class Example . . . end Much of the art of programming is knowing what classes are available in the API and deciding when to subclass to inherit useful methods. 15.11 Methods Classes give organization and structure to a program. Methods get the work done. Any class can have methods. Methods are a series of expressions that return a result (a value). We say methods describe the class behavior. A method definition begins with the keyword def and (predictably) ends with end . def backwards_name @name.reverse end Initializing the object and calling the method returns a result: ex \\= Example.new('Daniel',nil) my_backwards_name \\= ex.backwards_name \\=> leinaD We can also override a method from the parent class. def to_s @name end Here we are overriding the to_s (\u201cto string\u201d) method from the parent Object class. Ordinarily, the to_s method returns the object\u2019s class name and an object id. Here we will return the string assigned to the variable @name . Most times you won\u2019t override the to_s (\u201cto string\u201d) method. This example shows how you can override any method inherited from a parent class. 15.12 Dot Operator The \u201cdot\u201d is the method operator. This tiny punctuation symbol is a powerful operator in Ruby. It allows us to call a method to get a result. Sometimes we say we send a message to the object when we invoke a method, implying the object will send a result. Some classes, such as Date , provide class methods which can be called directly on the class without instantiating it first. For example, you can run this in the Rails console: Date.today \\=> Tue, 15 Oct 2013 More often, methods are called on variables which are instances of a class. For example: birthdate \\= Date.new(1990, 12, 22) \\=> Sat, 22 Dec 1990 birthmonth \\= birthdate.month \\=> 12 We can apply method chaining to objects. For example, String has methods reverse and upcase (among many others). We could write: nonsense \\= 'foobar' \\=> \"foobar\" reversed \\= nonsense.reverse \\=> \"raboof\" capitalized \\= reversed.upcase \\=> \"RABOOF\" It is easier to use method chaining and write: 'foobar'.reverse.upcase \\=> \"RABOOF\" Classes create a structure for our software programs and methods do all the work. 15.12.1 Question and Exclamation Methods You\u2019ll see question marks and exclamation points (sometimes called the \u201cbang\u201d character) used in method names. These characters are simply a naming convention for Ruby methods. The question mark indicates the method will return a boolean value (true or false). The bang character indicates the method is \u201cdangerous.\u201d In some cases it means the method will change the object rather just return a result. In Rails an exclamation point often means the method will throw an exception on failure rather than failing silently. 15.13 Initialize Method Objects are created from classes before they are used. As I suggested earlier, class definitions are cookie cutters; the Ruby interpreter uses them to cut cookies. When we call the new method, we press the cookie cutter into the dough and get a new object. All the cookies will have the same shape but they can be decorated differently, by sprinkling attributes of different values. The initialize method is one of the ways we sprinkle attributes on our cookie. def initialize(name,date) When we want to use an Example object and assign it to a variable, we will instantiate it with Example.new(name,date) . The new method calls the initialize method automatically. If we don\u2019t define an initialize method, the new method still works, inherited from Object , so we can always instantiate any class. 15.14 Method Parameters Methods are useful when they operate on data. If we want to send data to a method, we define the method and indicate it will accept parameters . Parameters are placeholders for data values. The values that are passed to a method are arguments . \u201cParameters\u201d are empty placeholders and \u201carguments\u201d are the actual values. In practice, \u201cparameters\u201d and \u201carguments\u201d are terms that are used interchangeably and not many developers will notice if you mix up the terms. Our initialize method takes name and date arguments: def initialize(name,date) Ruby is clever with method parameters. You can define a method and specify default values for parameters. You can also pass extra arguments to a method if you define a method that allows optional parameters. This makes methods very flexible. We separate our parameters with commas. For readability, we enclose our list of parameters in parentheses. In Ruby, parentheses are always optional but they often improve readability. 15.15 Variable In Ruby, everything is an object. We can assign any object to a variable. The variable works like an alias. We can use a variable anywhere as if it were the assigned object. The variable can be assigned a string, a numeric value, or an instance of any class (all are objects). name You can assign a new value to a variable anywhere in your method. You can assign a different kind of object if you want. You can take away someone\u2019s name and give them a number. We can create a variable player , assign it the string \u2019Jackie Robinson\u2019 , replace the value with an integer 42 , or even a date such as Date.new(1947,4,15) . 15.15.1 Symbol Obviously, we see many symbols when we read Ruby code, such as punctuation marks and alphanumeric characters. But symbol has a specific meaning in Ruby. It is like a variable, but it can only be assigned a value once. After the initial assignment, it is immutable ; it cannot be changed. You will recognize a symbol by the colon that is always the first character. :name Symbols are efficient and fast because the Ruby interpreter doesn\u2019t have to work to check their current values. You\u2019ll often see symbols used in Rails where you might expect a variable. 15.16 Attributes In an object, methods do the work and data is stored as variables. We can use the initialize method to input data to the object. We can\u2019t access data in variables from outside the object unless it is exposed as attributes . Classes can have attributes, which we can \u201cset\u201d and \u201cget.\u201d That is, we can establish a value for an attribute and retrieve the value by specifying the attribute name. Attributes are a convenient way to push data to an object and pull it out later. In Ruby, attributes are also called properties. Here we use the attr_accessor directive to specify that we want to expose honorific , name and date attributes. attr_accessor :honorific attr_accessor :name attr_accessor :date If we use attr_accessor to establish attributes, we can use the attribute names as methods. For example, we could write: ex \\= Example.new('Daniel',nil) my_name \\= ex.name In Ruby, attributes are just specialized methods that expose data outside the object. 15.17 Instance Variable Inside an object, an ordinary variable only can be used within the method in which it appears. If you use a variable with the same name in two different methods, it will have a different value in each method. The scope of a variable is limited to the method in which it is used. Often you want a variable to be available throughout an instance, within any method. You can declare an instance variable by using an @ (at) sign as the first character of the variable name. The instance variable can be used by any method after the class is instantiated. @name \\= name The values assigned to instance variables are unique for every instance of the class. If you create multiple instances of a class, each will have its own values for its instance variables. Here we create two instances of the Example class. The @name instance variable will be \u201cDaniel\u201d in the first instance and \u201cFoobar\u201d in the second instance. ex1 \\= Example.new('Daniel',nil) ex2 \\= Example.new('Foobar',nil) An instance variable is not visible outside the object in which it appears; but when you create an attr_accessor , it creates an instance variable and makes it accessible outside the object. 15.17.1 Instance Variables in Rails In a Rails controller, you\u2019ll often see a model assigned to an instance variable. Earlier we saw @owner = Owner.new when we instantiated an Owner model. We use an instance variable when we want a model to be available to the view template. Rails beginners learn the simple rule that you have to use the @ (at) sign if you want a variable to be available in the view. Intermediate Rails developers learn that the variable with the @ (at) sign is called an instance variable and is only available within the scope of the instance (practically speaking, to other methods in the class definition). That leads to a question: Why is an instance variable available inside a view? There is a good reason. A Rails view is NOT a separate class. It is a template and, under the hood, it is part of the current controller object. From the viewpoint of a programmer, a Rails controller and a view are separate files, segregated in separate folders. From the viewpoint of a software architect, the controller is a single object that evaluates the template code, so an instance variable can be used in the view file. This example shows us that the programmer and the software architect have different perspectives on a Rails application. Understanding Rails requires an integration of multiple points of view. 15.18 Double Bar Equals Operator I\u2019ve suggested that the best way to get help is to use Google or Stack Overflow to look for answers. But that\u2019s difficult when you don\u2019t know what symbols are called. Try googling \u201c||=\u201d and you\u2019ll get no results. Instead, try googling \u201cbar bar equals ruby\u201d or \u201cdouble pipe equals ruby\u201d and you\u2019ll find many explanations of the \u201cor equals\u201d operator. This is an example of mysterious shorthand code you\u2019ll often find in Rails. \u201d||=\u201d is used for conditional assignment. In this case, we only assign a value to the variable if no value has been previously assigned. @honorific ||= 'Esteemed' It is equivalent to this conditional expression: if not x x \\= y end Conditional assignment is often used to assign a \u201cdefault value\u201d when no other value has been assigned. 15.19 Conditional Conditional logic is fundamental to programming. Our code is always a path with many branches. When the Ruby interpreter encounters an if keyword, it expects to find an expression which evaluates as true or false (a boolean ). If the expression is true, the statements following the condition are executed. If the expression is false, any statements are ignored, unless there is an else , in which case an alternative is executed. if date.month \\== 12 . . . end Sometimes you\u2019ll see unless instead of if , which is a convenient way of saying \u201cexecute the following if the condition is false.\u201d In Ruby, the conditional expression can be a simple comparison, as illustrated above with the == (double equals) operator. Or if can be followed by a variable that has been assigned a boolean value. Or you can call a method that returns a boolean result. 15.20 Ternary Operator A basic conditional structure might look like this: if date.nil? @date \\= Date.today else @date \\= date end We test if date is undefined (nil). If nil, we assign today\u2019s date to the instance variable @date . If date is already assigned a value, we assign it to the instance variable @date . This is useful in the initialize(name,date) method in our example code because we want to set today\u2019s date as the default value for the instance variable @date if the parameter date is nil. Ruby developers like to keep their code tight and compact. So you\u2019ll see a condensed version of this conditional structure often, particularly when a default value must be assigned. This compact conditional syntax is named the ternary operator because it has three components. Here is the syntax: condition ? value_if_true : value_if_false Here is the ternary operator we use in our example code: @date \\= date.nil? ? Date.today : date This is another example of Ruby syntax that you must learn to recognize by sight because it is difficult to interpret if you have never seen it before. For more Ruby code that has been condensed into obscurity, see an article on Ruby Golf . Ruby golf is the sport of writing code that uses as few characters as possible. 15.21 Interpolation Rubyists love to find special uses for orthography such as hashmarks and curly braces. It seems Rubyists feel sorry for punctuation marks that don\u2019t get much use in the English language and like to give them new jobs. We already know that we can assign a string to a variable: name \\= 'Foobar Kadigan' We can also perform \u201cstring addition\u201d to concatenate strings. Here we add an honorific, a space, and a name: @honorific \\= 'Mr.' @name \\= 'Foobar Kadigan' titled_name \\= @honorific + ' ' + @name \\=> \"Mr. Foobar Kadigan\" Single quote marks indicate a string. In the example above, we enclose a space character within quote marks so we add a space to our string. You can eliminate the ungainly mix of plus signs, single quote marks, and space characters in the example above. Use double quote marks and you can perform interpolation , which gives a new job to the hashmark and curly brace characters: @honorific \\= 'Mr.' @name \\= 'Foobar Kadigan' titled_name \\= \"#{@honorific} #{@name}\" \\=> \"Mr. Foobar Kadigan\" The hashmark indicates any expression within the curly braces is to be evaluated and returned as a string. This only works when you surround the expression with double quote marks. Interpolation is cryptic when you first encounter the syntax, but it streamlines string concatenation. 15.22 Access Control Any method you define will return a result. Sometimes you want to create a method that only can be used by other methods in the same class. This is common when you need a simple utility method that is used by several other methods. Any methods that follow the keyword private should only be used by methods in the same class (or a subclass). private You often see private methods in Rails. Ruby provides a protected keyword as well, but the difference between protected and private is subtle and protected is seldom seen in Rails applications. 15.23 Hash Our example code includes a private method named famous_birthdays that returns a collection of names and birthdays of famous musicians. Computers have always been calculation machines; they are just as important in managing collections. One important type of collection is named a Hash. A Hash is a data structure that associates a key to some value. You retrieve the value based upon its key. This construct is called a dictionary , an associative array , or a map in other languages. You use the key to \u201clook up\u201d a value, as you would look up a definition for a word in a dictionary. You\u2019ll recognize a Hash when you see curly braces (again, Rubyists give a job to under-utilized punctuation marks). birthdays \\= { 'Ludwig van Beethoven' \\=> Date.new(1770,12,16), 'Dave Brubeck' \\=> Date.new(1920,12,6), 'Buddy Holly' \\=> Date.new(1936,9,7), 'Keith Richards' \\=> Date.new(1943,12,18) } Rubyists also like to create novel uses for mathematical symbols. The combination of an = (equals) sign and > (greater than) sign is called a hashrocket . The => (hashrocket) operator associates a key and value pair in a Hash. You\u2019ll often see hashrockets in code written before Ruby 1.9. Ruby 1.9 introduced a new syntax using colons instead of hashrockets. Whether with colons or hashrockets, you\u2019ll often see Hashes used in Rails. With Ruby 1.9 and later, here\u2019s how we associate key and value pairs in a Hash: birthdays \\= { beethoven: Date.new(1770,12,16), brubeck: Date.new(1920,12,6), holly: Date.new(1936,9,7), richards: Date.new(1943,12,18) } Here, instead of using a string as the key, we are using Ruby symbols, which enable faster processing. The : (colon) character associates the key and value. Ordinarily, a symbol is defined with a leading colon character. In a Hash, a trailing colon makes a string into a symbol. If you want to transform a string containing spaces into a symbol in a Hash, you can do it, though the syntax is awkward: birthdays \\= { 'Ludwig van Beethoven': Date.new(1770,12,16) } 15.24 Array An Array is a list. Arrays can hold objects of any data type. In fact, arrays can contain a mix of different objects. For example, an array can contain a string and another array (this is an example of a nested array ). An array can be instantiated with square brackets: born_in_december \\= [ ] We can populate the array with values when we create it: my_list \\= ['apples', 'oranges'] If we don\u2019t want to use quote marks and commas to separate strings in a list, we can use the %w syntax: my_list \\= %w( apples oranges ) We can add new elements to an array with a push method: my_list \\= Array.new \\=> [] my_list.push 'apples' \\=> [\"apples\"] my_list.push 'oranges' \\=> [\"apples\", \"oranges\"] In our example code, we use the << shovel operator to add items to the array: born_in_december << name A Ruby array has close to a hundred available methods, including operations such as size and sort . See the Ruby API for a full list. 15.25 Iterator Of all the methods available for a Ruby collection such as Hash or Array, the iterator may be the most useful. You\u2019ll recognize an iterator when you see the each method applied to a Hash or Array: famous_birthdays.each The each keyword is always followed by a block of code. Each item in an Array, or key-value pair in a Hash, is passed to the block of code to be processed. 15.26 Block You can recognize a block in Ruby when you see a do ... end structure. A block is a common way to process each item when an iterator such as each is applied to a Hash or Array. In our example, we iterate over the famous_birthdays hash: famous_birthdays.each do |name, date| . . . end Within the two pipes (or bars), we assign the key and value to two variables. The block is like an unnamed method. The two variables are available only within the block. As each key-value pair is presented by the iterator, the variables are assigned, and the statements in the block are executed. In our example code, we evaluate each date in the famous_birthdays hash to determine if the musician was born in December. When we find a December birthday, we add the name of the musician to the born_in_december array: famous_birthdays.each do |name, date| if date.month \\== 12 born_in_december << name end end When you use a block within a method, any variable in your method is available within the block. That\u2019s why we can add name to the array born_in_december . Computer scientists consider a block to be a programming language construct called a closure . Ruby has other closures, including the proc (short for procedure) and the lambda . Though blocks are common you\u2019ll seldom see procs or lambdas in ordinary Rails code. They are more common in the Rails source code where advanced programming techniques are used more frequently. The key point to know about a block (or a proc or a lambda) is that it works like a method. Though you don\u2019t see a method definition, you can use a block to evaluate a sequence of statements and obtain a result. 15.27 Rails and More Keywords We\u2019ve looked at only a few of the keywords and constructs you will see in Ruby code. The exercise has improved your Ruby literacy, so you\u2019ll have an easier time reading Ruby code. Nothing in the exercise is Rails. The example code only uses keywords from the Ruby API. Rails has its own API, with hundreds of classes and methods. The Rails API uses the syntax and keywords of the Ruby language to construct new classes and create new keywords that are specific to Rails and useful for building web applications. We say Ruby is a general-purpose language because it can be used for anything. Rails is a domain-specific language (DSL) because it is used only by people building web applications (in this sense, \u201cdomain\u201d means area or field of activity). Ruby is a great language to use for building a DSL, which is why it was used for Rails. Unlike some other programming languages, Ruby easily can be extended or tweaked. For example, developers can redefine classes, add extra methods to existing classes, and use the special method_missing method to handle method calls that aren\u2019t previously defined. Software architects call this metaprogramming which simply means clever programming that twists and reworks the programming language. When you add a gem to a Rails project, you\u2019ll add additional keywords. Some of the most powerful gems add their own DSLs to your project. For example, the Cucumber gem provides a DSL for turning user stories into automated tests. Adding Rails, additional gems, and DSLs provides powerful functionality at the cost of complexity. But it all conforms to the syntax of the Ruby language. As you learn to recognize Ruby keywords and language structures, you\u2019ll be able to pick apart the complexity and make sense of any code. 15.28 More Ruby To develop your proficiency as a Rails developer, I hope you will make an effort to learn Ruby as you learn Rails. Don\u2019t be lazy; when you encounter a bit of Ruby you don\u2019t understand, make an effort to find out what is going on. Spend time with a Ruby textbook or interactive course when you work on Rails projects. 15.28.1 Collaborative Learning The best way to learn Ruby is to actually use it. That\u2019s the concept behind this site: Exercism.io With Exercism, you\u2019ll work though code exercises and get feedback from other learners. 15.28.2 Online Tutorials TryRuby.org - free browser-based interactive tutorial from Code School Codecademy Ruby Track - free browser-based interactive tutorials from Codecademy Ruby Koans - free browser-based interactive exercises from Jim Weirich and Joe O\u2019Brien Ruby in 100 Minutes - free tutorial from JumpstartLab Code Like This - free tutorials by Alex Chaffee RailsBridge Ruby - basic introduction to Ruby CodeSchool Ruby Track - instructional videos with in-browser coding exercises 15.28.3 Books Learn To Program - free ebook by Chris Pine Learn To Program - expanded $18.50 ebook by Chris Pine Learn Code the Hard Way - free from Zed Shaw and Rob Sobers Beginning Ruby - by Peter Cooper Programming Ruby - by Dave Thomas, Andy Hunt, and Chad Fowler Eloquent Ruby - by Russ Olsen Books by Avdi Grimm , including Confident Ruby and Objects on Rails . 15.28.4 Newsletters Practicing Ruby - $8/month for access to over 90 helpful articles on Ruby RubySteps - weekly lessons by email from Pat Maddox 15.28.5 Screencasts RubyTapas - $9/month for access to over 100 screencasts on Ruby 15.29 Git There\u2019s no need to save the file lib/example.rb file we created to learn Ruby. You can simply delete the file: $ rm lib/example.rb Check the Git status to make sure the file is gone: $ git status On branch master nothing to commit, working directory clean We\u2019ve cleaned up after our Ruby exercise. From here on, we\u2019re done with silly code examples. No more fooling around. With the next chapter, we start building a real-world Rails website. Chapter 16 Layout and Views In previous chapters we created a dynamic home page and learned techniques for troubleshooting. In this chapter we\u2019ll look closely at view files, particularly the application layout, so we can organize the design of our web pages. We\u2019ll also learn how to add a CSS stylesheet to improve the graphic design of our web pages. This chapter covers a lot of ground, so take a break before jumping in, or pace yourself to absorb it all. 16.1 Template Languages HTML is intended for markup, which means applying formatting to a text file. For a web application, ordinary HTML is not sufficient; we need to mix in Ruby code. We\u2019ll use a templating language that gives us a syntax for mixing HTML tags and Ruby code. The Ruby code will be processed by a templating engine built into Rails. The output will be pure HTML sent to the browser. The most popular templating language available for Rails is ERB , Embedded Ruby, which is the Rails default. In the \u201cConcepts\u201d chapter in Book One, you learned that components of Rails can be mixed for different \u201cstacks.\u201d Some developers substitute Haml or Slim for ERB. We\u2019ll use ERB in this book because it is the most popular. 16.2 Introducing the Application Layout We\u2019ve already created the view file for our home page. The file app/views/visitors/new.html.erb looks like this: Home Welcome to the home of < %= @owner.name %>. I was born on < %= @owner.birthdate %>. Only < %= @owner.countdown %> days until my birthday! The first line in the file contains an HTML heading tag, <h3> , with headline text, \u201cHome.\u201d When you used the browser Developer Tools view to see the HTML file received by the server, you saw this: LearnRails Home Welcome to the home of Foobar Kadigan. I was born on 1990-09-22. Only 126 days until my birthday! If you\u2019ve built websites before, you\u2019ll recognize the HTML file conforms to the HTML5 specification, with a DOCTYPE , <head> and <body> tags, and miscellaneous tags in the HEAD section, including a title and various CSS and JavaScript assets. If you look closely, you\u2019ll see some HTML attributes you might not recognize, for example the data-turbolinks-track attribute. That is added by Rails to support turbolinks , for faster loading of webpages. For the most part, everything is ordinary HTML. But only part of it originates from the view file we\u2019ve created for our home page. 16.3 Where did all the extra HTML come from? The final HTML file is more than twice the size of the view file. The additional tags come from the default application layout file. Rails has combined the Visitors#New view with the default application layout file. To be precise, the new method in the Visitors controller creates the home page by combining two files: the application layout file app/views/layouts/application.html.erb the Visitors#New template in the file app/views/visitors/new.html.erb We say Rails \u201crenders\u201d (or \u201cdelivers\u201d) a new view by combining two files. Let\u2019s examine the application layout file. Open the file app/views/layouts/application.html.erb : LearnRails <%= csrf_meta_tags %> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %> < %= yield %> Static pages delivered from the public folder do not use the default application layout. But every page generated by the model-view-controller architecture in the app/ folder incorporates the default application layout, unless you specify otherwise. The default application layout is where you put HTML that you want to include on every page of your website. Remember when we looked at the hidden code in the controller that renders a view? The controller uses the render method to combine the view file with the application layout. Here\u2019s the Visitors controller, again, with the hidden render method revealed: class VisitorsController < ApplicationController def new @owner \\= Owner.new render 'visitors/new' end end The render method combines the app/views/visitors/new.html.erb view file with the app/views/layouts/application.html.erb application layout. Alternatively, you could tell the controller to render the view without any application layout: render 'visitors/new', :layout \\=> false Or you could specify an alternative layout file, for example app/views/layouts/special.html.erb : render 'visitors/new', :layout \\=> 'special' An alternative layout can be useful for special categories of pages, such as administrative pages or landing pages. We won\u2019t use alternative layouts in this tutorial application, but it\u2019s good to know they are an option. The reference RailsGuides: Layouts and Rendering in Rails explains more about using alternative layouts. 16.4 Yield How does the render method insert the view file in the application layout? How do the two files get combined? Notice that the default application layout contains the Ruby keyword yield . . . . <%= yield %> . . . The yield keyword is replaced with a view file that is specific to the controller and action, in this case, the app/views/visitors/new.html.erb view file. The content from the view is inserted where you place the yield keyword. The yield keyword pulls in another view file. 16.5 Yield Variations We won\u2019t do it, but you could also use the yield keyword to insert a sidebar or a footer. Rails provides ways to insert content into a layout file at different places. The content_for method is helpful when your layout contains distinct regions such as sidebars and footers that should contain their own blocks of content. For example, you could create an application layout that includes a sidebar. This is just an example, so don\u2019t add it to the application you are building: LearnRails <%= csrf_meta_tags %> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %> < %= yield %> < %= yield :sidebar %> This view file provides both the main content and a sidebar: <% content_for :sidebar do %> Contact Info Email: [\\[email protected\\]](/cdn-cgi/l/email-protection) <% end %> Main Welcome! This section gets inserted at the <%= yield :sidebar %> location: <% content_for :sidebar do %> Contact Info Email: [\\[email protected\\]](/cdn-cgi/l/email-protection) <% end %> . . . The rest of the file gets inserted at the main <%= yield %> location. Again, don\u2019t add this to your application. I\u2019m just offering it as an example of multiple yield statements. The reference RailsGuides: Layouts and Rendering in Rails explains more about using yield and content_for . 16.6 ERB Delimiters Earlier, we saw ERB <%= ... %> delimiters allow us to insert Ruby expressions which are replaced by the result of evaluating the code. Here is an example that displays the number 4 <%= 2 + 2 %> Look closely and you\u2019ll see this ERB delimiter is slightly different: <% 3.times do %> list item <% end %> An ERB delimiter that does not contain the = (equals) sign will execute Ruby code but will not display the result. It is commonly used to add Ruby blocks to HTML code, so you\u2019ll often see do and end statements within ERB <% ... %> delimiters. The example above will create three list items, like this: list item list item list item A third version of the ERB delimiter syntax is rarely seen: <%# this is a comment %> It is only used for adding comments. The expression within the ERB <%# ... %> delimiters will not execute and will not appear when the page is output as HTML. 16.7 Introducing View Helpers We can use ERB delimiters to create Rails view helpers . We\u2019ve seen how ERB delimiters can enclose Ruby code. In the application layout file, the <%= ... %> delimiters don\u2019t include anything that looks like Ruby code. For example, we see <%= csrf_meta_tags %> which seems to be neither HTML nor anything from the Ruby API. In fact, this expression is Ruby code, but it is from the Rails API and only found in Rails applications. Ruby is an ideal choice for a web application development platform such as Rails because it can easily be used to create a domain-specific language (or DSL ). Much of Rails is a domain-specific language. The Smalltalk programming language was famous for its slogan \u201cCode should read like a conversation.\u201d Ruby, which borrows much from Smalltalk, makes it easy to add new words to the conversation. We can add new keywords that produce complex behaviour, creating entire new APIs such as Rails. Ruby makes it easy for the Rails core team to add keywords such as csrf_meta_tags that are additions to the Ruby language. In this case, Ruby\u2019s ability to produce a domain-specific language gives us Rails view helpers . Think of Rails view helpers as \u201cmacros to generate HTML.\u201d You may have used macros to automate a series of commands in World of Warcraft or other games. If you\u2019re an office worker, you may have used macros in Microsoft Word or Excel. A Rails view helper is a keyword that expands into a longer string of HTML tags and content. In this case, the csrf_meta_tags view helper expands into two lines of HTML: Why do we need this cryptic code? It turns out that almost any website that accepts user input via a form is vulnerable to a security bug (an exploit ) named a cross-site request forgery . To prevent rampant CSRF exploits, the Rails core team includes the csrf_meta_tags view helper in the default application layout. Rails provides a number of similar features that make websites more secure. A Rails view file becomes much less mysterious when you realize that many of the keywords you see are view helpers. Strange new keywords may be part of the Rails API. Or they may be provided by gems you\u2019ve added (gem developers often use the Ruby DSL capability to create new keywords). Think of it this way: Ruby gives developers the power to create an unlimited number of new \u201cHTML tags.\u201d These tags are not really HTML because they are not part of the HTML specification. But they serve as shortcuts to produce complex snippets of HTML and content. Now that we\u2019ve learned about view helpers, we can start building our default application layout. 16.8 The Rails Layout Gem Every Rails application needs a well-designed application layout. The Rails default starter application, which we get when we run rails new , provides a barebones application layout. It is purposefully simple so developers can add the code they need to accommodate any front-end framework (we\u2019ll look closely at front-end frameworks in the next chapter). In this chapter we\u2019ll start with a simple application layout file, adding a little CSS for simple styling. In the next chapter, we\u2019ll upgrade the application layout file to use the Bootstrap front-end framework. To make it easy, we\u2019ll use the rails_layout gem to generate files for an application layout. In this chapter, we\u2019ll use the rails_layout gem to create our basic layout and CSS files. In the next chapter, we\u2019ll use the rails_layout gem to create layout files for Bootstrap. In your Gemfile , you\u2019ve already added: gem 'rails_layout' and previously run $ bundle install . Rails provides the rails generate command to run simple scripts that are packaged into gems. The rails_layout gem uses the rails generate command to set up files we need. Run: $ rails generate layout:install simple --force The \u2013force argument will force the gem to replace the existing app/views/layouts/application.html.erb file. If you have the app/views/layouts/application.html.erb file open in your text editor, it will change. The rails_layout gem will rename the file: app/assets/stylesheets/application.css to: app/assets/stylesheets/application.css.scss The gem will add (or modify) five files: app/views/layouts/application.html.erb app/assets/stylesheets/simple.css app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/_navigation_links.html.erb Examining these files closely will reveal a great deal about the power of Rails. We\u2019ll dedicate the rest of this chapter to exploring the contents of these files. 16.9 Basic Boilerplate Open the file app/views/layouts/application.html.erb : <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content= \"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> Some of this code is already familiar. You\u2019ll recognize the standard HTML DOCTYPE , <head> , and <body> tags. We\u2019ve already discussed the yield keyword. We\u2019ve seen the <%= ... %> delimiters surrounding the csrf_meta_tags view helper: csrf_meta_tags - generates <meta> tags that prevent cross-site request forgery The rest of the file may be unfamiliar. We\u2019ll examine it line by line. 16.10 Adding Boilerplate Webmasters who build static websites are accustomed to setting up web pages with \u201cboilerplate,\u201d or basic templates for a standard web page. The well-known HTML5 Boilerplate project has been recommending \u201cbest practice\u201d tweaks to web pages since 2010. Very few of the HTML5 Boilerplate recommendations are relevant for Rails developers, as Rails already provides almost everything required. We\u2019ll discuss one important boilerplate item and a few \u201cnice to have\u201d extras. If you want to learn more, the article HTML5 Boilerplate for Rails Developers looks at the recommendations. 16.10.1 Viewport The viewport metatag improves the presentation of web pages on mobile devices. Setting a viewport tells the browser how content should fit on the device\u2019s screen. The tag is required for either Bootstrap or Zurb Foundation front-end frameworks. The viewport metatag looks like this: Apple\u2019s developer documentation on Configuring the Viewport provides details. 16.10.2 Title and Description If you want to maximize traffic to your website, you should make your web pages search-engine friendly. That means adding title and description metatags. Google uses contents of the title tag to display titles in search results. And it will sometimes use the content of a description metatag in search results snippets. See Google\u2019s explanation of how it uses Site Title and Description . Good titles and descriptions improve clickthrough from Google searches. Title and description looks like this: <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content=\"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> The rails_layout gem has created a default title and description based on our project name. Later in the tutorial, we\u2019ll see how to use a content_for statement to set a title and description for each individual page. The code is complex if you haven\u2019t seen advanced Ruby before. It uses the Ruby ternary operator which maximizes compactness at the price of introducing obscurity. You\u2019ll recall from the \u201cJust Enough Ruby\u201d chapter that it is a fancy conditional statement that says, \u201cif content_for?(:title) is present in the view file, use yield(:title) to include it, otherwise just display \u2018Learn Rails\u2019.\u201d 16.11 Asset Pipeline You may have noticed these Rails helper methods: stylesheet_link_tag javascript_include_tag These are tags that add CSS and JavaScript to the web page using the Rails asset pipeline . The Rails asset pipeline utility is one of the most powerful features of the platform. It offers convenience to the developer and helps organize an application; more importantly, it improves the speed and responsiveness of any complex website. If you\u2019re going to do any front-end development with CSS or JavaScript in Rails, you must understand the Rails asset pipeline. Here\u2019s how it works. 16.11.1 Assets Without Rails When building non-Rails websites, webmasters add JavaScript to a page using the <script> tag. For every JavaScript file, they add an additional <script> tag, so a page HEAD section looks like this: Page that uses multiple JavaScript files The same is true for CSS files in non-Rails websites. You add a <link> tag for each stylesheet file. With multiple stylesheets, the HEAD section of your application layout might look like this: Page that uses multiple CSS files If you want to handle CSS and JavaScript without Rails, you can place your files in the public folder. If you do so, every time you add a JavaScript or CSS file, you must modify the application layout file. Instead, use the asset pipeline and simplify this. 16.11.2 Assets With Rails The asset pipeline consists of two folders: app/assets/javascripts/ app/assets/stylesheets/ Any JavaScript and CSS file you add to these folders is automatically added to every page. In development, when the web browser makes a page request, the files in the asset pipeline folders are combined together and concatenated as single large files, one for JavaScript and one for CSS. If you examine the application layout file, you\u2019ll see the tags that perform this service: <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> The HTML delivered to the browser looks like this: Using the asset pipeline, there is no need to modify the application layout file each time you create a new JavaScript or CSS file. Create as many files as you need to organize your JavaScript or CSS code and, in production, you\u2019ll automatically get one single file delivered to the browser. In development mode, Rails continues to deliver multiple files for easier debugging. In production, there\u2019s a big performance advantage with the asset pipeline. Requesting files from the server is a time-consuming operation for a web browser, so every extra file request slows down the browser. The Rails asset pipeline eliminates the performance penalty of multiple <script> or <link> tags. The Rails asset pipeline also compresses JavaScript and CSS files for faster page loads. The asset pipeline is an example of a Rails convention that helps developers build complex websites. It is not needed for a simple website that uses a few JavaScript or CSS files. But it is beneficial on bigger projects. The asset pipeline has limitations, especially for projects with complex front-end JavaScript. Rails developers who integrate JavaScript front-end frameworks such as React or Angular often choose not to use the asset pipeline. Instead they rely on JavaScript tooling such as Webpack to manage complex JavaScript assets. Now that you understand the purpose of the Rails asset pipeline, let\u2019s look at more of the code in the default application layout file. 16.12 Navigation Links Every website needs navigation links. You can add navigation links directly to your application layout but many Rails developers prefer to create a partial template \u2013\u2013a \u201cpartial\u201d\u2013\u2013to better organize the default application layout. 16.12.1 Introducing Partials A partial is similar to any view file, except the filename begins with an underscore character. Place the file in any view folder and you can use the render keyword to insert the partial. We\u2019re not going to add a footer to our tutorial application, but here is how we could do it. We\u2019d use the render keyword with a file named app/views/layouts/_footer.html.erb : <%= render 'layouts/footer' %> Notice that you specify the folder within the app/views/ directory with a truncated version of the filename. The render method doesn\u2019t want the _ underscore character or the .html.erb file extension. That can be confusing; it makes sense when you remember that Rails likes \u201cconvention over configuration\u201d and economizes on extra characters when possible. We\u2019re not going to add a footer to our application, but we will add navigation links by using a partial. First, let\u2019s learn about link helpers . 16.12.2 Introducing Link Helpers There\u2019s no rule against using raw HTML in our view files, so we could create a partial for navigation links that uses the HTML <a> anchor tag like this: Home About Contact Rails gives us another option, however. We can use the Rails link_to view helper instead of the HTML <a> anchor tag. The Rails link_to helper eliminates the crufty <> angle brackets and the unnecessary href=\"\" . More importantly, it adds a layer of abstraction, using the routing configuration file to form links. This is advantageous if we make changes to the location of the link destinations. Earlier, when we created a static \u201cAbout\u201d page, we first set the config/routes.rb file with a route to the \u201cAbout\u201d page: root to: redirect(\u2019/about.html\u2019) . Later we removed the static \u201cAbout\u201d page and set the config/routes.rb file with a route to the dynamic home page: root to: \u2019visitors#new\u2019 . If we used the raw HTML <a> anchor tag, we\u2019d have to change the raw HTML everywhere we had a link to the home page. Using the Rails link_to helper, we name a route and make any changes once, in the config/routes.rb file. When you use the Rails link_to helper, you\u2019ll avoid the problem of link maintenance that webmasters face on static websites. Some webmasters like to use absolute URLs, specifying a host name in the link, for example http://www.example.com/about.html . Absolute URLs are a headache when moving the site, for example from staging.example.com to www.example.com . The problem is avoided by using relative URLs, such as /about.html , about.html , or even ../about.html . But relative URLs are fragile, and moving files or directories often results in overlooked and broken links. Instead, with the Rails link_to helper, you always get the destination location specified in the config/routes.rb file. 16.12.3 Navigation Partial Examine the app/views/layouts/application.html.erb and you\u2019ll see the use of the navigation partial. We include the navigation partial in our application layout with the expression: . . . <%= render 'layouts/navigation' %> . . . Open the file app/views/layouts/_navigation.html.erb : < %= link\\_to 'Home', root\\_path %> < %= render 'layouts/navigation\\_links' %> You\u2019ll see the link_to helper. Here the link_to helper takes two parameters. The first parameter is the string displayed as the anchor text ( \u2019Home\u2019 ). The second parameter is the route. In this case, the route root_path has been set in the config/routes.rb file. The navigation partial includes another partial, which we\u2019ll call the navigation links partial: . . . <%= render 'layouts/navigation_links' %> . . . This demonstrates that one partial can include another partial, so that partials can be \u201cnested.\u201d 16.12.4 Navigation Links Partial In our simple application, there\u2019s no obvious reason to nest another partial. But we\u2019ll see in the next chapter that it is convenient, because we can isolate the complex markup required by Bootstrap from the simple list of links we need for navigation. Open the file app/views/layouts/_navigation_links.html.erb : <%# add navigation links to this file %> As we add pages to our application, we\u2019ll add links to this file. For now, we have nothing to add. 16.13 Flash Messages Rails provides a standard convention to display alerts (including error messages) and other notices (including success messages), called a flash message . The name comes from the term \u201cflash memory\u201d and should not be confused with the \u201cAdobe Flash\u201d web development platform that was once popular for animated websites. The flash message is documented in the RailsGuides: Action Controller Overview . Here\u2019s a flash message you might see after logging in to an application: Figure 16.1: Flash message in Rails. It is called a \u201cflash message\u201d because it appears on a page temporarily. When the page is reloaded or another page is visited, the message disappears. Typically, you will see only one flash message on a page. But there is no limit to the number of flash messages that can appear on a page. 16.13.1 Creating Flash Messages Flash messages are created in a controller. For example, we can add messages to the home page by modifying the file app/controllers/visitors_controller.rb like this: class VisitorsController < ApplicationController def new @owner \\= Owner.new flash[:notice] \\= 'Welcome!' flash[:alert] \\= 'My birthday is soon.' end end If you test the application after adding the messages to the VisitorsController, you\u2019ll see two flash messages appear on the page. Rails provides the flash object so that messages can be created in the controller and displayed on the rendered web page. In this example, we create a flash message by associating the object flash[:notice] with the string \u2019Welcome!\u2019 . We can assign other messages, such as flash[:alert] or even flash[:warning] . In practice, Rails uses only :notice and :alert as flash message keys so it is wise to stick with just these. 16.13.2 Flash and Flash Now You can control the persistence of the flash message by choosing from two variants of the flash directive. Use flash.now in the controller when you immediately render a page, for example with a render :new directive. With flash.now , the message will vanish after the user clicks any links. Use the simple variant, flash , in the controller when you redirect to another page, for example with a redirect_to root_path directive. If you use flash.now before a redirect, the user will not see the flash message because flash.now does not persist through redirects or links. If you use the simple flash directive before a render directive, the message will appear on the rendered page and reappear on a subsequent page after the user clicks a link. In our example above, we really need to use the flash.now variant because the controller provides a hidden render method. Update the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @owner \\= Owner.new flash.now[:notice] \\= 'Welcome!' flash.now[:alert] \\= 'My birthday is soon.' end end Using flash.now will make sure the message only appears on the rendered page and will not persist after a user follows a link to a new page. If you ever see a \u201csticky\u201d flash message that won\u2019t go away, you need to use flash.now instead of flash . 16.13.3 Explaining the Ruby Code If you\u2019re new to programming in Ruby, it may be helpful to learn how the flash object works. The flash object is a Ruby hash . You\u2019ll recall from the \u201cJust Enough Ruby\u201d chapter that a hash is a data structure that associates a key to some value. You retrieve the value based upon its key. This construct is called a dictionary in other languages, which is appropriate because you use the key to \u201clook up\u201d a value, as you would look up a definition for a word in a dictionary. Hash is a type of collection . Presumably, the Rails core contributors who implemented the code chose to use a collection so that a page could be given multiple flash messages. Because we have a collection with (possibly) multiple messages, we need to retrieve each message one at a time. We learned earlier that all collections support an iterator method named each . Iterators return all the elements of a collection, one after the other. The iterator returns each key-value pair, item by item, to a block . In Ruby, a block is delimited by do and end or { } braces. You can add any code to a block to process each item from the collection. Here is simple Ruby code to iterate through a flash object, outputting each flash message in an HTML div tag and applying a CSS class for styling: flash.each do |key, value| puts '' + value + '' end In this simple example, we use each to iterate through the flash hash, retrieving a key and value that are passed to a block to be output as a string. We\u2019ve chosen the variable names key and value but the names are arbitrary. In the next example, we\u2019ll use name and msg as variables for the key-value pair. The output string will appear as HTML like this: Welcome! My birthday is soon. Let\u2019s continue examining our layout files. 16.13.4 The Flash Messages Partial Flash messages are a very useful feature for a dynamic website. Code to display flash messages can go directly in your application layout file or you can use a partial. Examine the file app/views/layouts/_messages.html.erb : <% flash.each do |name, msg| %> <% if msg.is_a?(String) %> <%= content_tag :div, msg, :class \\=> \"flash_#{name}\" %> <% end %> <% end %> It improves on our simple Ruby example in several ways. First, the expression if msg.is_a?(String) serves as a test to make sure we only display messages that are strings. Second, we use the Rails content_tag view helper to create the HTML div . The content_tag helper eliminates the messy soup of angle brackets and quote marks we used to create the HTML output in the example above. Finally, we apply a CSS class and combine the word \u201cflash\u201d with \u201cnotice\u201d or \u201calert\u201d to make the CSS class. We include the flash messages partial in our application layout with the expression: . . . <%= render 'layouts/messages' %> . . . 16.14 HTML5 Elements Let\u2019s look again at the app/views/layouts/application.html.erb file. To complete our examination of the application layout file, we\u2019ll look at a few structural elements. These elements are not unique to a Rails application and will be familiar to anyone who has done front-end development. Notice the tags that are structural elements in the HTML5 specification: <header> <main> These elements add structure to a web page. The tags don\u2019t add any new behavior but make it easier to determine the structure of the page and apply CSS styles. We wrap the navigation partial in the <header> tag: < %= render 'layouts/navigation' %> The <header> tag is typically used for branding or navigation. Notice the main tag : < %= render 'layouts/messages' %> < %= yield %> We wrap our messages partial and yield expression in a <main role=\"main\"> element. The <main> tag is among the newest HTML5 elements (see the W3C specification for details). From the specification: \u201cThe main content area of a document includes content that is unique to that document and excludes content that is repeated across a set of documents such as site navigation links, copyright information, site logos.\u201d We follow the advice of the specification and wrap our unique content in the <main> tag. The specification recommends, \u201cAuthors are advised to use ARIA role=\u2019main\u2019 attribute on the main element until user agents implement the required role mapping.\u201d ARIA , the Accessible Rich Internet Applications Suite, is a specification to make web applications more accessible to people with disabilities. That means the role=\"main\" attribute is there for any web browsers that don\u2019t yet recognize the <main> tag, and may help people with disabilities. We could add a <footer> tag. It typically contains links to copyright information, legal disclaimers, or contact information. We don\u2019t have a footer in our tutorial application but you can add the <footer> tag, with additional content, if you want. 16.15 Application Layout Our application layout is complete. We don\u2019t have to add anything because the rails_layout gem has created everything we need. <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content= \"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> We have the viewport metatag, a title, and a description. We have partials for navigation links and flash messages. Finally we have HTML5 structural elements. That\u2019s all we need for now. In the next chapter, we\u2019ll revise it to support styling with Bootstrap. 16.16 Simple CSS So far, we\u2019ve examined four files that were added by the rails_layout gem: app/views/layouts/application.html.erb app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/_navigation_links.html.erb Let\u2019s examine the CSS file that was created by the rails_layout gem. Open the file app/assets/stylesheets/simple.css : /* * Simple CSS stylesheet for a navigation bar and flash messages. */ main { background-color: #eee; padding-bottom: 80px; width: 100%; } header { border: 1px solid #d4d4d4; background-image: linear-gradient(to bottom, white, #f2f2f2); background-color: #f9f9f9; -webkit-box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); -moz-box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; } ul.nav li { display: inline; } ul.nav li a { padding: 10px 15px 10px; color: #777777; text-decoration: none; text-shadow: 0 1px 0 white; } .flash_notice, .flash_alert { padding: 8px 35px 8px 14px; margin-bottom: 20px; text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5); border: 1px solid #fbeed5; -webkit-border-radius: 4px; -moz-border-radius: 4px; border-radius: 4px; font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; } .flash_notice { background-color: #dff0d8; border-color: #d6e9c6; color: #468847; } .flash_alert { background-color: #f2dede; border-color: #eed3d7; color: #b94a48; } If you already know CSS, you\u2019ll see we\u2019ve set a background color for the main section of the page. We\u2019ve also set styles for a header, navigation links, and flash messages. This book is about Rails, not CSS, so we won\u2019t examine this closely. For more on CSS, there are thousands of tutorials on the web, but I like these: Codeacademy HTML Dog Remember what we learned about the Rails asset pipeline. By default, any CSS file in the app/assets/stylesheets/ folder will be added automatically to the application.css file that is included in the default application layout. In the next chapter, we remove the app/assets/stylesheets/simple.css and use Bootstrap to supply styles for the header, navigation links, and flash messages. For now, the simple.css file adds some basic styling and layout to the application. 16.17 Test the Application Let\u2019s run the application to see how it looks with the new application layout. The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . If you experimented with adding flash messages \u201cWelcome\u201d and \u201cMy birthday is soon,\u201d you\u2019ll see the messages when you visit the home page. Our home page now has only one navigation link, for \u201cHome.\u201d We\u2019ll add links for \u201cAbout\u201d and \u201cContact\u201d pages soon. 16.18 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"update application layout\" $ git push Chapter 17 Front-End Framework This chapter discusses front-end development and design using CSS. I\u2019ll show you how to add style to a Rails application, using Bootstrap for a simple theme. What do we mean by \u201cfront-end development\u201d? A website back end is the Rails application that assembles files that are sent to the browser, plus a database and any other server-side services. A website front end is all the code that runs in the browser. Everything that controls the appearance of the website in the browser is the responsibility of a front-end developer, including page layout, CSS stylesheets, and JavaScript code. Front-end development has grown increasingly important as websites have become more sophisticated. And front-end technology has grown increasingly complex, to the degree that front-end development has become a job for specialists. Front-end developers are primarily concerned with: markup - the layout and structure of the page style - graphic design for visual communication interactivity - browser-based visual effects and user interaction Broader concerns include: cross-browser and cross-device functionality interaction design to improve website usability accessibility for users with physical or perceptual limitations For years, front-end development was haphazard; webmasters each had their own quirky techniques. Around the time that Rails became popular, front-end developers at large companies began to share best practices and establish open source projects to bring structure and consistency to front-end development, leading to development of CSS frameworks. 17.1 CSS Frameworks Web developers began putting together \u201cboilerplate\u201d CSS stylesheets as early as 2000, when browsers first began to fully support CSS. Boilerplate CSS made it easy to reuse CSS stylesheet rules from project to project. More importantly, designers often implemented \u201cCSS reset\u201d stylesheets to enforce typographic uniformity across different browsers. Engineers at Yahoo! released the Yahoo! User Interface Library (YUI) as an open source project in February 2006 . Inspired by an article by Jeff Croft , and reacting to the huge size of the YUI library, independent developers began releasing other CSS frameworks such as the 960 grid system and the Blueprint CSS framework. There are dozens of CSS frameworks . In general, they all seek to implement a common set of requirements: An easily customizable grid Some default typography A typographic baseline CSS reset for default browser styles A stylesheet for printing More recently, with the ubiquity of smartphones and tablets, CSS frameworks support responsive web design , accommodating differences in screen sizes across a range of devices. In tandem with the development of CSS frameworks, we\u2019ve seen the emergence of JavaScript libraries and frameworks. 17.2 JavaScript Libraries and Frameworks JavaScript has nothing like RubyGems, a built-in package manager for code libraries, so initially there were few open source JavaScript libraries. Now there are several competing JavaScript package managers and many software libraries. Prototype was one of the first open source JavaScript libraries, created by Sam Stephenson in February 2005 to improve JavaScript support in Ruby on Rails. MooTools , Dojo , and jQuery soon followed. Of these libraries, jQuery has become the most popular, largely because of thousands of modular jQuery plug-ins that implement a wide range of effects and widgets (web page features). These plug-ins are used to add visual effects and interactivity to web pages. Examples are drop-down menus, modal windows, tabbed panels, autocompletion search forms, and sliders or carousels for images. Even without plugins, jQuery is useful as a high-level interface for manipulating the browser DOM ( document object model ), to make it easy to do things like hiding or revealing HTML elements on a page. Any Rails application can use jQuery because it is included by default in any new Rails application. Libraries such as jQuery add functionality to server-side applications, such as those built with Rails. Other JavaScript libraries serve as fully featured web application development frameworks, allowing developers to build client-side applications that run in the browser and only interact with a server to read or write data. Examples of these full-fledged JavaScript frameworks are Ember.js , AngularJS , and Backbone.js . All use a variant of the model-view-controller (MVC) software design pattern to implement single-page applications which function more like desktop or mobile applications than websites. Developers who build a single-page application with one of these frameworks often use Ruby on Rails as a back end; an MVC JavaScript framework can replace all the Rails view files. None of these JavaScript frameworks dominate web application development like Ruby on Rails, but they are gaining popularity for single-page applications. We won\u2019t look at Ember.js, AngularJS, or Backbone.js in this book; they are an advanced topic and require entire books themselves. The biggest problem with adding JavaScript to Rails is the difficult-to-maintain \u201cJavaScript soup\u201d that results from adding JavaScript to Rails views. Ember.js, AngularJS, or Backbone.js are more than is needed for simply structuring JavaScript in Rails views. But there\u2019s a newer framework that can be used to dry up JavaScript soup. It\u2019s React , a JavaScript framework developed by engineers at Facebook. Unlike AngularJS or Ember.js, React only manages views, not connections to databases or routing of requests, so it is not a full-stack framework, just a framework for the view layer. React\u2019s approach to building web pages is abstract and complex. But React is a good choice for complex interactive features, if you\u2019re determined to avoid JavaScript soup in your Rails application. We won\u2019t look at JavaScript frameworks in this book, but we will use the Bootstrap framework to manage our CSS stylesheets. 17.3 Front-End Frameworks Front-end frameworks combine CSS and JavaScript libraries. Many elements that are found on sophisticated web pages, such as modal windows or tabs, require a combination of JavaScript and CSS. Combining CSS and JavaScript libraries in a common framework makes it possible to standardize and reuse common web page features. There are many responsive front-end frameworks to choose from, including: Bootstrap Zurb Foundation Material Design Lite Bourbon Neat Semantic UI and many others Each has its fans, though Bootstrap and Zurb Foundation are the most popular among Rails developers. Each adds a library of markup, styles, and standardized web page features such as modal windows, pagination, breadcrumbs, and navigation. Bootstrap is the best-known front-end framework. It is the result of an effort to document and share common design patterns and assets across projects at Twitter, released as an open source project in August 2011. Just ahead, we\u2019ll look at why we use Bootstrap in this book. But first, you\u2019ll need to learn about Sass. 17.4 CSS Preprocessing with Sass Ordinary CSS is not a programming language. As a result, CSS rules are verbose and often repetitive. To add efficiency to CSS, Bootstrap relies on a CSS preprocessor named Sass . Sass extends CSS to give it more powerful programming language features. As a result, your stylesheets can use variables, mixins, and nesting of CSS rules, just like a real programming language. For example, in Sass you can create a variable such as $blue: #3bbfce and specify colors anywhere using the variable, such as border-color: $blue . Mixins are like variables that let you use snippets of reusable CSS. Nesting eliminates repetition by layering CSS selectors. Sass is included in any new Rails application with the default sass-rails gem. 17.5 Bootstrap or Others? Which front-end framework should you use? Bootstrap or another such as Zurb Foundation? The Bootstrap team maintains a Ruby gem that provides a drop-in version of Bootstrap for Rails. Other front-end frameworks, such as Zurb Foundation, are also available as Ruby gems. But Bootstrap has a large developer community and many more third-party projects, as evidenced by a Big Badass List of Useful Twitter Bootstrap Resources . In its sheer magnitude, this list, from Michael Buckbee and Bootstrap Hero, demonstrates the popularity of Bootstrap and the vitality of its open source community. We\u2019ll use Bootstrap here because of its sheer popularity and solid support. Before I show you how to integrate Bootstrap with your Rails application, let\u2019s briefly consider matters of design. 17.6 Graphic Design Options There are three approaches to graphic design for your Rails application. If you\u2019re well-funded and well-connected, you can put together a team or hire a freelance graphic designer to implement a unique design, built from scratch using CSS or customized from a framework such as Bootstrap or Zurb Foundation. If you\u2019ve got strong design skills, or can partner with an experienced web designer, you\u2019ll get a custom design that expresses the purpose and motif of your website. A second approach is to use Bootstrap or another CSS framework to quickly add attractive CSS styling to your application. Many developers don\u2019t have the skill or resources to customize the design. Consequently, sites that use Bootstrap look very similar. If that\u2019s your situation, it\u2019s okay, really! It\u2019s better to have a decent site with the clean look of Bootstrap than to leak ugliness onto the web. A third option is to obtain a pre-designed theme for your website. You may have visited ThemeForest or other theme galleries that offer pre-built themes for a few dollars each. These huge commercial galleries offer themes for WordPress, Tumblr, or CMS applications such as Drupal or Joomla. They don\u2019t offer themes for Rails. Your best option is to convert open source themes designed with Bootstrap. You can visit sites such as Start Bootstrap , Bootswatch , or the Themestrap gallery to find Bootstrap themes. Whether you use a prepackaged theme or design your own layout, you\u2019ll need to know how to set up a front-end framework in Rails. We\u2019ll look at setting up Bootstrap next. 17.7 Bootstrap 3 or 4? At the time this was written, the new Bootstrap 4 version was in alpha release. The Bootstrap 4 version is significantly different from earlier versions. It has been in alpha for testing and feedback for over a year. Many Rails developers are already using the Bootstrap 4 version but almost all themes and third-party add-ons are only available for Bootstrap 3. Eventually, the Bootstrap 4 beta and final versions will be released but until then, I recommend sticking with Bootstrap 3. As a beginner, you\u2019ll find more resources and help for Bootstrap 3. We\u2019ll use it here for this tutorial. 17.8 Bootstrap Gem Bootstrap provides a standard grid for layout plus dozens of reusable components for common page elements such as navigation, forms, and buttons. More importantly, it gives CSS the kind of structure and convention that makes Rails popular for back-end development. Bootstrap is packaged as a gem. In your Gemfile , you\u2019ve already added: gem 'bootstrap-sass' and previously run $ bundle install . The bootstrap-sass gem provides the files required to integrate Bootstrap 3 with Rails. Developers who want to use the new Bootstrap 4 release will use the Bootstrap 4 gem . Rather than following the installation instructions provided in the Bootstrap documentation , we\u2019ll use the rails_layout gem to set up Bootstrap and create the files we need. 17.9 Rails Layout Gem with Bootstrap In the previous chapter, we used the rails_layout gem to configure the default application layout with HTML5 elements, navigation links, and flash messages. Now we\u2019ll use the rails_layout gem to set up Bootstrap and generate new files for the application layout as well as the navigation and messages partials. The new files will replace the layout files we created in the previous chapter. We\u2019ll use the generator provided by the rails_layout gem to set up Bootstrap and add the necessary files. Run: $ rails generate layout:install bootstrap3 --force With the \u2013force argument, the rails_layout gem will replace existing files. The gem will create the file: app/assets/stylesheets/1st_load_framework.css.scss and modify the files: app/assets/javascripts/application.js app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/application.html.erb It will also remove the file: app/assets/stylesheets/simple.css Let\u2019s examine the files to see how our application is configured to use Bootstrap. 17.10 Renaming the application.css File The rails_layout gem renamed the app/assets/stylesheets/application.css file as app/assets/stylesheets/application.css.scss . Note the .scss file extension. This will allow you to use the advantages of an improved syntax for your application stylesheet. You learned earlier that stylesheets can use variables, mixins, and nesting of CSS rules when you use Sass. Sass has two syntaxes. The most commonly used syntax is known as \u201cSCSS\u201d (for \u201cSassy CSS\u201d), and is a superset of the CSS syntax. This means that every valid CSS stylesheet is valid SCSS as well. SCSS files use the extension .scss . The Sass project also offers a second, older syntax with indented formatting that uses the extension .sass . We\u2019ll use the SCSS syntax. You can use Sass in any file by adding the file extension .scss . The asset pipeline will preprocess any .scss file and expand it as standard CSS. For more on the advantages of Sass and how to use it, see the Sass website or the Sass Basics RailsCast from Ryan Bates. Before you continue, make sure that the rails_layout gem renamed the app/assets/stylesheets/application.css file as app/assets/stylesheets/application.css.scss . Otherwise you won\u2019t see the CSS styling we will apply. 17.11 The application.css.scss File In the previous chapter, I introduced the Rails asset pipeline . Your CSS stylesheets get concatenated and compacted for delivery to the browser when you add them to this directory: app/assets/stylesheets/ The asset pipeline helps web pages display faster in the browser by combining all CSS files into a single file (it does the same for JavaScript). Let\u2019s examine the file app/assets/stylesheets/application.css.scss : /* * This is a manifest file that'll be compiled into application.css, which will include all the files * listed below. * * Any CSS and SCSS file within this directory, lib/assets/stylesheets, or any plugin's * vendor/assets/stylesheets directory can be referenced here using a relative path. * * You're free to add application-wide styles to this file and they'll appear at the bottom of the * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS * files in this directory. Styles in this file should be added after the last require_* statement. * It is generally better to create a new file per style scope. * *= require_tree . *= require_self */ The app/assets/stylesheets/application.css.scss file serves two purposes. First, you can add any CSS rules to the file that you want to use anywhere on your website. Second, the file serves as a manifest , providing a list of files that should be concatenated and included in the single CSS file that is delivered to the browser. If you are familiar with CSS syntax, it may seem odd that the relevant lines are commented out (using asterisks). These lines are not CSS, so they must be commented out so they won\u2019t be interpreted as CSS. Though they are commented out, the Rails asset pipeline reads and understands them. It\u2019s a bit of a hack, but it works. 17.11.1 A Global CSS File Any CSS style rules that you add to the app/assets/stylesheets/application.css.scss file will be available to any view in the application. You could use this file for any style rules that are used on every page, particularly simple utility rules such as highlighting or resetting the appearance of links. However, in practice, you are more likely to modify the style rules provided by Bootstrap. These modifications don\u2019t belong in the app/assets/stylesheets/application.css.scss file; they will go in the app/assets/stylesheets/1st_load_framework.css.scss file. In general, it\u2019s bad practice to place a lot of CSS in the app/assets/stylesheets/application.css.scss file (unless your CSS is very limited). Instead, structure your CSS in multiple files. CSS that is used on only a single page can go in a file with a name that matches the page. Or, if sections of the website share common elements, such as themes for landing pages or administrative pages, make a file for each theme. How you organize your CSS is up to you; the asset pipeline lets you organize your CSS so it is easier to develop and maintain. Just add the files to the app/assets/stylesheets/ folder. 17.11.2 A Manifest File It\u2019s not obvious from the name of the app/assets/stylesheets/application.css.scss file that it serves as a manifest file as well as a location for miscellaneous CSS rules. For most websites, you can ignore its role as a manifest file. In the comments at the top of the file, the *= require_self directive indicates that any CSS in the file should be delivered to the browser. The *= require_tree . directive (note the Unix \u201cdot operator\u201d) indicates any files in the same folder, including files in subfolders, should be combined into a single file for delivery to the browser. If your website is large and complex, you can remove the *= require_tree . directive and specify individual files to be included in the file that is generated by the asset pipeline. This gives you the option of reducing the size of the application-wide CSS file that is delivered to the browser. For example, you might segregate a file that includes CSS that is used only in the site\u2019s administrative section. In general, only large and complex sites need this optimization. The speed of rendering a single large CSS file is faster than fetching multiple files. 17.12 Bootstrap JavaScript Bootstrap provides both CSS and JavaScript libraries. Like the application.css.scss file, the application.js file is a manifest that allows a developer to designate the JavaScript files that will be combined for delivery to the browser. The rails_layout gem modified the file app/assets/javascripts/application.js to include jQuery and the Bootstrap JavaScript libraries: //= require jquery //= require jquery_ujs //= require turbolinks //= require bootstrap-sprockets //= require_tree . It added the directives //= require jquery and //= require jquery_ujs to make jQuery available to the application. Keep in mind that Rails 5.1 dropped jQuery and no longer includes the jquery-rails gem by default. We added the jquery-rails gem to the Gemfile (and ran bundle install ). Without the jquery-rails gem, you\u2019ll get an error when you run the application. The rails_layout command also added the directive //= require bootstrap-sprockets before //= require_tree . to enable the Bootstrap front-end framework. Some of the features offered by Bootstrap require the jQuery library which is why the rails_layout command modifies the app/assets/javascripts/application.js file. 17.13 Bootstrap CSS The rails_layout gem added a file app/assets/stylesheets/1st_load_framework.css.scss containing: // import the CSS framework @import \"bootstrap-sprockets\"; @import \"bootstrap\"; . . . The file app/assets/stylesheets/1st_load_framework.css.scss is automatically included and compiled into your Rails application.css file by the *= require_tree . statement in the app/assets/stylesheets/application.css.scss file. The file could be named anything. However, by giving it a name beginning with \u201c1\u201d it will load before any other stylesheet files we may add later. The asset pipeline loads files in alphabetical order. We want the Bootstrap framework to load before any custom CSS files. The @import \"bootstrap\"; and @import \"bootstrap-sprockets\"; directives will import the Bootstrap CSS rules from the Bootstrap gem. You could add the Bootstrap @import code to the app/assets/stylesheets/application.css.scss file. However, it is better to have a separate app/assets/stylesheets/1st_load_framework.css.scss file. You may wish to modify the Bootstrap CSS rules; placing changes to Bootstrap CSS rules in the 1st_load_framework.css.scss file will keep your CSS better organized. In addition to the simple @import directives, the app/assets/stylesheets/1st_load_framework.css.scss contains a collection of Sass mixins. We\u2019ll look at these later in the chapter. 17.14 Using Bootstrap CSS Classes Now that you\u2019ve installed Bootstrap, you have a rich library of interactive effects you can add to your pages. Take a look at the Bootstrap documentation to see your options. Here are just a few examples: buttons navigation bar alerts At a simpler level, Bootstrap provides a collection of carefully-crafted styling rules in the form of CSS classes. These are building blocks you use for page layout and typographic styling. For example, Bootstrap gives you CSS classes to set up rows and columns in a grid system. Let\u2019s take a closer look at the Bootstrap grid system. 17.14.1 Bootstrap Grid The Bootstrap grid is responsive because it has \u201cbreakpoints.\u201d There are actually four grids: Extra small: browser windows 0 to 768 pixels wide (phones) Small: browser windows 768 to 992 pixels wide (tablets) Medium: browser windows 992 to 1200 pixels wide (desktops) Large: browser windows 1200 pixels and wider (large desktops) Start by designing for the extra small screen; then add classes prefixed \u201csmall,\u201d \u201cmedium,\u201d or \u201clarge\u201d if you want a different layout for larger screens. The layout will change at each breakpoint. The grid gives you 12 columns by default. You can organize your layout in horizontal and vertical sections using row and columns classes. For example, you could use Bootstrap grid classes to set up an application layout with a footer as a row with two sections: Copyright 2016 All rights reserved. The Bootstrap row class will create a horizontal break. The footer will contain two side-by-side sections. The first will be four columns wide; the second will be eight columns wide. Here\u2019s the same footer with a responsive design: Copyright 2016 All rights reserved. On desktops and tablets, the footer will contain two side-by-side sections. On phones, each section will expand to take the full browser width, appearing as stacked rows. To better understand the grid system with all its options, see the documentation for the Bootstrap grid . 17.14.2 Presentational Versus Semantic Styles There are two schools of thought among front-end developers. Some developers are content to use Bootstrap\u2019s classes directly in Rails view files. For these developers, the Bootstrap classes are both practical and descriptive, making it easy for any developer who knows the Bootstrap framework to visualize the layout of a page. Other developers take issue with this approach. They argue that Bootstrap\u2019s markup is often presentational , with class names describing the appearance of the page. In an ideal world, all markup would be semantic , with class names describing the function or purpose of a style. For example, a submit button often needs styling. Compare these two approaches to markup: presentational: <button class=\"big red button\">Order Now</button> semantic: <button class=\"submit\">Order Now</button> Suppose your user testing indicates a green button generates more sales. With the presentational approach you\u2019d have to change both the Rails view file and the CSS file. With a semantic approach, you\u2019d just change the CSS file to reassign the color of the submit class. 17.14.3 Use Bootstrap Classes Directly For quick and simple websites, where you don\u2019t need to be concerned about long-term maintenance, use Bootstrap\u2019s CSS classes directly. For example, you can style a button like this: <button type=\"button\" class=\"btn btn-success\">Order Now</button> The btn-success class is semantic and applies an \u201calert color\u201d which is green, by default, in Bootstrap. 17.14.4 Or Use Sass Mixins with Bootstrap You can use Sass mixins to create your own semantic class names. Sass mixins add a layer of complexity that can map Bootstrap class names to your own semantic class names. For example, the Bootstrap grid system is presentational. Specifying rows and columns, and quantifying the size of columns, describes the visual appearance of sections of the layout rather than the purpose of each section. The presentational approach makes it easy to visualize the layout of a page. But you\u2019ll be tied to Bootstrap 3 class names for the life of your website. If class names change in a future version of Bootstrao, or you decide to switch to another front-end framework, it will be difficult to update your application, as you will have to carefully rebuild each view file. Is it worth the effort to add the complexity of Sass mixins just to future-proof your website? Probably not for a simple website such as the one you are building for Foobar Kadigan. The rails_layout gem uses Sass mixins to apply CSS style rules to the default application layout. In doing so, the default application layout is free of framework-specific code and can be used with either Bootstrap or Zurb Foundation. Before we examine the default application layout, let\u2019s take a look at the Sass mixins supplied by the rails_layout gem. Look again at the file app/assets/stylesheets/1st_load_framework.css.scss created by the rails_layout gem: // import the CSS framework @import \"bootstrap-sprockets\"; @import \"bootstrap\"; // make all images responsive by default img { @extend .img-responsive; margin: 0 auto; } // override for the 'Home' navigation link .navbar-brand { font-size: inherit; } // THESE ARE EXAMPLES YOU CAN MODIFY // create your own classes // to make views framework-neutral .column { @extend .col-md-6; @extend .text-center; } .form { @extend .col-md-6; } .form-centered { @extend .col-md-6; @extend .text-center; } .submit { @extend .btn; @extend .btn-primary; @extend .btn-lg; } // apply styles to HTML elements // to make views framework-neutral main { @extend .container; background-color: #eee; padding-bottom: 80px; width: 100%; margin-top: 51px; // accommodate the navbar } section { @extend .row; margin-top: 20px; } The rails_layout gem is in active development so the file you\u2019ve created may be different from the example in this tutorial. It will probably be very similar. At the top of the file we import the Bootstrap framework CSS files from the gem. We override a Bootstrap style rule so the \u201cHome\u201d navigation link matches the other links in the navigation bar. Then we use mixins to create semantic classes. Mixins can take a block of CSS styles, other mixins, or a CSS selector (a CSS class or ID). If you\u2019d like to combine CSS classes, or rename a CSS class, use the @extend directive. The first declaration column combines the Bootstrap classes col-md-6 and text-center to make a new class, column . Next we create a few classes that combine Bootstrap CSS classes. For example, the new submit class can be used for a button. When we use it in a view, this class will be purely semantic since it describes the purpose of the element, allowing us to set its appearance outside of any view file. Finally, to avoid applying Bootstrap classes in the application layout file, we apply styles to HTML elements main and section to make the views framework-neutral. We use the @extend directive to add a Bootstrap CSS class. And we directly set standard CSS properties such as background-color and margin-top . Using this technique, the file app/assets/stylesheets/1st_load_framework.css.scss becomes the single point of intersection between the Bootstrap framework and the application layout. For a simple website, this could be over-engineering and counter-productive. The rails_layout gem uses the technique so that either Bootstrap or Zurb Foundation can be used without any change to the default application layout. We\u2019ll use the CSS classes provided by the rails_layout gem in the tutorial application, but if you choose to customize the application, feel free to use Bootstrap classes directly to keep your project simple. 17.15 Application Layout with Bootstrap Let\u2019s look at the application layout file created by the rails_layout gem: Examine the contents of the file app/views/layouts/application.html.erb : <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content=\"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> This file is almost identical to the simple application layout file we looked at in the previous chapter. Because we\u2019ve applied Bootstrap classes to the HTML element main in the app/assets/stylesheets/1st_load_framework.css.scss file, there\u2019s no need to use Bootstrap classes directly in the application layout. 17.16 Flash Messages with Bootstrap The messages partial we use with Bootstrap is complex. Examine the file app/views/layouts/_messages.html.erb : <%# Rails flash messages styled for Bootstrap 3.0 %> <% flash.each do |name, msg| %> <% if msg.is_a?(String) %> \u00d7 < %= content\\_tag :div, msg, :id \\=> \"flash\\_#{name}\" %> <% end %> <% end %> We use each to iterate through the flash hash, retrieving a name and msg that are passed to a block to be output as a string. The expression if msg.is_a?(String) serves as a test to make sure we only display messages that are strings. We construct a div that applies Bootstrap CSS styling around the message. Bootstrap provides classes alert and alert-dismissible to style the message. We use the Ruby ternary operator to check the type of the alert. A class of either success or danger styles the message. Rails notice messages will get styled with the Bootstrap success class. Any other Rails messages, including alert messages, will get styled with the Bootstrap danger class. We use the Rails content_tag view helper to create a div containing the message. Bootstrap creates a \u201cclose\u201d icon by applying the class alert-dismissible . Bootstrap\u2019s integrated JavaScript library will hide the alert box when the \u201cclose\u201d link is clicked. Bootstrap provides detailed documentation if you want to change the styling of the alert boxes. 17.17 Navigation Partial with Bootstrap The layout and styling required for the Bootstrap navigation bar are in the navigation partial file. Examine the file app/views/layouts/_navigation.html.erb : <%# navigation styled for Bootstrap 3.0 %> Toggle navigation < %= link\\_to 'Home', root\\_path, class: 'navbar-brand' %> < %= render 'layouts/navigation\\_links' %> The navigation partial is now more complex, with layout and Bootstrap classes needed to produce a responsive navigation bar. At the conclusion of this chapter, you\u2019ll test the responsive navigation by resizing the window. At small sizes, the navigation links will disappear and be replaced by an icon labeled \u201cMenu.\u201d Clicking the icon will reveal a vertical menu of navigation links. The navigation menu is a great demonstration of the ability of Bootstrap to adjust to the small screen size of a tablet or smartphone. If you\u2019d like to add a site name or logo to the tutorial application, you can replace the link helper <%= link_to \u2019Home\u2019, root_path %> . It is important to preserve the enclosing layout and classes, even if you don\u2019t want to display a site name or logo. The enclosing layout is used to generate the navigation menu when the browser window shrinks to accommodate a tablet or smartphone. You\u2019ll see we wrap the nested partial render \u2019layouts/navigation_links\u2019 with Bootstrap classes to complete the navigation bar. 17.18 Navigation Links Partial The file app/views/layouts/_navigation_links.html.erb is unchanged: <%# add navigation links to this file %> Later we\u2019ll add links to \u201cAbout\u201d and \u201cContact\u201d pages. The navigation links partial will be simply a list of navigation links. We\u2019re following the separation of concerns principle here. By separating the links from the styling that creates the navigation bar, we segregate the code that is unique to Bootstrap. In the future, if the Bootstrap layout or CSS classes change, we can make changes without touching the navigation links. If we wish, we can replace the navigation partial and substitute one that uses a different framework instead of Bootstrap, leaving the navigation links intact. 17.19 Test the Application Let\u2019s see how the application looks with Bootstrap. The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You should see a new page design that displays Bootstrap styling. Thanks to the open source efforts of the Bootstrap core team and contributors, we\u2019ve added powerful front-end features to our website with little effort. You can click the \u201cX\u201d close icons to hide the flash messages, thanks to the integrated CSS and JavaScript of the Bootstrap framework. Next we\u2019ll add \u201cAbout\u201d and \u201cContact\u201d pages to the application. After we update the navigation links, you\u2019ll see how the Bootstrap responsive web design adjusts the navigation bar at different browser widths. 17.20 Remove the Flash Messages Before we continue, we\u2019ll remove the flash messages we created for our demonstration. Update the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @owner \\= Owner.new end end 17.21 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"front-end framework\" $ git push Chapter 18 Add Pages Let\u2019s begin adding pages to our web application. There are three types of web pages in a Rails application. We\u2019ve looked at two types so far: static pages in the public/ folder that contain no Ruby code dynamic pages such as our home page that use the application layout There\u2019s another type of web page that is required on many websites. It has static content; that is, no dynamic data is needed on the page. But it uses the default application layout to maintain consistency in the website look and feel. We classify this type of page as a: static view that uses the application layout Examples include: \u201cAbout\u201d page Legal page FAQ page It\u2019s possible to place these pages in the public/ folder and copy the HTML and CSS from the default application layout but this leads to duplicated code and maintenance headaches. And dynamic elements such as navigation links can\u2019t be included. For these reasons, developers seldom create static pages in the public/ folder. Alternatively, a dynamic page can be created that has no model, a nearly-empty controller, and a view that contains no instance variables. This solution is quite common for static views that use the application layout. This solution is implemented so frequently that many developers create a gem to encapsulate the functionality. We\u2019re going to use the best-known of these gems, the high_voltage gem created by the Thoughtbot consulting firm. We\u2019ll use the High Voltage gem to create an \u201cAbout\u201d Page. We also will create a Contact page. We\u2019ll again use the High Voltage gem, but only for the first version of the Contact page. Later we\u2019ll discard the page we created with the High Voltage gem and replace it with a full model-view-controller implementation. The process will show the difference between an older form of web application architecture and a newer \u201cRails way.\u201d 18.1 High Voltage Gem We can add a page using the High Voltage gem almost effortlessly. The gem implements Rails \u201cconvention over configuration\u201d so well that there is nothing to configure. There are alternatives to its defaults which can be useful but we won\u2019t need them; visit the GitHub home page for the high_voltage gem if you want to explore all the options. In your Gemfile , you\u2019ve already added: gem 'high_voltage' and previously run $ bundle install . 18.2 Views Folder Create a folder app/views/pages : $ mkdir app/views/pages Any view files we add to this directory will automatically use the default application layout and appear when we use a URL that contains the filename. The High Voltage gem contains all the controller and routing magic required for this to happen. Let\u2019s try it out. 18.3 \u201cAbout\u201d Page Create a file app/views/pages/about.html.erb : <% content_for :title do %>About<% end %> About Foobar Kadigan He was born in Waikikamukau, New Zealand. He left New Zealand for England, excelled at the University of Mopery, and served in the Royal Loamshire Regiment. While in service, he invented the kanuten valve used in the processing of unobtainium for industrial use. With a partner, Granda Fairbook, he founded Acme Manufacturing, later acquired by the Advent Corporation, to develop his discovery for use in the Turboencabulator. Mr. Kadigan is now retired and lives in Middlehampton with a favorite cat, where he raises Griadium frieda and collects metasyntactic variables. His favorite quotation is: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Our simple \u201cAbout\u201d view will be combined with the default application layout by the High Voltage gem. We include a content_for Rails view helper that passes a page title to the application layout. 18.4 Contact Page For the initial version of the Contact page, create a file app/views/pages/contact.html.erb : <% content_for :title do %>Contact<% end %> Contact This is a placeholder page we\u2019ll use to test a navigation link. We include a content_for Rails view helper that passes a page title to the application layout. 18.5 Routing for the High Voltage Gem The High Voltage gem provides a PagesController. You\u2019ll never see it; it is packaged inside the gem. In addition to providing a controller, the High Voltage gem provides default routing so any URL with the form http://localhost:3000/pages/about will obtain a view from the app/views/pages directory. Like the PagesController, the code that sets up the route is packaged inside the gem. For details about the syntax of routing directives, refer to RailsGuides: Routing from the Outside In . 18.6 Update the Navigation Partial You can use a Rails route helper to create a link to any view in the app/views/pages directory like this: link_to 'About', page_path('about') Let\u2019s add links to the \u201cAbout\u201d and \u201cContact\u201d pages. Replace the contents of the file app/views/layouts/_navigation_links.html.erb with this: <%# add navigation links to this file %> < %= link\\_to 'About', page\\_path('about') %> < %= link\\_to 'Contact', page\\_path('contact') %> With an updated navigation bar, we can test the application. 18.7 Test the Application The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Links to the pages \u201cAbout\u201d and \u201cContact\u201d should work. If you get an error \u201cuninitialized constant PagesController,\u201d make sure the config/routes.rb file looks like this: Rails.application.routes.draw do root to: 'visitors#new' end Watch what happens when you resize the page. At smaller sizes, the navigation bar changes to display a menu icon. Clicking the menu icon reveals a drop-down menu of navigation links. You\u2019re seeing the power of the Bootstrap framework. Here\u2019s a troubleshooting tip. If clicking the menu icon doesn\u2019t reveal a drop-down menu, the application may not be loading the Bootstrap JavaScript library. Make sure that the file app/assets/javascripts/application.js contains: //= require jquery //= require jquery_ujs //= require turbolinks //= require bootstrap-sprockets //= require_tree . 18.8 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add 'about' and 'contact' pages\" $ git push There is nothing more we need for our \u201cAbout\u201d page. In the next chapter, we\u2019ll explore two different implementations for the Contact page. Chapter 19 Contact Form Forms are ubiquitous on the web, to the degree we seldom notice how often they are used for data entry, whether we\u2019re logging into a website or posting a blog comment. To build any interactive website, you\u2019ll need to understand forms. Here we\u2019ll build a contact form for our tutorial application. A contact form is common on many websites. If you think about it, contact forms are often unnecessary; simply displaying an email address is sufficient, more convenient, and easier to implement. But building a contact form is an excellent way to learn how to handle user data input. We\u2019ll pretend that our odd client, Mr. Foobar Kadigan, insists that he needs a contact form on his website. We\u2019re not backing the tutorial application with a database so we won\u2019t store the contact data after the information is submitted. Instead, in a subsequent chapter we\u2019ll learn how to send the contents of the form by email to the website owner. 19.1 The \u201cOld Way\u201d and the \u201cRails Way\u201d In this chapter, we\u2019ll explore two ways to implement a contact form. The first way will be familiar to anyone who has used PHP or similar web platforms. It is an obvious and straightforward way to handle a form. As we look closer, we\u2019ll see the approach has limitations. We\u2019ll discard our first approach and rebuild the Contact page, discovering how the \u201cRails way\u201d is more powerful. You may wonder why I\u2019m going to show you two different ways to implement the contact form. First, it is worthwhile to see there is more than one way to implement a web application. Maturity as a software developer means imagining different approaches and evaluating your options. With this exercise, you\u2019ll contrast two approaches and see how we make choices about software architecture. More importantly, it is not always obvious why we do things in a \u201cRails way.\u201d It would be easy to simply walk you through the steps to build a contact form without showing you alternative implementations (that\u2019s how most tutorials do it). But you\u2019ll gain a deeper understanding of Rails by building the contact form in a less sophisticated fashion and then seeing the more elegant Rails approach. 19.2 User Story Let\u2019s plan our work with a user story: *Contact Page* As a visitor to the website I want to fill out a form with my name, email address, and some text In order to send a message to the owner of the website Our first step will be to create a route to a controller that will process the submitted form. 19.3 Routing We\u2019re going to create a ContactsController to process the submitted form data. Every form must have a destination URL that receives the form submission. We need to set a route to generate the destination URL. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do post 'contact', to: 'contacts#process_form' root to: 'visitors#new' end The route post \u2019contact\u2019, to: \u2019contacts#process_form\u2019 will create a route helper that generates a URL and hands off the request to a controller. You can run the rails routes command to see our routes in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contact POST /contact(.:format) contacts#process_form root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command is somewhat cryptic but confirms we\u2019ve created the routes we need. The first item in the rails routes output indicates we can add \u201ccontact\u201d to \u201c_path\u201d to get our route helper, contact_path : contact_path - a route helper that can be used in a controller or view The second item indicates the request will be handled with the HTTP POST protocol: POST - HTTP method to submit form data The third item indicates the application will respond to the following URL: http://localhost:3000/contact - URL generated by the route helper The fourth item indicates a request to the URL will be handled by: contacts - the name of the controller process_form - a controller action For details about the syntax of routing directives, refer to RailsGuides: Routing from the Outside In . The route won\u2019t work yet; we need to create a ContactsController. But first we\u2019ll create the form. 19.4 Adding a Form to the Contact Page Let\u2019s add the code for a contact form to the Contact page. Forms were simple in the early days of the web. An HTML <form> tag creates a container for a form. The form element specifies a URL (an \u201caction\u201d) which receives and processes the form submission. Form fields accept input such as text or checkboxes. A submit button gathers the input and sends a request to the URL specified in the form action. Rails tries to simplify forms and make them more powerful. First, to simplify forms, Rails provides a set of view helpers for forms. These view helpers automate the creation of the necessary HTML elements. Some developers use an alternative set of form helpers (such as the SimpleForm gem ) which make the syntax of forms even simpler. Form helpers such as SimpleForm add a dependency that I like to avoid (sometimes the gem is not updated or breaks). We\u2019ll use the standard Rails form helpers. Rails also makes forms more powerful by providing a form builder that can be associated with a model. Associating a model with a form allows Rails to perform validation on the input data. We\u2019ll first build a form without a model (the \u201cold way\u201d) and then add a model (the \u201cRails way\u201d). Unfortunately, in the quest for simplicity and power, the Rails maintainers have made forms much more complicated than the original HTML specification. A large part of the complication is a new forms syntax introduced in Rails 5.1. Prior to Rails 5.1, Rails provided two different ways to create forms. One approach, using the form_tag directive, was simpler and didn\u2019t use a form builder and associated model. The second approach, using the form_for directive, was more powerful and widely used because it enabled validation of form data using an associated model. In Rails 5.1, the Rails maintainers introduced a third approach, using the form_with directive. The form_with approach replaces both the form_tag and form_for directives, combining both earlier approaches in one set of view helpers. There is very little documentation to explain how to use the form_with approach. As of this writing, the RailsGuides: Rails Form Helpers official document has not been updated for the new form_with syntax. Most tutorials (and Stack Overflow answers) explain forms using the form_tag or form_for helpers. The only official documentation is the Rails API document . These are persuasive reasons not to use the new form_with syntax. However, a future version of Rails will deprecate (remove) the form_tag or form_for helpers. It\u2019s best to learn to use form_with for your forms. Our tutorial will use form_with . Replace the contents of the file app/views/pages/contact.html.erb : <% content_for :title do %>Contact<% end %> Contact < %= form\\_with(url: contact\\_path) do |form| %> < %= form.label :name %> < %= form.text\\_field :name, autofocus: true %> < %= form.label :email %> < %= form.email\\_field :email %> < %= form.label 'message' %> < %= form.text\\_area :content, size: '40x5' %> < %= form.submit 'Submit', class: 'submit' %> < % end %> The code is compact but complex. We see several elements: content_for is a view helper that passes a page title to the application layout <div class=\"form\"> sets the width of the form and applies any styles we desire form_with is the view helper for the form The form_with view helper instantiates a form builder object which we assign to a variable named form . The form builder offers many standard form elements, such as text fields and submit buttons. Each element is available as a method call on the form object. The view helper form_with requires parameters and a block . Every form needs a URL that will handle processing of the form data. In this case, we specify a route in the application: url - set to contact_path , the destination for the form data Later, when we change this form to accommodate the\u201dRails way,\u201d we\u2019ll replace these two parameters with a single instance variable. The magic of Rails will generate the name of the form and the destination URL from the instance variable. For now, to implement the \u201cold way,\u201d we simply supply the destination URL. The form_with view helper accommodates a Ruby block. The block begins with do and closes with end . The code inside the block works just like code inside a method. In this case, the form object is passed to the block and methods belonging to the form object are called to produce HTML output. Inside the block, the form object methods generate HTML for: a name field an email field a content field (labeled \u201cmessage\u201d) a submit button Each of the form methods takes various parameters, such as: autofocus - displays the cursor in the field The structure of the form is clearly visible in the code. The form begins with a form_with helper and closes with the end keyword. Each line of code produces an element in the form such as a field or a button. This is a common structure for a Rails view helper and it will soon become familiar. 19.5 Controller We need code to process the form data. The form data is sent to the server as a POST request attached to a URL. As we\u2019ve learned, in Rails we use controllers to respond to browser requests. For this implementation, we\u2019ll create a ContactsController to process the submitted form data. Create a file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def process_form Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash[:notice] \\= \"Received request from #{params[:name]}\" redirect_to root_path end end The ContactsController inherits the behavior of the base ApplicationController. We create a process_form method to respond when the form is submitted. Later we\u2019ll learn that process_form doesn\u2019t fit the \u201cRails way.\u201d We\u2019ll use it for now. Before we look closely at the code for the process_form method, we need to learn about the params hash. 19.5.1 Params Hash Take a close look at these two lines: Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash\\[:notice\\] \\= \"Received request from #{params\\[:name\\]}\" Notice the params object. Earlier we learned about the Ruby Hash class. It is a data structure for key/value pairs and Hash instances are ideal for storing form data. Each field on the form can be mapped as label and data , or key and value, and stored in a Hash. Rails does all the work of extracting the form data from the browser\u2019s POST request. Rails creates a hash with the form field data mapped to the form field labels. Here\u2019s part of the hash: {... \"name\"\\=>\"Daniel\", \"email\"\\=>\" [email protected] \", \"content\"\\=>\"hi\" ...} The full params hash actually contains more data which we can see with a debug command: {\"utf8\"\\=>\"\u2713\", \"authenticity_token\"\\=>\"...\", \"name\"\\=>\"Daniel\", \"email\"\\=>\" [email protected] \", \"content\"\\=>\"hi\", \"commit\"\\=>\"Submit\", \"controller\"\\=>\"contacts\", \"action\"\\=>\"process_form\"} The params hash includes these elements: the utf8 checkmark character forces browsers to recognize Unicode the authenticity token prevents CSRF ( Cross Site Request Forgery ) form data current controller current action You will see the contents of the params hash in the console log after you submit the form. We\u2019ll look at the console log when we test the implementation. 19.5.2 Process_form Method Now that we know about the params hash, take a look again at the process_form method: def process_form Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash[:notice] \\= \"Received request from #{params[:name]}\" redirect_to root_path end We use a logger.debug method to reveal the form data in our console log by revealing the contents of the params hash. The inspect method shows the parameters in an easy-to-read list. Then we extract the data posted to the name field of the form and construct a flash message. A hash containing the data from the contact form is nested inside the params hash. We can retrieve the value of the name field with the expression params[:name] . We use double quotes and string interpolation to form the message using the #{...} syntax that evaluates a Ruby expression and combines it with a string. Finally we use the redirect_to directive to render the home page. We haven\u2019t actually sent the contact data to anyone. We\u2019ll add code for that later, after we refactor the controller to be a better example of the \u201cRails way.\u201d Before we do that, let\u2019s test the current implementation. We\u2019ve already set up routing for the new controller. 19.6 Test the Application If you need to start the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link; then fill out and submit the form. You should see the flash message \u201cReceived request from \u2026\u201d on the home page. If you see the message \u201cMy birthday is soon\u201d you need to delete your earlier experiment from the Visitors controller. If you get an error message \u201cuninitialized constant ContactsController,\u201d make sure you created the file app/controllers/contacts_controller.rb as instructed above. Notice what appears in the console log: Started POST \"/contact\" for 127.0.0.1 at 2017-07-19 16:22:13 +0800 Processing by ContactsController#process_form as JS Parameters: {\"utf8\"=>\"\u2713\", \"authenticity_token\"=>\"..\", \"name\"=>\"Daniel\", \"email\"=>\" [email protected] \", \"content\"=>\"hi\", \"commit\"=>\"Submit\"} DEBUG: params are \"\u2713\", \"authenticity_token\"=>\"...\", \"name\"=>\"Daniel\", \"email\"=>\" [email protected] \", \"content\"=>\"hi\", \"commit\"=>\"Submit\", \"controller\"=>\"contacts\", \"action\"=>\"process_form\"} permitted: false> Redirected to http://localhost:3000/ Completed 200 OK in 7ms The console log is our most important tool for debugging. Let\u2019s analyze what we see: Started POST - shows the server is responding to an HTTP POST request \u201c/contact\u201d - the path portion of the URL at \u2026 - timestamp Processing by ContactsController - the controller process_form - the controller action (the method that handles the request) as JS - the standard syntax (not XML or some other markup) Parameters: - the params hash containing all the submitted data \u201cutf8\u201d=\u201d\u2713\u201d - a Rails workaround to set the language encoding in Internet Explorer \u201cauthenticity token\u201d - prevents CSRF security exploits the form data \u201ccommit\u201d - the \u201cSubmit\u201d label from the button DEBUG - our debug message containing the form data Redirected to http://localhost:3000/ - responded by displaying the home page Completed 200 OK - HTTP response status code 200 indicating success in 7ms - time required to process the request That\u2019s a lot of data. For now, we really only care about the form data buried in the params hash. You can see that we really don\u2019t need the debug message because the console log shows us the contents of the params hash. 19.7 The Validation Problem It looks like we\u2019ve got everything we need to handle a form submission. As a next step, we could implement code to send an email message using form data extracted from the params hash. But consider a potential problem. What if the email address is poorly formed? The visitor will think the message has been sent but it will never be delivered. Or what if the name field or message is blank? It\u2019s not just a problem for the hapless visitor. An evildoer could repeatedly click the submit button, filling Foobar Kadigan\u2019s email inbox with endless empty messages. We need validation of the form data before we process it. We could dig into the Rails String API and look for a way to test if the string is empty or contains only whitespaces. And we could raise an Exception if the string is blank. Here\u2019s what validation code could look like. We won\u2019t use this code (because there\u2019s a better way to do this): class ContactsController < ApplicationController def process_form if params[:name].blank? raise 'Name is blank!' end if params[:email].blank? raise 'Email is blank!' end if params[:content].blank? raise 'Message is blank!' end message \\= \"Received request from #{params[:name]}\" redirect_to root_path, :notice \\=> message end end We would need additional code to test for invalid email addresses (it will be a complex regex , or regular expression ). And we would need a nicer way of showing the error to the visitor (right now, raising the exception displays an error message that makes it appear the application is broken). If we were implementing this on another web application platform, we might go further down this path, googling for code examples, and implementing a lengthy but bulletproof validation function. Rails offers a better way. 19.8 Remove the Contact Page We will implement a model-view-controller architecture for our Contact feature. That means we need a Contact model, a Contacts controller, and view files in the app/views/contacts/ folder. We no longer need the Contact page in the app/views/pages/ folder. Let\u2019s get started by removing the file app/views/pages/contact.html.erb : $ rm app/views/pages/contact.html.erb Before we implement a model-view-controller architecture, let\u2019s take time to understand the advantages of the Rails model-view-controller approach. 19.9 Implementing the \u201cRails Way\u201d Our initial implementation of the contact form is consistent with the earliest approach to web application development. That\u2019s why I call it the \u201cold way.\u201d It is an approach that originated in 1993 with a specification for CGI, the Common Gateway Interface . Before CGI, every page on the web existed only as a static HTML file. CGI made it possible to run a program, or CGI script, that dynamically generated HTML. In the early years of the web, every web URL matched either an HTML file or a CGI script. This is the \u201cpage paradigm\u201d of the web. So far, we\u2019re following the \u201cpage paradigm.\u201d Our Contact page hosts the form. Clicking the submit button makes a request to another page that is actually a program that returns HTML. Until the late 1990s, this is how the web worked. But soon after the introduction of CGI, developers began exploring the possibility of running a single program (an application server) that responds to any URL, parsing the URL to establish routing, and generating pages dynamically. This was the genesis of the \u201cweb application paradigm.\u201d It\u2019s how Rails works. The web application paradigm frees us from one-to-one correspondence of a URL with a single file or script. It allows us to refactor our code into object-oriented classes and methods that can be inherited rather than duplicated, which means we don\u2019t repeat the same code on every page that processes a form. The web application paradigm makes it possible to use the model-view-controller architecture. Instead of looking at the web as URLs that return pages, we see requests that are routed to controllers that render views. We can segregate any code that manipulates data into a model class, instead of mixing HTML with data manipulation in a single script. With the \u201cweb application paradigm,\u201d we can have a generic model class that isolates the code that connects to a database or validates form data. We can create models that inherit the generic behavior from a parent class and get a database connection or validation \u201cfor free.\u201d Unlike the \u201cpage paradigm,\u201d we\u2019ll avoid duplicating validation code every time we need to process a form. Consider our process_form method again: class ContactsController < ApplicationController def process_form if params[:name].blank? raise 'Name is blank!' end if params[:email].blank? raise 'Email is blank!' end if params[:content].blank? raise 'Message is blank!' end message \\= \"Received request from #{params[:name]}\" redirect_to root_path, :notice \\=> message end end We\u2019ll replace it with something better. Our \u201csegregation of concerns\u201d philosophy suggests that validation belongs in a model, since validation is a type of data manipulation (strictly speaking, a test of data integrity). Furthermore, it would be nice to make the validation tests generic so they could be used to validate data submitted from any form. Rails, as a framework, provides all this for us. We call it the \u201cRails way.\u201d 19.10 ActiveModel Rails extracts and generalizes common code that every website requires. The code that websites need for access to databases is abstracted into the Rails ActiveRecord class. ActiveRecord includes code from the ActiveModel class that handles interaction with forms and data validation. The ActiveModel class interfaces with SimpleForm to provide sophisticated validation and error handling. We can mix in behavior from the ActiveModel class to add validation and error handling to any model we create. SimpleForm will recognize ActiveModel methods if we provide a model as an argument to the SimpleForm view helper. SimpleForm will give the form a name that matches the model name. And SimpleForm will automatically generate a destination URL for the form based on the model name. More significantly, SimpleForm will add sophisticated error handling to the form. If a visitor doesn\u2019t enter a name or submits an invalid email address, and we declare in our model that we require validation, SimpleForm will highlight the invalid field and display an inline message indicating the problem. Compared to what we\u2019ve implemented so far, this kind of error handling provides a vastly superior user experience. Instead of displaying a message that the application failed, the form will be redisplayed with the problem marked and noted. Now that we\u2019ve seen the advantages of the \u201cRails way,\u201d let\u2019s re-implement our contact form using the model-view-controller architecture. 19.11 Model When we build database-backed applications with Rails, we base our models on a parent class named ActiveRecord. We are not using a database for our tutorial application, so we\u2019ll mix in behavior from ActiveModel, which adds validation and error handling to our model. Let\u2019s set up a model that doesn\u2019t require a database. Create a file app/models/contact.rb : class Contact include ActiveModel::Model attr_accessor :name, :email, :content validates_presence_of :name validates_presence_of :email validates_presence_of :content validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i validates_length_of :content, :maximum \\=> 500 end When you copy this, be careful to keep the long regex expression ( with: /.../i ) on one line (no line breaks). We give the model the name \u201cContact.\u201d We mix in behavior from the ActiveModel class using include ActiveModel::Model . We create attributes (data fields) for the model by using the attr_accessor keyword. The attributes match the fields in the contact form. If we were using a database for our tutorial application, we would not need to use attr_accessor because ActiveRecord would create access methods for reading and writing attributes directly from the database. ActiveModel gives us validation methods named validates_presence_of , validates_format_of , and validates_length_of . We check that name , email , and content exist (no blanks are allowed). We provide a complex regex , or regular expression , to test if the email address is valid. Finally, we declare that the message content cannot exceed 500 characters. The model is elegant. We describe the fields we need and state our validation requirements. ActiveModel does all the rest. Next we\u2019ll add a new Contact page by creating a view in the app/views/contacts/ folder. The new contact form will use our new model. 19.12 Create a New Contact Page First, let\u2019s create the app/views/contacts/ folder: $ mkdir app/views/contacts/ Create a file app/views/contacts/new.html.erb : <% content_for :title do %>Contact<% end %> Contact < %= form\\_with(model: @contact) do |form| %> < %= form.label :name %> < %= form.text\\_field :name, autofocus: true %> < %= form.label :email %> < %= form.email\\_field :email %> < %= form.label 'message' %> < %= form.text\\_area :content, size: '40x5' %> < %= form.submit 'Submit', class: 'submit' %> < % end %> The form is the same as we used before, but we\u2019re now providing only one argument, the @contact instance variable, to the form_with view helper. That\u2019s enough to generate the form name and destination URL. We haven\u2019t yet created a controller that assigns the Contact model to the @contact instance variable. We\u2019ll do that soon. The form helper uses the @contact instance variable to name the form, set a destination for the form data, and initialize each field in the form using attributes from the Contact model. Setting the values for the form fields from the attributes in the model is called \u201cbinding the form to the object\u201d and you can read about it in the RailsGuides: Form Helpers article. We\u2019ve added the error_notification method which provides all the error handling. The method call is very simple but the results will be impressive. We\u2019ll need a controller and routing to complete our model-view-controller architecture. But first, we\u2019ll detour to learn about seven standard controller actions. 19.13 Seven Controller Actions Consider all the possibilities for managing a list. It\u2019s a list of anything: users, inventory, thingamajigs. We use a web application to manage the list, so we\u2019ll fill out a form to record each item in our list. The web application offers seven features to help us manage our records: index - display a list of all items show - display a record of one item new - display an empty form create - save a record of a new item edit - display a record for editing update - save an edited record destroy - delete a record You can manage any list using these seven actions. There are a few extra actions that are helpful, such as: pagination - displaying a portion of a list sorting - displaying the list in a different order bulk edit - changing multiple items at once But seven basic actions are all you need for managing any list of items. The \u201cRails way\u201d is about taking advantage of structure and convention to leverage the power of the framework. The ApplicationController contains code to implement each of the seven standard actions. When we create a controller that inherits from the ApplicationController, we get these standard actions \u201cfor free.\u201d That\u2019s why our new method in our VisitorsController was so simple. The controller knew to render a view file named new.html.erb from the views/visitors/ folder because of behavior inherited from the ApplicationController. Just like the Rails directory structure provides consistency to make it easy for any Rails developer to collaborate with other Rails developers, relying on the seven standard controller actions makes it easy for other team members to understand how your controllers work. A controller that uses these actions is said to be \u201cRESTful\u201d (a term that refers to representational state transfer , a software design abstraction). Experienced Rails developers follow the \u201cRails way\u201d and try to use RESTful controller methods when possible. When necessary, you will add other controller actions. For example, imagine you\u2019ve built a subscription website. When a user\u2019s subscription ends, you may not want to destroy the subscriber record. Instead you might add a controller expire or suspend action that marks the subscriber record as expired so you can continue to access the subscriber\u2019s contact information for customer service or renewal offers. To the extent you can, use the seven standard controller actions and be cautious about adding more. Earlier, I said our ContactsController process_form method isn\u2019t suitable for the \u201cRails way.\u201d With our model-view-controller architecture, we can piggyback on the ApplicationController to display our empty contact form and process the form when it is submitted. We\u2019ll use only two of the seven standard controller actions: new - display the empty contact form create - validate and process the submitted form Our ContactsController will know to render a view from the app/views/contacts/new.html.erb file when we call the controller new method. We won\u2019t piggyback on behavior from the ApplicationController create method. But we\u2019ll implement a create method because, by convention, the form will submit the data to the controller\u2019s create method. SimpleForm will create a destination URL that corresponds to the ContactsController#create action. 19.14 Controller Replace the contents of the file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def new @contact \\= Contact.new end def create @contact \\= Contact.new(secure_params) if @contact.valid? # TODO send message flash[:notice] \\= \"Message sent from #{@contact.name}.\" redirect_to root_path else render :new end end private def secure_params params.require(:contact).permit(:name, :email, :content) end end We\u2019ve dropped the \u201cold school\u201d process_form method and added the \u201cRails way\u201d new and create methods. The controller new action will instantiate an empty Contact model, assign it to the @contact instance variable, and render the app/views/contacts/new.html.erb view. We\u2019ve already created the view file containing the form. SimpleForm will set a destination URL that corresponds to the ContactsController#create action. The create method will instantiate a new Contact model using the data from the form (we take steps to avoid security vulnerabilities first\u2014more on that later). The ActiveModel class provides a method valid? which we can call on the Contact model. Our conditional statement if @contact.valid? checks each of the validation requirements we\u2019ve set in the model. If all the Contact fields are valid, we can send a message (which we\u2019ll add later), prepare a flash message, and redirect to the home page. Notice that we don\u2019t need to dig into the params hash for the visitor\u2019s name; it is now available as @contact.name directly from the model. If any validation fails, the controller create action will render the app/views/contacts/new.html.erb view. This time, appropriate error messages are set and the form object\u2019s error_notification method will highlight the invalid field and display a matching prompt. You\u2019re looking at the tightly bound interaction of the \u201cRails way\u201d model, view, and controller. The only element we are missing is routing. But first, let\u2019s look closer at the steps we take to avoid security exploits. 19.14.1 Mass-Assignment Vulnerabilities Rails protects us from a class of security exploits called \u201cmass-assignment vulnerabilities.\u201d Rails won\u2019t let us initialize a model with just any parameters submitted on a form. Suppose we were creating a new user and one of the user attributes was a flag allowing administrator access. A malicious hacker could create a fake form that provides a user name and sets the administrator status to \u201ctrue.\u201d Rails forces us to \u201cwhite list\u201d each of the parameters used to initialize the model. We create a method named secure_params to screen the parameters sent from the browser. The params hash contains two useful methods we use for our screening: require(:contact) - makes sure that params[:contact] is present permit(:name, :email, :content) - our \u201cwhite list\u201d With this code, we make sure that params[:contact] only contains :name, :email, :content . If other parameters are present, they are stripped out. Rails will raise an error if a controller attempts to pass params to a model method without explicitly permitting attributes via permit . In older versions of Rails (before Rails 4.0), the mass-assignment exploit was blocked by using a \u201cwhite list\u201d of acceptable parameters with the attr_accessible keyword in a model. You\u2019ll see this code in examples and tutorials that were written before Rails 4.0 introduced \u201cstrong parameters\u201d in the controller. 19.14.2 Private Methods If you paid close attention to the code you added to the Contacts controller, you may have noticed the keyword private above the secure_params method definition. This is a bit of software architecture that limits access to the secure_params method (plus any more methods we might add beneath it). Very simply, adding the private keyword restricts access to the secure_params method so only methods in the same class can use it. You might be puzzled; after all, how else could it be accessed? We haven\u2019t explored calling methods from other classes, so I\u2019ll just say that without the private keyword, the secure_params method could be used from code anywhere in our application. In this case, we apply the private keyword because we want to be sure the secure_params method is only used in the ContactsController class. It\u2019s just a bit of \u201cbest practice\u201d and for now, you can simply learn that secure_params method should be a private method. Now let\u2019s look at routing for controllers that are built the \u201cRails way.\u201d 19.15 Routing Rails routing is aware of the seven standard controller actions. In fact, it takes only one keyword (with one parameter) to generate seven different routes for any controller. The keyword is resources and supplying a name that matches a model and controller provides all seven routes. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do resources :contacts, only: [:new, :create] root to: 'visitors#new' end Here we\u2019ve added resources :contacts, only: [:new, :create] . We only want two routes so we\u2019ve added the restriction only: [:new, :create] . The new route has these properties: new_contact_path - route helper contacts - name of the controller (ContactsController) new - controller action http://localhost:3000/contacts/new - URL generated by the route helper GET - HTTP method to display a page The create route has these properties: contacts_path - route helper contacts - name of the controller (ContactsController) create - controller action http://localhost:3000/contacts - URL generated by the route helper POST - HTTP method to submit form data You can run the rails routes command to see these in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contacts POST /contacts(.:format) contacts#create new_contact GET /contacts/new(.:format) contacts#new root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command shows we\u2019ve created the routes we need. Our new route new_contact_path can now be used. We\u2019ve completed our move to the model-view-controller architecture by adding the appropriate routes. 19.16 Change Navigation Links With our new model-view-controller architecture, we need to change the navigation links. Change the file app/views/layouts/_navigation_links.html.erb : <%# add navigation links to this file %> < %= link\\_to 'About', page\\_path('about') %> < %= link\\_to 'Contact', new\\_contact\\_path %> We\u2019re ready to test the model-view-controller implementation of the Contact feature. Be sure you\u2019ve removed the file app/views/pages/contact.html.erb , as it is no longer used. 19.17 Test the Application If you need to restart the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link; then fill out and submit the form. You should see the flash message \u201cMessage sent from \u2026\u201d on the home page. Try submitting the form with a blank name. You\u2019ll see a warning message, \u201cPlease review the problems below.\u201d Try submitting the form with an invalid email address such as \u201c [email protected] \u201d. The form will re-display with a message, \u201cPlease review the problems below,\u201d and next to the email field, \u201cis invalid.\u201d Combining SimpleForm error handling with ActiveModel validation is powerful. If validation fails after the form is submitted, the page will redisplay and SimpleForm will display an appropriate error message. 19.18 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"contact form\" $ git push We\u2019ve built a sophisticated Contact form. Chapter 20 Send Mail Email sent from a web application is called transactional email . As a website visitor, you\u2019ve probably seen transactional email such as these messages: sign up confirmation email response to a password reset request acknowledgment of a purchase notice of a change to a user profile setting A web application can send email to a visitor. It can also send messages to its owner or webmaster. On large active sites, email notices can be impractical (an admin interface is better) but for our small-volume tutorial application, it makes sense to email the contact request directly to the site owner (Foobar Kadigan is retired and enjoys receiving email). 20.1 User Story Let\u2019s plan our work with a user story: *Send Contact Message* As the owner of the website I want to receive email messages with a visitor's name, email address, and some text In order to communicate with visitors To implement the user story, let\u2019s create a feature that sends the contact data as an email message. 20.2 Implementation Rails makes it easy to send email. The ActionMailer gem is part of any Rails installation. Implementation of email closely follows the model-view-controller architecture. To implement email, you\u2019ll need: model view mailer The \u201cmailer\u201d is similar to a controller, combining data attributes from a model with a view file. Any methods we add to the mailer class can be called from a controller, triggering delivery of an email message. The model can be any we\u2019ve already created. In this case, we\u2019ll use the Contact model, since it gives us access to the visitor\u2019s name, email address, and message. We\u2019ll create a mail-specific view file in the app/views/user_mailer/ folder. Our folder for mail-specific views will go in the app/views/ directory as a sibling of the app/views/layouts folder. The Rails directory structure already gives us a folder app/mailers/ for the mailer class and, not surprisingly, it is a sibling of the app/controllers/ folder. We don\u2019t have to create the necessary folders and files manually, as the rails generate command runs a utility to create what we need. 20.3 Create View Folder and Mailer Use the rails generate command to create a mailer with a folder for views: $ rails generate mailer UserMailer The name of the mailer isn\u2019t important; we\u2019ll use UserMailer because it is obvious. The rails generate command will create a file: app/mailers/user_mailer.rb It also creates test files which we won\u2019t use in this tutorial. It uses three additional files which are provided by default in a Rails 5 application: app/mailers/application_mailer.rb app/views/layouts/mailer.html.erb app/views/layouts/mailer.text.erb This implements our model-view-mailer architecture. 20.4 Edit the Mailer Add a contact_email method to the mailer by editing the file app/mailers/user_mailer.rb : class UserMailer < ApplicationMailer default from: \" [email protected] \" def contact_email(contact) @contact \\= contact mail(to: Rails.application.secrets.owner_email, from: @contact.email, :subject \\=> \"Website Contact\") end end The UserMailer class inherits behavior from the ApplicationMailer class. We\u2019ll create a method definition that assigns the contact argument to the instance variable @contact . Like a controller that combines a model with a view, our mailer class makes the instance variable available in the view. The name of the method isn\u2019t important; it can be anything obvious. We\u2019ll use it in the ContactsController to trigger mail delivery. Like the render method in a web page controller, the ActionMailer parent class has a mail method that renders the view. You\u2019ll need to use your email address in the mailer. You should have already set a configuration variable for your email address in the file config/secrets.yml . If you haven\u2019t done so, do it now. By inserting the configuration variable with your email address after to: , your inbox will receive the message. If Foobar Kadigan was a real person, we\u2019d supply his email address here. We need to insert a \u201cfrom\u201d address in two places. First there is a default, for all messages that do not set a \u201cfrom\u201d address. We will use \u201c [email protected] \u201d for the default \u201cfrom\u201d address. The email is originating from a web application that does not receive email, so this indicates the email address should not be used for replies. For emails going to website visitors, it would be best to provide a default email address for a customer service representative on the \u201cfrom\u201d line, so the recipient can easily reply. We\u2019re not sending email messages to visitors so we can ignore this nicety. For our contact_email method, we\u2019ll insert the email address of the visitor as the \u201cfrom\u201d address since we are sending a message to the site owner. This makes it easy for Foobar Kadigan to click \u201creply\u201d when he is reading the contact messages in his inbox. You can see our use of the email attribute from the Contact model in the expression from: @contact.email . That\u2019s all we need for mailer class. Next we\u2019ll create a view containing the message. 20.5 Create Mailer View There are two types of mailer views. One contains plain text, for recipients who don\u2019t like formatted email (some people still read email from the Unix command line). The other type contains HTML markup to provide formatting. It\u2019s good to create a message of both types, though most recipients will benefit from HTML formatting. The mailer view for formatted email looks very similar to a web page view file. It contains HTML markup plus Ruby expressions embedded in <%= ... %> delimiters. In the UserMailer class, we\u2019ve assigned the Contact model to the instance variable @contact so any attributes are available for use in the message. Create a file app/views/user_mailer/contact_email.html.erb : Website Contact This visitor requested contact: < %= @contact.name %> < %= @contact.email %> The visitor said: \" < %= @contact.content %>\" You can easily imagine how this view would look as a web page. You\u2019ll soon see it as an email message in your inbox. For those recipients who like plain text, create a view without HTML markup. Create a file app/views/user_mailer/contact_email.text.erb : You received a message from <%= @contact.name %> with email address <%= @contact.email %>. The visitor said: \"<%= @contact.content %>\" You\u2019ve created views for the email message. Now we can integrate our email feature with the ContactsController. 20.6 Modify Controller We\u2019ll add code to the ContactsController: UserMailer.contact_email(@contact).deliver_now Replace the contents of the file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def new @contact \\= Contact.new end def create @contact \\= Contact.new(secure_params) if @contact.valid? UserMailer.contact_email(@contact).deliver_now flash[:notice] \\= \"Message sent from #{@contact.name}.\" redirect_to root_path else render :new end end private def secure_params params.require(:contact).permit(:name, :email, :content) end end The UserMailer class is available to any controller in the application. We call the contact_email method we\u2019ve created, passing the @contact instance variable as an argument, which renders the email message. Finally, the deliver_now method initiates delivery. For more on sending email from a Rails application, see RailsGuides: Action Mailer Basics . 20.7 Test the Application If your web server is not running, start it: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link and try submitting the form. The email message should be visible in the console. If you didn\u2019t get an email message in your inbox, make sure you set your config/environments/development.rb file to perform deliveries as described in the \u201cConfiguration\u201d chapter. Be sure to restart your server if you change the configuration file. 20.8 Troubleshooting If you get an error, you can practice troubleshooting. You\u2019ve set up a complex system with many dependencies. It\u2019s great if it works, but there are several opportunities for errors. The most likely errors are a missing user name or password. We are trying to connect to the SendGrid email service. SendGrid expects your SendGrid user name. Mine is DanielKehoe (it is not my email address). SendGrid also expects a password. 20.8.1 User Name Issues If you get the error message, \u201cSMTP-AUTH requested but missing user name,\u201d SendGrid is not receiving a user name it recognizes. Check that the user name is set in your Unix environment variables: $ echo \"$SENDGRID_USERNAME\" You should see your SendGrid user name. Make sure you\u2019ve used underscores consistently. If your Unix environment variable is SENDGRID_USER_NAME and the config/secrets.yml file contains SENDGRID_USERNAME , you\u2019ll have a problem. 20.8.2 Password Issues If you get the error message, \u201cSMTP-AUTH requested but missing secret phrase,\u201d SendGrid is not receiving the SendGrid password. Check that the SendGrid password is set in your Unix environment variables: $ echo \"$SENDGRID_PASSWORD\" You should see the long cryptic string in the console response. Again, make sure you\u2019ve used underscores consistently, and SENDGRID_PASSWORD is used for the Unix environment variable as well as the config/secrets.yml file. 20.8.3 Problems with Environment Variables First, close and reopen your terminal to make sure your environment reflects any recent changes you\u2019ve made to your shell configuration. Then try echo \"$SENDGRID_USERNAME\" to see if you get the credentials you set in your .bash_profile or .bashrc files. If you\u2019ve set up Unix environment variables but echo \"$SENDGRID_USERNAME\" doesn\u2019t return the correct variable in the console, you may have a problem with the way you\u2019ve set Unix environment variables. Most computers use the bash shell and you can set environment variables in your .bash_profile or .bashrc files. But not every system is alike. If it seems Unix environment variables are not working, you may have to find a colleague who can help you troubleshoot. If your Unix environment variables are not working, you can hardcode the variables in your config/secrets.yml file: Replace the following: development: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> with: development: email_provider_username: example email_provider_password: 's#cr*t' In a YAML file, you do not need quotes unless your string contains special characters. If your password contains any of these characters you should surround the string with single quotes: : { } [ ] & * # ? | - < > = ! % @ \\ Remember the security rule: Don\u2019t commit the config/secrets.yml file to Git if it contains any secrets. Test the application and finish your troubleshooting. Then remove the hardcoded values from the config/secrets.yml file before committing to Git. 20.9 Asynchronous Mailing You may notice a delay in the responsiveness of the Contact form after adding the email feature. Unfortunately, there\u2019s a performance penalty with our new feature. Our controller code connects to the SendGrid server and waits for a response before it renders the home page and displays the acknowledgment message. The performance penalty can be avoided by changing the implementation so that the controller doesn\u2019t wait for a response from the SendGrid server. We call this asynchronous behavior because sending email does not need to be \u201cin sync\u201d with displaying the acknowledgment. Eliminating a delay improves the user experience and makes the site feel more responsive. Asynchronous mailing requires a queueing system for background jobs . For our tutorial application, and for a typical small business website, the delay caused by lack of queueing is no big deal. Keep in mind, though, as you tackle bigger projects in Rails, you will need to implement a queueing system. Rails includes the Active Job feature for background processing. The Mailing List with Active Job tutorial in the Capstone Rails Tutorials series explains how to use it. 20.10 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"sending mail\" $ git push You\u2019ve created a Rails application that handles a form and sends email to the site owner. Mail is a practical way to connect with site visitors. Let\u2019s implement a feature that collects email addresses for mass mailing of a newsletter. Chapter 21 Mailing List Even as other messaging avenues become increasingly popular, such as messaging apps or Facebook messages, email remains the most practical way to stay in touch with website visitors. Encouraging a visitor to provide an email address means offering an invitation to a dialog and a relationship beyond a single visit. If you have a legitimate reason to stay in touch, and you\u2019ve motivated the visitor to leave an email address, you\u2019ll need a mailing list service. You\u2019ve seen how Rails can send an email message. From what you\u2019ve seen so far, you can imagine it would not take much code to loop through a list of email addresses from a database, sending a message to each. In the early days of the web, it was easy for any system administrator to write a script for mass mailings. Since there is negligible cost to sending bulk email, unscrupulous and ignorant operators sent email to any address they could scrape, borrow, or steal. The resulting flood of spam made checking one\u2019s inbox an icky experience and destroyed much of the early culture of the Internet. Fortunately, services such as Gmail arose to filter email. There is now a thick (but leaky) layer of screening protocols that redirect spam to a junk folder. One reason you won\u2019t use a Rails application to send bulk email is that a web application server is not the most efficient tool for sending email. More significantly, there\u2019s a good chance your email won\u2019t go through or, if it does (and someone complains), you\u2019ll quickly see your IP address blacklisted. That\u2019s why we use mailing list services to send bulk email such as newsletters or promotional offers. Considerable expertise is required to keep email from being filtered as spam (see MailChimp\u2019s article Email Delivery For IT Professionals . Email service providers increase reliability of delivery. These services track deliveries and show how well your email is being delivered. You\u2019ll also get features such as management of \u201cunsubscribe\u201d requests and templates to design attractive messages. There are at least a dozen well-established email service providers that allow a Rails application to programmatically connect to the service (via an API) to add or remove email addresses. For a list, see the article Send Email with Rails . For this tutorial application, we\u2019ll use MailChimp because there is no cost to open an account and you can send up to 12,000 emails/month to list of 2000 or fewer subscribers for free. Spam is unsolicited email. Don\u2019t ever send spam, whether for yourself, a client, or an employer. If recipients complain, your IP address and domain name will be blacklisted. So be very careful to only send to subscribers who signed up, send what subscribers expect, and be sure to offer value. If you get complaints, or the unsubscribe rate is high, stop. We\u2019ll assume we\u2019ve discussed the rules with Foobar Kadigan and he is eager to offer a newsletter to his visitors that will be genuinely appreciated. 21.1 User Story Let\u2019s plan our work with a user story: *Subscribe to Mailing List* As a visitor to the website I want to sign up for a mailing list In order to receive news and announcements To implement the user story, we\u2019ll add a mailing list feature. 21.2 Implementation We\u2019ll use the Rails model-view-controller architecture. We\u2019ll need: Visitors model view for visitors#new Visitors controller with new and create methods routing for visitors#new and visitors#create We\u2019ll add a Visitor model that has a data attribute for an email address. We already have a Visitors controller that renders the home page using the file in the app/views/visitors/ folder. We\u2019ll replace the contents of the view file with a nice photo, a marketing message, and a form. Our Visitors controller new and create methods will be very similar to what we created for the Contacts controller. Instead of connecting to SendGrid to send a message, we\u2019ll call a method to save the visitor\u2019s email address to a MailChimp mailing list. 21.3 Gibbon Gem The Gibbon gem is a convenient wrapper for the MailChimp API . We could connect to the MailChimp API using other gems that provide low-level plumbing such as HTTP connections ( httparty ) and data parsing ( multi_json ), but other developers have already done the work of wrapping the plumbing in a higher-level abstraction that easily fits into a Rails application. Amro Mousa\u2019s Gibbon gem is popular and actively maintained. In your Gemfile , you\u2019ve already added: gem 'gibbon' and previously run $ bundle install . 21.4 Home Page Earlier we built a home page that provided a simple demonstration of the Ruby language. We\u2019ll discard it and replace it with a page that you could adapt for a typical small-business website. We want a nice photo, space for a marketing message, and the \u201csign up\u201d form. Replace the contents of the file app/views/visitors/new.html.erb : <% content_for :title do %>Foobar Kadigan<% end %> <% content_for :description do %>Website of Foobar Kadigan<% end %> Stay in touch. < %= form\\_with(model: @visitor) do |f| %> < %= f.email\\_field :email, placeholder: 'Your email address...', autofocus: true %> < %= f.submit 'Sign up for the newsletter', class: 'submit' %> < % end %> We include content_for view helpers that pass a title and description to the application layout. We add a photo to the page with an <img> tag. We\u2019re taking a shortcut and using a placeholder photo from the lorempixel.com service. The section and <div class=\"column\"> tags apply our CSS grid to create a row with two columns, one for our marketing message, and one for the form. Our marketing message is merely a placeholder. For a real website, you\u2019d likely craft a stronger call to action than merely \u201cStay in touch.\u201d The form is very similar to the form on the Contact page, except we initialize it with the @visitor instance variable and only need a field for an email address. We use the :placeholder parameter to create a hint in the empty input field. A submit element will contain the text, \u201cSign up for the newsletter,\u201d and we apply a CSS class to style the element as a button. 21.4.1 Photo Options You\u2019re free to modify this page as you wish, as long as you keep the form intact. You might wish to modify the placeholder photo. If you don\u2019t like cats, try http://lorempixel.com/1170/600/nightlife/1 or any other categories from the lorempixel.com service. You can change the size by modifying the dimensions from 1170 (pixel width) by 600 (pixel height). You can replace the placeholder photo with your own. Look for the app/assets/images folder and add an image. Instead of the HTML <img> tag, use the Rails image_tag view helper, like this: <%= image_tag \"myphoto.jpg\" %> We\u2019ll need a Visitor model to initialize the form. 21.5 Visitor Model The Visitor model is almost identical to the Contact model we created earlier, except there is just one data attribute for the email field. We\u2019ll also add a subscribe method to add a visitor to a MailChimp list. We\u2019ll call this method from the controller when we process the submitted form. Create a file app/models/visitor.rb : class Visitor include ActiveModel::Model attr_accessor :email validates_presence_of :email validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i def subscribe mailchimp \\= Gibbon::Request.new(api_key: Rails.application.secrets.mailchimp_api_key) list_id \\= Rails.application.secrets.mailchimp_list_id result \\= mailchimp.lists(list_id).members.create( body: { email_address: self.email, status: 'subscribed' }) Rails.logger.info(\"Subscribed #{self.email} to MailChimp\") if result end end When you copy this, be careful to keep the long regex expression with: /.../i on one line (no line breaks). Just as we did for the Contact model, we use include ActiveModel::Model to mix in behavior from the ActiveModel class. This is the best way to create a model that does not use a database. In other applications, where models use a database, you will create a model class that inherits from ActiveRecord instead. We create the email attribute using the attr_accessor keyword. We set validation requirements using validates_presence_of and validates_format_of keywords. To subscribe a visitor to a mailing list, you need to provide: list_id - identify the MailChimp list email_address - address of the visitor status - subscribed, pending, or unsubscribed We specify \u201csubscribed\u201d to immediately add the address without asking the user for confirmation. We could specify \u201cPending\u201d if we wanted to add the address with double-opt-in so the visitor receives a request to confirm the email address before they are subscribed. Our subscribe method does the work of connecting to the MailChimp server to add the visitor to the mailing list. We instantiate the Gibbon object which provides all the connectivity, providing the mailchimp_api_key value, which we\u2019ve set in the config/secrets.yml file. We assign the Gibbon object to the mailchimp variable (we could name it anything). We set the list_id from a configuration variable in the config/secrets.yml file. The visitor\u2019s email_address is an attribute of the model we obtain from self . We must set the status property to \u2019subscribed\u2019 to indicate the visitor should receive mailings. Finally, if the application successfully adds the new subscriber, we write a message to the logger. If we get an error when trying to add the subscriber, Gibbon will raise an exception. 21.6 Visitors Controller We already have a Visitors controller that contains a simple new method. We\u2019ll change the new method, add a create method, and provide a secure_params private method to secure the controller from mass assignment exploits. Replace the contents of the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @visitor \\= Visitor.new end def create @visitor \\= Visitor.new(secure_params) if @visitor.valid? @visitor.subscribe flash[:notice] \\= \"Signed up #{@visitor.email}.\" redirect_to root_path else render :new end end private def secure_params params.require(:visitor).permit(:email) end end Our new method now assigns the Visitor model to an instance variable instead of the Owner model. The create method is almost identical to the Contacts controller create method. We instantiate the Visitor model with scrubbed parameters from the submitted form. If the validation check succeeds, we subscribe the visitor to the MailChimp mailing list with the @visitor.subscribe method. All the work of connecting to MailChimp happens in the Visitor model. If the validation check fails, we redisplay the home page (the new action). 21.7 Clean Up We no longer use the Owner model, so we can delete the file app/models/owner.rb : $ rm app/models/owner.rb There\u2019s no harm if it remains but it is good practice to remove code that is no longer used. 21.8 Routing Our routing is now more complex. In addition to rendering the visitors# new view as the application root (the home page), we need to handle the create action. We can use a \u201cresourceful route\u201d as we did with the Contacts controller. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do resources :contacts, only: [:new, :create] resources :visitors, only: [:new, :create] root to: 'visitors#new' end The root path remains visitors#new . Order is significant in the config/routes.rb file. As the final designated route, the root path will only be active if nothing above it matches the route. We\u2019ve added resources :visitors, only: [:new, :create] . We only want two routes so we\u2019ve added the restriction only: [:new, :create] . The new route has these properties: new_visitor_path - route helper visitors - name of the controller (VisitorsController) new - controller action http://localhost:3000/visitors/new - URL generated by the route helper GET - HTTP method to display a page The create route has these properties: visitors_path - route helper visitors - name of the controller (VisitorsController) create - controller action http://localhost:3000/visitors - URL generated by the route helper POST - HTTP method to submit form data You can run the rails routes command to see these in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contacts POST /contacts(.:format) contacts#create new_contact GET /contacts/new(.:format) contacts#new visitors POST /visitors(.:format) visitors#create new_visitor GET /visitors/new(.:format) visitors#new root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command shows we\u2019ve created the routes we need. 21.9 Test the Application If you need to start the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see our new home page with the placeholder photo and the \u201csign up\u201d form. Enter your email address and click the \u201csign up\u201d button. You should see the page redisplay with an acknowledgment message. Try entering an invalid email address such as \u201c [email protected] @\u201d, or click the submit button without entering an email address, and you should see an error message. You\u2019ll have to log in to MailChimp and check your list of subscribers to see if the new email address was added successfully. With MailChimp, you can send a welcome message automatically when the visitor signs up for the mailing list. Use the welcome message to inform the visitor that they\u2019ve successfully subscribed to the mailing list and will receive the next newsletter email. It\u2019s a bit difficult to find the MailChimp option to create a welcome message. Strangely, MailChimp considers a welcome message a \u201cform.\u201d Here\u2019s how to find it. On the MailChimp \u201cLists\u201d page, click the \u201cdown arrow\u201d for a list and click \u201cSignup forms.\u201d Then click \u201cGeneral forms.\u201d On the \u201cCreate Forms\u201d page, there is a drop-down list of \u201cForms & Response Emails.\u201d The gray box shows \u201cSignup form.\u201d Click the down arrow. Select the menu item named \u201cFinal \u2018Welcome\u2019 Email\u201d and you\u2019ll be able to create a welcome message. 21.10 Git Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"mailing list\" $ git push Our tutorial application is feature complete. Let\u2019s deploy it so we can see it running as a real website. Chapter 22 Deploy You\u2019ve been running the default web server on your local machine. If you wanted, you could leave your computer running, set up a managed DNS service , and your web application would be accessible to anyone. But even if you wanted to leave your computer running 24 hours a day, you\u2019re probably not a security expert, your web server isn\u2019t tuned to handle much traffic, and your computer is distant from the interconnection hubs where most websites are hosted. For these reasons, when we move a web application from development to production, we deploy it to a web hosting service that provides a hosting platform on a server located in a strategically-located data center . Data centers offer colocation services , renting rack-mounted computers with fast Internet connections that can be configured as web servers. In the early days of the web, deploying a web application required system administration skills to configure and maintain a web server. Today, some developers like to set up their web servers \u201cfrom bare metal\u201d using virtual private servers from Linode, Slicehost, Rackspace, Amazon EC2, or others. With sufficent skills and study, they say there is a feeling of satisfaction from doing it yourself. But not everyone wants to be a system administrator. Most Rails developers simply use a hosted platform as a service (PaaS) provider such as Heroku , DigitalOcean , EngineYard , OpenShift , or Pivotal Cloud Foundry . If you\u2019ve previously built web sites, you may already be using a shared web hosting service such as GoDaddy or DreamHost. Be skeptical if a shared web hosting service, designed for WordPress or static websites, claims to support Rails applications; most do so badly. Shared hosting services offer file space for static websites on servers that are shared by thousands of websites. A Rails application requires considerably greater computing resources and specialized expertise. In contrast, a platform as a service provider offers a hardware and software stack optimized for application performance and developer convenience. Heroku is the best known and most popular PaaS provider and we\u2019ll use it to deploy the tutorial application. Using Heroku or another PaaS provider means you don\u2019t need skills as a system administrator to manage your web server. Instead, you\u2019ll have experts maintaining the production environment, tuning system performance, and keeping the servers running. 22.1 Heroku Costs It costs nothing to set up a Heroku account and deploy as many applications as you want. You\u2019ll pay only if you upgrade your hosting to accommodate a busy website. Heroku pricing is based on a measure of computing resources the company calls a \u201cdyno.\u201d Think of a dyno as a virtual server (though it is not). For personal projects, you can run your Rails application on a single dyno and never incur a charge, as long as it is not active more than 12 hours a day. A single dyno idles after one hour of inactivity, \u201cgoing to sleep\u201d until it receives a new web request. For a personal project, this means your web application will respond with a few seconds delay if it hasn\u2019t received a web request in over an hour. After it wakes up, it will respond quickly to every browser request. If you want your web application running 24 hours per day and responding to every request without delay, Heroku will charge $7 per month for a \u201chobby\u201d account. You\u2019ll be able to set up a custom domain, using your own domain name. Heroku offers the option of adding dynos to handle more traffic for $25 per month; here\u2019s an article that compares Heroku costs . A single dyno can serve thousands of requests per second, but performance depends greatly on your application. As a default, Heroku supports Puma , the recommended web server for Rails 5. Serving a typical Rails application that takes 100ms on average to process each request, Puma can accommodate about 50 requests per second per dyno, which is adequate for a personal project. If traffic surges on your website and exceeds 50 requests per second, you can scale up with more dynos. Heroku is ideal for hosting our application: no system administration expertise is required hosting is free performance is excellent For this tutorial application, we won\u2019t concern ourselves with the possibility that the website may get a lot of traffic. I\u2019m sure you\u2019ll join me in offering hearty thanks to Heroku for providing a convenient service that beginners can use for free. Let\u2019s deploy! 22.2 Test the Application Before deploying an application to production, a professional Rails developer runs integration or acceptance tests. If the developer follows the discipline of test-driven development , he or she will have a complete test suite that confirms the application runs as expected. Often the developer uses a continuous integration server which automatically runs the test suite each time the code is checked into the GitHub repository. We haven\u2019t used test-driven development to build this application so no test suite is available. You\u2019ve tested the application manually at each stage. 22.3 Preparing for Heroku You\u2019ll need to prepare your Rails application for deployment to Heroku. 22.3.1 Gemfile We need to modify the Gemfile for Heroku. We add a group :production block for a gem that Heroku needs: pg - PostgreSQL gem Heroku doesn\u2019t support the SQLite database; the company provides a PostgreSQL database. Though we won\u2019t need it for our tutorial application, we must include the PostgreSQL gem for Heroku. We\u2019ll mark the sqlite3 gem to be used in development only. Open your Gemfile and replace the contents with the following: Gemfile source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' gem 'sqlite3' end group :production do gem 'pg' end We have to run bundle install because we\u2019ve changed the Gemfile. The gem we\u2019ve added is only needed in production so we don\u2019t install it on our local machine. When we deploy, Heroku will read the Gemfile and install the gem in the production environment. We\u2019ll run bundle install with the \u2013without production argument so we don\u2019t install the new gem locally: $ bundle install --without production You\u2019ll see: . . . Gems in the group production were not installed. Use `bundle show [gemname]` to see where a bundled gem is installed. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"gems for Heroku\" $ git push 22.3.2 Asset Pipeline in Production It is important to understand that assets are compiled by Heroku at the time of deployment. Rails compiles assets to make our application faster for the user. The Rails asset pipeline produces single CSS and JavaScript files that combine all the files in the folders app/assets/javascripts/ and app/assets/stylesheets/ . In development mode, the Rails asset pipeline \u201clive compiles\u201d all CSS and JavaScript files so any changes are reflected immediately. But compiling assets adds processing overhead. In production, a web application would be slowed unnecessarily if assets were compiled for every web request. Consequently, assets are precompiled by Heroku at the time we deploy our application to production. When assets are compiled, the Rails asset pipeline will automatically produce concatenated and minified application.js and application.css files from files listed in the manifest files app/assets/javascripts/application.js and app/assets/stylesheets/application.css.scss . The result will be several files added to the public/assets/ folder. The filenames will contain a long unique identifier that prevents caching when you change the application CSS or JavaScript. You can precompile assets manually with the command rails assets:precompile but ordinarily it is not necessary. It is a likely indicator that the asset pipeline is not working or assets are not compiled if CSS styling is missing from your web pages. If you want to learn more about the asset pipeline, refer to the Rails Guide on the Asset Pipeline or an article from LaunchSchool . 22.3.3 Option to Ban Spiders Do you want your website to show up in Google search results? If there\u2019s a link anywhere on the web to your site, within a few days (sometimes hours) the Googlebot spider will visit your site and add it to the database for the Google search engine. Most webmasters want their sites to be found in Google search results. If that\u2019s not what you want, you may want to modify the file public/robots.txt to prevent indexing by search engines. Only change this file if you want to prevent your website from appearing in search engine listings: # See http://www.robotstxt.org/robotstxt.html for documentation To ban all spiders from the entire site uncomment the next two lines: User-agent: * Disallow: / To block all search engine spiders, remove the commenting from the User-Agent and Disallow lines. You can learn more about the format of the robots exclusion standard . 22.3.4 Humans.txt Many websites include a robots.txt file for nosy bots so it\u2019s only fair that you offer a humans.txt file for nosy people. Few people will look for it but you can add a file public/humans.txt to credit and identify the creators and software behind the website. The HTML5 Boilerplate project offers an example file or you can borrow from RailsApps . 22.4 Sign Up for a Heroku Account In the chapter, \u201cAccounts You May Need,\u201d I suggested you sign up for a Heroku account. To deploy an app to Heroku, you must have a Heroku account. Visit https://id.heroku.com/signup/devcenter to set up an account. Be sure to use the same email address you used to configure Git locally. You can check the email address you used for Git with: $ git config --get user.email 22.5 Heroku Toolbelt Heroku provides a command line utility for creating and managing Heroku apps. Visit https://toolbelt.heroku.com/ to install the Heroku Toolbelt. A one-click installer is available for Mac OS X, Windows, and Linux. The installation process will install the Heroku command line utility. It also installs the Foreman gem which is useful for duplicating the Heroku production environment on a local machine. The installation process will also make sure Git is installed. To make sure the Heroku command line utility is installed, try: $ heroku version heroku-toolbelt/... You\u2019ll see the heroku-toolbelt version number. You should be able to login using the email address and password you used when creating your Heroku account: $ heroku login Enter your Heroku credentials. Email: [email protected] Password: Could not find an existing public key. Would you like to generate one? [Yn] Generating new SSH public key. Uploading ssh public key /Users/adam/.ssh/id_rsa.pub The Heroku command line utility will create SSH keys if necessary to guarantee a secure connection to Heroku. 22.6 Heroku Create Be sure you are in your application root directory and you\u2019ve committed the tutorial application to your Git repository. Use the Heroku create command to create and name your application. $ heroku create myapp Replace myapp with something unique. Heroku demands a unique name for every hosted application. If it is not unique, you\u2019ll see an error, \u201cname is already taken.\u201d Chances are, \u201clearn-rails\u201d is already taken. The name must start with a letter and can only contain lowercase letters, numbers, and dashes. If you don\u2019t specify your app name ( myapp in the example above), Heroku will supply a placeholder name. You can easily change Heroku\u2019s placeholder name to a name of your choice with the heroku apps:rename command (see Renaming Apps from the CLI ). Don\u2019t worry too much about getting the \u201cperfect name\u201d for your Heroku app. The name of your Heroku app won\u2019t matter if you plan to set up your Heroku app to use your own domain name. You\u2019ll just use the name for access to the instance of your app running on the Heroku servers; if you have a custom domain name, you\u2019ll set up DNS ( domain name service ) to point your domain name to the app running on Heroku. The heroku create command sets your Heroku application as a Git remote repository. That means you\u2019ll use the git push command to deploy your application to Heroku. 22.7 Enable Email You\u2019ll need to enable email for production or else you\u2019ll get errors when your application tries to send email from Heroku. To use SendGrid, add the following to your config/environments/production.rb file: # email enabled in production config.action_mailer.smtp_settings \\= { address: \"smtp.sendgrid.net\", port: 587, domain: Rails.application.secrets.domain_name, authentication: \"plain\", enable_starttls_auto: true, user_name: Rails.application.secrets.email_provider_username, password: Rails.application.secrets.email_provider_password } # ActionMailer Config config.action_mailer.default_url_options \\= { :host \\=> Rails.application.secrets.domain_name } config.action_mailer.delivery_method \\= :smtp config.action_mailer.perform_deliveries \\= true config.action_mailer.raise_delivery_errors \\= false You can use port 25, 587, or 2525 (some ISPs restrict connections on port 25). Be sure to add the new settings before the end keyword in the file. The settings can be added anywhere, as long as they precede the end keyword! You\u2019ll need to specify the unique name you\u2019ve selected for your hosted application. We\u2019re using the Rails.application.secrets.domain_name configuration variable in two places in the file. The config/secrets.yml file provides configuration variables for use in production. Be sure to commit your code to the Git local repository: $ git add -A $ git commit -m \"email set for Heroku\" $ git push Next we\u2019ll set Heroku environment variables. 22.8 Set Heroku Environment Variables When you run your application, configuration values are obtained from the config/secrets.yml file, which contains Unix environment variables which are set in the .bash_profile or .bashrc files. Heroku doesn\u2019t have a .bash_profile or .bashrc file, so you\u2019ll need a way to set environment variables on Heroku. You can use the heroku config:add command. $ heroku config:add SENDGRID_USERNAME\\='example' $ heroku config:add SENDGRID_PASSWORD\\='secret' $ heroku config:add MAILCHIMP_API_KEY\\='my-key' $ heroku config:add MAILCHIMP_LIST_ID\\='mylistid' $ heroku config:add OWNER_EMAIL\\=' [email protected] ' $ heroku config:add DOMAIN_NAME\\='myapp.herokuapp.com' Don\u2019t use the values shown above. Instead, look in your .bash_profile or .bashrc files and copy the values you find there. When you set myapp.herokuapp.com , replace myapp with the name that Heroku is using for your application. If you want to use a custom domain name, you\u2019ll need to set up DNS ( domain name service ), which we won\u2019t cover in this tutorial. You don\u2019t need to set SECRET_KEY_BASE , even though it is in your config/secrets.yml file. Heroku sets it automatically. Check that the environment variables are set with: $ heroku config See the Heroku documentation on Configuration and Config Vars and the article Rails Environment Variables for more information. 22.9 Push to Heroku After all this preparation, you can finally push your application to Heroku. Be sure to commit any recent changes to the Git local repository before you push to Heroku. You commit your code to Heroku just like you push your code to GitHub. Here\u2019s how to push to Heroku: $ git push heroku master You may see a message, \u201cThe authenticity of host \u2018heroku.com\u2019 can\u2019t be established. Are you sure you want to continue connecting (yes/no)?\u201d. You can answer \u201cyes\u201d and safely continue. The push to Heroku takes several minutes. You\u2019ll see a sequence of diagnostic messages in the console, beginning with: Counting objects... and finishing with: remote: Verifying deploy.... done. 22.10 Updating the Application It is likely you\u2019ll make changes to your application after deploying to Heroku. Each time you update your site and push the changes to GitHub, you\u2019ll also have to push the new version to Heroku. A typical update scenario looks like this: $ git add -A $ git commit -m \"revised application\" $ git push $ git push heroku master 22.11 Visit Your Site Your application will be running at http://my-app-name.herokuapp.com/ . You can open any web browser and visit the site. For a shortcut, you can open your default web browser and visit your site from the command line: $ heroku open If you\u2019re using hosted development such as Cloud9, you\u2019ll need to open a browser manually to visit the site. If you\u2019ve configured everything correctly, you should be able to sign up for the newsletter and send a contact request. 22.12 Customizing For a real application, you\u2019ll likely want to use your own domain name for your app. See Heroku\u2019s article about custom domains for instructions. You may also want to improve website responsiveness by adding page caching with a content delivery network such as CloudFlare . CloudFlare can also provide an SSL connection for secure connections between the browser and server. Heroku offers many add-on services . These are particularly noteworthy: Adept Scale - automated scaling of Heroku dynos New Relic - performance monitoring For an in-depth look at your options, see the Rails Heroku Tutorial . 22.13 Troubleshooting When you get errors, troubleshoot by reviewing the log files: $ heroku logs If necessary, use the Unix tail flag to monitor your log files. Open a new terminal window and enter: $ heroku logs -t to watch the server logs in real time. 22.14 Where to Get Help Your best source for help with Heroku is Stack Overflow . Use the tag \u201cheroku,\u201d \u201clearn-ruby-on-rails,\u201d or \u201crailsapps\u201d when you post your question. Your issue may have been encountered and addressed by others. You can also check the Heroku Dev Center or the Heroku Google Group . Chapter 23 Analytics In earlier chapters, we built the tutorial application and deployed it for hosting on Heroku. We\u2019ve left something out. Though not obvious, it\u2019s very important: analytics. Analytics services provide reports about website traffic and usage. You\u2019ll use the data to increase visits and improve your site. Analytics close the communication loop with your users; your website puts out a message and analytics reports show how visitors respond. Google Analytics is the best known tracking service. It is free, easy to use, and familiar to most web developers. In this chapter we\u2019ll integrate Google Analytics with the tutorial application. There are several ways to install Google Analytics for Rails. The article on Analytics for Rails looks at various approaches and explains how Google Analytics works. For this tutorial, we\u2019ll use the Segment.com service. The service provides an API to send analytics data to dozens of different services, including Google Analytics. 23.1 Segment.com Segment.com is a subscription service that gathers analytics data from your application and sends it to dozens of different services, including Google Analytics. The service is free for low-volume websites, accommodating 1000 tracked users per month at no cost. There is no charge to sign up for the service. Using Segment.com means you install one JavaScript library and get access to reports from dozens of analytics services. You can see a list of supported services . The company offers helpful advice about which analytics tools to choose from . For low-volume sites, many of the analytics services are free, so Segment.com makes it easy to experiment and learn about the available analytics tools. The service is fast and reliable, so there\u2019s no downside to trying it. 23.2 Accounts You Will Need You will need an account with Segment.com. Sign up for Segment.com . You will need accounts with each of the services that you\u2019ll use via Segment.com. You\u2019ll likely want to start with Google Analytics, so you\u2019ll need a Google Analytics account and tracking ID. Visit the Google Analytics website to obtain the Tracking ID for your website. You\u2019ll need to know the domain name of your website to get an account for your website. If you\u2019ve deployed to Heroku without a custom domain, use the domain that looks like \u201cmyapp.herokuapp.com\u201d. Or use your custom domain if you have one. Use it for fields for \u201cWebsite Name,\u201d \u201cWeb Site URL,\u201d and \u201cAccount Name.\u201d Choose the defaults when you create your Google Analytics account and click \u201cGet Tracking ID.\u201d Your tracking ID will look like this: UA-XXXXXXX-XX . You won\u2019t need the tracking code snippet as we will use the Segment.com JavaScript snippet instead. You\u2019ll check your Google Analytics account later to verify that Google is collecting data. 23.3 Installing the JavaScript Library Segment.com provides a JavaScript snippet that sets an API token to identify your account and installs a library named analytics.js . This is similar to how Google Analytics works. The Segment.com library loads asynchronously, so it won\u2019t affect page load speed. The Segment.com JavaScript snippet should be loaded on every page and it can be included as an application-wide asset using the Rails asset pipeline. We\u2019ll add the Segment.com JavaScript snippet to a file named app/assets/javascripts/segment.js . The manifest directive //= require_tree . in the file app/assets/javascripts/application.js will ensure that the new file is included in the concatenated application JavaScript file. If you\u2019ve removed the //= require_tree . directive, you\u2019ll have to add a directive to include the app/assets/javascripts/segment.js file. Create a file app/assets/javascripts/segment.js and include the following: (function(){ // Create a queue, but don't obliterate an existing one! var analytics \\= window.analytics \\= window.analytics || []; // If the real analytics.js is already on the page return. if (analytics.initialize) return; // If the snippet was invoked already show an error. if (analytics.invoked) { if (window.console && console.error) { console.error('Segment snippet included twice.'); } return; } // Invoked flag, to make sure the snippet // is never invoked twice. analytics.invoked \\= true; // A list of the methods in Analytics.js to stub. analytics.methods \\= [ 'trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'reset', 'group', 'track', 'ready', 'alias', 'debug', 'page', 'once', 'off', 'on' ]; // Define a factory to create stubs. These are placeholders // for methods in Analytics.js so that you never have to wait // for it to load to actually record data. The `method` is // stored as the first argument, so we can replay the data. analytics.factory \\= function(method){ return function(){ var args \\= Array.prototype.slice.call(arguments); args.unshift(method); analytics.push(args); return analytics; }; }; // For each of our methods, generate a queueing stub. for (var i \\= 0; i < analytics.methods.length; i++) { var key \\= analytics.methods[i]; analytics[key] \\= analytics.factory(key); } // Define a method to load Analytics.js from our CDN, // and that will be sure to only ever load it once. analytics.load \\= function(key){ // Create an async script element based on your key. var script \\= document.createElement('script'); script.type \\= 'text/javascript'; script.async \\= true; script.src \\= ('https:' \\=== document.location.protocol ? 'https://' : 'http://') + 'cdn.segment.com/analytics.js/v1/' + key + '/analytics.min.js'; // Insert our script next to the first script element. var first \\= document.getElementsByTagName('script')\\[0\\]; first.parentNode.insertBefore(script, first); }; // Add a version to keep track of what's in the wild. analytics.SNIPPET_VERSION \\= '4.0.0'; // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load(\"YOUR_WRITE_KEY\"); })(); You can get the newest version of the code from the Segment.com Quickstart page. If you copy a newer version of the code, remove the <script type=\"text/javascript\"> and </script> tags from the top and bottom. The Rails asset pipeline will add the code to the application.js file which already contains the necessary <script> tags. If you copy the code from the Segment.com Quickstart instructions, also remove: // Make the first page call to load the integrations. If // you'd like to manually name or tag the page, edit or // move this call however you'd like. analytics.page(); We\u2019ll add analytics.page(); later, wrapping it in additional code to accommodate Rails Turbolinks. Note that the Segment.com website offers a minified version of the snippet for faster page loads. We\u2019ve used the non-minified version so you can read the code and comments. If you want, you can get minified version from the Segment.com website for improved speed. 23.4 Replace the Write Key You must replace YOUR_WRITE_KEY with your Segment.com \u201cWrite Key.\u201d After you log in to Segment.com , click on your \u201cworkspace,\u201d then choose a \u201csource,\u201d click \u201csettings,\u201d and click \u201cAPI Keys\u201d in the side navigation bar. Add the \u201cWrite Key\u201d in the file where you see this line: // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load(\"YOUR_WRITE_KEY\"); Now you must add extra code to the Segment.com JavaScript snippet. The extra code accommodates Turbolinks, plus page view and event tracking, which we\u2019ll look at next. 23.5 Add Integration Code To make sure every page is tracked when Rails Turbolinks is used, plus track page views and events, you must add the following JavaScript to the end of the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { console.log('page loaded'); analytics.page(); analytics.trackForm($('#new_visitor'), 'Signed Up'); analytics.trackForm($('#new_contact'), 'Contact Request'); }) Add it after the last line. Add it after the orthographic car wreck that looks like })(); . I\u2019ll explain the purpose of this code next. 23.6 Page View Tracking with Turbolinks To make sure every page is tracked when Rails Turbolinks is used, we\u2019ve added the following JavaScript to the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { . . . analytics.page(); . . . }) Rails 4.0 introduced a feature named Turbolinks to increase the perceived speed of a website. Turbolinks makes an application appear faster by only updating the body and the title of a page when a link is followed. By not reloading the full page, Turbolinks reduces browser rendering time and trips to the server. With Turbolinks, the user follows a link and sees a new page but Segment.com or Google Analytics thinks the page hasn\u2019t changed because a new page has not been loaded. To resolve the issue, you could disable Turbolinks by removing the turbolinks gem from the Gemfile. However, it\u2019s nice to have both the speed of Turbolinks and tracking data, so I\u2019ll show you how to get tracking data with Turbolinks. Turbolinks fires a load event when a page has been replaced. The code listens for the load event and calls the Segment.com analytics.page() method. This code will work even on pages that are not visited through Turbolinks (for example, the first page visited). 23.7 Event Tracking Segment.com gives us a convenient method to track page views. Page view tracking gives us data about our website traffic, showing visits to the site and information about our visitors. It\u2019s also important to learn about a visitor\u2019s activity on the site. Site usage data helps us improve the site and determine whether we are meeting our business goals. This requires tracking events as well as page views. The Segment.com JavaScript library gives us two methods to track events: trackLink trackForm Link tracking can be used to send data to Segment.com whenever a visitor clicks a link. It is not useful for our tutorial application because we simply record a new page view when a visitor clicks a link on our site. However, if you add links to external sites and want to track click-throughs, you could use the trackLink method. The method can also be used to track clicks that don\u2019t result in a new page view, such as changing elements on a page. The trackForm method is more useful for our tutorial application. We\u2019ve already appended it to the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { console.log('page loaded'); analytics.page(); analytics.trackForm($('#new_visitor'), 'Signed Up'); analytics.trackForm($('#new_contact'), 'Contact Request'); }) I\u2019ve included a console.log(\u2019page loaded\u2019) statement so you can check the browser JavaScript console to see if the code runs as expected. The trackForm method takes two parameters, the ID attribute of a form and a name given to the event. Form tracking will show us how many visitors sign up for the newsletter or submit the contact request form. Obviously we can count the number of subscribers in MailChimp or look in the site owner\u2019s inbox to see how many contact requests we\u2019ve received. But form tracking helps us directly correlate the data with visitor data. For example, we can analyze our site usage data and see which traffic sources result in the most newsletter sign-ups. You can read more about the Segment.com JavaScript library in the Segment.com documentation . 23.8 Troubleshooting Click \u201cDebugger\u201d in the navigation bar so you can monitor data sent to Segment.com from your application. When you test the application locally, you should see the results of page visits and form submissions within seconds in the Segment.com debugger. If you don\u2019t see your page visits in the Segment.com debugger, open the browser JavaScript console, visit a page, and check for the message \u201cpage loaded\u201d in the JavaScript console. In the Chrome browser, the JavaScript console is available under the item \u201cDeveloper\u201d in the \u201cView\u201d menu. 23.9 Segment.com Integrations After installing the Segment.com JavaScript snippet in your application, go to your \u201csources\u201d page and click the \u201cintegrations\u201d link to visit the integrations page to select the services that will receive your data. Each service requires a different configuration information. At a minimum, you\u2019ll have to provide an account identifier or API key that you obtained when you signed up for the service. For Google Analytics, enter your Google Analytics tracking id. It looks like UA-XXXXXXX-XX . With Google Analytics enabled as a Segment.com integration, you\u2019ll see form submissions appear in the Google Analytics Real-Time report, under the \u201cEvents\u201d heading. Note that Google doesn\u2019t process their data in real-time in most of its reports. Data appears immediately in the Google Analytics Real-Time report. Other Google Analytics reports, such as the Audience report, won\u2019t show data immediately. Check the next day for updated reports. 23.10 Deploy Commit to the Git repo and deploy to Heroku: $ git add -A $ git commit -m \"analytics\" $ git push Then you can deploy to Heroku: $ git push heroku master When you visit the site, you should see real-time tracking of data sent to Segment.com in the Segment.com debugger. Log into your Google Analytics account to see real-time tracking of visits to your website. Under \u201cStandard Reports\u201d see \u201cReal-Time Overview.\u201d You\u2019ll see data within seconds after visiting any page. 23.11 Improving the User Experience Website analytics can be used to improve visitors\u2019 experience of the website. Deploying the website is not the last step in your project. Unlike many earlier forms of communication (such as releasing a film, publishing a book, or broadcasting an advertisement), we can see how every visitor responds to the website. That means your work is not done when you deploy the site. Look at your usage data to see which elements of the site are getting attention and which are being used. Does no one visit the \u201cAbout\u201d page? Maybe the navigation link is difficult to find. Do many people visit the Contact page but few submit a contact request form? Maybe you should change the label on the button or offer other ways to contact the site owner. Effective and successful websites often are the result of systematic A/B testing (sometimes called split testing ). A/B testing is a technique of creating variations on a web page, such as changing text, layout, or button colors, and using website analytics to measure the effect of the change. You can learn more about services such as Content Analytics in Google Analytics, Optimizely , or Visual Website Optimizer . These services provide complete \u201cdashboards\u201d to set up usage experiments and measure results ( Optimizely is available as a Segment.com integration). 23.12 Conversion Tracking You may only be interested in knowing that people visit your site, without measuring visitors\u2019 engagement or response to the site. But in most cases, if you build a website, you\u2019ll offer a way for visitors to respond, whether it is by purchasing a product, signing up for a newsletter, or clicking a \u201clike\u201d button. The ultimate measure of website effectiveness is the conversion rate . The term comes from the direct marketing industry and originally referred to a measure of how people responded to \u201cjunk mail\u201d offers. For a website, the conversion rate indicates the proportion of visitors who respond to a call to action , which may be an offer to make a purchase, register for a membership, sign up for a newsletter, or any other activity which shows the visitor is engaged and interested. For our tutorial application, we can measure our website effectiveness by looking at the conversion rate for newsletter sign-ups. We\u2019re tracking page views which will give us a count of visits to the website home page. And we\u2019ve got event tracking in place to count newsletter sign-ups. If 100 people visit the home page and 10 people request a newsletter, we\u2019ve got a conversion rate of 10%. We can try to improve the conversion rate by improving the user experience (perhaps through A/B testing) or focusing on increasing traffic from sources that provide a higher conversion rate. You can monitor your site\u2019s conversion rate by setting up events as goals in Google Analytics. Segment.com also integrates with many services which provide conversion tracking. 23.13 Enjoy What You\u2019ve Achieved You\u2019ve completed building the tutorial application. If your project was to build an application for someone else, whether the company you work for, or a client like Foobar Kadigan, you\u2019ve completed the deliverable . You started with project planning, in the form of user stories. You implemented the application using a variety of technologies supported by the Ruby on Rails development platform. And you\u2019ve deployed the application for others to use, with analytics in place to track traffic and usage. Not every manager or client will appreciate the effort or the complexity of the project you\u2019ve built. Mr. Kadigan\u2019s happiness may depend on how well you\u2019ve understood his goals and the degree to which you\u2019ve met his expectations. If you\u2019re working for yourself, or launching your startup, you may be your own toughest boss, because there is always more to do. With technology projects, like many other aspects of life, though it seems you\u2019ll never get it right, and never get it done, there are moments when you can savor a sense of accomplishment. This is one of those moments. Before you start thinking about adding one more feature, or updating the application for the new releases that inevitably came out during the time you were working, take time to bask in the satisfaction of seeing the results of your work. Software development has its own unique rhythm of frustration and satisfaction. As software developers, we subject ourselves to hours, days, or weeks of struggle with code that is cryptic and resists understanding. We gain mastery for a few minutes and then turn to the next problem. With each feature you implement, or issue you resolve, you\u2019ll experience brief elation before resuming the grind of development. But at each milestone, and at the completion of the project, you\u2019ve built something tangible that you can use. You can try it out yourself and show it to others. Give yourself full credit. You\u2019ve built something extraordinary with little more than intelligence and attention. You\u2019ve leveraged the work of other developers who have contributed to the open source Ruby on Rails platform and you\u2019ve created your own unique product. This is what drives us as developers; to create something from nothing, using only our collective intelligence and ambition. Chapter 24 Testing You don\u2019t need to read this chapter if you will always be a student, or a hobbyist, working on personal projects. But if you wish to work as a professional Rails developer, or launch your own startup, with money and reputation at stake, you must learn about testing. In this chapter, I\u2019ll introduce the basic concepts of testing and show how to build a test suite for the tutorial application. 24.1 Why Test? Software applications are fragile. When you write a song, you can include a wrong note and the song won\u2019t break. In a film, technical flaws like a \u201cjump cut\u201d or a microphone in the frame won\u2019t ruin an entire movie. But an unseen error in a software program can disrupt a key feature or crash the entire application. Software applications are never finished. Songs and movies reach a stage of completion and are delivered to their audience, with no expectation that the completed work will change. With software applications, there\u2019s always an upcoming version with bug fixes or new features. As web developers, we continue to make changes to the applications that our customers are actively using. Sometimes new features are delivered within minutes, or hours, of committing new code to the repository. Software applications are complex. A web application, or any software program, is a machine with intricately connected parts, or dependencies . As an application grows, the connections quickly grow more complex, to the point where no one is able to see all the dependencies at once. Plus, web applications are often a collaborative effort, so no one person is familiar with every line of code. Combine the evolving nature of an application, with the complexity of the product, and the likelihood that flaws will be immediately noticed by users, and you\u2019ll realize why testing is so important to the software development process. Testing was once considered the sole responsibility of a quality assurance (QA) department. Senior developers created new features or fixed bugs. When the work was \u201cdone,\u201d lesser paid (and lower status) developers \u201cin QA\u201d clicked through screens, with written notes or scripts, as if they were users testing every feature of a program. Invariably, manual testing led to oversights, because testing notes were out of date, \u201cedge cases\u201d were overlooked, and the work was monotonous. In the best-run companies, QA engineers are now expert consultants on testing methods and a source of guidance for other developers. We now rely on automated testing . Even more important, the job of writing test code now belongs to the developer who creates a feature or fixes a bug. It\u2019s our responsibility to write adequate tests for any code we add to the repository. 24.2 What Are Tests? Developers talk about testing as if it were an activity different from writing code. It is not. Testing is something we do while writing code. We create tests with the same text editor we use use to write code. The tests themselves are written in Ruby, just like any other part of a Rails application. You\u2019ll put the test code in either a tests/ or spec/ folder, committed to the Git repository with all the other code. You\u2019ll use the specialized API of a testing framework for the methods of your tests, either Minitest or RSpec . Test code is different from code that implements features in one significant way: Instead of supporting interactions with a user, test code interacts with the code you\u2019ve written, verifying the code behaves as intended. 24.3 Scripted or Exploratory When testing is used for quality assurance, the goal is to create a suite of automated tests that will reveal any bugs that creep into code and break the application. Sometimes this is called scripted testing . These tests are checked into the software repository and maintained with the application. Often developers will set up a system for continuous integration (CI), which will automatically run the test suite whenever the repository is updated. Developers can set up a CI server such as Jenkins or use a hosted CI service such as Travis CI , CircleCI , or Semaphore to run tests automatically. Automated testing with continuous integration serves as a safety net for developers. There is another role for testing, which is often called exploratory testing , or developer testing . These tests may end up in an application test suite, but the primary purpose is to help a developer construct an application. Many developers, after gaining experience in writing tests for quality assurance, realize that writing tests can be a useful first step in figuring out how a feature should be implemented. It may seem odd to write tests first, but exploratory testing can clarify what behavior will be required, and help the developer think through alternatives and edge cases. This approach is called test-first development , and many developers will tell you that when you write tests first, you\u2019ll be more satisfied; you\u2019ll be more focused; and you\u2019ll avoid tangents and detours of the \u201cnice-to-have-but-not-really-needed\u201d variety. We\u2019ll look closely at test-first development in conjunction with Test-Driven Development (TDD) and Behavior-Driven Development (BDD) at the end of this chapter. First, let\u2019s gain an understanding of testing terminology and practice. 24.4 Regression and Acceptance We describe tests by the purpose they serve. In addition to exploratory testing used in test-first development, there are several kinds of tests used for quality assurance. Regression tests are run every time we change code. Sometimes we want to make sure new features don\u2019t break the existing application. More often, we run tests after changing existing code to make it more readable, elegant, or effective. We call this tinkering \u201c refactoring .\u201d Refactoring is very similar to what we call editing or rewriting when we work with the written word. Before we refactor, we need to know what results we expect from our code, and we need automated tests to execute our code and check for the expected results. If our automated tests are adequate, we can use the tests as regression tests, making sure our refactoring hasn\u2019t introduced new bugs. Acceptance tests are sometimes identical to regression tests, and may use the same test code. The purpose is different, so we give this kind of testing a different name. Acceptance tests provide accountability and serve a management function. These are tests that determine if a feature has been implemented as expected. It is common to run acceptance tests when an outside contractor delivers code, so we can determine if the team has delivered what we requested. We can also use acceptance tests to determine if our internal team has implemented the stated requirements. Proponents of behavior-driven development claim that the process of creating acceptance tests clarifies the product requirements. Obviously, if we want adequate acceptance tests, we need to plan carefully when specifying the product requirements. If we\u2019ve planned well, we can turn our user stories into automated tests that serve as acceptance tests. 24.5 Units and Integration We also describe tests by their relationship to the rest of the code. Unit tests probe the internal workings of the machine. If we\u2019ve written our code well, a small section of the code, such as a class or a method, will be a discrete unit that can be tested independently of all other units. Unit tests inspect the integrity of small parts of the application in isolation. When a unit test fails, we can quickly identify and fix broken code. We use integration tests to make sure the entire application works as expected. Integration tests mimic the behavior of real users. For a web application, an integration test may simulate a user signing in, filling out forms, clicking between pages, and verifying that contents of pages match expected results. Integration tests can also be called feature tests if they are designed to confirm that product features work as expected. Our feature tests can serve as acceptance tests if we use the test suite to determine if we\u2019ve correctly implemented our user stories or other product specifications. Sometimes these tests are called black box tests because the code is tested as if the application was a black box, with the internal workings of the application hidden from the observer. They are also called system tests or end-to-end tests . 24.6 Sample Data When we write tests, either feature tests or unit tests, we often want to check whether a method returns the data we expect. That means we have to create the data we need in advance of the test. Either we populate a database with the data we expect, or we disconnect the database and instantiate an object that provides the data we expect. Test frameworks give us a tool named a factory or a fixture to create sample data. Developers argue about what is better, factories or fixtures, but you\u2019ll encounter factories more often, particularly the popular FactoryGirl gem. A factory is an object that creates other objects. When you use FactoryGirl, you have the option of saving your object to the database (which is slow) or building your object in memory only (which is faster). Fixtures are used to populate a database with sample data before your tests run. If you use fixtures, you\u2019ll save sample data in a configuration file. Before tests run, Rails automatically loads all fixtures from configuration files in the test/fixtures folder. As you gain experience with testing, you\u2019ll become familiar with both factories and fixtures. 24.7 Test Doubles In unit testing, to isolate small parts of the application, sometimes we artificially decouple the code from the rest of the application. For example, with a unit test, we don\u2019t want to connect to an external service with an API to obtain data. Or we simply want a method to get a predictable response from another object. Test doubles stand in for external dependencies. The term is borrowed from Hollywood, where stunt doubles stand in for actors in action scenes. A test double is any kind of pretend object used in place of a real object for testing purposes. There are two types of test doubles, stubs and mocks . Stubs provide canned answers to calls made during the test, only responding when queried by the test. Sometimes stubs record information about the call, for example, the message sent or the number of times called. Mocks are pre-programmed objects that reproduce the behavior of the object they represent, forming a specification of an object\u2019s behavior. It takes time to write stubs and mocks and lots of experience to use them correctly, so as a beginner, you probably won\u2019t write stubs and mocks without help. As you can gain experience, you\u2019ll better understand the difference between stubs and mocks and learn how to use them. For now, it is enough to recognize the terminology and remember that tests run faster and better when we reduce coupling and complexity with test doubles. 24.8 Minitest and RSpec You\u2019ve already learned that Rails developers mix and match gems to create a favorite technology stack . Not everyone likes ERB for view templates. Some prefer Haml or Slim syntax for mixing HTML and Ruby in a view. Developers often stray from the default Rails stack when it comes to testing. Since the release of Ruby 1.9, Minitest has been supplied as a standard gem with all Ruby installations. Yet most Rails developers use RSpec for testing. In this tutorial, I\u2019ll use Minitest to introduce you to testing. Minitest is easier to set up and offers a syntax that is very similar to RSpec. Some developers say that there is no reason to use RSpec because Minitest provides almost all the convenience of RSpec with smaller size, faster speed, and less complexity. Other developers insist that RSpec is more expressive and flexible. Realistically, if you want a job working on most Rails teams, you\u2019ll need to learn RSpec. Get started with Minitest to learn the basics of testing. When you\u2019re ready for the next step, the Capstone Rails Tutorials will take you deeper. I also recommend the books Rails 4 Test Prescriptions by Noel Rappin and Everyday Rails Testing with RSpec by Aaron Sumner. 24.9 Capybara, the Ghost in the Machine Unit tests are simple, in principle and often in practice. The tests are just Ruby code, supplemented with methods from the test framework API. If we want unit tests for all the methods of a User class, we instantiate the class and write code that calls each method and verifies if the response matches our expectations. Using methods from the Minitest or RSpec test framework, we output a message that indicates whether each unit test passes or fails. Integration tests, or feature tests, require more of a framework than unit tests. We want our tests to be as realistic as possible, as if a robot was using a web browser and interacting with our web application. Fortunately, the maintainers of the Capybara gem have created such a robot. To create integration tests, we add the Capybara gem, using it with either Minitest or RSpec. Capybara gives us a visit method that simulates a user visiting a page. After we call the visit method, Capybara gives us a page object and allows us to test whether the page contains the content we expect. Every Rails application relies on a layer of middleware named Rack that ties into a web server. Capybara interacts with the web application, via calls to Rack, as if it was a browser making requests and receiving HTML files as a response. When we use Capybara, by default it operates in headless mode , interacting directly with the Rails application via Rack. \u201cHeadless\u201d means there is no graphical user interface (as if the absent screen was a computer\u2019s head). In headless mode, JavaScript is unavailable. If some of our application features require JavaScript, we must set up Capybara to act as a robot using a real web browser. Capybara has a built-in driver (named Selenium ) that gives our robot the option of automatically launching and using a real web browser for each test. By default, Capybara will use the Firefox web browser if it is installed on your computer. What you\u2019ll see is amazing. When you run tests using Capybara with the JavaScript option, the Firefox web browser will pop open on your desktop and you\u2019ll watch a ghost flying through your web application. With Capybara, you now have a ghostly QA department running your integration tests. 24.10 Four Phases of Feature Tests Test code is easier to understand when you recognize that tests proceed in stages, or phases. Code that simulates a user visiting a web page tends to be organized in four phases: set up visit page verify page contents neutralize The setup phase may include creating a user, signing in, or any other activity that creates the conditions for a test. With Capybara, the test visits the page, which requires Capybara to simulate a browser request to the Rails application. Then, in the third stage, we check if the server response contains the data we expect. Finally, we may need to clean up, resetting the original state of the application, or removing any data the test added to the database. 24.11 Four Phases of Unit Tests Unit tests also are organized in four stages: set up exercise verify teardown When you test a small part of the application in isolation, you\u2019ll focus on an object or method which we call the \u201csystem under test.\u201d The setup phase prepares the system under test. Often this means instantiating an object. Here is an example: user \\= User.new(email: ' [email protected] ') During the exercise phase, something is executed. Often this is a method call: user.save During verification, the result of the exercise is verified against the developer\u2019s expectations: user.email.must_equal ' [email protected] ' During teardown, the system under test is reset to its initial state. Rails integrates with Minitest or RSpec to reset a database to its initial state. You will seldom write code for the teardown phase. Now that you\u2019ve learned about the basic concepts of testing, let\u2019s set up Minitest for our first tests. 24.12 Set Up Minitest We\u2019ll set up testing with both Minitest and Capybara, so we can write both unit tests and feature tests. Minitest is a standard Ruby gem, installed when you install Ruby in your environment. We\u2019ll install the minitest-spec-rails gem which makes it easy to use an RSpec-like syntax with Minitest. We\u2019ll also add the minitest-rails-capybara gem to integrate Capybara with Minitest and Rails. Open your Gemfile and replace the contents with the following: Gemfile source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' gem 'sqlite3' end group :production do gem 'pg' end group :test do gem 'minitest-spec-rails' gem 'minitest-rails-capybara' end We\u2019ve added the two gems to the test group. Now, some gems are loaded only when we\u2019re writing code (during development), some are loaded only when the application is running on Heroku (deployed to production), and our newest additions only are loaded when we run tests. Next, install the additional gems: $ bundle install The bundle install command will download and install the gems from the rubygems.org server. 24.12.1 Run Tests The command rails test will execute Minitest. Let\u2019s see what happens when we run tests: $ rails test Running via Spring preloader in process 29254 /Users/danielkehoe/workspace/learn-rails/db/schema.rb doesn't exist yet. Run `rails db:migrate` to create it, then try again. If you do not intend to use a database, you should instead alter /Users/danielkehoe/workspace/ /learn-rails/config/application.rb to limit the frameworks that will be loaded. Run options: --seed 35136 Running: Finished in 0.005570s, 0.0000 runs/s, 0.0000 assertions/s. 0 runs, 0 assertions, 0 failures, 0 errors, 0 skips Rails Minitest informs us that our application is not set up to use a database. The easiest way to resolve the issue is to run rails db:migrate which sets up the database schema file. We\u2019re not using a database for this application so the database schema file will be empty. $ rails db:migrate The rails db:migrate command doesn\u2019t produce any result in the terminal but it will create a new db/schema.rb file. Try running rails test again: $ rails test Running via Spring preloader in process 29468 Run options: --seed 46952 Running: Finished in 0.005945s, 0.0000 runs/s, 0.0000 assertions/s. 0 runs, 0 assertions, 0 failures, 0 errors, 0 skips The output shows that Minitest executes but we have no tests for it to run. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"set up minitest\" $ git push 24.13 Unit Test (Standard Syntax) In its default form, Minitest uses the syntax of the older test_unit framework that was supplied with Ruby before version 1.9. The test_unit syntax uses explicit Ruby to set up tests. Here\u2019s an example of Minitest using the test_unit syntax: require 'test_helper' class VisitorTest < ActiveSupport::TestCase def valid_params { email: ' [email protected] ' } end def test_valid visitor \\= Visitor.new valid_params assert visitor.valid?, \"Can't create with valid params: #{visitor.errors.messages}\" end def test_invalid_without_email params \\= valid_params.clone params.delete :email visitor \\= Visitor.new params refute visitor.valid?, \"Can't be valid without email\" assert visitor.errors[:email], \"Missing error when without email\" end end Notice that we must declare a class VisitorTest that inherits from ActiveSupport::TestCase . Then we must define a new method for each test case using the def keyword. This syntax is not popular with Rails developers. RSpec offers its own DSL (domain specific language) that hides the overhead of setting up classes and methods behind convenience methods. Minitest offers its own version of the the RSpec DSL, allowing us to use the more popular syntax. I\u2019ll use the new RSpec-like syntax in this tutorial, since you are likely to encounter RSpec more frequently. 24.14 Unit Test (Spec Syntax) For our first test, let\u2019s create a simple unit test for our Visitor model. Every time we run our tests, we want to know that we\u2019re able to create a Visitor model. We\u2019ll also check that the Visitor model contains a method that returns an email address. The default Rails directory structure already contains a test/models/ folder. Thanks to Rails conventions, we know exactly where to create our test file. Create a file test/models/visitor_test.rb : require 'test_helper' describe Visitor do let(:visitor_params) { {email: ' [email protected] '} } let(:visitor) { Visitor.new visitor_params } it 'is valid when created with valid parameters' do visitor.must_be :valid? end it 'is invalid without an email' do # Delete email before visitor let is called visitor_params.delete :email visitor.wont_be :valid? # Must not be valid without email visitor.errors[:email].must_be :present? # Must have error for missing email end end The test above, written in the RSpec-like syntax, is functionally identical to the previous example, written in the old test_unit syntax. Take a close look at both, so the structure and keywords will be familiar when you see it again. We need require \u2019test_helper\u2019 to enable the test framework and apply any configuration settings. The keywords describe , let , and it are keywords that are also used in the RSpec DSL (domain-specific language). When you see these keywords, you know you are looking at test code, either Minitest or RSpec. The purpose of a unit test is to describe the system under test, in terms of its expected behavior. We create a do ... end block using the describe keyword and specifying a class we wish to test: describe Visitor do . . . end 24.14.1 Create a Test Class With Describe The describe keyword creates a test class. In this case, the describe keyword will create a class named VisitorTest that inherits from ActiveSupport::TestCase . Using the old test_unit syntax, we could do this with class VisitorTest < ActiveSupport::TestCase but the describe keyword is more convenient. When Minitest runs, it recognizes and executes test classes. By including our code inside a test class, we get to use methods such as let and it which are useful for writing tests. Minitest will recognize various classes like models or controllers and provide appropriate behavior. 24.14.2 Setup Phase We must set up everything we need for the test. Minitest provides a simple way to set up everything before a test using the before keyword: before do do_some_setup end We could initialize the Visitor model using a before block and setting instance variables: before do @visitor_params \\= {email: ' [email protected] '} @visitor \\= Visitor.new(visitor_params) end Instead of using a before block, we\u2019ll use the convenient let keyword: let(:visitor_params) { {email: ' [email protected] '} } let(:visitor) { Visitor.new visitor_params } The let keyword is a specialized version of the before keyword. It caches the objects that you create so they are ready for every test you write in the test class. And it is lazy-loaded , which means it does not require any processing overhead until the first time it is used. 24.14.3 Do It Each test is defined by the it keyword and a do ... end block that contains the exercise and verify phases of the test. The it keyword must be accompanied by a description. The description will be displayed if the test fails. For our first test, we want to check if the Visitor model can be created when we provide a valid email address. Before the test runs, the let statement makes sure the Visitor object is instantiated with an email value. The verification phase of each test consists of a comparison between the results of an operation and our expectations. We expect that each time we create a Visitor object with a valid email address, the visitor.valid? method will return true. We can create a test: it 'is valid when created with valid parameters' do assert_equal visitor.valid?, true end The keyword assert_equal is the old test_unit syntax. It compares the result of visitor.valid? with true and tells Minitest the test has passed or failed. We can write the same thing using the new RSpec-style syntax: it 'is valid when created with valid parameters' do visitor.must_be :valid? end The method must_be is an expectation . You can see a Minitest cheat sheet with a list of all the expectation methods. As you might guess, must_be functions as a comparison operator, checking if a call to visitor.valid? returns true. For our second test, we want to make sure the Visitor object is invalid when no email address is provided: it 'is invalid without an email' do # Delete email before visitor let is called visitor_params.delete :email visitor.wont_be :valid? # Must not be valid without email visitor.errors[:email].must_be :present? # Must have error for missing email end We created the visitor_params hash with a let statement. Before we invoke the Visitor object and call the visitor.valid? method, we delete the email address from the visitor_params hash. When the Visitor object is invoked, it will be created by the let statement without an email address. The wont_be expectation confirms that the result of visitor.valid? method is false . Then we check if a validation error message is present. At this point, don\u2019t expect to be ready to write unit tests for every model method. You\u2019ll need to spend time with the documentation for Minitest expectations or the Minitest cheat sheet to become familiar with all the possible ways to write tests. This introduction should help you recognize the syntax of tests, understand the structure, and give you the background you need to learn more about unit testing. 24.15 Run Tests Let\u2019s run our unit tests: $ rails test Running via Spring preloader in process 29585 Run options: --seed 7800 Running: .. Finished in 0.020289s, 98.5770 runs/s, 147.8655 assertions/s. 2 runs, 3 assertions, 0 failures, 0 errors, 0 skips The output shows that our tests pass. 24.15.1 Breaking the Test Let\u2019s see what happens if we purposefully break our Visitor model. Modify the file app/models/visitor.rb : class Visitor include ActiveModel::Model attr_accessor :email # validates_presence_of :email # validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i def subscribe mailchimp \\= Gibbon::Request.new(api_key: Rails.application.secrets.mailchimp_api_key) list_id \\= Rails.application.secrets.mailchimp_list_id result \\= mailchimp.lists(list_id).members.create( body: { email_address: self.email, status: 'subscribed' }) Rails.logger.info(\"Subscribed #{self.email} to MailChimp\") if result end end When you copy this, be careful to keep the long regex expression (/\\A\u2026\\z/i) on one line (no line breaks). We\u2019ve commented out the statements that require validation for the email attribute. Let\u2019s run the tests again: $ rails test Running via Spring preloader in process 29655 Run options: --seed 45089 Running: F Failure: Visitor#test_0002_is invalid without an email [/Users/danielkehoe/workspace//learn-rails/test/models/visitor_test.rb:15]: Expected # , @messages={}, @details={}>> to not be valid?. bin/rails test test/models/visitor_test.rb:12 . Finished in 0.008457s, 236.4993 runs/s, 236.4993 assertions/s. 2 runs, 2 assertions, 1 failures, 0 errors, 0 skips The output shows a failure. The diagnostic message displays the description of the failing test, \u201cVisitor#test_0002_is invalid without an email\u201d, and indicates the line number where the test failed. Now you know what a failing test looks like. Before you continue, restore the file app/models/visitor.rb to its original state, and make sure the tests pass. If you wish, you can continue writing unit tests. You could create a similar unit test for the Contact model. With more experience, or some independent research, you could create a test for the subscribe method in the Visitor model. This method connects to an external API, so it requires test doubles to fake the response of the external services. Our goal here is to introduce you to the concepts of testing, so we\u2019ll put aside advanced work on unit tests, and take a look at feature tests. 24.16 Feature Test Let\u2019s start with a user story for our home page. It might seem trivial to call the home page a \u201cfeature\u201d and describe it with a user story, but it illustrates a process that works just as well with more complex features. Here\u2019s our user story: *Feature: Home page* As a visitor I want to visit a home page And see a welcome message For our test, we know we want to visit the home page and check if the words \u201cStay in touch\u201d appear on the page. This is the scenario we\u2019ll test: *Scenario: Visit the home page* Given I am a visitor When I visit the home page Then I see \"Stay in touch\" If you think of your application as a collection of features, and you describe each feature in terms of \u201cAs a (role), I want (goal), In order to (benefit),\u201d and then imagine scenarios for each feature using the \u201cGiven\u2026, When\u2026, Then\u2026\u201d formula, you\u2019ll be able to write automated tests to cover every feature in the application. Let\u2019s try it for the home page. Examine the folders within the test/ directory. Remember that feature tests are also called integration tests. You\u2019ll see a folder test/integration/ . That\u2019s where we\u2019ll add our feature tests. Create a file test/integration/home_page_test.rb : require 'test_helper' # Feature: Home page # As a visitor # I want to visit a home page # So I can learn more about the website feature 'Home page' do # Scenario: Visit the home page # Given I am a visitor # When I visit the home page # Then I see \"Welcome\" scenario 'visit the home page' do visit root_path page.must_have_content 'Stay in touch' end end I\u2019ve included the user story and scenario description in comments. There\u2019s no convention to do so, but it will help you to see the relationship between testing and the product planning process. It should be easy to transform a \u201cGiven\u2026 When\u2026 Then\u2026\u201d scenario into the code needed for a feature test. 24.16.1 Feature When we created a unit test, we used the describe keyword to create a test class. The feature keyword creates a test class that inherits from the Capybara::Rails::TestCase class, giving us methods such as visit and page . Feature tests are created with a do ... end block using the feature keyword and providing a description of the feature: feature 'Home page' do . . . end Notice that the description is placed in quotes. In this case, Minitest will automatically generate a class named HomePageTest . 24.16.2 Scenario Typically we test a single feature with multiple scenarios in a single test file. The scenario keyword is similar to the it keyword you\u2019ve seen in unit tests. Each feature test is defined by the scenario keyword and a do ... end block that contains the visit and verify phases of the test. The scenario keyword must be accompanied by a description. The description will be displayed if the test fails. scenario 'visit the home page' do visit root_path page.must_have_content 'Stay in touch' end The directive visit is a Capybara method that takes a URL or Rails route as an argument. You could specify either visit \u2019/\u2019 or visit root_path to direct Capybara to retrieve the home page. Capybara provides other actions in addition to visit . You can see the documentation for Capybara actions that include actions for filling in a form and clicking a button. Capybara creates a page object for us as a response to the visit. The page object is a representation of the HTML file returned by the application. We can call the must_have_content method, testing if the string \u201cStay in touch\u201d is present in the page. Capybara gives us a collection of methods we can use to verify our expectations. The documentation for Capybara expectations provides an extensive collection of methods we can use to verify what\u2019s on a web page. For example, must_have_link checks for a link. With Capybara expectations, you can check almost anything on a page. Combining Capybara actions and expectations allows you to build a powerful page-checking robot. 24.17 Run Tests Let\u2019s run all our tests: $ rails test Running via Spring preloader in process 30144 Run options: --seed 51858 Running: ... Finished in 0.459255s, 6.5323 runs/s, 8.7098 assertions/s. 3 runs, 4 assertions, 0 failures, 0 errors, 0 skips We have three tests (in two test files) making four assertions, all passing. 24.17.1 Troubleshooting You might get an error message: rails aborted! NoMethodError: undefined method `feature' for main:Object You\u2019ll see this error message if you neglected to modify the test/test_helper.rb file to allow use of the Capybara test framework methods. 24.17.2 Breaking the Test Let\u2019s see what happens if we purposefully break our home page. Modify the file app/view/visitors/new.html.erb : <% content_for :title do %>Foobar Kadigan<% end %> <% content_for :description do %>Website of Foobar Kadigan<% end %> <section> <img src\\=\"http://lorempixel.com/1170/600/cats/1\"> GO AWAY! < %= form\\_with(model: @visitor) do |f| %> < %= f.email\\_field :email, placeholder: 'Your email address...', autofocus: true %> < %= f.submit 'Sign up for the newsletter', class: 'submit' %> < % end %> We\u2019ve changed the welcome message from \u201cStay in touch\u201d to \u201cGO AWAY!\u201d. Let\u2019s run the tests again: $ rails test Running via Spring preloader in process 30059 Run options: --seed 39958 Running: F Failure: Home page Feature Test#test_0001_visit the home page [/Users/danielkehoe/workspace//learn-rails/test/integration/home_page_test.rb:15]: Expected to find text \"Stay in touch\" in \"Toggle navigation Home About Contact GO AWAY!\". bin/rails test test/integration/home_page_test.rb:13 .. Finished in 5.124522s, 0.5854 runs/s, 0.7806 assertions/s. 3 runs, 4 assertions, 1 failures, 0 errors, 0 skips The output shows a failure. The diagnostic message displays the description of the failing test, \u201cHome page Feature Test#test_0001_visit the home page\u201d, showing a failure, \u201cExpected to include \u2018Stay in touch\u2019.\u201d Before you continue, restore the file app/view/visitors/new.html.erb to its original state, and make sure the tests pass. Now that we have written a few basic tests, let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add tests\" $ git push You\u2019ve written a complete application with tests. Very good! 24.17.3 Using Capybara There is an art to developing feature tests. You can test that all the text on the home page is exactly what you want. That would make your test files large. And your tests would be \u201cbrittle,\u201d because any changes you made in development, even the slightest changes to the words on the page, would break your tests. For good integration tests, focus on the features that are essential to your application. For example, use the Capybara robot to make sure the user can follow a critical path through your application, visiting important pages, filling in forms, clicking buttons, and seeing results. Capybara lets you select any HTML element on a page, so you can check an ID or class attribute of an HTML tag, not just text on a page. You\u2019ll want to be confident that application navigation and page flow continues to work after any code changes. That will serve you better than tests that tell you a word changed here or there. 24.18 Other Tests The art of testing lies in making good choices about what to test. It\u2019s common to write feature tests because they will test the entire application from the viewpoint of the user. It is also common to write unit tests for models because models contain much of the uniqueness of an application. Every other aspect of a Rails application can be tested, including controllers, helpers, and views. Developers seldom write tests for every aspect of a Rails application. If your controllers contain only the standard RESTful actions, with no extra logic, you probably don\u2019t need to write unit tests for your controllers. If you only have simple HTML markup in helpers, helpers don\u2019t need to be tested. And views are rarely tested with unit tests (use feature tests if you want to make sure a page contains what you expect). As a beginner, you\u2019ll make a good start if you concentrate on unit tests for models and integration tests for your page flow. 24.19 Behavior-Driven Development In Book One, you learned about the software development approach called Behavior-Driven Development (BDD), or sometimes, Behavior-Driven Design. In writing the feature tests for the home page, you saw it in action. With BDD, you turn user stories into detailed scenarios that are accompanied by tests. BDD is a powerful approach for managing software development. It helps you define your product requirements, refine your project scope, and divide your project into well-defined tasks. The BDD process is complete when each feature has automated tests, when you enter rails test on the command line and see that every feature is implemented and functioning as expected. You may feel lost or overwhelmed when you attempt to build a Rails application for the first time, especially if your only experience is following the step-by-step instructions of a tutorial. When you experience that panic, BDD is your lifeline. Start by writing user stories for a few simple features. Write feature tests and implement the code required to make the tests pass. As you focus on the process of writing scenarios and tests, and implementing the code for each feature, you\u2019ll begin to gain momentum, and before you know it, you\u2019ll be over the first hurdle. 24.20 Test-Driven Development You can see how the BDD approach refines the product requirements and user experience. At a microscopic level, a similar discipline, named test-driven development , helps refine the implementation. Where BDD is driven by feature tests, TDD is focused on unit tests. TDD is an approach to software development that emphasizes that all code should be written to be tested. Excellent test coverage, allowing easy refactoring, is not the only goal of TDD. Just as important, the developer focuses on what needs to be accomplished and thinks through alternatives and edge cases. Some TDD aficionados say testing is a tool to write better code, and regression tests are a side effect. Unit tests are at the heart of TDD, and easiest to write when code is carefully decoupled into systems that can be tested in isolation. An application that is composed of decoupled units with clearly defined interfaces is a well-designed application that is easy to extend and maintain. If you make it a practice to write unit tests in conjunction with all the code you write, you\u2019ll write better code, and you\u2019ll be practicing TDD. 24.21 Test-First Development Often when you are practicing TDD, you\u2019ll write tests before you write implementation code. Earlier in this chapter, I referred to test-first development and explained that it serves a different purpose than testing for quality assurance. In some situations, test-first development is simply exploratory testing, a means of describing the behavior of the code that must be built. Test-first development is particularly useful when you\u2019ve solved a similar problem and know exactly what results to expect, making it easy to write tests before writing the implementation. Test-first development leads to a \u201cred-green-refactor\u201d workflow. A developer imagines the results of an operation, writes a test that checks for the results, and runs tests which fail (with the right configuration, failing tests display as red in the console). Then the developer writes code that produces the correct results and runs the tests again, improving the code until the tests pass (displaying in green). At this point, the developer has an adequate regression test and can begin to refactor to improve the implementation, checking that the tests continue to pass. Developers like the rhythm and coherency of the \u201cred-green-refactor\u201d workflow. Writing tests creates discrete, manageable tasks. When tests pass, turning green, there is a feeling of satisfaction, of a job well-done. By postponing concerns about improving the code to a refactoring phase, it\u2019s easier to get the job done without trying to get it perfect. And perfection can be pursued in the refactoring phase without worrying about regressing to a broken state. David Heinemeier Hansson, the creator of Rails, famously declared that TDD is dead. Long live testing. . He pointed out that sometimes ardent advocates of TDD will try out an implementation before writing tests, to determine what needs to be done, or to clarify a problem. In the real world, even though developers recommend writing tests first, there are often times when a developer will write tests only after writing code and settling on an approach. TDD, which emphasizes the benefit of writing tests as a first step, doesn\u2019t really require that you write tests before you write code, or even that you write tests for all code. The test-first emphasis of TDD is a recommendation, not a rule. You\u2019ll be a better developer if you find opportunities to get \u201cin the zone\u201d with the red-green-refactor workflow of test-first development, but testing is worthwhile whether it comes first or last. 24.22 Words of Encouragement Testing often intimidates the newcomer. It is difficult to find good examples. The syntax of Minitest and RSpec has evolved over time, so there is little consistency among examples you\u2019ll find. Older examples are not a good guide to current practices. But once you gain familiarity with the concepts in this chapter, you can start writing tests. Testing is one of the few things in Rails that you can jump into without getting just right. You can\u2019t screw up your code base by writing incorrect tests. Experienced developers seem to worry that inexperienced developers will write slow tests, but in truth, a slow test is better than no test. Tests won\u2019t affect the performance of your application in production. If your code is clumsy, don\u2019t worry, you\u2019ll get better with practice. What\u2019s most important is that you\u2019ve begun writing tests. That\u2019s an indication you are committed to Rails best practices. Your tests are only \u201cbad\u201d if they don\u2019t cover your code adequately or if they give you a false sense of assurance. You will only discover this over time, as you find bugs you didn\u2019t anticipate (which is inevitable). It\u2019s better to just begin testing, even if you\u2019re not sure you\u2019re doing it right, than to not test at all. Chapter 25 Rails Composer I\u2019m going to show you how to skip all the work you already did, and build a ready-to-use Rails application in less than five minutes. When you\u2019re done with this chapter, you may wonder why you read the rest of the book. Watch the video for a demonstration of Rails Composer: Rails Composer 25.1 Building Starter Applications This chapter is about Rails Composer , a tool for building starter applications. Rails Composer makes building applications so easy, it feels like a guilty pleasure. In the introductory \u201cCreate the Application\u201d chapter, you learned that developers often use a starter application instead of assembling an application from scratch. You\u2019ve seen how the rails new command gives you a rudimentary starter application. Developers typically add a front-end framework, a testing framework, and a handful of favorite gems before they get started on any custom development. Since most applications start with the same basic components, it makes sense to rely on an open source effort to stitch them together, so any integration issues or update problems are quickly resolved by the community. That\u2019s the idea behind the RailsApps project . The project provides a collection of starter applications, plus Rails Composer, a tool that creates the starter applications. I\u2019ve been leading the RailsApps project for several years because I think the project saves time for developers and makes things easier. I may be biased, so take a look and judge for yourself. 25.2 Build \u2018Learn Rails\u2019 in Less Than Five Minutes In less than five minutes, we can build our tutorial application using Rails Composer. It will be identical to the application you\u2019ve built, but we\u2019ll call it \u201cfoobar-kadigan.\u201d It\u2019s a new application, so if you\u2019re still in the workspace/learn-rails/ project directory, move up a level to the workspace/ project directory: $ cd ../ $ pwd /Users/danielkehoe/workspace Or jump to it directly, if it\u2019s one level below your home directory: $ cd ~/workspace $ pwd /Users/danielkehoe/workspace Use the \u201clearn-rails\u201d gemset we created earlier: $ rvm use [email protected] Now create the \u201cfoobar-kadigan\u201d application: $ rails new foobar-kadigan -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb We\u2019re using the rails new command and designating \u201cfoobar-kadigan\u201d as the name for the application. The -m flag applies an application template , which is a script that generates an application. The application template can be on your local computer, or retrieved from a remote server. Rails Composer is an application template that is stored on GitHub. When you run the rails new command as shown above, a new Rails application is built and then modified by the Rails Composer script. Here\u2019s the first prompt you\u2019ll see: option Build a starter application? 1) Build a RailsApps example application 2) Contributed applications 3) Custom application choose Enter your selection: Options #2 and #3 are not for beginners. We\u2019ll skip any contributed applications. And the \u201cCustom application\u201d option is strictly for experts. Enter 1 to select \u201cBuild a RailsApps example application.\u201d You\u2019ll see a list of available starter applications: option Choose a starter application. 1) learn-rails 2) rails-bootstrap 3) rails-foundation 4) rails-mailinglist-activejob 5) rails-omniauth 6) rails-devise 7) rails-devise-roles 8) rails-devise-pundit 9) rails-signup-download 10) rails-stripe-checkout 11) rails-stripe-coupons choose Enter your selection: We\u2019ll explore the list later. For now, enter 1 to select \u201clearn-rails\u201d. Here\u2019s your chance to get news and announcements about Rails Composer: Get on the mailing list for Rails Composer news? option Enter your email address: Enter your email address (if you want news) or press \u201creturn\u201d to skip it (if you\u2019re shy). In less than the time it took me to write a few sentences, you\u2019ll have a new Rails application. Look for it in your folder: $ ls -1 foobar-kadigan learn-rails You\u2019ve just created a new application named \u201cfoobar-kadigan\u201d that is almost identical to the \u201clearn-rails\u201d application you created from scratch. If you have a file compare tool on your computer, you can compare the folders and see that the only differences are the application name embedded in the application, plus a few configuration settings such as the secret keys in the config/secrets.yml file. Move into the project directory: $ cd foobar-kadigan As soon as you move into the foobar-kadigan/ folder, RVM will automatically begin using the gemset named \u201cfoobar-kadigan.\u201d That\u2019s because Rails Composer created hidden .ruby-gemset and .ruby-version files. Run bundle install to install the necessary gems in the RVM gemset: $ bundle install Try running the application. $ cd foobar-kadigan $ rails server \\=> Booting Puma . . . Open a web browser window and navigate to http://localhost:3000/ . Try it out. You\u2019ll see our new home page with the placeholder photo and the \u201csign up\u201d form. The application will be almost identical to the one you already built. Compare the project files side-by-side in your editor. The files will be nearly identical. In fact, if you made mistakes when you built the tutorial application, Rails Composer will give you the newest and most correct version of the application so you can check for your mistakes with a file compare tool. You are probably already aware that a perfect version of the tutorial application is already on GitHub, in the learn-rails GitHub repository . You could use git clone to get a copy to use as a starter application. The version generated by Rails Composer differs in one important respect. Rails Composer generates the application with any name you give it, so there\u2019s no need to search and change every use of the name in the application. I hope you\u2019re not irritated that I asked you to spend hours building the \u201clearn-rails\u201d application, and then showed you how to build the same application in less than five minutes. I promise you the time you spent with the book is worthwhile, because you\u2019ve gained a knowledge of Rails you can\u2019t get from using Rails Composer. 25.3 A Collection of Starter Applications Since you\u2019ve already built the \u201clearn-rails\u201d application, the identical \u201cfoobar-kadigan\u201d application may not be interesting. Let\u2019s look at the other applications you can generate with Rails Composer. 25.3.1 Rails Bootstrap The \u201crails-bootstrap\u201d application provides an integration of Rails and Bootstrap , the popular front-end framework. This application gives you everything you built in this book\u2019s chapters on \u201cLayout and Views\u201d and \u201cFront-End Framework,\u201d including flash messages and navigation, set up for Bootstrap. It\u2019s a good beginning point for many custom applications. You can examine the example application on GitHub, in the rails-bootstrap repository. If you have subscribed for the Capstone Rails Tutorials, you can read the Bootstrap Quickstart Guide to understand the code. 25.3.2 Rails Foundation The \u201crails-foundation\u201d application is just like the \u201crails-bootstrap\u201d application, only with the Zurb Foundation front-end framework instead of Bootstrap. It\u2019s a stripped-down version of the \u201clearn-rails\u201d application you just built, without the contact form or mailing list sign-up, using Foundation. If you want to build a custom application, starting with nothing more than Foundation and an \u201cabout\u201d page, generate the \u201crails-foundation\u201d application. You can examine the example application on GitHub, in the rails-foundation repository. There\u2019s a Foundation Quickstart Guide with the Capstone Rails Tutorials. 25.3.3 Rails Mailing List with Active Job Rails 4.2 added the Active Job feature for background processing. The Mailing List with Active Job tutorial explains how to use it. You can use Rails Composer to generate the rails-mailinglist-activejob starter application. In the \u201cSend Mail\u201d chapter I wrote about \u201cAsynchronous Mailing\u201d which provides a queueing system for background jobs. For a production website, it is smart to use Active Job for better website performance for users. The Mailing List with Active Job tutorial in the Capstone Rails Tutorials series explains the code. 25.3.4 Rails OmniAuth OmniAuth is a gem for authentication. Most web applications need a way for users to sign in, allowing access to some features of the application only for signed-in users. OmniAuth allows a user to sign in using an account they already have with a service such as Facebook, Twitter, or GitHub. If you\u2019re building an application that needs quick and easy sign-in, this is a useful starter application. You can examine the example application on GitHub, in the rails-omniauth repository. You can read the OmniAuth Tutorial in the Capstone Rails Tutorials series to learn about authentication with OmniAuth. 25.3.5 Rails Devise Devise is the most popular gem for authentication. Devise provides user management and authentication, letting a user sign up to create an account and log in with an email address and password. Most websites need email/password authentication, so this is a popular starter application. You can examine the example application on GitHub, in the rails-devise repository. You can read the Devise Quickstart Guide in the Capstone Rails Tutorials series to learn about user management and authentication with Devise. 25.3.6 Rails Devise Roles Devise is a popular gem for authentication , verifying a user\u2019s registered identity. In conjunction with authentication, authorization limits access to pages of a web application. With role-based authorization, a user can be assigned a role such as \u201cuser,\u201d \u201cadmin,\u201d or \u201cVIP\u201d (a \u201cvery important person\u201d). If you want to control access to features of the website by checking a user\u2019s role, this is a useful starter application. You can examine the example application on GitHub, in the rails-devise-roles repository. You can read the Rails Authorization Tutorial in the Capstone Rails Tutorials series to learn about authorization. 25.3.7 Rails Devise Pundit To keep controllers skinny, Rails developers often use the Pundit gem for authorization. It improves upon simple role-based authorization to move access control code from controllers to separate \u201cpolicy objects.\u201d For complex applications with elegant architecture, use the \u201crails-devise-pundit\u201d starter application. You can examine the example application on GitHub, in the rails-devise-pundit repository. You can read the Pundit Quickstart Guide in the Capstone Rails Tutorials series to learn about authorization with Pundit. 25.3.8 Other Starter Applications Other applications in the Rails Composer collection include: rails-signup-download rails-stripe-checkout rails-stripe-coupons You can use the rails-signup-download application to build a website where a user can download a PDF file after registering with an email address. Using the code in the Signup and Download Tutorial , you could customize the \u201clearn-rails\u201d application so visitors could download an ebook by Foobar Kadigan after they sign up for his newsletter. Stripe is a popular service used to accept credit card payments. Stripe offers two approaches to implementing payment processing. Stripe Checkout is Stripe\u2019s entry-level approach. Stripe Checkout competes with the button-based payment options from Google, PayPal, or Amazon, adding a pop-up payment form to any web page. Stripe Checkout is very limited because the pop-up payment form cannot be customized for use with a Rails application. Our Stripe Checkout Tutorial in the Capstone Rails Tutorials series shows how to combine Stripe Checkout with Devise for simple applications. Stripe.js is optimal for use with a Rails application, allowing full customization of a payment form and integration with Rails form processing. The rails-stripe-coupons application implements a payment feature using Stripe JS so a visitor pays to download a PDF file. The application accommodates promotional coupons and adds payment forms to landing pages, for real-world payment processing. Our Stripe JS With Coupons tutorial in the Capstone Rails Tutorials series provides the details. 25.4 Rails Composer Options If all Rails Composer did was copy example applications from GitHub repos, it would be convenient but not very interesting. When you built the \u201cfoobar-kadigan\u201d application with Rails Composer, it simply built a replica of our tutorial application. When you build the other starter application, the options get more interesting. Rails Composer lets developers customize their starter applications for their favorite stack (we discussed stacks in the \u201cConcepts\u201d chapter in Book One). Let\u2019s see what options we get when we build the powerful rails-devise-roles starter application. Jump to your workspace/ folder so we can create a new application: $ cd ~/workspace $ pwd /Users/danielkehoe/workspace It\u2019s okay to start with the \u201clearn-rails\u201d gemset. We have to start with a gemset that already has the Rails gem installed. After that, Rails Composer will create a new gemset for the new project. $ rvm use [email protected] Now generate the \u201crails-devise-roles\u201d starter application: $ rails new rails-devise-roles -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb Don\u2019t worry if some of the prompts are different from the ones I describe here. Rails Composer changes often. At the time I wrote this, I saw: option Build a starter application? 1) Build a RailsApps example application 2) Contributed applications 3) Custom application choose Enter your selection: Enter 1 to select \u201cBuild a RailsApps example application.\u201d option Choose a starter application. 1) learn-rails 2) rails-bootstrap 3) rails-foundation 4) rails-mailinglist-activejob 5) rails-omniauth 6) rails-devise 7) rails-devise-roles 8) rails-devise-pundit 9) rails-signup-download 10) rails-stripe-checkout 11) rails-stripe-coupons choose Enter your selection: Select \u201crails-devise-roles\u201d (it was #7 when I wrote this, but the list may have changed). Get on the mailing list for Rails Composer news? option Enter your email address: Another chance to get on the mailing list. Just hit \u201creturn\u201d if you already signed up. option Web server for development? 1) Puma (default) 2) Thin 3) Unicorn 4) Phusion Passenger (Apache/Nginx) 5) Phusion Passenger (Standalone) choose Enter your selection: Our first option! We\u2019ve always used Puma since it is the Rails default. Choose \u201cPuma\u201d to keep things familiar. option Web server for production? 1) Same as development 2) Thin 3) Unicorn 4) Puma 5) Phusion Passenger (Apache/Nginx) 6) Phusion Passenger (Standalone) choose Enter your selection: We could get fancy for deployment. Choose \u201cSame as development\u201d to stay in our comfort zone. option Database used in development? 1) SQLite 2) PostgreSQL 3) MySQL choose Enter your selection: We haven\u2019t explored applications that use databases in this book, but Devise and role-based authorization require saving a User model to a database. Choose \u201cSQLite,\u201d which is built-in and ready to run in the Mac or Ubuntu environments. Developers prefer PostgreSQL for production applications, but it takes extra effort to set up, so we\u2019ll stick with SQLite for now. option Template engine? 1) ERB 2) Haml 3) Slim choose Enter your selection: In this book, all our view templates were written using the ERB template language. In the \u201cConcepts\u201d chapter in Book One, you learned that components of Rails can be mixed for different stacks. Some developers substitute Haml or Slim for ERB. I\u2019ve written an article on Haml and Rails if you\u2019d like to know more. Choose \u201cERB\u201d for now. option Test framework? 1) None 2) RSpec with Capybara choose Enter your selection: You\u2019ve had an introduction to testing with Minitest in the \u201cTesting\u201d chapter of this book. RSpec is popular among many developers, so Rails Composer offers an \u201cRSpec with Capybara\u201d option. Rails Composer will install a test suite for the rails-devise-roles application when RSpec is selected. You can read the RSpec Quickstart Guide in the Capstone Rails Tutorials series to get started with RSpec. Choose \u201cnone\u201d for now. option Front-end framework? 1) None 2) Bootstrap 4.0 3) Bootstrap 3.3 4) Bootstrap 2.3 5) Zurb Foundation 5.5 6) Zurb Foundation 4.0 7) Simple CSS choose Enter your selection: You learned to use Bootstrap 3 in this book. Let\u2019s stick with that. Choose \u201cBootstrap 3.3.\u201d option Add support for sending email? 1) None 2) Gmail 3) SMTP 4) SendGrid 5) Mandrill choose Enter your selection: Devise will need to send email for its \u201cforgot password\u201d feature. Configuring email took some time for our tutorial application. Rails Composer will instantly set up everything we need to send email using our choice of services. Choose \u201cSendGrid\u201d for now. option Devise modules? 1) Devise with default modules 2) Devise with Confirmable module 3) Devise with Confirmable and Invitable modules choose Enter your selection: Choose \u201cDevise with default modules.\u201d Devise has options, like a Confirmable module that requires users to click a link in an email message to confirm a new account. The Invitable module provides a feature that allows administrators or other users to invite users to establish accounts. We won\u2019t need these extra features. option Admin interface for database? 1) None 2) Thoughtbot Administrate choose Enter your selection: Thoughtbot Administrate adds an administrative interface to a database application. Choose \u201cNone\u201d for now. option Use a form builder gem? 1) None 2) SimpleForm choose Enter your selection: We could add the SimpleForm gem to make it easy to build forms. We didn\u2019t use it in this book, so we\u2019ll choose \u201cnone.\u201d Next you\u2019ll see a menu of page layout options from Rails Composer. These are available if you use Bootstrap 3. option Add Bootstrap page templates? 1) None 2) 1 Col Portfolio 3) 2 Col Portfolio 4) 3 Col Portfolio 5) 4 Col Portfolio 6) Bare 7) Blog Home 8) Business Casual 9) Business Frontpage 10) Clean Blog 11) Full Width Pics 12) Heroic Features 13) Landing Page 14) Modern Business 15) One Page Wonder 16) Portfolio Item 17) Round About 18) Shop Homepage 19) Shop Item 20) Simple Sidebar 21) Small Business 22) Stylish Portfolio 23) The Big Picture 24) Thumbnail Gallery choose Enter your selection: You\u2019ll get an option to install any of 23 different Bootstrap page templates. Some of these are simple one page layouts. Others are complex, multipage websites. If you\u2019d like to see what all the templates look like, browse the Start Bootstrap website to see the gallery of Bootstrap themes & templates. I like the \u201cModern Business\u201d template for several ready-made website pages, so choose 14 to install the template. option Install page-view analytics? 1) None 2) Google Analytics 3) Segment.com choose Enter your selection: In our \u201cAnalytics\u201d chapter, I said every application needs a way to analyze traffic. Let\u2019s choose \u201cSegment.com\u201d since we learned about it already. option Segment.com Write Key? You can enter your Segment.com Write Key here, if you know it. Otherwise, hit return and you\u2019ll get a placeholder you can replace later. option Prepare for deployment? 1) no 2) Heroku 3) Capistrano choose Enter your selection: This option sets up your starter application for deployment to Heroku. Choose \u201cno\u201d for now. Some developers find Rails Turbolinks annoying when they wish to integrate JavaScript with their Rails applications. option Disable Rails Turbolinks? (y/n) We\u2019re not adding any JavaScript so choose \u201cn\u201d to use Rails Turbolinks. option Set a robots.txt file to ban spiders? (y/n) In the \u201cDeploy\u201d chapter you learned that you can leave your website out of Google search results with the robots.txt file. Let\u2019s answer \u201cy\u201d or \u201cyes\u201d and play it safe. option Create a GitHub repository? (y/n) Rails Composer will create a GitHub repository for your starter application if your credentials are set up correctly. Let\u2019s play it safe and answer \u201cn\u201d or \u201cno\u201d to skip the repository option. Rails Composer has all the answers it needs. On my computer, with a fast Internet connection in the heart of San Francisco, Rails composer takes about thirty seconds to build the starter application. It installs every needed gem; sets configuration files; and generates views, models, controllers, and routes. The developers who maintain the Rails Composer project have worked out any tricky integration issues so you can expect the starter application to work without any problems. 25.5 Try It Out You\u2019ve added a new application to your collection of projects: $ ls -1 foobar-kadigan learn-rails rails-devise-roles Let\u2019s examine the application. $ cd rails-devise-roles $ git log --oneline 087167a rails_apps_composer: extras 6d4f710 rails_apps_composer: add Bootstrap page layouts be68589 rails_apps_composer: navigation links 3126403 rails_apps_composer: set up database 53a029f rails_apps_composer: add README files 7c78031 rails_apps_composer: add analytics 99e9c0c rails_apps_composer: add pages 1886d2c rails_apps_composer: front-end framework 38242d7 rails_apps_composer: add roles to a User model 839749f rails_apps_composer: devise 62753db rails_apps_composer: set email accounts 0754893 rails_apps_composer: generators 09104b9 rails_apps_composer: Gemfile b61cd18 rails_apps_composer: initial commit Rails Composer set up a Git repository and committed files as it built the application. We can see a list of Git commits with the git log \u2013oneline command. When you move into the rails-devise-roles/ folder, RVM will automatically begin using the gemset named \u201crails-devise-roles\u201d because of the hidden .ruby-gemset and .ruby-version files. Run bundle install to install the necessary gems in the RVM gemset: $ bundle install Let\u2019s try running the application: $ rails server \\=> Booting Puma . . . Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see a navigation bar with \u201cSign in\u201d and \u201cSign up\u201d links that implement an authentication feature using Devise. Sign in with the email address \u201c [email protected] \u201d and the password \u201cchangeme\u201d. You\u2019ll see a link to the Users page in the navigation bar that is only seen by administrators. Click the \u201cUsers\u201d link and you\u2019ll see a list of users (just one initially). The first user (created by Rails Composer) is automatically assigned administrator privileges. Sign out and sign up to create a new account with your own email address and password. You\u2019ll see a message \u201cWelcome! You have signed up successfully.\u201d You will not see the \u201cUsers\u201d link. Your new account is an ordinary user without administrator privileges, so you are not allowed to see the list of all users. Notice the navigation link \u201cEdit account.\u201d It displays a page for account management where you can change your name, email address, or password. Sign out and sign in again with the administrative account \u201c [email protected] \u201d and the password \u201cchangeme\u201d. Now you can view the list of users. You can change the role of any user. You\u2019ve got a useful starter application. Without Rails Composer, an experienced developer needs at least an hour or two to set up a similar starter application (and possibly more time if version updates have created integration issues). Examine the application in your editor. Here\u2019s where a starter application can be useful as a learning tool. Given what you\u2019ve learned so far, what do recognize as familiar? Every Rails application shares a similar structure, so you will recognize files such as the Gemfile; and folders such as app/models/ , app/controllers/ , and app/views/ . Explore the application. Try to guess the purpose of the unfamiliar files and code. If you\u2019re overwhelmed by unfamiliar files and code, try building one of the simpler starter applications, such as rails-bootstrap or rails-devise . Every line of code is explained in the Capstone Rails Tutorials series so there\u2019s no mystery code. As a beginner, you can use Rails Composer for two purposes. You can quickly build apps that are guaranteed to work and then pick them apart. A \u201cbreakable toy\u201d can be a wonderful instrument for learning. Make an effort to understand everything in the RailsApps example applications and you\u2019ll gain a solid understanding of the basic components used in real-world Rails projects. Secondly, start building custom applications based on the Rails Composer starter applications. By starting with Rails Composer, you\u2019ll skip the frustrating preliminaries of setting up a front-end framework, authentication, or authorization and jump right into implementing your ideas for new features. Rails Composer is often used at hackathons, where teams race to build interesting applications for a prize, to avoid the time sink of setting up a basic application. A final word: Use Rails Composer judiciously. It\u2019s intended to be a tool for experienced developers who already know how to build starter applications from scratch using databases, front-end frameworks, authentication, or authorization, and all the bells and whistles offered in the Rails Composer options. Use it to pinpoint what you need to learn, or use it to turbocharge your learning process, but don\u2019t use it as a crutch to avoid learning the basics. To learn Rails, you must be able to build every starter application from scratch, without Rails Composer. To learn more about Rails Composer, see the Rails Composer home page and the README for the Rails Composer project on GitHub. Chapter 26 Version Notes If you are reading the online edition of the book, you have the most recent version of the book. If you\u2019ve gotten your copy of the book elsewhere, you may have an older version that doesn\u2019t have the newest updates. You\u2019ll find the version number and release date on the first page of this book (under the book title). Check the learn-rails GitHub repository to find out if you have the newest version of the book. The README page on the GitHub repo always shows the most recent version number for the book and the tutorial application. If you have trouble building the application in this book, and suspect something may be out of date, you can check the Gemfile in the repo to see if we\u2019ve changed gems or specified version numbers to avoid compatibility issues. You can also check the CHANGELOG , look at recent commits , and check the issues to see the current state of the application. Here are the changes I\u2019ve made. 26.1 Version 4.2.0 Version 4.2.0 was released August 2, 2017 Additional revisions to accommodate Rails 5.1 form_with . Add the jquery-rails gem for the jQuery JavaScript library because it was dropped as a default gem from Rails 5.1. Minor revisions and corrections for clarity. 26.2 Version 4.1.0 Version 4.1.0 was released July 3, 2017 Updated for Rails 5.1 and Ruby 2.4.1. Removed SimpleForm and replaced with Rails 5.1 form_with . No need to configure MiniTest for Capybara (included in Rails 5.1). 26.3 Version 4.0.2 Version 4.0.2 was released November 25, 2016 Minor revisions for clarity. Apple now calls the operating system macOS not Mac OS X. Updated for Ruby 2.3.2. 26.4 Version 4.0.1 Version 4.0.1 was released November 4, 2016 Fixed broken links. Removed references to Nitrous.io because Nitrous.io is out of business. 26.5 Version 4.0.0 Version 4.0.0 was released October 31, 2016 Updated for Rails 5.0 and Ruby 2.3.1. Switch to using Bootstrap instead of Zurb Foundation front-end framework. Extensive revisions. 26.6 Version 3.1.0 Version 3.1.0 was released March 1, 2016 Switch to using the SendGrid service to send email. Mandrill is no longer offering a free trial. 26.7 Version 3.0.2 Version 3.0.2 was released January 30, 2016 Minor change: \u2018email_provider_username\u2019 was \u2018mandrill_username\u2019 and email_provider_api_key\u2019 was \u2018mandrill_apikey\u2019. 26.8 Version 3.0.1 Version 3.0.1 was released January 29, 2016 Specify version 5.5 of the foundation-rails gem. Foundation 6 is out but Zurb has not yet released documentation for migration from Foundation 5 to 6. 26.9 Version 3.0.0 Version 3.0.0 was released January 14, 2016 Extensive revision throughout the book, and the length of the book increased, so the book is now two books. Book One contains the introductory and self-help chapters and can be read without access to a computer. Book Two contains the step-by-step tutorial and requires use of a computer. Switch to using the Mandrill service to send email. Previously used Gmail but Google has taken steps to make Gmail more secure and now it can be difficult to send email from a Rails application using Gmail. Sending mail now requires the method deliver_now instead of deliver . The UserMailer class now inherits from ApplicationMailer . Updated references to Rails from version 4.2.4 to 4.2.5. Updated references to Ruby from version 2.2.3 to 2.3.0. 26.10 Version 2.2.2 Version 2.2.2 was released October 30, 2015 In the \u201cFront-End Framework\u201d chapter, updated filename to 1st_load_framework.css.scss from framework_and_overrides.css.scss to reflect a change in the rails_layout gem. 26.11 Version 2.2.1 Version 2.2.1 was released September 19, 2015 Updated references to Ruby from version 2.2.0 to 2.2.3. Updated references to Rails from 4.2.0 to Rails 4.2.4. Updated Visitor model subscribe method for the new Gibbon 2.0 API. Recommending Cloud9 instead of Nitrous.io because Nitrous.io is no longer free. 26.12 Version 2.2.0 Version 2.2.0 was released June 6, 2015 For Amazon customers, added an offer to access the online version or download a PDF at learn-rails.com . Google now requires use of OAuth 2.0 for application access to Google Drive. The implementation is considerably more complex than the previous implementation using a Gmail address and password. I\u2019ve dropped the \u201cSpreadsheet Connection\u201d chapter. Minor clarification in the \u201cLayout and Views\u201d chapter. 26.13 Version 2.1.6 Version 2.1.6 was released March 17, 2015 Remove references to the Thin web server in the \u201cDeploy\u201d chapter. Correct version number for gem \u2019sass-rails\u2019 in various Gemfile listings. Fixes issue 49 and an error \u201cSass::SyntaxError - Invalid CSS\u201d when the Foundation front-end framework is used. In the \u201cTesting\u201d chapter, the file test/integration/home_page_test.rb was missing require \u2019test_helper\u2019 . Updated \u201cRails Composer\u201d chapter to describe new options. Minor improvements and corrections of typos. 26.14 Version 2.1.5 Version 2.1.5 was released March 4, 2015 Use the Ruby 1.9 hash syntax in the validates_format_of :email statement. Minor improvements and corrections of typos. 26.15 Version 2.1.4 Version 2.1.4 was released January 3, 2015 Updated references to Ruby from version 2.1.5 to 2.2.0. Specify the \u201cv0\u201d version of the google_drive gem in the \u201cSpreadsheet Connection\u201d chapter. 26.16 Version 2.1.3 Version 2.1.3 was released December 25, 2014 Updated references to Rails 4.1.8 to Rails 4.2.0. 26.17 Version 2.1.2 Version 2.1.2 was released December 4, 2014 Released for sale as a Kindle book on Amazon, with new cover art (same cat, though). RailsApps Tutorials now named the Capstone Rails Tutorials . Updated references to Ruby from version 2.1.3 to 2.1.5. Updated references to Rails 4.1.6 to Rails 4.1.8 (minor releases with bug and security fixes). Removed link to the (now defunct?) Lowdown web application in the \u201cPlan Your Product\u201d chapter. Changes to the \u201cAsynchronous Mailing\u201d section of \u201cSend Mail\u201d chapter to describe Active Job in Rails 4.2. Minor improvements to the \u201cDynamic Home Page,\u201d \u201cDeploy,\u201d \u201cConfigure,\u201d \u201cTroubleshoot,\u201d and \u201cCreate the Application\u201d chapters. 26.18 Version 2.1.1 Version 2.1.1 was released October 22, 2014 Minor rewriting for clarity. Updated \u201cPrecompile Assets\u201d section of the \u201cDeploy\u201d chapter. Mentioned explainshell.com in the \u201cGet Started\u201d chapter. Mentioned Zeal as a Linux alternative to Dash . Recommended book Practicing Rails by Justin Weiss. 26.19 Version 2.1.0 Version 2.1.0 was released October 12, 2014 Updated references to Ruby from version 2.1.1 to 2.1.3. Updated references to Rails 4.1.1 to Rails 4.1.6 (minor releases with bug and security fixes). Four new chapters: \u201cTesting\u201d \u201cRails Composer\u201d \u201cCrossing the Chasm\u201d \u201cLevel Up\u201d Use ActiveModel instead of the activerecord-tableless gem. In the \u201cConfiguration\u201d chapter, add a note to use spaces (not tabs) in the config/secrets.yml file. Updated \u201cGems\u201d chapter to add a troubleshooting note to the \u201cInstall the Gems\u201d section (about errors with the Nokogiri gem). Added a section on \u201cMultiple Terminal Windows\u201d to the \u201cCreate the Application\u201d chapter. In the \u201cGet Help When You Need It\u201d chapter, updated the list of recommended newsletters, replaced rubypair.com with codermatch.me , and added a section on code review. Removed reference to defunct Rails Development Directory . 26.20 Version 2.0.2 Version 2.0.2 was released May 6, 2014 Updated references to Rails 4.1.0 to Rails 4.1.1 (a minor release with a security fix). For Nitrous.io users, clarify that \u201chttp://localhost:3000/\u201d means the Preview browser window. Update \u201cGems\u201d chapter, section \u201cWhere Do Gems Live?\u201d to add more explanation. Minor change to code in the \u201cMailing List\u201d chapter, setting \u2018mailchimp_api_key\u2019 explicitly when instantiating Gibbon, for easier troubleshooting. 26.21 Version 2.0.1 Version 2.0.1 was released April 16, 2014 Minor updates for Rails 4.1.0. Mostly small changes to the \u201cConfigure\u201d and \u201cFront-End Framework\u201d chapters. Added an explanation that, in the config/secrets.yml file, domain_name doesn\u2019t have to be kept secret and set as a Unix environment variable. Added a hint about passwords that use punctuation marks (plus a completely irrelevant note about profanitype). Replaced Rails.application.secrets.gmail_username with Rails.application.secrets.email_provider_username . Also replaced gmail_password with email_provider_password . Just trying to make things a little more generic in case Gmail is not used as a provider. Added a section explaining the horrid details of the config.assets.precompile configuration setting in the config/application.rb file. Please convey my displeasure to those responsible for subjecting beginners to this travesty. In the \u201cDeploy\u201d chapter, restored RAILS_ENV=production rake assets:precompile because Rails 4.1.0 no longer barfs on this. Added resources to the \u201cGet Help When You Need It\u201d chapter. Minor rewriting of the introduction. 26.22 Version 2.0.0 Version 2.0.0 was released April 8, 2014 Updated references to Ruby from version 2.1.0 to 2.1.1. Updated the book to Rails 4.1. The application name is no longer used in the config/routes.rb file. Rails 4.1 changes the app/assets/stylesheets/application.css.scss file. Updated the \u201cFront-End Framework\u201d chapter. Also expanded the explanation of the Foundation grid. In Rails 4.1, configuration variables are set in the config/secrets.yml file. The Figaro gem is dropped, along with the config/application.yml file. Updated the \u201cConfigure\u201d chapter and references to configuration variables throughout the book. In the \u201cDeploy\u201d chapter, changed RAILS_ENV=production rake assets:precompile to rake assets:precompile to avoid the error \u201cdatabase configuration does not specify adapter.\u201d Updated \u201cThe Parking Structure\u201d chapter with comments about \u201cFolders of Future Importance\u201d that experienced developers often use: test/ , spec/ , features/ , policies/ , and services/ . Updated the \u201cSpreadsheet Connection\u201d chapter to mention service-oriented architectures (SOA). Extended the section on \u201cLimitations of Metaphors\u201d in the \u201cJust Enough Ruby\u201d chapter to include the example of gender when modeling a person. Minor rewriting for clarity throughout. 26.23 Version 1.19 Version 1.19 was released February 1, 2014 Updated the book to use Foundation 5.0. Foundation 5.0.3 was released January 15, 2014 (earlier versions 5.0.1 and 5.0.2 were incompatible with Rails Turbolinks and the Rails asset pipeline). Changed the Gemfile to remove gem \u2019compass-rails\u2019 and replace gem \u2019zurb-foundation\u2019 with gem \u2019foundation-rails\u2019 . Updated a line in the \u201cFront-End Framework\u201d chapter for Foundation 5.0: $ rails generate layout foundation5 --force The files navigation.html.erb and application.html.erb are changed for Foundation 5.0. The Bootstrap front-end framework is now independent of Twitter, so I call it \u201cBootstrap\u201d not \u201cTwitter Bootstrap.\u201d Revised the chapter \u201cJust Enough Ruby\u201d to incorporate suggestions from technical editor Pat Shaughnessy. Revised the chapter \u201cRequest and Response\u201d to incorporate suggestions from technical editor Kirsten Jones. Minor rewriting for clarity throughout. 26.24 Version 1.18 Version 1.18 was released January 10, 2014 Updated references to Ruby from version 2.0.0 to 2.1.0. Changed one line in the \u201cFront-End Framework\u201d chapter to accommodate a change in the rails_layout gem version 1.0.1. The command was: $ rails generate layout foundation4 \u2014force Changed to: $ rails generate layout:install foundation4 \u2014force Updated the \u201cConfigure\u201d chapter to add ActionMailer configuration values to the file config/environments/development.rb . 26.25 Version 1.17 Version 1.17 was released December 21, 2013 Updated Rails version from 4.0.1 to 4.0.2 . Changed Gemfile to remove gem \u2019compass-rails\u2019, \u2019> 2.0.alpha.0\u2019 and replace it with gem \u2019compass-rails\u2019, \u2019> 1.1.2\u2019 . The 2.0.alpha.0 version was yanked from the RubyGems server. The compass-rails gem is needed for Foundation 4.3. It will not be needed for Foundation 5.0. Changed Gemfile to replace gem \u2019zurb-foundation\u2019 with gem \u2019zurb-foundation\u2019, \u2019> 4.3.2\u2019 . Foundation 5.0 will require gem \u2019foundation-rails\u2019 but we can\u2019t use it until an incompatibility with Turbolinks is resolved. So we will stick with Foundation 4.3.2 for now. Revised code in the \u201cAnalytics\u201d chapter. Using ready page:change instead of page:load to accommodate Turbolinks. Updated the segmentio.js file to use a new tracking script from Segment.io. Updated instructions for setting up Google Analytics tracking on Segment.io. Added concluding paragraphs \u201cMaking Mr. Kadigan Happy\u201d to the \u201cAnalytics\u201d chapter. Minor clarification in the \u201cFront-End Framework\u201d chapter to explain that the navigation bar won\u2019t show a dropdown menu until the next chapter, when we add navigation links. Minor clarification in the \u201cSpreadsheet Connection\u201d chapter to explain that Google may block access if you attempt access from a new and different computer (including Nitrous.io). Added cat names in the \u201cCredits and Comments\u201d chapter. Revised \u201cGetting Help\u201d chapter and added \u201cVersion Notes\u201d chapter. Minor clarifications, plus fixes for various typos and insignificant errors. Chapter 27 Credits and Comments Was the book useful to you? Follow @rails_apps on Twitter and tweet some praise. I\u2019d love to know you were helped out by the tutorial. You can find me on Facebook or Google+ . I\u2019m happy to connect if you want to stay in touch. If you\u2019d like to recommend the book to others, the landing page for the book is here: http://learn-rails.com/learn-ruby-on-rails.html I\u2019d love it if you mention the book online, whether it is a blog post, Twitter, Facebook, or online forums. Recommending the book with a link makes it easier for people to find the book. 27.1 Credits The book was created with the encouragement, financial support, and editorial assistance of hundreds of people in the Rails community. Daniel Kehoe wrote the book and implemented the application. 27.1.1 Kickstarter Thank you to contributors to two Kickstarter campaigns, for the first edition of the book and for the revision for Rails 5.0. Learn Ruby on Rails Learn Ruby on Rails 5 27.1.2 Financial Backers for the First Edition The following individuals provided financial contributions of over $50 to help launch the book. Please join me in thanking them for their encouragement and support. Al Zimmerman, Alan W. Smith, Alberto A. Col\u00f3n Viera, Andrew Terry, Avi Flombaum, Brian Hays, Charles Treece, Dave Doolin, Denzil Villarico, Derek Rockwell, Eito Katagiri, Evan Sparkman, Frank Castle, Fred Dixon, Fred Schoeneman, Gant Laborde, Gardner Monks, Gerard de Brieder, GoodWorksOnEarth.org, Hanspeter Leupin, Harald Lazardzig, Harsh Patel, James Bond, Jared Koumentis, Jason Landry, Jeff Whitmire, Jesse House, Joe Wilmoth Jr., John Shannon, Joost Baaij, Juan Cristobal Pazos, Kathleen Sidenblad, Laird Hayward, Logan Hasson, Ludovic Kuty, Mark Gilbert, Matt Esterly, Mike Gilbert, Niko Roberts, Norman Cohen, Paul Philippov, Robert Nadar, Rogier Hof, Ross Kinney, Ruben Calzadilla, Stephane Moreau, Susan Wilson, Sven Fuchs, Thomas Nitsche, Tom Michel, Youn Shin Kang, Yuen Lock 27.1.3 Technical Editors Rails and Ruby experts are very busy. I am very grateful for the assistance I received from my colleagues for the technical review of individual chapters. Kirsten Jones , reviewed the chapter \u201cRequest and Response\u201d Pat Shaughnessy , author of Ruby Under a Microscope , reviewed the chapter \u201cJust Enough Ruby\u201d Noel Rappin , author of Rails Test Prescriptions , reviewed chapters 1-7, and the \u201cTesting\u201d chapter Aaron Sumner , author of Everyday Rails Testing with RSpec , reviewed the \u201cTesting\u201d chapter Ken Collins reviewed the \u201cTesting\u201d chapter Buy their books. I recommend them. 27.1.4 Editors and Proofreaders Dozens of volunteers offered corrections and made suggestions, from fixing typos to advice about organizing the chapters. Alberto Dubois Rib\u00f3, Alex Finnarn, Alex Zielonko, Alexandru Muntean, Alexey Dotokin, Alexey Ershov, Andr\u00e9 Arko, Andreas Basurto, Ben Swee, Brandon Schabel, Cam Skene, Daniella Zimmermann, Dapo Babatunde, Dave Levine, Dave Mox, David Kim, Duany Dreyton Bezerra Sousa, Erik Trautman, Erin Nedza, Flavio Bordoni, Fritz Rodriguez Jr, Hendri Firmana, Ishan Shah, James Hamilton, Jasna Vukovic, Jeremy Schneider, Joanne Daudier, Joel Dezenzio, Jonah Ruiz, Jonathan Lai, Jonathan Miller, Jordan Stone, Joreal Whitfield, Josh Morrow, Joyce Hsu, Julia Mokus, Julie Hamwood, Jutta Frieden, Laura Pierson Wadden, Marc Ignacio, Mark D. Blackwell, Mark Everhart, Michael Wong, Miguel Herrera, Mike Janicki, Miran Omanovic, Neha Jain, Norman Cohen, Oana Sipos, Peter Rangelov, Richard Afolabi, Robin Paul, Roderick Silva, Sakib Ash, Sebastian Lobato Genco, Silvia Obajdin, Stas Su\u0219cov, Stefan Streichsbier, Sven Fuchs, Tam Eastley, Tim Goshinski, Timothy Jones, Tom Connolly, Tom Michel, Tomas Olivares, Verena Brodbeck, Will Schive, William Yorgan, Zachary Davy 27.1.5 Photos Images provided by the lorempixel.com service are used under the Creative Commons license . Visit the Flickr accounts of the photographers to learn more about their work: photo of a white cat by Tomi Tapio photo of a cat by Steve Garner photo of a cat by Ian Barbour The photo of a fluffy white cat by Tomi Tapio is used in the application. 27.2 Comments I regularly update the book. Your comments and suggestions for improvements are welcome. Feel free to email me directly at [email protected] . Are you stuck with code that won\u2019t work? Stack Overflow provides a question-and-answer forum for readers of this book. Use the tag \u201clearn-ruby-on-rails\u201d or \u201crailsapps\u201d when you post your question. Found a bug in the tutorial application? Please create an issue on GitHub.","title":"Learn Ruby on Rails Book Two"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#learn-ruby-on-rails-book-two","text":"","title":"Learn Ruby on Rails: Book Two"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#version-420-2-august-2017","text":"","title":"Version 4.2.0, 2 August 2017"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#daniel-kehoe","text":"","title":"Daniel Kehoe"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#contents","text":"Chapter 1 Version Check, Videos, and More 1.1 Version Check 1.2 Get the Videos Chapter 2 Introduction 2.1 Is It for You? 2.2 What To Expect 2.2.1 About Book One 2.2.2 What\u2019s in This Book 2.2.3 A Warning About Links 2.2.4 What Comes Next 2.2.5 Staying In Touch 2.2.6 A Note to Reviewers and Teachers 2.2.7 Using the Book in the Classroom 2.2.8 Let\u2019s Get Started Chapter 3 Get Help When You Need It 3.1 Example Code 3.2 Version Check 3.3 Getting Help With the Book 3.4 Getting Help With Rails 3.4.1 Video Option 3.4.2 Where To Go For Help? 3.5 References 3.5.1 RailsGuides 3.5.2 Cheatsheets 3.5.3 API Documentation 3.6 Meetups, Hack Nights, and Workshops 3.7 Pair Programming 3.8 Pairing With a Mentor 3.9 Code Review 3.10 Staying Up-to-Date Chapter 4 Accounts You May Need 4.1 GitHub 4.2 MailChimp 4.3 SendGrid 4.4 Heroku Chapter 5 Get Started 5.1 Text Editor and Terminal Applications 5.2 Copying and Pasting Code 5.3 Your Computer 5.3.1 Hosted Computing 5.4 Try the Terminal 5.5 Installing Ruby 5.5.1 MacOS 5.5.2 Ubuntu Linux 5.5.3 Hosted Computing 5.5.4 Windows 5.6 Your Workspace 5.6.1 Video Option 5.7 Understanding Version Numbers 5.8 Ruby and Rails Version Check 5.9 RVM 5.10 Project-Specific Gemset Chapter 6 Create the Application 6.1 Starter Applications 6.2 Workspace Folder and RVM Gemset 6.3 Use \u201cRails New\u201d to Build the Application 6.4 Make a Sticky Gemset 6.5 Test the Application 6.5.1 Launching the Web Server 6.5.2 Errors for Linux Users 6.5.3 Viewing in the Web Browser 6.5.4 Watch Log Messages 6.5.5 Multiple Terminal Windows 6.5.6 Stop the Web Server 6.6 Get Organized for Efficiency Chapter 7 The Parking Structure 7.1 Video Option 7.2 Project Directory 7.3 Get to Know the Folders and Files 7.3.1 Important Folders and Files 7.3.2 Not-So-Important Folders and Files 7.3.3 Folders for Testing 7.4 The App Directory 7.4.1 Folders of Future Importance Chapter 8 Time Travel with Git 8.1 Git 8.2 Is Git Installed? 8.3 Is Git Configured? 8.4 Create a Repository 8.5 GitIgnore 8.6 Git Workflow 8.6.1 Untracked Files 8.6.2 Staging 8.6.3 Committing 8.6.4 Git Log 8.6.5 Repositories 8.6.6 Pushing to GitHub 8.7 The README Chapter 9 Gems 9.1 Videos 9.2 RubyGems 9.3 Rails Gems 9.4 Gems for a Rails Default Application 9.5 Where Do Gems Live? 9.6 Gemfile 9.7 Gemfile for a Rails Default Application 9.8 Adding Gems 9.9 About the Rails Version 9.10 Install the Gems 9.10.1 Troubleshooting 9.11 Git Chapter 10 Configure 10.1 Configuration Security 10.2 Videos 10.3 About Environment Variables 10.4 Viewing Hidden Files 10.5 Set Environment Variables 10.5.1 SendGrid 10.5.2 MailChimp 10.5.3 Owner Email 10.5.4 Restart the Terminal Session 10.5.5 Troubleshooting 10.6 The Secrets File 10.6.1 Domain Name 10.6.2 Securing the Secrets File 10.6.3 Troubleshooting 10.7 Secret Key Base 10.8 Configure Email 10.8.1 Connect to an Email Server 10.8.2 Perform Deliveries in Development 10.9 Git Chapter 11 Static Pages and Routing 11.1 Add a Home Page 11.2 Routing Error 11.3 Add an About Page 11.3.1 Introducing TDD 11.4 Introducing Routes 11.5 Using the \u201cAbout\u201d Page Chapter 12 Request and Response 12.1 Investigating the Request Response Cycle 12.1.1 Inside the Browser 12.1.2 Inside the Server 12.2 How the Browser Works 12.2.1 Document Object Model 12.2.2 Rendering 12.3 How the Application Works 12.3.1 Video Option 12.3.2 The Model View Controller Concept 12.4 Remove the About Page Chapter 13 Dynamic Home Page 13.1 User Story 13.2 Routes, Model, View, and Controller 13.3 The Name Game 13.4 Naming Conventions 13.5 Routing 13.6 Model 13.7 View 13.8 Controller 13.9 Scaffolding 13.10 Test the Application 13.11 Git Chapter 14 Troubleshoot 14.1 Git 14.2 Interactive Ruby Shell 14.2.1 IRB for Blocks of Code 14.2.2 Quitting IRB 14.2.3 Learn More About IRB 14.2.4 Beyond IRB 14.3 Rails Console 14.4 Rails Logger 14.5 Revisiting the Request-Response Cycle 14.6 The Stack Trace 14.7 Raising an Exception 14.8 Git Chapter 15 Just Enough Ruby 15.1 Reading Knowledge of Ruby 15.2 Ruby Example 15.3 Ruby Keywords 15.3.1 API Documentation 15.4 Ruby Files 15.4.1 Using IRB 15.5 Whitespace and Line Endings 15.6 Comments 15.7 The Heart of Programming 15.8 Assignment 15.9 Object-Oriented Terminology 15.9.1 Houses 15.9.2 Vehicles 15.9.3 Cookies 15.9.4 Limitations of Metaphors 15.9.5 Definitions 15.10 Classes 15.11 Methods 15.12 Dot Operator 15.12.1 Question and Exclamation Methods 15.13 Initialize Method 15.14 Method Parameters 15.15 Variable 15.15.1 Symbol 15.16 Attributes 15.17 Instance Variable 15.17.1 Instance Variables in Rails 15.18 Double Bar Equals Operator 15.19 Conditional 15.20 Ternary Operator 15.21 Interpolation 15.22 Access Control 15.23 Hash 15.24 Array 15.25 Iterator 15.26 Block 15.27 Rails and More Keywords 15.28 More Ruby 15.28.1 Collaborative Learning 15.28.2 Online Tutorials 15.28.3 Books 15.28.4 Newsletters 15.28.5 Screencasts 15.29 Git Chapter 16 Layout and Views 16.1 Template Languages 16.2 Introducing the Application Layout 16.3 Where did all the extra HTML come from? 16.4 Yield 16.5 Yield Variations 16.6 ERB Delimiters 16.7 Introducing View Helpers 16.8 The Rails Layout Gem 16.9 Basic Boilerplate 16.10 Adding Boilerplate 16.10.1 Viewport 16.10.2 Title and Description 16.11 Asset Pipeline 16.11.1 Assets Without Rails 16.11.2 Assets With Rails 16.12 Navigation Links 16.12.1 Introducing Partials 16.12.2 Introducing Link Helpers 16.12.3 Navigation Partial 16.12.4 Navigation Links Partial 16.13 Flash Messages 16.13.1 Creating Flash Messages 16.13.2 Flash and Flash Now 16.13.3 Explaining the Ruby Code 16.13.4 The Flash Messages Partial 16.14 HTML5 Elements 16.15 Application Layout 16.16 Simple CSS 16.17 Test the Application 16.18 Git Chapter 17 Front-End Framework 17.1 CSS Frameworks 17.2 JavaScript Libraries and Frameworks 17.3 Front-End Frameworks 17.4 CSS Preprocessing with Sass 17.5 Bootstrap or Others? 17.6 Graphic Design Options 17.7 Bootstrap 3 or 4? 17.8 Bootstrap Gem 17.9 Rails Layout Gem with Bootstrap 17.10 Renaming the application.css File 17.11 The application.css.scss File 17.11.1 A Global CSS File 17.11.2 A Manifest File 17.12 Bootstrap JavaScript 17.13 Bootstrap CSS 17.14 Using Bootstrap CSS Classes 17.14.1 Bootstrap Grid 17.14.2 Presentational Versus Semantic Styles 17.14.3 Use Bootstrap Classes Directly 17.14.4 Or Use Sass Mixins with Bootstrap 17.15 Application Layout with Bootstrap 17.16 Flash Messages with Bootstrap 17.17 Navigation Partial with Bootstrap 17.18 Navigation Links Partial 17.19 Test the Application 17.20 Remove the Flash Messages 17.21 Git Chapter 18 Add Pages 18.1 High Voltage Gem 18.2 Views Folder 18.3 \u201cAbout\u201d Page 18.4 Contact Page 18.5 Routing for the High Voltage Gem 18.6 Update the Navigation Partial 18.7 Test the Application 18.8 Git Chapter 19 Contact Form 19.1 The \u201cOld Way\u201d and the \u201cRails Way\u201d 19.2 User Story 19.3 Routing 19.4 Adding a Form to the Contact Page 19.5 Controller 19.5.1 Params Hash 19.5.2 Process_form Method 19.6 Test the Application 19.7 The Validation Problem 19.8 Remove the Contact Page 19.9 Implementing the \u201cRails Way\u201d 19.10 ActiveModel 19.11 Model 19.12 Create a New Contact Page 19.13 Seven Controller Actions 19.14 Controller 19.14.1 Mass-Assignment Vulnerabilities 19.14.2 Private Methods 19.15 Routing 19.16 Change Navigation Links 19.17 Test the Application 19.18 Git Chapter 20 Send Mail 20.1 User Story 20.2 Implementation 20.3 Create View Folder and Mailer 20.4 Edit the Mailer 20.5 Create Mailer View 20.6 Modify Controller 20.7 Test the Application 20.8 Troubleshooting 20.8.1 User Name Issues 20.8.2 Password Issues 20.8.3 Problems with Environment Variables 20.9 Asynchronous Mailing 20.10 Git Chapter 21 Mailing List 21.1 User Story 21.2 Implementation 21.3 Gibbon Gem 21.4 Home Page 21.4.1 Photo Options 21.5 Visitor Model 21.6 Visitors Controller 21.7 Clean Up 21.8 Routing 21.9 Test the Application 21.10 Git Chapter 22 Deploy 22.1 Heroku Costs 22.2 Test the Application 22.3 Preparing for Heroku 22.3.1 Gemfile 22.3.2 Asset Pipeline in Production 22.3.3 Option to Ban Spiders 22.3.4 Humans.txt 22.4 Sign Up for a Heroku Account 22.5 Heroku Toolbelt 22.6 Heroku Create 22.7 Enable Email 22.8 Set Heroku Environment Variables 22.9 Push to Heroku 22.10 Updating the Application 22.11 Visit Your Site 22.12 Customizing 22.13 Troubleshooting 22.14 Where to Get Help Chapter 23 Analytics 23.1 Segment.com 23.2 Accounts You Will Need 23.3 Installing the JavaScript Library 23.4 Replace the Write Key 23.5 Add Integration Code 23.6 Page View Tracking with Turbolinks 23.7 Event Tracking 23.8 Troubleshooting 23.9 Segment.com Integrations 23.10 Deploy 23.11 Improving the User Experience 23.12 Conversion Tracking 23.13 Enjoy What You\u2019ve Achieved Chapter 24 Testing 24.1 Why Test? 24.2 What Are Tests? 24.3 Scripted or Exploratory 24.4 Regression and Acceptance 24.5 Units and Integration 24.6 Sample Data 24.7 Test Doubles 24.8 Minitest and RSpec 24.9 Capybara, the Ghost in the Machine 24.10 Four Phases of Feature Tests 24.11 Four Phases of Unit Tests 24.12 Set Up Minitest 24.12.1 Run Tests 24.13 Unit Test (Standard Syntax) 24.14 Unit Test (Spec Syntax) 24.14.1 Create a Test Class With Describe 24.14.2 Setup Phase 24.14.3 Do It 24.15 Run Tests 24.15.1 Breaking the Test 24.16 Feature Test 24.16.1 Feature 24.16.2 Scenario 24.17 Run Tests 24.17.1 Troubleshooting 24.17.2 Breaking the Test 24.17.3 Using Capybara 24.18 Other Tests 24.19 Behavior-Driven Development 24.20 Test-Driven Development 24.21 Test-First Development 24.22 Words of Encouragement Chapter 25 Rails Composer 25.1 Building Starter Applications 25.2 Build \u2018Learn Rails\u2019 in Less Than Five Minutes 25.3 A Collection of Starter Applications 25.3.1 Rails Bootstrap 25.3.2 Rails Foundation 25.3.3 Rails Mailing List with Active Job 25.3.4 Rails OmniAuth 25.3.5 Rails Devise 25.3.6 Rails Devise Roles 25.3.7 Rails Devise Pundit 25.3.8 Other Starter Applications 25.4 Rails Composer Options 25.5 Try It Out Chapter 26 Version Notes 26.1 Version 4.2.0 26.2 Version 4.1.0 26.3 Version 4.0.2 26.4 Version 4.0.1 26.5 Version 4.0.0 26.6 Version 3.1.0 26.7 Version 3.0.2 26.8 Version 3.0.1 26.9 Version 3.0.0 26.10 Version 2.2.2 26.11 Version 2.2.1 26.12 Version 2.2.0 26.13 Version 2.1.6 26.14 Version 2.1.5 26.15 Version 2.1.4 26.16 Version 2.1.3 26.17 Version 2.1.2 26.18 Version 2.1.1 26.19 Version 2.1.0 26.20 Version 2.0.2 26.21 Version 2.0.1 26.22 Version 2.0.0 26.23 Version 1.19 26.24 Version 1.18 26.25 Version 1.17 Chapter 27 Credits and Comments 27.1 Credits 27.1.1 Kickstarter 27.1.2 Financial Backers for the First Edition 27.1.3 Technical Editors 27.1.4 Editors and Proofreaders 27.1.5 Photos 27.2 Comments","title":"Contents"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-1-version-check-videos-and-more","text":"Before you get started, I want you to have the most current version of my book. Also, I\u2019ll tell you how to get the videos and advanced tutorials.","title":"Chapter 1 Version Check, Videos, and More"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#11-version-check","text":"If you have the PDF, ePub, or Mobi versions of the book, check the title page for the version number and look on the webpage for the learn-rails GitHub repository to make sure you have the newest version of the book. I suggest to use the online edition as you build the tutorial application. It is always up to date.","title":"1.1 Version Check"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#12-get-the-videos","text":"You can watch videos as you read the book. A subscription is only $19 per month (there\u2019s also a discount when you get the video series plus advanced tutorials). It\u2019s easy and you\u2019ll learn more: Get the Videos and Advanced Tutorials The videos are a great introduction to Rails. With the videos and the advanced tutorials, I promise there is no better way to learn Rails.","title":"1.2 Get the Videos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-2-introduction","text":"Welcome. This is Book Two in my Ruby on Rails book series . It is written for Rails 5.1. In this book, you\u2019ll build a working web application so you\u2019ll gain hands-on experience. Along the way, you\u2019ll practice techniques used by professional Rails developers. And I\u2019ll help you understand why Rails is a popular choice for web development. Read Book One to get the big picture that\u2019s missing from other tutorials. Read it anywhere, on your phone or tablet. It introduces key concepts so you\u2019ll have a solid foundation for continued study. You can start this book before you finish Book One. This book (Book Two) is for hands-on learning so you\u2019ll need your computer to follow this tutorial. In this book, I also provide links to videos. You can get the videos along with advanced tutorials at the tutorials.railsapps.org site. Figure 2.1: The application you will build.","title":"Chapter 2 Introduction"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#21-is-it-for-you","text":"You don\u2019t need to be a programmer to succeed with this book. You\u2019ll be surprised how quickly you become familiar with the Unix command line interface and the Ruby programming language even if you\u2019ve never tried programming before. Book One provides a primer for the Unix command line, the terminal, and a text editor. If you have no experience with Unix commands, the terminal window, or a text editor, read Book One first. Everything else you need is self-contained in this book. With this book, my aim is to introduce you to Rails and the techniques of web application development so you can launch a startup or begin a new career.","title":"2.1 Is It for You?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#22-what-to-expect","text":"There is deep satisfaction in building an application and making it run. With this book, I\u2019ll give you everything you need to build a real-world Rails application. More importantly, I\u2019ll explain everything you build, so you understand how it works. There will be no mystery code. When you\u2019ve completed this tutorial, you will be ready for more advanced self-study, including the Capstone Rails Tutorials , textbook introductions to Rails such as Michael Hartl\u2019s Ruby on Rails Tutorial , or workshops and code camps that provide intensive training in Ruby on Rails.","title":"2.2 What To Expect"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#221-about-book-one","text":"Here\u2019s what is covered in Book One, in case you missed it. In Book One, I explain the culture and practices of the Rails community. I introduce the basic concepts you\u2019ll need to understand web application development. Book One will teach you how to be a successful beginner. There is a roadmap, or study guide, in the \u201cLevel Up\u201d chapter. It helps to have a map because there is so much to learn. More importantly, to become a skilled Rails developer, you\u2019ll need to start writing code, and Book One contains a chapter, \u201cCrossing the Chasm,\u201d that will give you a strategy for building your own applications.","title":"2.2.1 About Book One"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#222-whats-in-this-book","text":"You\u2019ll start coding immediately in this book. It\u2019s a hands-on tutorial that leads you through the code needed to build a real-world web application. Don\u2019t skip around in this book. The tutorial is designed to unfold in steps, one section leading to another, until you reach the \u201cTesting\u201d chapter. You can complete this book in one long weekend, though it will take concentration and stamina. If you work through the book over a longer timespan, try to set aside uninterrupted blocks of two hours or more for reading and coding, as it takes time to focus and concentrate.","title":"2.2.2 What\u2019s in This Book"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#223-a-warning-about-links","text":"My books are densely packed with links for background reading. If you click every link, you\u2019ll be a well-informed student, but you may never finish the book! It\u2019s up to you to master your curiosity. Follow the links only when you want to dive deeper.","title":"2.2.3 A Warning About Links"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#224-what-comes-next","text":"The best way to learn is by doing; when it comes to code, that means building applications. Hands-on learning with actual Rails applications is the key to absorbing and retaining knowledge. After you read this book, you\u2019ll be able to work with the example applications from the RailsApps Project . The project provides open source example applications for Rails developers, for free. Each application is accompanied by a tutorial in the Capstone Rails Tutorials series, so there\u2019s no mystery code. Each application can be generated in a few minutes with the Rails Composer tool, which professional developers use to create starter applications. The open source project is solely supported by subscriptions to the video series and sales of the Capstone Rails Tutorials . If you get the videos or the advanced tutorials, you\u2019ll have my sincere appreciation for your support.","title":"2.2.4 What Comes Next"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#225-staying-in-touch","text":"If you obtained this book from Amazon or a download site, take a moment to get on the mailing list for the book. I\u2019ll let you know when I release updates to the book. Get on the mailing list for the book","title":"2.2.5 Staying In Touch"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#226-a-note-to-reviewers-and-teachers","text":"This book approaches the subject differently than most introductions to Rails. In this book, rather than show the student how to use scaffolding, I introduce the model-view-controller design pattern by creating the components manually. Lastly, though every other Rails tutorial shows how to use a database, this book doesn\u2019t, because I want the book to be a short introduction and I believe the basic principles of a web application stand out more clearly without adding a database to the application. Though this tutorial is not a typical Rails introduction, I hope you\u2019ll agree that it does a good job in preparing Rails beginners for continued study, whether it is a course or more advanced books.","title":"2.2.6 A Note to Reviewers and Teachers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#227-using-the-book-in-the-classroom","text":"If you\u2019ve organized a workshop, course, or code camp, and would like to assign the book as recommended reading, contact me at [email protected] to arrange access to the book for your students at no charge.","title":"2.2.7 Using the Book in the Classroom"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#228-lets-get-started","text":"In the next chapter, we\u2019ll learn how to get help when you need it.","title":"2.2.8 Let\u2019s Get Started"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-3-get-help-when-you-need-it","text":"This chapter appears in the first book in this series, but I\u2019ve included an expanded version here in Book Two because it is important.","title":"Chapter 3 Get Help When You Need It"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#31-example-code","text":"If you follow this tutorial closely, you\u2019ll have a working application that closely matches the example app in the learn-rails GitHub repository. If your application doesn\u2019t work after following the tutorial, compare the code to the example app in the GitHub repository, which is known to work.","title":"3.1 Example Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#32-version-check","text":"The code in this tutorial was tested by many people and worked flawlessly at the time this was written. The learn-rails example application on GitHub serves as a \u201creference implementation\u201d if you have problems. The example application is updated more frequently than the published tutorial. You\u2019ll find the version number and release date on the first page of this book (under the book title). Check the learn-rails GitHub repository to find out if you have the newest version of the book. The README page on the GitHub repo always shows the most recent version number for the book and the tutorial application. Don\u2019t worry if the learn-rails GitHub repository seems complicated or difficult to understand. You\u2019ll get to know GitHub over time and it will become familiar. For now, it is only important to know that it is there in case you have problems. Take a moment now to look at the open issues on GitHub to see what problems you may encounter as you work your way through the tutorial. You can look at the closed issues to see some of the solved problems. If you have trouble building the application in this book, and suspect something may be out of date, you can compare the Gemfile in the repo to see if we\u2019ve changed gems or specified version numbers to avoid compatibility issues. You can also check the CHANGELOG and look at recent commits to see the current state of the application.","title":"3.2 Version Check"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#33-getting-help-with-the-book","text":"Let\u2019s consider what to do if you encounter problems as you build the tutorial application in this book. If you are in a classroom, or studying in a group, ask a peer to look at your problem. Most problems are caused by simple typos or formatting errors. Your classmate may see what you overlooked. Stack Overflow provides a question-and-answer forum for readers of this book. As the author of this book, I can\u2019t solve your individual problems or help you directly by email. If I did, I would not have time to create the tutorials and videos that benefit so many people. However, I watch for questions on Stack Overflow. Everyone benefits when solutions are made public. tag your questions on Stack Overflow with railsapps for extra attention If your questions aren\u2019t answered on Stack Overflow, try the Reddit forum: /r/rails I sincerely hope you won\u2019t encounter obstacles as you build the tutorial application. Thousands of beginners have successfully completed the book and, unless a gem has recently changed, you should have no problem. Now let\u2019s consider where to look for help when you are working on your own Rails projects.","title":"3.3 Getting Help With the Book"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#34-getting-help-with-rails","text":"","title":"3.4 Getting Help With Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#341-video-option","text":"Watch the six minute video if you have subscribed: Get Help with Rails","title":"3.4.1 Video Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#342-where-to-go-for-help","text":"What will you do when you get stuck? \u201cGoogle it,\u201d of course. But here\u2019s a trick to keep in mind. Google has options under \u201cSearch tools\u201d to show only recent results from the past year. Use it to filter out stale advice that pertains only to older versions of Rails. Stack Overflow is as important as Google for finding answers to programming problems. Stack Overflow answers are often included in Google search results, but you can go directly to Stack Overflow to search for answers to your questions. Like Google, answers from Stack Overflow are helpful if you check carefully to make sure the answers are recent. Also be sure to compare answers to similar questions; the most popular answer is not always the correct answer to your particular problem. Requests for advice (especially anything that provokes opinions) are often rejected on Stack Overflow. Instead, try Reddit for advice or recommendations. You\u2019ll find discussion forums (\u201csubreddits\u201d) devoted to Rails and Ruby . You can also visit the Quora question-and-answer site for topics devoted to Rails and Ruby .","title":"3.4.2 Where To Go For Help?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#35-references","text":"Here are suggestions for the most important references. If you feel overwhelmed by all the links, remember that you can use this book to build the tutorial application without any additional resources. Right now, it\u2019s important to know additional help is available when you need it.","title":"3.5 References"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#351-railsguides","text":"The Rails Guides are Rails\u2019s official documentation, written for intermediate-level developers who already have experience writing web applications. The Rails Guides are an excellent reference if you want to check the correct syntax for Rails code. You\u2019ll be able to use the Rails Guides after completing this tutorial.","title":"3.5.1 RailsGuides"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#352-cheatsheets","text":"Tobias Pfeiffer has created a useful Rails Beginner Cheat Sheet that provides a good overview of Rails syntax and commands. Even better than a cheatsheet, for Mac users, is an application named Dash that offers fingertip access to reference documentation for Ruby, Rails, HTML, CSS, JavaScript, and many other languages and frameworks.","title":"3.5.2 Cheatsheets"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#353-api-documentation","text":"The API documentation for Ruby and Rails shows every class and method. These are extremely technical documents (the only thing more technical is reading the source code itself). The documents offer very little help for beginners, as each class and method is considered in isolation, but there are times when checking the API documentation is the only way to know for certain how something works. Rails Documentation - official API docs apidock.com/rails - Rails API docs with usage notes apidock.com/ruby - Ruby API docs with usage notes I recommend Dash as a tool to look up classes, modules, and methods in Ruby and Rails. Dash is a macOS app; use Zeal on Linux. Dash and Zeal run offline (they don\u2019t need an Internet connection) so you can use them anywhere.","title":"3.5.3 API Documentation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#36-meetups-hack-nights-and-workshops","text":"I\u2019d like to urge you to find ways you can work with others who are learning Rails. Peer support is really important when you face a challenge and want to overcome obstacles. Most large urban areas have meetups or user group meetings for Rails developers. Try Meetup.com or google \u201cruby rails (my city)\u201d. The community of Rails developers is friendly and eager to help beginners. If you are near a Rails meetup, it is really worthwhile to connect to other developers for help and support. You may find a group that meets weekly for beginners who study together. Local user groups often sponsor hack nights or hackathons which can be evening or weekend collaborative coding sessions. You don\u2019t have to be an expert. Beginners are welcome. You can bring your own project which can be as simple as completing a tutorial. You will likely find a study partner at your level or a mentor to help you learn. If you are a woman learning Rails, look for one of the free workshops from RailsBridge or Rails Girls . These are not exclusively for women; everyone considered a \u201cminority\u201d in the tech professions is encouraged to participate; and men are included when invited by a woman colleague or friend.","title":"3.6 Meetups, Hack Nights, and Workshops"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#37-pair-programming","text":"Learning to code is challenging, especially if you do it alone. Make it social and you\u2019ll learn faster and have more fun. There\u2019s a popular trend in the workplace for programmers to work side-by-side on the same code, sharing a keyboard and screen. It\u2019s effective, both to increase productivity and to share knowledge, and many coders love it. When programmers are not in the same office, they share a screen remotely and communicate with video chat. Look for opportunities to pair program. It\u2019s the best way to learn to code, even if your pairing partner is only another beginner. Learn more about pair programming on the site pairprogramwith.me and find a pairing partner at codermatch.me or letspair.net . Remote pair programming requires tools for screen sharing and video chat. Pairing sessions often use: Google+ Hangouts Screenhero Floobits Cloud9 IDE More tools are emerging as remote pair programming becomes popular.","title":"3.7 Pair Programming"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#38-pairing-with-a-mentor","text":"By far, the best way to learn is to have a mentor at your side as you undertake a project. That is an opportunity that is seldom available, unless you\u2019ve been hired to be part of a team in a company that encourages pair programming. You can try RailsMentors , a network of volunteer mentors offering free help. If you can pay for help, find a mentor using HackHands or AirPair . Market rates are expensive for a student, obviously, but if you are learning on the job or building an application for your own business, connecting online with a mentor might be a godsend. AirPair connects developers for real-time help using video chat and screen sharing. Experts set their own rate and the site matches you according to your budget. Expect to pay market rates for consulting ranging from USD $40 per hour to $150 per hour or more. HackHands promises to instantly connect you with a qualified expert at a cost of one dollar per minute for mentorship using video chat and screen sharing.","title":"3.8 Pairing With a Mentor"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#39-code-review","text":"Code review is an essential part of the development process. There\u2019s always more than one way to implement a feature, and some ways are better than others, but you may not know it unless you ask someone to look at your code. When you pair with a mentor, you get the benefit of code review. But even if you don\u2019t have a mentor, you can get code review online. StackExchange, the parent of StackOverflow, has a free site for code review, and a new service promises code review as a service: codereview.stackexchange.com Expert code review will accelerate your learning faster than anything else. Knowing where to go for help is important; it is just as important to stay current.","title":"3.9 Code Review"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#310-staying-up-to-date","text":"Rails changes frequently and its community is very active. Changes to Rails, expert blog articles, and new gems can impact your projects, even if you don\u2019t work full-time as a Rails developer. Consequently, I urge you to stay up-to-date with news from the community. I suggest signing up for two weekly email newsletters: Ruby Weekly Green Ruby News Another weekly email newsletter is more technical, and focused on code arriving in the next version of Rails: This Week in Rails For daily news about Rails, check Peter Cooper\u2019s RubyFlow site which lists new blog posts from Rails developers each day. Also take a look at this list of top blogs for Rails developers: 45 Ruby Blogs If you like podcasts, check out Ruby Rogues and Envy Labs\u2019s Ruby5 . Finally, you can follow @rails_apps on Twitter for news about the RailsApps project.","title":"3.10 Staying Up-to-Date"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-4-accounts-you-may-need","text":"You\u2019ll need accounts with four services before you begin building the application in this book. This tutorial will show you how to save your work using GitHub . You can sign up for a GitHub account for free. Every experienced Rails developer has a GitHub account; it is where we collaborate on our code, both commercial and open source projects. We\u2019ll create a form that allows website visitors to \u201copt-in\u201d to a mailing list. You\u2019ll need a MailChimp account, which is free. If you send email to a mailing list, you will find it is useful to have an account with MailChimp or a similar service. We\u2019ll also send email from the application, which will require a SendGrid account. SendGrid is a transactional email service that lets you send email messages efficiently and reliably. SendGrid offers a free account that allows you to send 12,000 messages per month for free. Finally, we\u2019ll deploy the tutorial application to Heroku which provides Rails application hosting. It costs nothing to set up a Heroku account and deploy as many applications as you want. It is the easiest way to deploy a Rails application and most Rails developers use Heroku at some time in their careers.","title":"Chapter 4 Accounts You May Need"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#41-github","text":"Rails developers use GitHub for collaboration and remote backup of projects. For this tutorial, I suggest you get a free personal GitHub account if you don\u2019t already have one. As a developer, your GitHub account establishes your reputation in the open source community. If you\u2019re seeking a job as a developer, employers will look at your GitHub account. When you work with other developers, they may check to see what you\u2019ve worked on recently. Don\u2019t be reluctant to set up a GitHub account, even if you\u2019re a beginner. It shows you are serious about learning Rails. You\u2019ll be asked to provide a username. This can be a nickname or short version of your real name (for example, your Twitter username). You\u2019ll be asked to provide an email address. It\u2019s very important that you use the same email address for your GitHub account that you use to configure Git locally (there will be more about configuring Git later). If you create a Heroku account to deploy and host your Rails applications, you should use the same email address. After you create your GitHub account, log in and look for the button \u201cEdit Your Profile.\u201d Take a few minutes to add some public information to your account. It is really important to provide your real name and a public email address. Displaying your real name on your GitHub account makes it easy for people to associate you with your work when they meet you in real life, for example at a meetup, a hackathon, or a conference. Providing a public email address makes it possible for other developers to reach you if you ask questions or submit issues. If you can, provide a website address (even just your Twitter or Facebook page). In general, you won\u2019t be exposed to stalkers or spammers (except some recruiters) if you are open about yourself on GitHub. Later I\u2019ll show you how to set up and use Git and GitHub.","title":"4.1 GitHub"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#42-mailchimp","text":"This tutorial shows how website visitors can sign up to receive a newsletter provided by a MailChimp mailing list. MailChimp allows you to send up to 12,000 emails/month to a list of 2000 or fewer subscribers for free. There is no cost to set up an account. MailChimp will ask you to provide a website address and company details for your account. These details are included when email messages are sent to your subscribers. If you don\u2019t have your own website, you can enter the URL for your GitHub account for now. Use your own name for a company if you don\u2019t have one. After you have set up a MailChimp account, create a new mailing list where you can collect email addresses of visitors who have asked to subscribe to a newsletter. The MailChimp \u201cLists\u201d page has a button for \u201cCreate List.\u201d The list name and other details are up to you. If you get frustrated with the complex and confusing MailChimp interface, try to remember that the friendly MailChimp monkey is laughing with you, not at you.","title":"4.2 MailChimp"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#43-sendgrid","text":"Earlier editions of this book showed how to use a Gmail account to send email from the application. Google has taken steps to make Gmail more secure and now it can be difficult to send email from a Rails application using Gmail. This tutorial provides instructions for SendGrid . SendGrid offers a free account that allows you to send 12,000 messages per month for free. Scroll to the bottom of the SendGrid pricing page to see details about the free plan. Click the \u201cTry for Free\u201d link to set up an account. No credit card is needed.","title":"4.3 SendGrid"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#44-heroku","text":"We\u2019ll use Heroku to host the tutorial application so anyone can reach it. To deploy an app to Heroku, you must have a Heroku account. Visit https://signup.heroku.com/devcenter to set up an account. Be sure to use the same email address you used to register for GitHub. It\u2019s very important that you use the same email address for GitHub and Heroku accounts.","title":"4.4 Heroku"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-5-get-started","text":"Before you can start building, you\u2019ll need to install Ruby (the language) and Rails (the gem). I\u2019ll provide links to installation instructions that are up to date. Even if you\u2019ve already installed Rails, please review the instructions to make sure your development environment is set up correctly. Other books and tutorials often skip important details.","title":"Chapter 5 Get Started"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#51-text-editor-and-terminal-applications","text":"I\u2019ve explained how to use a text editor and terminal application in Book One. If you haven\u2019t used the Unix command line before, refer to Book One for an introduction. I recommend the Atom text editor but you may use Sublime Text or any others that provide syntax highlighting. Refer to Book One for important instructions about setting up the text editor so you can open a file from the command line.","title":"5.1 Text Editor and Terminal Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#52-copying-and-pasting-code","text":"In the next chapter you\u2019ll begin building a Rails application. You need to get the code from this tutorial into your computer. You could just read and imagine, but really, building a working application is the only way to learn. The most obvious way is to copy and paste from this tutorial into your text editor, assuming you are reading this on your computer (not a tablet or printed pages). It\u2019s a bit tedious and error-prone but you\u2019ll have a good opportunity to examine the code closely. Some students like to type in the code, character by character. If you have patience, it\u2019s a worthwhile approach because you\u2019ll become more familiar with the code than by copying and pasting. Don\u2019t feel shy about copying code; it\u2019s how you will learn. Working programmers spend a lot of time copying code from others. At first, you will copy a lot of code. As you gain proficiency, you will copy code and adapt it, more extensively as you gain confidence and skill. Only when you\u2019ve been working full-time as a coder for months or years will you find yourself writing code from scratch; even then, when you encounter new problems, you will still look for code examples to copy and adapt. Box 5.1. Warning About the PDF and Kindle Versions This book is available in several formats, including online (HTML), PDF, ePub (Apple iBooks), and mobi (Kindle) versions. Use the online edition of the book if you can. With the online edition, you\u2019ll be able to copy and paste the code without any problem. The ePub version (using Apple iBooks) also preserves line breaks and indentation when copying code. Copying without line breaks will cause code errors. You\u2019ll lose line breaks when copying code with the following versions: PDF version on macOS using the Preview application mobi (Kindle) If you use Adobe Acrobat you\u2019ll be able to copy the line breaks (though indenting is lost). You can also open a PDF file in Chrome or Safari web browsers and copy code with line breaks. With the mobi (Kindle) version, you\u2019ll have to carefully reformat the code after pasting into your text editor. Indentation makes code more readable, so try to preserve the indentation you see in the code samples. In YAML files (with the file extension .yml ), indentation is required (your application will break without it).","title":"5.2 Copying and Pasting Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#53-your-computer","text":"You can develop web applications with Rails on computers running Mac OS X, Linux, or Microsoft Windows operating systems. Most Rails developers use macOS or Linux because the underlying Unix operating system has long been the basis for open source programming. Later in this chapter, I\u2019ll give links to installation instructions for macOS and Linux. For Windows users, I have to say, installing Rails on Windows is frustrating and painful. Readers and workshop students often tell me that they\u2019ve given up on learning Rails because installation of Ruby on Windows is difficult and introduces bugs or creates configuration issues. Even when you succeed in getting Rails to run on Windows, you will encounter gems you cannot install. For these reasons, I urge you to use Cloud9, a browser-based development environment, on your Windows laptop.","title":"5.3 Your Computer"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#531-hosted-computing","text":"If you are using Windows, or have difficulty installing Ruby on your computer, try using Cloud9. Cloud9 provides a hosted development environment. That means you set up an account and then access a remote computer from your web browser. The Cloud9 service is free for ordinary use. There is no credit card required to set up an account. You\u2019ll only be charged if you add extra computer memory or disk space (which you don\u2019t need for ordinary Rails development). The Cloud9 service gives you everything you need for Rails development, including a Unix shell with Ruby pre-installed, plus a browser-based file manager and text editor. Any device that runs a web browser will give you access to Cloud9, including a tablet or smartphone, though you need a broadband connection, a sizable screen, and a keyboard to be productive.","title":"5.3.1 Hosted Computing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#54-try-the-terminal","text":"Look for the Terminal application in the following places: MacOS: Applications - Utilities - Terminal Linux: Applications - Accessories - Terminal Windows: Taskbar Start Button - Command Prompt On the Mac, search for the macOS Terminal application by pressing the Command-Spacebar combination (which Apple calls \u201cSpotlight Search\u201d) and searching for \u201cTerminal.\u201d The magnifying glass in the upper right corner of your screen will also launch \u201cSpotlight Search.\u201d Or look in the Applications/Utilities/ folder for the Terminal application. You\u2019ll need to click the name of the application to launch the Terminal. For Linux or Windows, The Command Line Crash Course explains how to launch a terminal application . Launch your terminal application now. Try out the terminal application by entering a shell command. $ whoami Don\u2019t type the $ character. The $ character is a cue that you should enter a shell command. This is a longtime convention that indicates you should enter a command in the terminal application or console. The Unix shell command whoami returns your username. Don\u2019t type the $ prompt. You might see: command not found: $ which indicates you typed the $ character by mistake. If you are new to programming, using a text editor and the shell will seem primitive compared to the complexity and sophistication of Microsoft Word or Photoshop. Software developers edit files with simple text editors and run programs in the shell. That\u2019s all we do. We have to remember the commands we need (or consult a cheatsheet) because there are no graphical menus or toolbars. Yet with nothing more than a text editor and the command line interface, programmers have created everything that you use on your computer.","title":"5.4 Try the Terminal"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#55-installing-ruby","text":"Your first challenge in learning Rails is installing Ruby on your computer. Frankly, this can be the most difficult step in learning Rails because no tutorial can sort out the specific configuration of your computer. Get over this hump and everything else becomes easy. The focus of this book is learning Rails, not installing Ruby, so to keep the book short and readable, I\u2019m going to give you links to articles that will help you install Ruby. You\u2019ll spend at least an hour installing Ruby and Rails, so be sure to allow enough time for the task.","title":"5.5 Installing Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#551-macos","text":"See this article for macOS installation instructions: Install Ruby on Rails - MacOS","title":"5.5.1 MacOS"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#552-ubuntu-linux","text":"See this article for Ubuntu installation instructions: Install Ruby on Rails - Ubuntu","title":"5.5.2 Ubuntu Linux"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#553-hosted-computing","text":"Cloud9 is a browser-based development environment. Cloud9 is free for small projects. If you have a fast broadband connection to the Internet, this is your best choice for developing Rails on Windows. And it is a good option if you have any trouble installing Ruby on Mac or Linux because the Cloud9 hosted environment provides everything you need, including a Unix shell with Ruby and RVM pre-installed, plus a browser-based file manager and text editor. Using a hosted development environment is unconventional but leading developers do so and it may be the wave of the future. See this article for Cloud9 installation instructions: Install Ruby on Rails - Cloud9 The article shows how to get started with Cloud9. If you use Cloud9, be sure to pick the \u201cBlank\u201d template for your workspace, not the \u201cRuby\u201d or \u201cRuby on Rails\u201d templates that provide a prebuilt Rails application. We\u2019re building from scratch in this tutorial.","title":"5.5.3 Hosted Computing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#554-windows","text":"Here are your choices for Windows: Use the Cloud9 hosted development environment Install the Railsbridge Virtual Machine Use RubyInstaller for Windows Cloud9 is ideal if you have a fast Internet connection. If not, download the Railsbridge Virtual Machine to create a virtual Linux computer using Vagrant . Other tutorials may suggest using RailsInstaller , but it will not provide an up-to-date version of Ruby or Rails. Also, RVM does not run on Windows.","title":"5.5.4 Windows"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#56-your-workspace","text":"Take a moment to think about where on your computer you\u2019ll do your work and store your files. You may have a documents/ folder. You could make a similar folder named projects/ or code/ or workspace/ for your programming projects. Use the Unix mkdir command to create a folder or create it with your file browser. If you haven\u2019t done so already, make a folder to contain your programming projects. You don\u2019t need to do this if you already created a workspace/ folder in the Unix chapter in Book One. $ cd ~ $ pwd /Users/danielkehoe $ mkdir workspace $ cd workspace In this tutorial, the terms \u201cfolders\u201d and \u201cdirectories\u201d mean the same thing. Use the Unix cd command to change directories. When you enter the Unix command cd ~ , you\u2019ll move to your home (or \u201cuser\u201d) directory. The squiggly ~ \u201ctilde\u201d character is a Unix shortcut that indicates your home folder. The Unix pwd command shows the \u201cpresent working directory,\u201d where you are. The Unix mkdir command creates an empty folder and we move into it with the Unix cd command.","title":"5.6 Your Workspace"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#561-video-option","text":"Watch the four minute video if you have subscribed: UNIX Commands Basics","title":"5.6.1 Video Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#57-understanding-version-numbers","text":"Rails follows a convention named semantic versioning : The first number denotes a major version (Rails 4) The second number denotes a minor release (Rails 4.2) The third number denotes a patch level (Rails 4.2.1) A major release includes new features, including changes which break backward compatibility. For example, switching from Rails 3.2 to Rails 4.0 required a significant rewrite of every Rails application. A minor release introduces new features but doesn\u2019t break anything. For example, Rails 3.2 added the asset pipeline, and Rails 4.2 added the Active Job feature for background processing. A patch release fixes bugs but doesn\u2019t introduce significant features. Usually this means you can change the version number in the Gemfile and run bundle update without making any other changes to your application.","title":"5.7 Understanding Version Numbers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#58-ruby-and-rails-version-check","text":"Check that appropriate versions of Ruby and Rails are installed in your development environment. You\u2019ll need: The Ruby language (version 2.3 or newer) The Rails gem (version 5.1 or newer) Open your terminal application and enter: $ ruby -v You might see: ruby 2.4.1p0 (...) You\u2019ve got Ruby version 2.4.1, patch level \u201cp0\u201d (Ruby versions add an extra patch level to semantic versioning). If you\u2019ve got a newer version of Ruby, no problem; minor updates to Ruby don\u2019t affect Rails. Try: $ rails -v You might see: Rails 5.1.2 If you see: Rails is not currently installed on this system. You are not using an RVM gemset where the Rails gem is installed. Go to the Installing Rails instructions for your computer if you have not set up Rails. The next section explains more about RVM gemsets which may be all you need to find Rails. If you have Rails 4.2 or older versions, you must update to Rails 5.1. See the Installing Rails instructions for your computer. Versions such as 5.0.0.beta3 or 5.0.0.rc1 are beta versions or \u201crelease candidates.\u201d You can use a release candidate in the weeks before a final release becomes available. If you\u2019ve got Rails 5.1.3 or newer, that\u2019s fine. It means minor bugs have been fixed since this was written, but the book is still current. You can check for the current version of Rails here. Box 5.2. Rails 5.1 This edition of the book was prepared using Rails 5.1.2. The newest version of the book is listed on the README page of the learn-rails GitHub repository.","title":"5.8 Ruby and Rails Version Check"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#59-rvm","text":"I promised that this book would introduce you to the practices of professional Rails developers. One of the most important utilities you\u2019ll need in setting up a real-world Rails development environment is RVM, the Ruby Version Manager . RVM lets you switch between different versions of Ruby. Right now, that might not seem important, but as soon as a new version of Ruby is released, you\u2019ll need to upgrade, and it is best to be ready by installing the current version of Ruby with RVM, so you can easily add a new version of Ruby later, and still switch back to older versions as needed. RVM also helps you manage your collections of gems, by letting you create multiple gemsets . Each gemset is the collection of gems you need for a specific project. Rails changes frequently; with RVM, you can install a specific version of Rails in a project gemset, along with all the gems you need for the project. When a new version of Rails is released, you can create a new gemset with the new Rails version when you start a new project. Your old project will still have the version of Rails it needs in its own gemset. If you\u2019ve followed the instructions in the article Installing Rails and installed RVM, you\u2019ll be ready to handle multiple versions of Ruby, and multiple versions of Rails. That\u2019s as it should be. Most professional Rails developers have more than one version of Ruby or Rails, and RVM makes it easy to switch. RVM will show you a list of available Ruby versions: $ rvm list You can see a list of available gemsets associated with the current Ruby version: $ rvm gemset list You will see an arrow that shows which gemset is active. You will see a global gemset as well as any others you have created, such as a gemset for Rails5.0 . Here\u2019s how to switch between gemsets: $ rvm gemset use global And switch back to another: $ rvm gemset use default After you\u2019ve worked on a few Rails applications, you\u2019ll see several project-specific gemsets if you are using RVM in the way most developers do. RVM is not the only utility you can use to manage multiple Ruby versions. Some developers like Chruby or rbenv . Don\u2019t be worried if you hear debates about RVM versus Chruby or rbenv; developers love to compare the merits of their tools. RVM is popular, well-supported, and an excellent utility to help a developer install Ruby and manage gemsets; that\u2019s why we use it.","title":"5.9 RVM"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#510-project-specific-gemset","text":"For our learn-rails application, we\u2019ll create a project-specific gemset using RVM. We\u2019ll give the gemset the same name as our application. By creating a gemset for our tutorial application, we\u2019ll isolate the current version of Rails and the gems we need for this project. Whether you use RVM or another Ruby version manager, this will introduce you to the idea of \u201csandboxing\u201d (isolating) your development environment so you can avoid conflicts among projects. After we create the project-specific gemset, we\u2019ll install the Rails gem into the gemset. Enter these commands: $ rvm use [email protected] --create $ gem install rails This will install the newest version of Rails 5.0. It takes a few minutes to automatically install all the gems that are needed for Rails. It\u2019s absolutely necessary to create a gemset and install Rails so we can move on to creating the application in the next chapter. If you have trouble at this point, refer to the article Installing Rails or the RVM website . Linux users may need to check instructions for Integrating RVM . Let\u2019s make sure Rails is ready to run. Open a terminal and type: $ rails -v You should see the message \u201cRails 5.1.2\u201d (or something similar). Now let\u2019s explore the rails new command and get started building the tutorial application.","title":"5.10 Project-Specific Gemset"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-6-create-the-application","text":"In this chapter, we\u2019ll begin building the tutorial application. But first, let\u2019s consider the options you have for starter applications.","title":"Chapter 6 Create the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#61-starter-applications","text":"Rails provides a framework ; that is, a software library that provides utilities, conventions, and organizing principles to allow us to build complex web applications. Without a framework, we\u2019d have to code everything from scratch. Rails gives us the basics we need for many websites. Still, the framework doesn\u2019t give us all the features we need for many common types of websites. For example, we might want users to register for an account and log in to access the website (\u201cuser management and authentication\u201d). We might want to restrict portions of our website to just administrators (\u201cauthorization\u201d). We also might want to add gems that enhance Rails to aid development (gems for testing, for example) or improve the look and feel of our application (the Bootstrap or Foundation front-end frameworks). Developers often mix and match components to make a customized Rails stack. Developers often use a starter application instead of assembling an application from scratch. You might call this a \u201ctemplate\u201d but we use that term to refer to the view files that combine HTML with Ruby code to generate web pages. Most experienced developers have one or more starter applications that save time when beginning a new project. The RailsApps project was launched to provide open source starter applications so developers could collaborate on their starter applications and avoid duplicated effort. After you gain some skill with this tutorial, you might use the RailsApps starter apps to instantly generate a Rails application with features like authentication, authorization, and an attractive design. At the end of this book, you\u2019ll learn about Rails Composer , a tool for building starter applications. For now, we\u2019ll begin with the Rails default starter application.","title":"6.1 Starter Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#62-workspace-folder-and-rvm-gemset","text":"Are you in the folder named workspace/ you created earlier? $ pwd /Users/danielkehoe/workspace/ If you\u2019re not in your workspace folder, enter a Unix command to move to the folder: $ cd ~/workspace We already created a project-specific gemset using RVM. Make sure it\u2019s ready to use: $ rvm use [email protected] $ rvm gemset list gemsets for ruby-2.4.1... (default) global \\=> learn-rails You should see an arrow pointing to the learn-rails gemset. If not, go back to the previous \u201cGet Started\u201d chapter.","title":"6.2 Workspace Folder and RVM Gemset"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#63-use-rails-new-to-build-the-application","text":"Let\u2019s go! We have selected a gemset, we have Rails installed, and we\u2019re in our workspace/ folder. Let\u2019s build a Rails application! To create the Rails default starter application, type: $ rails new learn-rails This will create a new Rails application named \u201clearn-rails.\u201d It takes a few minutes when the build script runs bundle install . Don\u2019t worry; just give it enough time to finish (but no more than five minutes even if your Internet connection is very slow). In the future, you can give your application a different name. For this tutorial, it is VERY IMPORTANT that you use the name \u201clearn-rails.\u201d You\u2019ll be copying code that assumes the name is \u201clearn-rails;\u201d it will save you trouble to use this name. The rails new command will create ten folders and 93 files. It will install 62 gems into your gemset. After you create the application, switch to its folder to continue work directly in the application: $ cd learn-rails This is your project directory. It is also called the application root directory. You\u2019ll spend all your time inside this folder. Box 6.1. Spring After creating a new Rails application, you may see a message to run a command: $ bundle exec spring binstub --all The command sets up Spring. Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don\u2019t need to stop and restart it when you make changes. After you change into the project directory, you can run the command. Type the ls command to show the folders and files in a directory. Soon we\u2019ll learn more about each of these folders and files. $ ls Gemfile Rakefile config lib test Gemfile.lock app config.ru log tmp README.md bin db public vendor","title":"6.3 Use \u201cRails New\u201d to Build the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#64-make-a-sticky-gemset","text":"RVM gives us a convenient technique to make sure we are always using the correct gemset when we enter the project directory. It will create hidden files to designate the correct Ruby version and project-specific gemset. Enter this command to create the hidden files: $ rvm use [email protected] --ruby-version The \u2013ruby-version argument creates two files, .ruby-version and .ruby-gemset , that set RVM every time we cd to the project directory. Without these two hidden files, you\u2019d need to remember to enter rvm use [[email protected]](/cdn-cgi/l/email-protection) every time you start work on your project after closing the console. If you see \u201cERROR: Gemset \u2018learn-rails\u2019 does not exist\u201d, perhaps you overlooked an earlier step in the Project-Specific Gemset section (in the previous chapter) where we created the learn-rails gemset. After creating the two hidden files, check if they are there: $ ls -1pa ./ ../ .gitignore .ruby-gemset .ruby-version Gemfile Gemfile.lock README.md Rakefile app/ bin/ config/ config.ru db/ lib/ log/ public/ test/ tmp/ vendor/ The \u201ca\u201d flag in the Unix ls -1pa command displays hidden files. Each hidden file is listed with a dot (period or full stop) at the beginning of the filename. You\u2019ll notice .ruby-gemset and .ruby-version . You\u2019ll also see two \u201cspecial files\u201d which are not files at all: ./ - an alias that represents the current directory ../ - an alias that represents the parent directory Box 6.2. Hidden Files in Cloud9 If you\u2019re using Cloud9, you must change preferences to see hidden files. In the window that contains the file list, there is a gear icon (dark in color and difficult to see). Clicking the gear option will give you options: Show Root File System Show Home in Favorites Show Hidden Files You must select all three options to see the hidden files. That\u2019s a brief diversion into Unix; let\u2019s try running our new Rails application.","title":"6.4 Make a Sticky Gemset"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#65-test-the-application","text":"You\u2019ve created a simple default web application. It\u2019s ready to run.","title":"6.5 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#651-launching-the-web-server","text":"You can launch the application by entering the command: $ rails server Alternatively, to save typing, you can abbreviate the rails server command: $ rails s If you are using the Cloud9 hosted service, you\u2019ll need to enter bin/rails server -p $PORT -b $IP . You\u2019ll see: \\=> Booting Puma \\=> Rails 5.1.2 application starting in development on http://localhost:3000 \\=> Run `rails server -h` for more startup options \\=> Ctrl-C to shutdown server Puma starting in single mode... * Version 3.4.0 (ruby 2.4.1-p0), codename: Owl Bowl Brawl * Min threads: 5, max threads: 5 * Environment: development * Listening on tcp://localhost:3000 Use Ctrl-C to stop The rails server command launches the Puma web server that is provided with Rails.","title":"6.5.1 Launching the Web Server"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#652-errors-for-linux-users","text":"If you enter the command rails server and get an error message: ... Could not find a JavaScript runtime ... You need to install Node.js. For help, see Install Ruby on Rails - Ubuntu .","title":"6.5.2 Errors for Linux Users"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#653-viewing-in-the-web-browser","text":"To see your application in action, open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see the Rails default information page. Box 6.3. Viewing on a Hosted Platform It is easy to see your web application in action on your local computer. If you are using a hosted service such as Cloud9, it is a little more complicated. If you are using Cloud9 , click the \u201cPreview\u201d link in the IDE menu (at the top of the page). There is a \u201cRun\u201d link, too, but it doesn\u2019t work if you have created your Rails application in a folder within the workspace/ folder. You can also open a browser tab or window and enter the URL for the application, as hosted by Cloud9. When you launch the Rails server, Cloud9 displays a helpful message showing the URL where you can view your application.","title":"6.5.3 Viewing in the Web Browser"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#654-watch-log-messages","text":"Notice that messages scroll in the console window when your browser requests the Rails default web page. Open the file log/development.log and you\u2019ll see the same messages. When a browser sends requests to the Puma web server, diagnostic messages are written to the console and to the log/development.log file. These diagnostic messages are an important tool for troubleshooting when you are developing.","title":"6.5.4 Watch Log Messages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#655-multiple-terminal-windows","text":"You can keep more than one terminal window open. For convenience, you may want to keep a terminal window open for running the web server and watching diagnostic messages. In the Terminal or iTerm2 applications, Command-t opens additional console sessions in new \u201ctabs.\u201d Developers typically open more than one terminal window when they work on a Rails application. They\u2019ll start the server with the rails server command in one window (or tab) and watch the log messages. In another window (or tab), they\u2019ll enter commands as they build the application. They might create folders with a Unix command, run generators, or try out code with the rails console command (you\u2019ll learn about the rails console command in the \u201cTroubleshoot\u201d chapter). To some people, the text editor and the terminal window look very similar. When you work on a file in a text editor, you make changes to one file, in one place. The terminal window is very different. Your computer can run multiple programs at once. You can open multiple terminal windows. In each terminal window, you can use the command line to launch a different program. Each program you start in a terminal window is a separate process and multiple processes can run simultaneously. You can end a process by pressing Control-c (in most cases), Control-d (in some cases), or closing the terminal window (almost always). From this perspective, a terminal window is a tool you use to launch processes and your computer is a machine that runs processes.","title":"6.5.5 Multiple Terminal Windows"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#656-stop-the-web-server","text":"You can stop the server with Control-c to return to the command prompt. When we say Control-c, we mean hold down the Control key as you press the letter \u201cc\u201d. Most of the time you\u2019ll keep the web server running as you add or edit files in your project. Changes will automatically appear when you refresh the browser or request a new page. There is a tricky exception, however. If you make changes to the Gemfile, or changes to configuration files, the web server must be shut down and relaunched for changes to be activated. As a rule of thumb, files that produce web pages can be changed without a restart. This includes any file in the app/ folder which creates web pages, as well as the config/routes.rb file. Changes to files that create the environment for the web application, such as gems or configuration files, and are loaded at web server launch, won\u2019t be seen until the web server is restarted.","title":"6.5.6 Stop the Web Server"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#66-get-organized-for-efficiency","text":"Before we learn about the Rails directory structure, take a minute to organize your screen real estate. During development, you\u2019ll jump between the console in a terminal application, your text editor, and a web browser window. As a Rails developer, you\u2019ll do this constantly, so think about how you can do this efficiently. Multiple screens make it easy, but even on a laptop you can get organized for efficiency. Figure 6.1: Getting organized for efficiency. Here\u2019s some ideas. Open a window in the terminal application, place it on the left side of your screen, and stretch it to the maximum vertical height of your screen. Open multiple tabs in your terminal application. Keep one tabbed window open for entering shell commands (like cd or ls ) and another terminal window open for running the rails server command and viewing the log output. Place your text editor window next to the terminal window and stretch it to full vertical height. If you are using Atom or Sublime Text, you can open two editor panels side-by-side. Some developers find it helpful to leave the file browser panel open to navigate the project directory; others hide the file browser panel to save space. If you have enough screen space, leave your web browser open and place it next to your text editor. If your screen space is limited, you may have to overlap the web browser with the text editor, but position your web browser window so you can bring it to the front with a single click. You\u2019ll need multiple tabs open in your web browser. Unless you like constant distraction, close Gmail, Facebook, Twitter, and Hacker News. Open tabs for http://localhost:3000/ , this tutorial, and additional references or documentation. On the Mac, there are window management utilities that reposition windows with just a click or keyboard command; I use Moom but you can find others if you search for \u201cmac window management utilities.\u201d This is just a guide; I\u2019m sure you can improve upon these suggestions.","title":"6.6 Get Organized for Efficiency"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-7-the-parking-structure","text":"We\u2019ve created the default Rails starter application. The rails new command has created a project directory for us. It is a parking structure for our code. Unlike an ordinary parking structure, where you park anywhere you like, this garage has assigned parking. You have to park your code in the right place. This is Rails, where convention brings order to the development process. As you develop a web application, you\u2019ll do all your work in the project directory. It is important to know your way around and understand the purpose of each folder and file. If you\u2019ve built simple websites with HTML and CSS, or built websites with unstructured platforms such as Perl or PHP, you\u2019ll be surprised at the complexity of the Rails project directory. Rails is a software machine with many moving parts; the project directory provides a structure to manage the complexity. The logic and order of the project directory structure is familiar to every Rails developer, and consistent for every Rails application, which makes it easy to collaborate, maintain an application, and create open source projects.","title":"Chapter 7 The Parking Structure"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#71-video-option","text":"Watch the eleven minute video if you have subscribed: Rails Project Directory","title":"7.1 Video Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#72-project-directory","text":"Use the Unix ls command to list the contents of the project directory. For a one-column list that shows each subdirectory (marked with a slash), we\u2019ll add the -1p option to the command. $ ls -1p You\u2019ll see: Gemfile Gemfile.lock README.md Rakefile app/ bin/ config/ config.ru db/ lib/ log/ public/ tmp/ vendor/ Now is a good time to open a file browser window and look at the contents of the project directory. On the Mac, there\u2019s a command you can use to open the graphical file browser from the console. If you\u2019re in the project directory, type open . . The period (or \u201cdot\u201d) is a Unix symbol that means \u201cthe directory I\u2019m in.\u201d $ open . Figure 7.1: Rails directory structure. You\u2019ll learn more about each file and folder as you proceed through the tutorial.","title":"7.2 Project Directory"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#73-get-to-know-the-folders-and-files","text":"To get you started, here are three tables. The first describes the files and folders that are important for every beginner. The second table describes the files and folders that you can ignore. The third table is a preview of things to come.","title":"7.3 Get to Know the Folders and Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#731-important-folders-and-files","text":"These folders and files are important to beginners. This is where you will spend your time in Rails. Gemfile Lists all the gems used by the application. Gemfile.lock Lists gem versions and dependencies. README.md A page for documentation. app/ Application folders and files. config/ Configuration folders and files. db/ Database folders and files. public/ Files for web pages that do not contain Ruby code, such as error pages.","title":"7.3.1 Important Folders and Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#732-not-so-important-folders-and-files","text":"These folders and files are not important to beginners. Rakefile Scripts for the Rake utility program. bin/ Folder for binary (executable) programs. config.ru Configuration file for Rack (a software library for web servers). lib/ Folder for miscellaneous Ruby code. log/ Folder for application server logfiles. tmp/ Temporary files created when your application is running. vendor/ Folder for Ruby software libraries that are not gems.","title":"7.3.2 Not-So-Important Folders and Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#733-folders-for-testing","text":"spec/ Folder for the popular RSpec testing framework. test/ Folder for the default Rails testing framework. The test/ folder is present in the default Rails starter app. You\u2019ll use the test/ folder when you learn about test-driven development. Many Rails developers use a different gem for testing, named RSpec, and your RSpec tests will go in a spec/ folder.","title":"7.3.3 Folders for Testing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#74-the-app-directory","text":"Take time to drill down into the app/ folder in the project directory. This is easiest using the file browser. Figure 7.2: Rails app folder. You can also use your text editor to view the folder. Or do it with Unix commands: $ cd app $ ls -1p assets/ channels/ controllers/ helpers/ jobs/ mailers/ models/ views/ Whether you use the file browser, Unix commands, or your text editor, you are looking at the same file system. Most of the work of developing a Rails application happens in the app/ folder. Earlier we described Rails as \u201ca set of files organized with a specific structure.\u201d We said the structure is the same for every Rails application. The app/ directory is a good example. The folders in the app/ directory are the same in every Rails application. This makes it easy to collaborate with other Rails developers, providing consistency and predictability. assets channels controllers helpers jobs mailers models views You may recall our earlier description of Rails from the perspective of a software architect. In this folder, you\u2019ll see evidence of the model\u2013view\u2013controller design pattern. Three folders named models/ , views/ , and controllers/ enforce the software architect\u2019s \u201cseparation of concerns\u201d and impart structure to our code. As you build the application, we\u2019ll explain the role of the MVC components in greater detail. Five folders play supporting roles. The mailers folder is for code that sends email messages. The helpers folder is for Rails view helpers , snippets of reusable code that generate HTML. Later, when we learn more about views , we\u2019ll say view helpers are like \u201cmacros\u201d that expand a short command into a longer string of HTML tags and content. Rails 3.1 added the assets/ folder as a location for CSS and JavaScript files. The jobs/ folder is for background jobs built with the Rails ActiveJob feature. Rails 5.0 added the channels/ folder for the ActionCable feature which uses WebSockets for real-time communication between web server and browser.","title":"7.4 The App Directory"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#741-folders-of-future-importance","text":"You won\u2019t encounter these when you are a beginner: policies/ Folder for code that controls access to features services/ Folder for code that reduces the complexity of models and controllers If you join a project to work on a large and complex Rails application, you may see folders such as these in the app/ directory. As an application grows in complexity, an experienced software architect may suggest reducing the size of models and controllers by moving code to \u201cPOROs\u201d ( plain old Ruby objects ). Code in any folder in the app/ directory is shared throughout a Rails application without any additional configuration (in contrast, code you add to the lib/ directory is only available with some extra work). Rails provides a basic model\u2013view\u2013controller framework but it is often necessary to extend it with code in a services/ folder. Similarly, a policies/ folder can be used to consolidate code that controls access to various features or pages of a web application. Use the cd .. command (\u201cchange directory dot dot\u201d) to return to the project directory. $ cd .. $ pwd /Users/danielkehoe/workspace/learn-rails As a Rails developer, you\u2019ll spend most of your time navigating the hierarchy of folders as you create and edit files. And because Rails provides a consistent structure, you\u2019ll quickly find your way on any unfamiliar project.","title":"7.4.1 Folders of Future Importance"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-8-time-travel-with-git","text":"Now that we\u2019ve looked at our Rails project directory from the viewpoint of a programmer and software architect, let\u2019s consider the viewpoint of the time traveler. This chapter will introduce you to software source control , also called version control or revision control . The terms all have the same meaning. At first sight, the concept seems rather dull, like sorting your socks. But it makes professional software development possible and, at the core, it is essentially a form of time travel. To understand time travel, we need to understand state . It\u2019s a term you\u2019ll encounter often in software development. We know about states of matter. Water can be ice, liquid, or steam. Imagine a machine with a button that, each time it is pressed, changes water from one state to another. We call this a state machine . Almost every software program is a state machine. When a program receives an input, it transitions from one state to another. Like flipping a light switch, there\u2019s no in-between. Light or dark. Ice, liquid, or steam. Or, in a web application: logged in, logged out. When we write software code, there\u2019s a lot of in-between. We look things up, we think, we type errors and we make corrections. As humans, we spend a lot of time in a flow of undetermined state. We can save our work at any time, but we may be saving typos or unfinished code that doesn\u2019t work. Every so often, we get to a point where a task is finished; we\u2019ve fixed all our errors and our code runs. We want to preserve the state of our work. That\u2019s when we need a version control system. A version control system does more than a software application\u2019s \u201cSave\u201d command. Like a \u201cSave\u201d command, it preserves the current state of our files. It also allows us to add a short note that describes the work we\u2019ve done. More importantly, it archives a snapshot of the current state in a repository where it can be retrieved if needed. Here\u2019s where the time travel comes in. We can go back and recover the state of our work at any point where we committed a snapshot to the repository. In software development, travel to the past is essential because we often make mistakes or false starts and have to return to a point where we know things were working correctly. What about time travel to the future? Often we need to try out code we may decide to discard, without disturbing work we\u2019ve done earlier. Version control systems allow us to explore alternative futures by creating a branch for our work. If we like what we\u2019ve done in our branch, we can merge it into the main trunk of our software project. Unlike time travel in the movies, we can\u2019t travel back to any arbitrary point in the flow of time. We can only travel to past or future states we\u2019ve marked as significant by checking our work into the repository.","title":"Chapter 8 Time Travel with Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#81-git","text":"The dominant version control system among Rails developers is Git , created by the developer of the Linux operating system. Unlike earlier version control systems, Git is ideal for wide-scale distributed open source software development. Combined with GitHub , the \u201csocial coding\u201d website, Git makes it easy to share and merge code. When you work with others on a project, your Git commit messages (the notes that accompany your snapshot) offer a narrative about the progress of the project. Well-written commit messages describe your work to co-workers or open source collaborators. GitHub\u2019s support for forking (making your own copy of a repository) makes it possible to take someone else\u2019s project and modify it without impacting the original. That means you can customize an open source project for your own needs. You can also fix bugs or add a feature to an open source project and submit a pull request for the project maintainer to add your work to the original. Fixing bugs (large or small) and adding features to open source projects are how you build your reputation in the Rails community. Your GitHub account, which shows all your commits, both to public projects and your own projects, is more important than your resum\u00e9 when a potential employer considers hiring you because it shows the real work you have done. Collaboration is easy when you use a branch in Git. If you and a coworker are working on the same codebase, you can each make a branch before adding to the code or making changes. Git supports several kinds of merges , so you can integrate your branch with the trunk when your task is complete. If your changes collide with your coworker\u2019s changes, Git identifies the conflict so you can resolve the collision before completing the merge. All the power of Git comes at a price. Git is difficult for a beginner to learn, largely because many of its procedures have no real-world analog. Have you noticed how time travel movies require mental gymnastics, especially when you try to make sense of alternative futures and intersecting timelines? Git is a lot like that, mostly because we use it to do things we don\u2019t ordinarily do in the real world. In this tutorial, you won\u2019t encounter Git\u2019s advanced procedures, like resolving merges or reverting to earlier versions. We\u2019ll stick to the basics of archiving our work (and in one case, discarding work that we\u2019ve done for practice). You can build the tutorial project without using Git. But I urge you to use Git and a GitHub account for this project, for two reasons. First, with your tutorial application on GitHub, you\u2019ll show potential employers or collaborators that you\u2019ve successfully built a useful, functioning Rails application. More importantly, you must get to know Git if you plan to do any serious coding, either as a professional or a hobbyist. Before I show you Git commands, I want to mention that some people use graphical client applications to manage Git. MacOS has GitHub for Mac , Git Tower , and other Mac Git clients . Graphical applications for Git are useful for colleagues who don\u2019t use a Terminal application, such as graphic designers or writers. There\u2019s no need for you to install these applications. Every developer I\u2019ve met uses Git from the command line. It will take effort to master Git; the commands are not intuitive. But it is absolutely necessary to become familiar with Git basics. Before you do any work on the tutorial application, I\u2019ll show you the basics of setting up and using Git.","title":"8.1 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#82-is-git-installed","text":"As a first step, make sure Git is installed on your computer: $ which git /usr/local/bin/git $ git version git version ... If Git is not found, install Git. See the article Rails with Git and GitHub for installation instructions.","title":"8.2 Is Git Installed?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#83-is-git-configured","text":"Make sure Git knows who you are. Every time you update your Git repository with the git commit command, Git will identify you as the author of the changes. $ git config --get user.name $ git config --get user.email You should see your name and email address. If not, configure Git: $ git config --global user.name \"Real Name\" $ git config --global user.email \" [email protected] \" Use your real name so people will associate you with your work when they meet you in real life. There\u2019s no reason to use a clever name unless you have something to hide. And use your full name, not just your first name. Use the same email address for Git, your GitHub account, and Heroku to avoid headaches.","title":"8.3 Is Git Configured?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#84-create-a-repository","text":"Now we\u2019ll add a Git repository to our project. It\u2019s a basic step you\u2019ll repeat every time you create a new Rails project. Extending the time traveler analogy, initializing a Git repository is equivalent to setting up the time machine. Be sure you are in your project directory, not your user home directory or somewhere else. Use the pwd command to check: $ pwd /Users/danielkehoe/workspace/learn-rails The git init command sets up a Git repository (a \u201crepo\u201d) in the project directory. We add the Unix symbol that indicates Git should be initialized in the current directory (git init dot): $ git init . Initialized empty Git repository in ... It creates a hidden folder named .git/ in the project directory. You can peek at the contents: $ ls -1p .git HEAD config description hooks/ info/ objects/ refs/ All Git commands operate on the hidden files. The hidden files record the changing state of your project files each time you run the git commit command. There is no reason to ever edit files inside the hidden .git/ folder (doing so could break your time machine).","title":"8.4 Create a Repository"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#85-gitignore","text":"The hidden .git/ folder contains the Git repository with all the snapshots of your changing project. The snapshots are highly compressed, only containing records of changes, so the repository takes up very little file space relative to the project as a whole. Not every file should be included in a Git snapshot. Here are some types of files that should be ignored: log files created by the web server database files configuration files that include passwords or API keys Git gives us an easy way to ignore files. A hidden file in the project directory named .gitignore can specify a list of files that are never seen by Git. The rails new command creates a .gitignore file with defaults that include log files and database files. Later, when we add configuration files that include secrets, we\u2019ll update the .gitignore file. Take a look at the contents of the .gitignore file. We use the Unix cat command to display the contents of the file: $ cat .gitignore","title":"8.5 GitIgnore"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#see-httpshelpgithubcomarticlesignoring-files-for-more-about-ignoring-files","text":"","title":"See https://help.github.com/articles/ignoring-files for more about ignoring files."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#_1","text":"","title":""},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#if-you-find-yourself-ignoring-temporary-files-generated-by-your-text-editor","text":"","title":"If you find yourself ignoring temporary files generated by your text editor"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#or-operating-system-you-probably-want-to-add-a-global-ignore-instead","text":"","title":"or operating system, you probably want to add a global ignore instead:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#git-config-global-coreexcludesfile-gitignore_global","text":"","title":"git config --global core.excludesfile '~/.gitignore_global'"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#ignore-bundler-config","text":"/.bundle","title":"Ignore bundler config."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#ignore-the-default-sqlite-database","text":"/db/*.sqlite3 /db/*.sqlite3-journal","title":"Ignore the default SQLite database."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#ignore-all-logfiles-and-tempfiles","text":"/log/* /tmp/* !/log/.keep !/tmp/.keep","title":"Ignore all logfiles and tempfiles."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#ignore-byebug-command-history-file","text":".byebug_history For a .gitignore file that ignores more, see an example .gitignore file from the RailsApps project.","title":"Ignore Byebug command history file."},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#86-git-workflow","text":"Your workflow with Git will move through four distinct phases as you add or edit files.","title":"8.6 Git Workflow"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#861-untracked-files","text":"The first phase is a \u201cdirty\u201d state of untracked and changed files, before any snapshot. The git status command lists all folders or files that are not checked into the repository. $ git status On branch master Initial commit Untracked files: (use \"git add ...\" to include in what will be committed) .gitignore Gemfile Gemfile.lock README.md Rakefile app/ bin/ config.ru config/ db/ lib/ log/ public/ test/ tmp/ vendor/ nothing added to commit but untracked files present (use \"git add\" to track) In the online version of this book (the HTML version), the example above appears in green. In the terminal window on your computer, it will be red, showing you untracked files. Here the git status command tells us that we have many untracked files. We have created new files and they are saved on the computer\u2019s hard disk but nothing has been recorded in the Git repository.","title":"8.6.1 Untracked Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#862-staging","text":"I call this step, \u201cPose for your snapshot.\u201d Recording files in the Git repository takes two steps: staging and committing. There will be times when you change many files at once. For example, you may fix a bug, add a new graphic, and change a form. You might think you\u2019d like to have Git automatically record all the changes as you save each file. But the story of your project would be confusing and overly detailed. Git requires you to mark one or more files (\u201cstaging\u201d) before recording the changes (\u201ccommitting\u201d). This gives you fine-grained control over the recorded history of your project. You can mark individual files to be staged: $ git add Gemfile Adding individual files allows you to selectively record the history of your project. For example, you might stage and commit a series of bug fixes before you stage and commit new features. Applying the time traveler analogy, it will be easier to travel back to look at bug fixes if they are not mixed in with new features. More often, you\u2019ll mark all the files to be staged. Do so now: $ git add -A Running git status will show you a long list of files that are staged and ready to commit. There are three forms of the git add command: git add foo.txt adds a file named foo.txt git add . adds all new files and changed files, except deleted files git add -A adds everything, including deletions If it seems nonsensical that the command git add -A \u201cadds deletions,\u201d don\u2019t worry. Like time travel, Git will stretch your understanding of what makes sense. Most often, you can simply use the git add -A form of the command. Now that you\u2019ve marked the files that will be committed to the repository, you\u2019ve told everyone to pose, and you\u2019re ready to take the snapshot.","title":"8.6.2 Staging"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#863-committing","text":"The previous step, the \u201cposing\u201d step, or staging, gives you an opportunity to select particular files before you commit. If you\u2019ve only worked on one feature, you\u2019ll likely stage and commit all your files. The next step is a \u201ccommit\u201d which I like to call, \u201cclicking the snapshot.\u201d When you \u201cmake a commit\u201d, you include a message that describes the work you\u2019ve done. For a time traveler, the \u201ccommit message\u201d is important; you are leaving a trail to help you find your way into the past. Google will show you dozens of blog posts about \u201cwriting better commit messages\u201d but common sense can be your guide. For example, writing \u201cfix registration form to catch blank email addresses\u201d will be more helpful than merely writing \u201cfix bugs.\u201d And if you wonder why commit messages are commonly written in the imperative not past tense (\u201cfix\u201d not \u201cfixed\u201d), it\u2019s a time traveler convention. Now commit your project to the repository: $ git commit -m \"Initial commit\" The -m flag lets you add a message for the commit. The pristine state of your new Rails application is now recorded in the repository on your local computer. Running git status will tell you \u201cnothing to commit, working directory clean.\u201d $ git status On branch master nothing to commit, working directory clean You\u2019ve recorded your snapshot locally. Next let\u2019s see a list of previous snapshots. Then we\u2019ll learn how to save your snapshots remotely to GitHub.","title":"8.6.3 Committing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#864-git-log","text":"You can use the git log command to see your project history: $ git log commit 8da41eec9e864ed91b4a445d8cefdf7893e2faf6 Author: Daniel Kehoe < [email protected] > Date: Fri Dec 18 10:30:12 2015 +0700 Initial commit The long string of characters that follows \u201ccommit\u201d is an ID, or marker, that will help you travel back in time if you need to do so. If you get \u201cstuck\u201d in git log , type q to return to the command prompt. I like to use the git log command with an option for a compact listing: $ git log --oneline 8da41ee Initial commit Don\u2019t worry if your console doesn\u2019t show 8da41ee . The ID for your commit will be different. The listing is easier to review when it is displayed in a compact format. The commit ID is abbreviated but it is all you need to travel back in time.","title":"8.6.4 Git Log"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#865-repositories","text":"When we talk about repositories, or \u201crepos,\u201d we mean the archive of our git commits. The local repo is located in the hidden folder named .git/ in the project directory. Of course, if your hard drive crashes, or your computer is lost or stolen, you\u2019ll lose your local repo along with your project. So it is wise to save your repository in the cloud. The GitHub site is a place to save repositories. GitHub is also a place for collaboration. Most Rails developers save their repositories to Github, as either a public repo for open source projects, or a private repo for proprietary projects.","title":"8.6.5 Repositories"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#866-pushing-to-github","text":"We\u2019ve seen three phases of the Git workflow: untracked , staged , and committed . A fourth stage is important when you work with others: pushing to GitHub. The repositories hosted on your GitHub account establish your reputation as a Rails developer for employers and developers you may work with. Even if your first project is copied from a tutorial, it shows you are serious about learning Rails and studying conscientiously. Did you create a GitHub account? Now would be a good time to add your repo to GitHub. Go to GitHub and create a new empty repository for your project. Name the repository \u201clearn-rails\u201d and give it a description. If the repository is public, hosting on GitHub is free. Don\u2019t be reluctant to go public with an unfinished or half-baked project; everyone expects projects on GitHub to be works in progress. Add GitHub as a remote repository for your project and push your local project to GitHub. Before you copy and paste the command, notice that you need to insert your own GitHub account name. In other words, change YOUR_GITHUB_ACCOUNT in the command shown below. Box 8.1. Warning STOP! Be sure to change YOUR_GITHUB_ACCOUNT to your GitHub user name. If you don\u2019t, you will create a mess that you have to fix with the instructions here . $ git remote add origin https://github.com/YOUR_GITHUB_ACCOUNT/learn-rails.git $ git push -u origin master The -u option sets up Git so you can use git push in the future without explicitly specifying GitHub as the destination. Now you can view your project repository on GitHub at: https://github.com/YOUR_GITHUB_ACCOUNT/learn-rails Obviously you must change YOUR_GITHUB_ACCOUNT in the web address to see your own repository. Take a look. It\u2019s an exact copy of the project on your local computer. If you haven\u2019t used GitHub before, take some time to explore. GitHub is absolutely essential to all open source Rails development. You may notice that the README.md file is automatically incorporated into the home page of the project repository on GitHub. For our next step, we\u2019ll update the README file, commit it to the local repo, and push it up to GitHub. It will be good practice for using Git.","title":"8.6.6 Pushing to GitHub"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#87-the-readme","text":"Changing the README file is a good way to practice with Git. It\u2019s also a good habit to edit the README file whenever you create a new project. It\u2019s easy to neglect the README for little projects that you\u2019ve just started. But replacing a default README file shows you are a disciplined, conscientious developer who will be a good collaborator. The new README file can be brief. Just state your intentions and acknowledge any code you\u2019ve borrowed. For this project you could say, \u201cExcited to learn Rails with help from Daniel Kehoe\u2019s book!\u201d In your text editor, open the file README.md and replace the contents: # Learning Rails Learning Rails with a tutorial from [learn-rails.com](http://learn-rails.com/). GitHub lets you add formatting using your choice of markup syntax, depending on the file extension you add to the filename: README.md uses the GitHub Flavored Markdown syntax README.textile uses the Textile syntax README.rdoc uses the rdoc syntax We\u2019ll use Markdown syntax by adding the # character before the first line of text to force a headline. And we\u2019ll add a link that leads to the learn-rails.com website. There\u2019s no requirement that you use Markdown syntax in your README file. Markdown simply is a popular way to add formatting to improve readability. Use git status to see what has changed: $ git status On branch master Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: README.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Here\u2019s our typical workflow. We\u2019ll stage and commit the change: $ git add -A $ git commit -m \"update README\" Then we\u2019ll push the change to GitHub: $ git push origin master If you decide not to use GitHub for this tutorial, you can skip this step (and skip it throughout the tutorial). Take a look at your GitHub repository (refresh the web page). Very cool! The README file has been updated. The git log command will display your project history: $ git log --oneline 69b9b6c update README 8da41ee Initial commit To learn more about Git, I recommend the book Learn Enough Git to Be Dangerous by my colleague Michael Hartl. An online version is available for free. Now that you\u2019re comfortable with Git, we can begin customizing our new Rails application.","title":"8.7 The README"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-9-gems","text":"The art of selecting gems is at the heart of Rails development. I explained earlier that gems are packages of code, \u201csoftware libraries,\u201d that have been developed and tested by other developers. Some gems add functionality or features to a website. Other gems play a supporting role, making development easier or implementing basic infrastructure. Gems are open source. They are available at no charge and can be freely copied and modified.","title":"Chapter 9 Gems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#91-videos","text":"If you have subscribed, two short videos introduce gems: What Are Rubygems Find Rubygems","title":"9.1 Videos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#92-rubygems","text":"It is a mark of honor to release a gem for public use, and a developer\u2019s reputation can be established when a gem becomes popular and widely used. Gems are often created when a developer has used the same code as a component in more than one web application. He or she will take time to release the code as a gem. That\u2019s how the Rails ecosystem was built, gem by gem since 2004. There is no evaluation or review process in publishing gems. Gems are hosted on a public server, rubygems.org . Gems are mostly text files (like any other Ruby code), organized in a particular format with some descriptive information (in a gemspec file), and compressed and archived as a single file. A single command, gem push , uploads a gem to the rubygems.org server for anyone to use. Over 50,000 gems have been released since rubygems.org was established. Some of these gems are used by one or two developers on their own projects. Many others have been neglected and abandoned due to lack of interest. Only a few thousand gems are popular and widely used. As a Rails developer, you must master the art of finding and evaluating gems so you can base your applications on the tried-and-true work of others. There is no single authoritative source of recommendations for gems. The Ruby Toolbox website categorizes and ranks many gems by popularity, and it is a good place to begin hunting for useful gems. Other than that, it is useful to study example applications and search for blog posts to find which gems are most often recommended. When you find an interesting gem, search Stack Overflow or Google to see what people are saying. Look at the gem\u2019s GitHub repository and check: How many issues are open? How many are closed? How recent are the commits of patches or updates? Is there a CHANGELOG file? Is the gem well-documented? How many \u201cstars\u201d (people favoriting) or \u201cforks\u201d (people hacking)? Popular gems are likely to have many reported issues, some of which are trivial problems or feature requests. Gems that are actively maintained will have many closed issues and, ideally, only a few open issues. When you find a gem that has many open issues and no recently closed issues, you\u2019ve probably found a gem that has been abandoned. Also look at the commit log, which you\u2019ll find on the GitHub project page in a tab at the top of the page. Regular and recent activity in the commit log indicates the gem is actively maintained.","title":"9.2 RubyGems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#93-rails-gems","text":"Rails itself is a gem that, in turn, requires a collection of other gems. This becomes clear if you look at the summary page for Rails on the rubygems.org site. On that page, you\u2019ll see photos of the Rails core team. More importantly, you\u2019ll see a list of gems that are required to use Rails: actioncable - real-time communication using WebSockets actionmailer - framework for email delivery and testing actionpack - framework for routing and responding to web requests actionview - view templates and rendering activejob - queueing slow tasks to run in the background activemodel - architecture for model objects activerecord - framework for connections to databases activesupport - utility classes and Ruby library extensions bundler - utility to manage gems railties - console commands and generators sprockets-rails - support for the Rails asset pipeline These are the \u201cruntime dependencies\u201d for Rails. Each of these gems has its own dependencies as well. When you install Rails, a total of 63 gems are automatically installed in your development environment.","title":"9.3 Rails Gems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#94-gems-for-a-rails-default-application","text":"In addition to the Rails gem and its dependencies, a handful of other gems are included in every rails new default starter application: sqlite3 - adapter for the SQLite database puma - web application server sass-rails - enables use of the SCSS syntax for stylesheets uglifier - JavaScript compressor coffee-rails - enables use of the CoffeeScript syntax for JavaScript turbolinks - faster loading of webpages jbuilder - utility for encoding JSON data You may not need a SQLite database, SCSS for stylesheets, or the others, but many developers use these tools so they are included in the default starter application.","title":"9.4 Gems for a Rails Default Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#95-where-do-gems-live","text":"Gems are files saved in the computer\u2019s disk storage, containing someone else\u2019s code that you can use in your own application. When you run a Rails application, gems are loaded into the computer\u2019s working memory immediately before your own custom code is loaded. Gems are handled by the Ruby interpreter no differently than your own code. It\u2019s all Ruby code, whether you or someone else wrote it. When you are building an application in Rails, you don\u2019t need to think about where gems are stored in your file system. It\u2019s all handled automatically. Experienced programmers who have used software libraries in other languages might wonder how it works. Here\u2019s the technical explanation from the experts. Ruby has a require method that allows you to import software libraries into your programs. RubyGems extends the require method, adding gem directories to a $LOAD_PATH . When Rails loads, it will automatically require each of the gems listed in your Gemfile, finding the gems in the $LOAD_PATH directories. If you\u2019re a curious person, you might like to see where the gems live. You can run the gem env command to reveal the RubyGems environment details which are normally hidden from you: $ gem env RubyGems Environment: - RUBYGEMS VERSION: 2.6.4 - RUBY VERSION: 2.4.1 (2016-04-26 patchlevel 112) [x86_64-darwin14] - INSTALLATION DIRECTORY: /Users/danielkehoe/.rvm/gems/ [email protected] - USER INSTALLATION DIRECTORY: /Users/danielkehoe/.gem/ruby/2.3.0 - RUBY EXECUTABLE: /Users/danielkehoe/.rvm/rubies/ruby-2.4.1/bin/ruby - EXECUTABLE DIRECTORY: /Users/danielkehoe/.rvm/gems/ [email protected] /bin - SPEC CACHE DIRECTORY: /Users/danielkehoe/.gem/specs - SYSTEM CONFIGURATION DIRECTORY: /Users/danielkehoe/.rvm/rubies/ruby-2.4.1/etc - RUBYGEMS PLATFORMS: - ruby - x86_64-darwin-14 - GEM PATHS: - /Users/danielkehoe/.rvm/gems/ [email protected] - /Users/danielkehoe/.rvm/gems/ [email protected] . . . If you use RVM, gems are saved to a hidden .rvm folder in your user directory. A global subfolder contains the Bundler gem. If you\u2019ve followed the instructions in the \u201cGet Started\u201d chapter to install Rails, the project-specific learn-rails subfolder contains the Rails gem. If you use Chruby or Rbenv instead of RVM, your gems will be stored in a different location. Run the gem which command and you\u2019ll see where the gems live: $ gem which bundler /Users/danielkehoe/.rvm/gems/ [email protected] /gems/bundler-1.12.5/lib/bundler.rb $ gem which rails /Users/danielkehoe/.rvm/gems/ [email protected] /gems/railties-5.1.2/lib/rails.rb These are details you\u2019ll never need to know, because Ruby on Rails handles it for you. You\u2019ll never move or delete gems directly. Instead you\u2019ll manage gems using the Bundler utility. The key to Bundler is the Gemfile.","title":"9.5 Where Do Gems Live?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#96-gemfile","text":"Every Rails application has a Gemfile. Earlier, I described Rails from the viewpoint of the \u201cgem hunter,\u201d the developer who wants to assemble an application from the best open source components he or she can find. To the gem hunter, the Gemfile is the most important file in the application. It lists each gem that the developer wants to use. The Gemfile provides the information needed by the Bundler utility to manage gems. Bundler\u2019s bundle install command reads the Gemfile, then downloads and saves each listed gem to the hidden gem folder. Bundler checks to see if the gem is already installed and only downloads gems that are needed. Bundler checks for the newest gem version and records the version number in the Gemfile.lock file. Bundler also downloads any gem dependencies and records the dependencies in the Gemfile.lock file. Between the Gemfile, with its list of gems that will be used by the application, and the Gemfile.lock file, with its list of dependencies and version numbers, you have a complete specification of every gem required to run the application. More importantly, when other developers install your application, Bundler will automatically install all the gems (including dependencies and correct versions) needed to run the application. When you deploy the application to production for others to use, automated deployment scripts (such as those used by Heroku) install all the required gems. Bundler provides a bundle update command when we want to replace any gems with newer versions. If you run bundle update , any new gem versions will be downloaded and installed and the Gemfile.lock file will be updated. Be aware that updating gems can break your application, so only update gems when you have time to test and resolve any issues. You can run bundle outdated to see which gems are available in newer versions. If you want to prevent your fellow developers (or yourself) from accidentally updating gems, you can specify a gem version number for any gem in the Gemfile. The Gemfile gives fine-grained control over rules for updating: gem \u2019rails\u2019, \u20195.0.0\u2019 is \u201cabsolute\u201d only version 5.0.0 will be used gem \u2019rails\u2019, \u2019>= 5.0.0\u2019 is \u201coptimistic\u201d any version newer than 5.0.0 will be used gem \u2019rails\u2019, \u2019~> 5.0.0\u2019 is \u201cpessimistic\u201d \u201cPessimistic\u201d versioning needs some explanation. ~> 5.0.0 means use any version greater than 5.0.0 and less than 5.1 (any patch version can be used). ~> 5.0 means use any version greater than 5.0 and less than 6.0 (any minor version can be used). In general, during development we only lock down any gem versions in the Gemfile if we know newer versions introduce problems. Let\u2019s take a look at the Gemfile created by the rails new command.","title":"9.6 Gemfile"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#97-gemfile-for-a-rails-default-application","text":"Open the Gemfile with your text editor: source 'https://rubygems.org' git_source(:github) do |repo_name| repo_name \\= \"#{repo_name}/#{repo_name}\" unless repo_name.include?(\"/\") \"https://github.com/#{repo_name}.git\" end # Bundle edge Rails instead: gem 'rails', github: 'rails/rails' gem 'rails', '~> 5.1.2' # Use sqlite3 as the database for Active Record gem 'sqlite3' # Use Puma as the app server gem 'puma', '~> 3.7' # Use SCSS for stylesheets gem 'sass-rails', '~> 5.0' # Use Uglifier as compressor for JavaScript assets gem 'uglifier', '>= 1.3.0' # See https://github.com/rails/execjs#readme for more supported runtimes # gem 'therubyracer', platforms: :ruby # Use CoffeeScript for .coffee assets and views gem 'coffee-rails', '~> 4.2' # Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks gem 'turbolinks', '~> 5' # Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder gem 'jbuilder', '~> 2.5' # Use Redis adapter to run Action Cable in production # gem 'redis', '~> 3.0' # Use ActiveModel has_secure_password # gem 'bcrypt', '~> 3.1.7' # Use Capistrano for deployment # gem 'capistrano-rails', group: :development group :development, :test do # Call 'byebug' anywhere in the code to stop execution and get a debugger console gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] # Adds support for Capybara system testing and selenium driver gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do # Access an IRB console on exception pages or by using <%= console %> anywhere in the code. gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # Windows does not include zoneinfo files, so bundle the tzinfo-data gem gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby] The file you see will be very similar. Some version numbers may be different if a newer Rails version was released since this was written. The first line, source \u2019https://rubygems.org\u2019 , directs Bundler to use the rubygems.org server as a source for any gems. Notice that the second uncommented line directs Bundler to use Rails and specifies a range of acceptable versions. In this case, the Gemfile indicates we can use any version between 5.1.2 and 5.2. In the Gemfile you\u2019ll see the gems for a Rails default application, such as the sqlite3 database gem, which we described earlier. Other gems are commented out (the lines begin with the # character). These are suggestions and we can ignore them or remove them. We won\u2019t use a database for our application but we\u2019ll keep the gem \u2019sqlite3\u2019 entry. Configuring Rails for no database is complicated; it is easier to keep the sqlite3 gem and not use it. If you are developing your application on a computer using the Linux operating system, you may need to uncomment and use the statement gem \u2019therubyracer\u2019, platforms: :ruby . Linux doesn\u2019t have a built-in JavaScript interpreter so you must install Node.js in your environment or else add the therubyracer gem to each project Gemfile. For help, see Install Ruby on Rails - Ubuntu . It\u2019s wise to specify the Ruby version we\u2019re using. This is needed for automated deployment scripts such as those used by Heroku. We can add that to the Gemfile: ruby '2.4.1' If you add the Ruby version and remove the extra clutter in the Gemfile it will look like this: source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end Try it now. Replace the Gemfile with the simplified code above.","title":"9.7 Gemfile for a Rails Default Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#98-adding-gems","text":"I\u2019ve identified several gems that will be useful for our tutorial application. I learned about these gems from several places: Ruby Toolbox RubyFlow various blog posts example code and starter apps on GitHub recommendations from colleagues We\u2019re adding these gems at the beginning of our development process since we already know which gems we\u2019ll need. On a real project, you\u2019ll often discover useful gems and add them to the Gemfile during the ongoing process of development. Here are gems we\u2019ll add to the Gemfile: bootstrap-sass - front-end framework gibbon - access to the MailChimp API high_voltage - for static pages like \u201cabout\u201d jquery-rails - adds the jQuery JavaScript library Box 9.1. jQuery and Rails 5.1 Versions of Rails prior to Rails 5.1 included the jquery-rails gem by default. The gem was dropped from Rails 5.1. We\u2019ll add the jquery-rails gem because it is required by the Bootstrap front-end framework. We\u2019ll also add utilities that make development easier: better_errors - helps when things go wrong rails_layout - generates files for an application layout Open your Gemfile and replace the contents with the following: source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' end Notice that we\u2019ve placed two gems inside a \u201cgroup.\u201d Specifying a group for development or testing ensures a gem is not loaded in production, reducing the application\u2019s memory footprint. Rails let you specify groups for development , test , or production .","title":"9.8 Adding Gems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#99-about-the-rails-version","text":"The version of Rails specified in your Gemfile should match the version that is installed in your gemset. If you\u2019ve got Rails 5.1, there\u2019s no need to make additional changes to the Gemfile. Any version beginning with 5.1, such as 5.1.1, will be fine. If you have Rails 5.2 (which was not available when this was written), you must get a new version of this book. The newest available version of the book is listed on the README page of the learn-rails GitHub repository. If a newer version of the book is not available, you can install Rails 5.0. See the articles Install Rails and Updating Rails for details about installing and switching between Rails versions.","title":"9.9 About the Rails Version"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#910-install-the-gems","text":"Each time you edit the Gemfile, you will run bundle install and restart your web server. You\u2019ve edited the Gemfile. Install the required gems on your computer: $ bundle install The bundle install command will download the gems from the rubygems.org server and save them to a hidden directory that is managed by the RVM gemset you\u2019ve specified. We\u2019ll see all the gems and their dependencies: Fetching gem metadata from https://rubygems.org/ Fetching version metadata from https://rubygems.org/ Fetching dependency metadata from https://rubygems.org/ Resolving dependencies... Using rake 11.3.0 Using concurrent-ruby 1.0.2 Using i18n 0.7.0 Using minitest 5.9.1 . . . (many more gems not shown... you get the idea) . . . Bundle complete! 20 Gemfile dependencies, 73 gems now installed. Use `bundle show [gemname]` to see where a bundled gem is installed. You can use your text editor to view the contents of Gemfile.lock and you will see a detailed listing of every gem and each dependency, with version numbers. There\u2019s no reason to edit a Gemfile.lock file; if it is ever in error, delete it and run bundle install to recreate it. Run gem list to see all the gems that are loaded into the development environment: $ gem list The list of gems loaded in the environment is the same as the list specified in the Gemfile.lock file. Here\u2019s how it works. RVM makes a place for the gems to be stored (the RVM gemset); the Gemfile lists the gems you want to use; bundle install reads the Gemfile and installs the gems into the RVM gemset; the Gemfile.lock file records dependencies and version numbers; and gem list shows you the gems that are in the gemset and available for use.","title":"9.10 Install the Gems"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#9101-troubleshooting","text":"If your development environment is set up correctly, there should be no difficulty installing gems with the bundle install command. If your development environment is not set up correctly, you may see error messages when Bundler attempts to install the Nokogiri gem. Nokogiri is often needed by other gems (it is a dependency of some gems) and Nokogiri can become a problem to install. Unlike most gems that are written in pure Ruby, parts of Nokogiri are written in the C language and must be compiled using system tools that vary with different operating systems. If you get an error while installing gems, and the message says, \u201cAn error occurred while installing nokogiri,\u201d ask for help on Stack Overflow .","title":"9.10.1 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#911-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add gems\" $ git push origin master After your first use of git push origin master , you can use the shortcut git push . If you get a message: fatal: Not a git repository (or any of the parent directories): .git It indicates you are in a folder that has not been initialized with Git. You are probably not in your project directory. Use the Unix command pwd to see where you are. If you get a message: fatal: 'origin' does not appear to be a git repository fatal: The remote end hung up unexpectedly It shows that you can\u2019t connect to GitHub to push the changes. To investigate, enter: $ git remote show origin It is not absolutely necessary to use GitHub for this tutorial. We\u2019re only using it so you\u2019ll be familiar with the workflow of professional development. We\u2019re ready to configure the application.","title":"9.11 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-10-configure","text":"Rails is known for its \u201cconvention over configuration\u201d guiding principle. As applied, the principle reduces the need for many configuration files. It\u2019s not possible to eliminate all configuration files, however. Many applications require configuration of settings such as email account credentials or API keys for external services. In our tutorial application, we\u2019ll need to store an API key to access MailChimp, which we\u2019ll use to add visitors\u2019 email addresses to a mailing list. We\u2019ll also need to store credentials so we can send email using the SendGrid transactional email service. Rails provides the config/secrets.yml file for our configuration settings. Any variable that is set in the config/secrets.yml file can be used elsewhere in our Rails application, providing a single location for all our configuration variables.","title":"Chapter 10 Configure"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#101-configuration-security","text":"GitHub is a good place to store and share code. But when your repos are public, they are not a good place for secret account credentials. In fact, any shared Git repository, even a private repo, is a bad place to store email account credentials or private API keys. Operating systems (Linux, macOS, Windows) provide mechanisms to set local environment variables , as does Heroku and other deployment platforms. With a bit of Unix savvy, you can set environment variables using the Unix shell. Environment variables can be accessed from Rails applications and provide an ideal place to set configuration settings that must remain private. For the best security, set credentials as Unix environment variables and only use Unix environment variables in the config/secrets.yml file. The article Rails Environment Variables shows alternatives to using Unix environment variables, if for any reason you cannot set environment variables on your machine.","title":"10.1 Configuration Security"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#102-videos","text":"If you have subscribed, now\u2019s a good time to watch: UNIX Environment Variables Rails Environment Variables","title":"10.2 Videos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#103-about-environment-variables","text":"Unix environment variables are typically set in a file that is read when starting an interactive shell. The shell is the program that gives us the command line interface we see in the Terminal or console application. Unix gives you a choice of shell programs (with names like sh , bash , ksh , and zsh ); each has a slightly different way to set environment variables. The most common shell program is bash. Let\u2019s find out what shell you are using: $ echo $SHELL /bin/bash If you see /bin/bash , that\u2019s great! If not, you may have to do some research to find out how to set environment variables in your shell. You might be surprised to see a dollar sign in the command. You don\u2019t type the first dollar sign (it is just the convention that indicates you are entering a Unix command). You\u2019ll type echo $SHELL to ask the operating system to show the variable SHELL . The dollar sign in the command tells Unix to return a variable named SHELL . Try typing echo SHELL without the dollar sign and you\u2019ll see echo just displays what you type. When you open a console window, the bash shell reads a configuration file in your user home directory. You can use a Unix command to list all the files in your user home directory (the ~ \u201ctilde\u201d character represents your home directory): $ ls -1pa ~ . . . .bash_profile . . . On the Mac, you\u2019ll see .bash_profile . On Linux systems, you\u2019ll see .bashrc .","title":"10.3 About Environment Variables"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#104-viewing-hidden-files","text":"The files .bash_profile or .bashrc are hidden in the file browser. You can force the Mac to display hidden files by entering the following command in the Terminal application: defaults write com.apple.finder AppleShowAllFiles TRUE; killall Finder Hidden files will appear in gray in the Finder window. Use your text editor (Atom or Sublime) to open the .bash_profile or .bash_rc file. To open the .bash_profile file with Atom: $ atom ~/.bash_profile In Unix, the squiggle (tilde) character is a shortcut to your user home folder. Open either file and you\u2019ll likely find a command such as: export PATH=~/.bin:$PATH That is a command that sets the PATH environment variable. The command might not be exactly the same but it is likely you will see some export commands. You can add the environment variables anywhere in the file. For convenience, add the environment variables near the end of the file, above any existing EXPORT statement. You should use quotes to surround configuration values (credentials) in the .bash_profile or .bashrc files. If you don\u2019t have a .bash_profile or .bashrc file in your user home directory, you can create one.","title":"10.4 Viewing Hidden Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#105-set-environment-variables","text":"You\u2019ll set the following environment variables in your .bashrc or .bash_profile file: SENDGRID_USERNAME SENDGRID_PASSWORD MAILCHIMP_API_KEY MAILCHIMP_LIST_ID OWNER_EMAIL Here are details.","title":"10.5 Set Environment Variables"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1051-sendgrid","text":"You\u2019ll need your SendGrid username and password. The credentials are the same you use to sign in to the SendGrid website. Add your SendGrid username and password to your .bash_profile or .bashrc file: export SENDGRID_USERNAME=\"example\" export SENDGRID_PASSWORD=\"secret\" Obviously, change \u201cexample\u201d and \u201csecret\u201d to your own credentials.","title":"10.5.1 SendGrid"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1052-mailchimp","text":"When visitors sign up to receive a newsletter, we\u2019ll add them to a MailChimp list. Add an environment variable for the MailChimp API key: MAILCHIMP_API_KEY . Sign in to MailChimp to get your API key. Click your name at the top of the navigation menu, then click \u201cAccount.\u201d Click \u201cExtras,\u201d then \u201cAPI keys.\u201d You have to generate an API key; MailChimp doesn\u2019t create one automatically. The MailChimp API key is a long string of characters like a secret code that works like a password. Enter it in your .bash_profile or .bashrc file: export MAILCHIMP_API_KEY=\"Your_MailChimp_API_Key\" You\u2019ll need to create a MailChimp mailing list in preparation for our \u201cMailing List\u201d chapter. Have you already created a MailChimp mailing list? If not, the MailChimp \u201cLists\u201d page has a button for \u201cCreate List.\u201d The list name and other details are up to you. We\u2019ll need the MAILCHIMP_LIST_ID for the mailing list you\u2019ve created. To find the list ID, on the MailChimp \u201cLists\u201d page, click the \u201cdown arrow\u201d for a menu and click \u201cSettings.\u201d At the bottom of the \u201cList Settings\u201d page, you\u2019ll find the unique ID for the mailing list. export MAILCHIMP_LIST_ID=\"Your_List_ID\" Your environment variables are set up to use MailChimp.","title":"10.5.2 MailChimp"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1053-owner-email","text":"You\u2019ll send email messages to this address when a visitor submits a contact request form. Set OWNER_EMAIL with an email address where you receive mail. export OWNER_EMAIL=\" [email protected] \" Enter an email address and your environment variables will be set up with the site owner email address.","title":"10.5.3 Owner Email"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1054-restart-the-terminal-session","text":"Close and reopen your terminal to make sure the environment is updated with any recent changes.","title":"10.5.4 Restart the Terminal Session"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1055-troubleshooting","text":"Check that the SendGrid user name is set in your Unix environment variables: $ echo \"$SENDGRID_USERNAME\" You should see your SendGrid user name in the console response. Make sure you\u2019ve used underscores consistently and you\u2019ve used SENDGRID_USERNAME not SENDGRID_USER_NAME . If you have trouble, remember to close and reopen your terminal to make sure the environment includes any recent changes. On Linux, if you\u2019ve entered the environment variables in your .bashrc file but they don\u2019t seem to work, try setting them in your .bash_profile file instead. If you\u2019ve set up Unix environment variables but echo \"$SENDGRID_USERNAME\" doesn\u2019t return the correct variable in the console, you may have a problem with the way you\u2019ve set Unix environment variables. Most computers use the bash shell and you can set environment variables in your .bash_profile or .bashrc files. But not every system is alike. If it seems Unix environment variables are not working, you may have to find a colleague who can help you troubleshoot. If you are having problems, you can continue with the tutorial and add the credentials directly to the config/secrets.yml file.","title":"10.5.5 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#106-the-secrets-file","text":"Use your text editor to add the Unix environment variables to the file config/secrets.yml : # Be sure to restart your server when you modify this file. # Your secret key is used for verifying the integrity of signed cookies. # If you change this key, all old signed cookies will become invalid! # Make sure the secret is at least 30 characters and all random, # no regular words or you'll be exposed to dictionary attacks. # You can use `rails secret` to generate a secure secret key. # Make sure the secrets in this file are kept private # if you're sharing your code publicly. # Shared secrets are available across all environments. # shared: # api_key: a1B2c3D4e5F6 # Environmental secrets are only available for that specific environment. development: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> domain_name: example.com mailchimp_api_key: <%= ENV[\"MAILCHIMP_API_KEY\"] %> mailchimp_list_id: <%= ENV[\"MAILCHIMP_LIST_ID\"] %> owner_email: <%= ENV[\"OWNER_EMAIL\"] %> secret_key_base: very_long_random_string test: secret_key_base: very_long_random_string # Do not keep production secrets in the unencrypted secrets file. # Instead, either read values from the environment. # Or, use `bin/rails secrets:setup` to configure encrypted secrets # and move the `production:` environment over there. production: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> domain_name: example.com mailchimp_api_key: <%= ENV[\"MAILCHIMP_API_KEY\"] %> mailchimp_list_id: <%= ENV[\"MAILCHIMP_LIST_ID\"] %> owner_email: <%= ENV[\"OWNER_EMAIL\"] %> secret_key_base: <%= ENV[\"SECRET_KEY_BASE\"] %> Be sure to use spaces, not tabs. Make sure there is a space after each colon and before the value for each entry or you will get a message \u201cInternal Server Error: mapping values are not allowed\u201d when you start the web server. You used quotes to surround configuration values in the .bashrc or .bash_profile files. Here, in the config/secrets.yml file, you don\u2019t need quotes when you are importing Unix environment variables.","title":"10.6 The Secrets File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1061-domain-name","text":"We\u2019ll need a domain name when we configure email for delivery in production. For development, use example.com . If you have your own domain name, you can use that instead. There\u2019s no need to keep the domain_name configuration variable secret, so we don\u2019t need to set it in a Unix environment variable. You can decide for yourself if the owner_email variable really needs to be secret. Just for caution, I\u2019m suggesting you set it as a Unix environment variable.","title":"10.6.1 Domain Name"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1062-securing-the-secrets-file","text":"Some developers take steps to prevent the config/secrets.yml file from being checked into Git. To prevent the file from being saved to your repo you could add the filename to the .gitignore file in your application root directory. However, you don\u2019t need to keep the config/secrets.yml file from being checked into Git if you\u2019ve used Unix environment variables in the config/secrets.yml file. If you only reveal the SECRET_KEY_BASE used for development or testing, and no one can access your development machine, no useful secrets will be revealed in your GitHub repo. When you deploy to Heroku, the config/secrets.yml file must be in your Git repository. For that reason, I suggest you save the file in your Git repo and keep your secrets safe by using environment variables.","title":"10.6.2 Securing the Secrets File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1063-troubleshooting","text":"Remember, in YAML files (with the file extension .yml ), indentation is required (your application will break without it). Be sure to use spaces, not tabs. Make sure there is a space after each colon and before the value for each entry. If you have trouble setting Unix environment variables, you can add credentials directly to the config/secrets.yml file. If you do so, you should not check the file into Git until you\u2019ve deleted the secrets from the file. Replace the following if you are troubleshooting: development: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> with: development: email_provider_username: example email_provider_password: 's#cr*t' In a YAML file, you do not need quotes unless your string contains special characters. If your password contains any of these characters you should surround the string with single quotes: : { } [ ] & * # ? | - < > = ! % @ \\ Again, DON\u2019T CHECK THE FILE INTO GIT if you\u2019ve hardcoded your credentials directly in the config/secrets.yml file. The article Rails Environment Variables shows alternatives to using Unix environment variables, if for any reason you cannot set environment variables on your machine.","title":"10.6.3 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#107-secret-key-base","text":"It\u2019s not necessary to set SECRET_KEY_BASE as an environment variable on the computer you use for development. Rails generates a unique SECRET_KEY_BASE in the config/secrets.yml file each time you create a new Rails application and you don\u2019t need to replace it. If someone sees the SECRET_KEY_BASE in the config/secrets.yml file in your GitHub repo, there isn\u2019t anything they can do with it, since they don\u2019t have access to your local machine. For your future reference, in case you want to change the SECRET_KEY_BASE , here\u2019s how. Go to your Rails application directory and create a new secret token: $ rails secret very_long_random_string And, if you wish, add it to your .bash_profile or .bashrc file: export SECRET_KEY_BASE=\"very_long_random_string\" You should always use the environment variable <%= ENV[\"SECRET_KEY_BASE\"] %> in the production section of your config/secrets.yml file, otherwise, someone who sees the secret token in your GitHub repo can gain access to your application in production. You\u2019ll set the environment variables for production when you deploy to Heroku.","title":"10.7 Secret Key Base"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#108-configure-email","text":"Email messages are visible in the console and the log file when you test the application. If you don\u2019t want to actually send email, you can skip this step. But it\u2019s more fun when your application can actually send email. You can learn more in the article Send Email with Rails .","title":"10.8 Configure Email"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1081-connect-to-an-email-server","text":"Web servers don\u2019t send email. Our Rails application has to connect to an email server (also known as a mail transfer agent or \u201cmail relay\u201d). In the early days of the Internet, an experienced system administrator could set up an SMTP server to distribute email. Now, because of efforts to reduce spam, it is necessary to use an established email service to ensure deliverability. In production, for high volume transactional email and improved deliverability, it is best to use a service such as SendGrid . Alternatives are: Amazon SES (Simple Email Service) Mailgun Mailjet Mandrill PostageApp Postmark SparkPost For our tutorial application, we\u2019ll connect to SendGrid to send email. For convenience during development, some developers use their own Gmail account to send email. Google has increased security measures for Gmail, so it is difficult to use Gmail to send email from a Rails application. SendGrid is easier to set up and you\u2019re more likely to use it for a real application. That\u2019s why we\u2019ll use it. In the file config/environments/development.rb , near the end of the file, find the statement: config.assets.debug \\= true Immediately following, add this: config.action_mailer.smtp_settings \\= { address: \"smtp.sendgrid.net\", port: 587, domain: Rails.application.secrets.domain_name, authentication: \"plain\", enable_starttls_auto: true, user_name: Rails.application.secrets.email_provider_username, password: Rails.application.secrets.email_provider_password } # ActionMailer Config config.action_mailer.default_url_options \\= { :host \\=> 'localhost:3000' } config.action_mailer.delivery_method \\= :smtp config.action_mailer.raise_delivery_errors \\= true # Send email in development mode? config.action_mailer.perform_deliveries \\= true You can use port 25, 587, or 2525 (some ISPs restrict connections on port 25). It\u2019s important to add these changes in the body of the configuration file, before the end keyword. The order isn\u2019t important but don\u2019t add the configuration statements after the end keyword. Notice that we are using configuration variables that are set in the config/secrets.yml file: Rails.application.secrets.email_provider_username Rails.application.secrets.email_provider_password We could \u201chard code\u201d a username and password here but that would expose confidential data if your GitHub repository is public. Using configuration variables that are set in the config/secrets.yml file keeps your secrets safe. Again, if you need to troubleshoot, you can enter the SendGrid username and password directly in this file instead of the configuration variables. But for security, don\u2019t commit to Git with the password hardcoded in this file.","title":"10.8.1 Connect to an Email Server"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1082-perform-deliveries-in-development","text":"If you want to send real messages when you test the application in development mode, modify the file config/environments/development.rb . After the code you just added, add the statement: # Send email in development mode? config.action_mailer.perform_deliveries \\= true This changes the configuration to send email when you\u2019re working on the application. Make sure any code you\u2019ve added to the config/environments/development.rb file is placed before the final end keyword. If you add code after the final end keyword, your application will fail with errors when you start the web server. Later, after we add a contact form to the tutorial application, the application will be ready to send email messages.","title":"10.8.2 Perform Deliveries in Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#109-git","text":"Make sure you\u2019re in your application root directory. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add configuration\" $ git push We\u2019re ready to create a home page for the application.","title":"10.9 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-11-static-pages-and-routing","text":"A Rails application can deliver static web pages just like an ordinary web server. The pages are delivered fast and no Ruby code is required. We\u2019ll look at simple static pages and learn about Rails routing before we explore the complexities of dynamic web pages in Rails.","title":"Chapter 11 Static Pages and Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#111-add-a-home-page","text":"Make sure you are in your project directory. Start the application server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see the Rails default information page. For the next step, you\u2019ll need to know how to use a text editor such as Atom or Sublime Text . You can find free tutorials on YouTube. Or, if you prefer a book, try Michael Hartl\u2019s Learn Enough Text Editor to Be Dangerous . Use your text editor to create and save a file public/index.html :","title":"11.1 Add a Home Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#112-routing-error","text":"What happens when no file matches the requested web address? Enter the URL http://localhost:3000/about.html in your browser. You\u2019ll see an error page that shows a routing error. If you are using Cloud9, add \u201c/about.html\u201d to the URL in the preview browser window.","title":"11.2 Routing Error"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#113-add-an-about-page","text":"Use your text editor to create and save a file public/about.html :","title":"11.3 Add an About Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1131-introducing-tdd","text":"With test-driven development, a developer tests behavior before implementing a feature, expecting to see an error condition. Then the developer implements the feature and sees a successful result to the test. That\u2019s exactly what you\u2019ve done, in the simplest way. Beginners tend to think TDD is scary and complicated. Now that you\u2019ve experienced a simple form of TDD, maybe it won\u2019t be intimidating. Real TDD means writing tests in Ruby before implementing features, but the principle is the same.","title":"11.3.1 Introducing TDD"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#114-introducing-routes","text":"The guiding principle of \u201cconvention over configuration\u201d governs Rails routing. If the web browser requests a page named \u201cindex.html\u201d, Rails will deliver the page from the public folder by default. No configuration is required. But what if you want to override the default behavior? Rails provides a configuration file to control web request routing. If you\u2019ve got only one terminal window open, you\u2019ll have to stop the Rails server with Control-c to get your terminal prompt. Here is where it is helpful to have two terminal sessions going in different tabs. Let\u2019s set the \u201cAbout\u201d page as the home page. Open the file config/routes.rb . Remove all the comments and replace the file with this: Rails.application.routes.draw do root to: redirect('/about.html') end This snippet of Rails routing code takes any request to the application root ( http://localhost:3000/ ) and redirects it to the about.html file (which is expected to be found in the public folder). There is no need to restart your application server to see the new behavior. If you need to start the server: $ rails server Visit the page http://localhost:3000/ . You\u2019ll see the \u201cAbout\u201d page. If you still see the \u201cHello World\u201d page, you didn\u2019t remove the the public/index.html file. Rails will use the index file in the public folder before it checks the routing file for a redirect. You\u2019ve just seen an example of Rails magic. Some developers complain that the \u201cconvention over configuration\u201d principle is black magic. It\u2019s not obvious why pages are delivered from the public folder; it just happens. If you don\u2019t know the convention, you could be left scratching your head and looking for the code that maps http://localhost:3000/ to the public/index.html file. The code is buried deep in the Rails framework. However, if you know the convention and the technique for overriding it, you have both convenience and power at your disposal.","title":"11.4 Introducing Routes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#115-using-the-about-page","text":"We\u2019ve created an \u201cAbout\u201d page so we can learn about routing. For the next chapter, we\u2019ll use the static \u201cAbout\u201d page to investigate how a web application works. Later in the tutorial we\u2019ll create a new \u201cAbout\u201d page using a different approach.","title":"11.5 Using the \u201cAbout\u201d Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-12-request-and-response","text":"You\u2019ve configured the tutorial application, created static pages, and seen the magic of Rails routing. In this chapter, we\u2019ll investigate the web request-response cycle and look at the model-view-controller design pattern so you\u2019ll be prepared to build a dynamic home page.","title":"Chapter 12 Request and Response"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#121-investigating-the-request-response-cycle","text":"Remember, at its core, the World Wide Web is nothing more than web browsers that request files from web servers. Web browsers make requests . A web server responds to a request by sending an HTML file. Depending on the headers in the HTML file, the web browser may make additional requests and get additional CSS, JavaScript, and image files. The beauty and simplicity of the World Wide Web architecture, as conceived by Tim Berners-Lee in 1990, is that the web is nothing more than a request from a web browser and a response from a web server. Some web pages now include streaming video, or music, requiring an open \u201cpipe\u201d between the web server and the web browser, but even so, an initial request-response cycle delivers the page that sets up the stream. We can reduce the mystery of how the web works to its simplest components when we investigate the request-response cycle. We\u2019ll see that everything that happens in a web application takes place within the flow of the request-response cycle. Let\u2019s look at the request-response cycle. Figure 12.1: The request-response cycle.","title":"12.1 Investigating the Request Response Cycle"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1211-inside-the-browser","text":"We can see the actual request, and the actual response, by using the diagnostic tools built into the web browser. Start the application server if it is not already running: $ rails server Developers use various web browsers during development. I\u2019ll provide instructions for Chrome, since it is the most popular. Even if you prefer Mozilla Firefox or Apple Safari, try this in Chrome, so you can follow along with the text. Start our investigation by putting Chrome into \u201cIncognito Mode\u201d with Command-Shift-N (on a Mac). On Linux, use Ctrl-Shift-N to get in incognito mode with Chrome. Alternatively, you can clear the browser cache. This clears any files that were previously cached by the browser. The Developer Tools view is your primary diagnostic tool for front-end (browser-based) development, including CSS and JavaScript. In Chrome on macOS, press Command-Option-I to open the Developer Tools View in a section of the browser window. Alternatively, you can find the menu item under View/Developer/Developer Tools. In Chrome on Windows or Linux platforms, press Shift-Ctrl-I or select Menu/Tools/Developer Tools. Initiate the request-response cycle by visiting the \u201cAbout\u201d page at http://localhost:3000/about.html . In the Developer Tools view, under the Network tab, you\u2019ll see files received by the browser from the web server. There is only one: \u201cabout.html\u201d. This is the file that the browser evaluates to display a web page. Figure 12.2: Viewing a request in the Developer Tools View. Be sure to select the Network tab in the Developer Tools view. Click the \u201cabout.html\u201d file icon. Then click the tab \u201cHeaders.\u201d The diagnostic window shows the entire request sent to the server and the entire response received by the browser. Figure 12.3: Viewing request headers in the Developer Tools View. Under the heading \u201cGeneral,\u201d you can see the request is composed of: request URL (http://localhost:3000/about.html) request method (GET) status code (200 OK or 304 Not Modified) You can also see request and response headers: request headers (including the User Agent identifier) response headers (including last-modified date/time) You can see the HTML sent to the browser by clicking the Preview or Response tabs in the view under the Network tab. Here\u2019s the point of the exercise: The browser\u2019s Developer Tools view shows all the data exchanged between the browser and server. You\u2019re looking at everything that passes through the plumbing.","title":"12.1.1 Inside the Browser"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1212-inside-the-server","text":"The browser\u2019s Developer Tools view doesn\u2019t show you what happens on the server. For that, go to the server logs or the console window. Started GET \"/\" for ::1 at ... Notice how the diagnostic messages in the console window match the headers in the browser Developer Tools view. The browser\u2019s \u201cRequest Method:GET\u201d matches the server\u2019s \u201cStarted GET.\u201d Notice there are no console log messages for pages delivered from the public folder. Soon we\u2019ll see much more in the console window, after we\u2019ve built a dynamic web page that is assembled by the application server.","title":"12.1.2 Inside the Server"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#122-how-the-browser-works","text":"What happens after the browser receives a response from the server? The response is not complete until all files are received (or the browser reaches a time-out limit). Modern browsers retrieve files asynchronously; the order and location of the files in the initial HTML file doesn\u2019t matter because the browser will try to load all the files before displaying the page.","title":"12.2 How the Browser Works"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1221-document-object-model","text":"When the web browser receives an HTML file, it creates an internal representation of the page in computer memory, called the Document Object Model (DOM). It provides a structural representation of the document. The DOM works like an API for HTML documents, allowing you to modify the content and visual presentation of the page by using JavaScript. Later in the tutorial, we\u2019ll see how a JavaScript library such as jQuery can be used to do things like hiding or revealing HTML elements on a page by manipulating the DOM.","title":"12.2.1 Document Object Model"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1222-rendering","text":"Each time the DOM changes, the browser engine converts the DOM to a visual representation of the page and renders it in the browser window. Knowing about the DOM will help you understand what happens in the browser when it receives a web response. And understanding the DOM will help you work with JavaScript for front-end programming. But in this book, our focus is on building a server-side web application in Rails. Let\u2019s see how a Rails application responds to a web request.","title":"12.2.2 Rendering"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#123-how-the-application-works","text":"Now that we\u2019ve investigated the request-response cycle, let\u2019s dig deeper to understand what happens inside the Rails application in response to a browser request. To do so, we\u2019ll need to understand the model\u2013view\u2013controller concept.","title":"12.3 How the Application Works"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1231-video-option","text":"This eight minute video introduces the model\u2013view\u2013controller concept: Model View Controller in Rails","title":"12.3.1 Video Option"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1232-the-model-view-controller-concept","text":"The model\u2013view\u2013controller concept is key to understanding how a Rails application responds to a browser request. Here is a diagram that shows what happens in the server during the request-response cycle. Figure 12.4: Model\u2013View\u2013Controller in Rails. You learned earlier that, from the perspective of a software architect, Rails is organized to conform to the model\u2013view\u2013controller software design pattern. This enforces \u201cseparation of concerns\u201d to keep code manageable and organized. The MVC design pattern is optimal for web applications and is a central organizing principle for Rails. The MVC design pattern originated in the design of desktop applications. \u201cModel\u201d classes manipulated data; \u201cview\u201d classes created the user interface; and a \u201ccontroller\u201d class responded to user interaction. Some computer scientists feel the architecture of web applications doesn\u2019t quite match the original MVC design pattern of desktop applications. We can see the reason for the quibble in the next diagram. The diagram shows the MVC architecture as part of the Rails software stack. At the base of the stack is the web browser. A request flows upward through the layers and encounters the router which dispatches the request to an appropriate controller. In a Rails application, there is a single routing file, config/routes.rb , and multiple controllers, models, and views. Figure 12.5: Model\u2013View\u2013Controller stack in Rails. Considering the importance of the router, perhaps we should call our Rails architecture the RCMV , or Routing-Controller-Model-View, pattern. Despite the quibble about nomenclature, the architecture is well understood and used by all Rails developers. Here\u2019s the step-by-step walk-through of what happens. When the web browser makes a request, a router component will check the config/routes.rb file and determine which controller should handle the request, based on the web address and HTTP protocol. The controller will obtain any needed data from a model . After obtaining data, the controller will render a response combining data from the model with a view component that provides markup and layout. The response is an HTML file that the controller assembles for the browser to display. The model, view, and controller are files you create containing Ruby code. Each file has a certain structure and syntax based on foundation model, view, and controller classes defined in the Rails framework. The model, view, and controller classes you create will inherit behavior from parent classes that are part of the framework, so you will have less code to write yourself. In most Rails applications, a model obtains data from a database, though some models obtain data from a remote connection to another server. For example, a User model might retrieve a user name and email address from a local database. A User model could also obtain a user\u2019s recent tweets from Twitter or a user\u2019s hometown from Facebook. The controller can obtain data from more than one model if necessary. A controller can have more than one action . For example, a User controller might have actions to display a list of users, or add or delete a user from a list. The config/routes.rb file matches a web request to a controller action. In the software architects\u2019 terminology, each action is a method of the controller class . We use the terms action and method interchangeably when we talk about a Rails controller; to be precise, controller actions are implemented as methods. In practice, Rails developers try to limit controllers to seven standard actions: index , show , new , create , edit , update and destroy actions. A controller that offers these actions is said to be \u201cRESTful\u201d (a term that refers to representational state transfer , another software design abstraction). It\u2019s not important to understand the abstract principles of RESTful design; recognizing the term and knowing that Rails controllers have seven standard actions is sufficient for beginners. A view file combines Ruby code with HTML markup. Typically there will be a view file associated with each controller action that displays a page. An index view might show a list of users. A \u201cshow\u201d view might provide details of a user\u2019s profile. View files look much like ordinary HTML files but typically contain data in the form of Ruby variables. Often you\u2019ll see Ruby statements such as blocks that iterate through lists to create tables. Following the \u201cseparation of concerns\u201d principle, it is considered good practice to limit Ruby code in view files to only displaying data; anything else belongs in a model. Not every controller action has its own view file. In many controllers, on completion, the destroy action will redirect to the index view, and create will redirect to either show or new . This conceptual overview will be easier to grasp when you actually see the code for a model, view, and controller. We\u2019ll create model, view, and controller files in the next chapter.","title":"12.3.2 The Model View Controller Concept"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#124-remove-the-about-page","text":"We\u2019ve been using the static \u201cAbout\u201d page to investigate the request-response cycle. We\u2019re done, so delete the file public/about.html : $ rm public/about.html Earlier, we set up the config/routes.rb file. You can leave it in place. We\u2019ll change it in the next chapter. Now we\u2019ll look at ways to implement the home page using the full power of Rails.","title":"12.4 Remove the About Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-13-dynamic-home-page","text":"Earlier, we saw how Rails can deliver simple static web pages. Here we\u2019ll build a dynamic home page, illustrating basic concepts you\u2019ll need to understand Rails.","title":"Chapter 13 Dynamic Home Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#131-user-story","text":"We\u2019ll plan our work with a user story: *Birthday Countdown* As a visitor to the website I want to see the owner's name I want to see the owner's birthdate I want to see how many days until the owner's next birthday In order to send birthday greetings This silly home page will help us explore Rails and learn about the Ruby language. Our goal is to build a practical web application that you can really use. Later we\u2019ll replace this silly home page with a useful web page that encourages visitors to sign up for a mailing list.","title":"13.1 User Story"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#132-routes-model-view-and-controller","text":"We\u2019ll use the model-view-controller design pattern as we build our new home page. First, we\u2019ll set up a route so a request URL gets directed to the appropriate controller. We\u2019ll set up a model so we obtain data we need for the home page. We\u2019ll set up a view that contains the HTML needed to display our home page. And finally, we\u2019ll create a controller that responds to the request, obtaining data from the model and rendering the view, sending a response to the web browser. We can create the routes, model, view, and controller in any order. All must exist before our web application will respond to a request for a home page. In this tutorial, I\u2019ve chosen to create the routes, model, view, and controller in an order that is convenient for learning.","title":"13.2 Routes, Model, View, and Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#133-the-name-game","text":"Much of the art of programming lies in choosing suitable names for our creations. We\u2019ll need a model as a source for data about the site owner. Choosing the most obvious name, we\u2019ll call it the Owner model: Owner - the file will be app/models/owner.rb What about a name for the controller that will render our home page? How about \u201cHome controller\u201d or \u201cWelcome controller?\u201d Those names are acceptable. But if we consider our user story, the name \u201cVisitors controller\u201d is best. A visitor is the actor, so \u201cVisitors controller\u201d is appropriate: VisitorsController - the file will be app/controllers/visitors_controller.rb Later we\u2019ll see this is a good choice because we\u2019ll create a Visitor model to handle data about the website visitor. In Rails, there is often a model with the same name as a controller (though a controller can use data from multiple models).","title":"13.3 The Name Game"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#134-naming-conventions","text":"Rails is picky about class names and filenames. That\u2019s because of the \u201cconvention over configuration\u201d principle. By requiring certain naming patterns, Rails avoids complex configuration files. Before we look at class and filename conventions, here\u2019s a note about typographic terminology: a string is a sequence of characters you\u2019re looking at an example of lowercase strings separated by spaces (words!) Titlecase means there is an Initial Capital Letter in a string CamelCase contains a capital letter in the middle of a string snake_case combines words with an underscore character instead of a space When you write code, you\u2019ll follow rules for class names: class Visitor - the model class name is capitalized and singular class VisitorsController < ApplicationController - for a controller, combine a pluralized model name with \u201cController\u201d in CamelCase Here are the rules for filenames. They are always lowercase, with words separated by underscores (snake_case): the model filename matches the model class name, but lowercase, for example app/models/visitor.rb the controller filename matches the controller class name, but snake_case, for example app/controllers/visitors_controller.rb the views folder matches the model class name, but plural and lowercase, for example app/views/visitors At first the rules may seem arbitrary, but with experience they will make sense. The rule about no capital letters or spaces in filenames has its origins in computer antiquity. If you stray from these naming conventions, you\u2019ll encounter unexpected problems and frustration.","title":"13.4 Naming Conventions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#135-routing","text":"We\u2019ll create the route before we implement the model and controller. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do root to: 'visitors#new' end Any request to the application root ( http://localhost:3000/ ) will be directed to the VisitorsController new action. Don\u2019t be overly concerned about understanding the exact syntax of the code. It will become familiar soon and you can look up the details in the reference documentation, RailsGuides: Routing from the Outside In . In general, when you change a configuration file you must restart your application server. However, the config/routes.rb file is an exception. You don\u2019t need to restart the server after changing routes. If you need to start the server: $ rails server Visit the page http://localhost:3000/ . You\u2019ll see an error message because we haven\u2019t implemented the controller. The error message, \u201cuninitialized constant VisitorsController,\u201d means Rails is looking for a VisitorsController and can\u2019t find it.","title":"13.5 Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#136-model","text":"Most Rails models obtain data from a database. When you use a database, you can use the rails generate model command to create a model that inherits from the ActiveRecord class and knows how to connect to a database. To keep things simple, our tutorial application doesn\u2019t need a database. Instead of inheriting from ActiveRecord, we create a Ruby class with methods that return the owner\u2019s name, birthdate, and days remaining until his birthday. This simple class provides an easy introduction to Ruby code. Create a file app/models/owner.rb (don\u2019t include the colon punctuation that follows): class Owner def name name \\= 'Foobar Kadigan' end def birthdate birthdate \\= Date.new(1990, 12, 22) end def countdown today \\= Date.today birthday \\= Date.new(today.year, birthdate.month, birthdate.day) if birthday > today countdown \\= (birthday - today).to_i else countdown \\= (birthday.next_year - today).to_i end end end This is your first close look at Ruby code. The oddest thing you\u2019ll see is the owner\u2019s name, \u201cFoobar Kadigan.\u201d Everything else will make sense with a bit of explanation. Keep in mind that we are using a text file to create an abstraction that we can manipulate in the computer\u2019s memory. Software architects call these abstractions objects . In Ruby, everything we create and manipulate is an object . To distinguish one object from another, we define it as a class , give it a class name , and add behavior in the form of methods . The first line class Owner defines the class and assigns a name. At the very end of the file, the end keyword completes the class definition. We define three methods, starting with def (for \u201cmethod definition\u201d) and ending with end . def name \u2026 end def birthdate \u2026 end def countdown \u2026 end Each method contains simple Ruby code that assigns data to a variable. Later, we\u2019ll retrieve the data for use in our view file by instantiating the class and calling a method. Don\u2019t be discouraged by the software architects\u2019 terminology; the concepts are simple and we\u2019ll soon see everything in action. Ruby makes it easy for a method to return data when called; the value assigned by the last statement will be delivered when the method is called. Looking more closely at the Ruby code inside the method definitions, you\u2019ll see Ruby uses the = (equals) sign to assign values to a variable. The variable is named on the left side of the equals sign; a value is assigned on the right side. We call the equals sign an assignment operator . We can assign any value to a variable, including a string (a series of characters that can be a word or name) such as \u201cFoobar Kadigan.\u201d Ruby recognizes a string when characters are enclosed in single or double quotes. Not surprisingly, a number also can be assigned to a variable, either a whole number (an integer ) or a decimal fraction (a float ). More interestingly, any Ruby object can be assigned to a variable. That helps us \u201cmove around\u201d any object very easily, giving us access to the object\u2019s class methods anywhere we use the variable. We can create our own objects, as we have by creating the Owner class. Or we can use the library of objects that are supplied with Ruby. Ruby\u2019s prefabricated objects are defined by the Ruby API ( application programming interface ); essentially the API is a catalog of prebuilt classes that are building blocks for any application. The Rails API gives us additional classes that are useful for web applications. Learning the syntax of Ruby code gets you started with Ruby programming; knowing the API classes leads to mastery of Ruby. The Date class is provided by the Ruby API. It is described in the Ruby API reference documentation . The Date class has a Date.new method which instantiates (creates) a new date when supplied with year, month, and day parameters . You can see this syntax when we assign Date.new(1990, 12, 22) to the birthdate variable. Note that Ruby has specific expectations about the syntax of numbers. The Date.new(...) method expects integers. Imagine a September birthday. You must use Date.new(1990, 9, 22) . If you enter a date in the format Date.new(1990, 09, 22) , you\u2019ll get a syntax error \u201cInvalid octal digit\u201d when you test the application. Ruby expects numbers that begin with zero to be octal numbers ; you\u2019ll get an error because octal numbers can\u2019t contain the digit \u201c9.\u201d Our countdown method contains the most complex code in the class. First, we set a variable today with today\u2019s date. The Date.today method creates an object that represents the current date. When the Date.today method is called, Ruby gets the current date from the computer\u2019s system clock. Next we create a birthday variable and assign a new date that combines today\u2019s year with the month and day of the birthdate . This gives us the date of Foobar Kadigan\u2019s birthday this year. The Date class can perform complex calendar arithmetic. The variables birthdate and today are instances of the Date class. We can use a greater-than operator to determine if Foobar Kadigan\u2019s birthday is in the future or the past. The if ... else ... end structure is a conditional statement . If the birthday is in the future, we subtract today from birthday to calculate the number of days remaining until the owner\u2019s birthday, which we assign to the countdown variable. If the birthday has already passed, we apply a next_year method to the birthday to get next year\u2019s birthday. Then we subtract today from birthday.next_year to calculate the number of days remaining until the owner\u2019s birthday, which we assign to the countdown variable. The result might be fractional so we use the utility method to_i to convert the result to a whole number (integer) before assigning it to the countdown variable. This shows you the power of programming in Ruby. Notice that I needed 16 paragraphs and over 600 words to explain 15 short lines of code. We used only seven Ruby abstractions but they represent thousands of lines of code in the Ruby language implementation. With knowledge of Ruby syntax and the Ruby API, a few short lines of code in a text file gives us amazing ability. In an upcoming chapter, we\u2019ll look more closely at the syntax and keywords of the Ruby language. But without knowing more than this, we can build a simple web application. Let\u2019s see how we can put this functionality to use on a web page.","title":"13.6 Model"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#137-view","text":"The Owner model provides the data we want to see on the Home page. We\u2019ll create the markup and layout in a View file and add variables that present the data. View files go in folders in the app/views/ directory. In a typical application, one controller can render multiple views, so we make a folder to match each controller. You can make a new folder using your file browser or text editor. Or use the Unix mkdir command: $ mkdir app/views/visitors Create a file app/views/visitors/new.html.erb (don\u2019t include the colon punctuation that follows):","title":"13.7 View"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#138-controller","text":"The Visitors controller is the glue that binds the Owner model with the VisitorsController#new view. Note: When we refer to a controller action, we use the notation \u201cVisitorsController#new,\u201d joining the controller class name with the action (method) that renders a page. In this context, the # character is only a documentation convention. Note: VisitorsController will be the class name and visitors_controller.rb will be the filename. The class name is written in camelCase (with a hump in the middle, like a camel) so we can combine two words without a space. Unix commands get messy when filenames include spaces so we create a filename that combines two words with an underscore (sometimes called \u201csnake_case\u201d). Create a file app/controllers/visitors_controller.rb (don\u2019t include the colon punctuation that follows): class VisitorsController < ApplicationController def new @owner \\= Owner.new end end We define the class and name it class VisitorsController , inheriting behavior from the ApplicationController class which is defined in the Rails API. We only need to define the new method. We create an instance variable named @owner and assign an instance of the Owner model. Any instance variables (variables named with the @ character) will be available in the corresponding view file. If we don\u2019t instantiate the Owner model, we\u2019ll get an error when the controller new action attempts to render the view because we use the @owner instance in the view file. Keep in mind the purpose of the controller. Each controller action (method) responds to a request by obtaining a model (if data is needed) and rendering a view. You\u2019ve already created a view file in the app/views/visitors folder. The new action of the VisitorsController renders the template app/views/visitors/new.html.erb . The new method is deceptively simple. Hidden behavior inherited from the ApplicationController does all the work of rendering the view. We can make the hidden code explicit if we wish to. It would look something like this: class VisitorsController < ApplicationController def new @owner \\= Owner.new render 'visitors/new' end end This is an example of Rails magic. Some developers complain this is black magic because the \u201cconvention over configuration\u201d principle leads to obscurity. Rails often offers default behavior that looks like magic because the underlying implementation is hidden in the depths of the Rails code library. This can be frustrating when, as a beginner, you want to understand what\u2019s going on. Revealing the hidden code, we see that invoking the new method calls a render method supplied by the ApplicationController parent class. The render method searches in the app/views/visitors directory for a view file named new (the file extension .html.erb is assumed by default). The code underlying the render method is complex. Fortunately, all we need to do is define the method and instantiate the Owner model. Rails takes care of the rest. As a beginner, simply accept the magic and don\u2019t confound yourself trying to find how it works. As you gain experience, you can dive into the Rails source code to unravel the magic.","title":"13.8 Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#139-scaffolding","text":"This tutorial aims to give you a solid foundation in basic concepts. The model\u2013view\u2013controller pattern is one of the most important. I\u2019ve found the best way to understand model\u2013view\u2013controller architecture is to create and examine the model, view, and controller files. As you continue your study of Rails, you\u2019ll find other tutorials that use the scaffolding shortcut. For example, Rails Guides: Getting Started with Rails includes a section \u201cGetting Up and Running Quickly with Scaffolding\u201d which shows how to use the rails generate scaffold command to create model, view, and controller files in a single operation. Students often use scaffolding to create simple Rails applications. In practice, I\u2019ve observed that working Rails developers seldom use scaffolding. There\u2019s nothing wrong with it; it just seems that scaffolding doesn\u2019t offer much that can\u2019t be done as quickly by hand.","title":"13.9 Scaffolding"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1310-test-the-application","text":"We\u2019ve created a model, view, and controller. Now let\u2019s run the application. Enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see our new home page. Figure 13.1: Dynamic home page shows days until a birthday. It\u2019s a very simple web page but it uses Ruby to calculate the countdown to the birthday. And the underlying code conforms to the conventions and structure of Rails.","title":"13.10 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1311-git","text":"At this point, you might have the Rails server running in your console window. We\u2019re going to run a git command in the console now. You might think you have to enter Control-c to shut down the server and get the command prompt. But that\u2019s not necessary. You can open more than one console view. Your terminal application lets you open multiple windows or tabs. If you open multiple tabs, you can easily switch between console views without using a lot of screen real estate. If you haven\u2019t tried it, now is a good time. On the Mac, Command+t opens a new tab in the terminal application. It is convenient to have a console tab open for the server and another for various Unix commands. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"dynamic home page\" $ git push Now let\u2019s take a look at troubleshooting.","title":"13.11 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-14-troubleshoot","text":"In the last chapter, we built a dynamic home page and learned about the model\u2013view\u2013controller architecture of Rails. There was a lot to learn, but the code was simple, and I hope it worked the first time you tried it. Before we do any more work on our tutorial application, we need to learn about troubleshooting and debugging. As a software developer, you\u2019ll spend a lot of time with code that doesn\u2019t work. You\u2019ll need tools and techniques to diagnose problems.","title":"Chapter 14 Troubleshoot"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#141-git","text":"In this chapter we\u2019ll make changes to the application just for troubleshooting. Before you get started, make sure the work you\u2019ve done is committed to your git repository. Use the git status command to check: $ git status You should see: On branch master nothing to commit, working directory clean If git status reports any uncommitted changes, go back to the last step in the previous chapter and commit your work to the git repository before continuing. At the end of this chapter, we\u2019re going to throw away the work we\u2019ve done in this chapter. We don\u2019t want to accidentally throw away work from the previous chapter so make sure it is committed to the repository.","title":"14.1 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#142-interactive-ruby-shell","text":"There will be times when you want to try a snippet of Ruby code just to see if it works. Your tool will be IRB, the Interactive Ruby shell. IRB is a Ruby interpreter that runs from the command line. It executes any Ruby code and provides an immediate response, allowing you to experiment in real-time. Let\u2019s try it. $ irb >> The command irb launches the program and displays a prompt that shows your Ruby version, a line number, and an arrow. I\u2019ll just show a simple prompt in the examples, instead. If you enter a valid Ruby expression, the interpreter will display the result of evaluating the expression. Try simple arithmetic: >> n \\= 2 => 2 >> n + 2 => 4 Wow! You are using your computer for simple math. Maybe you can delete the calculator app from your phone. IRB will evaluate any Ruby expression and helps you quickly determine if syntax and logic is correct.","title":"14.2 Interactive Ruby Shell"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1421-irb-for-blocks-of-code","text":"At first glance, it appears IRB works on just one line of code. Actually, IRB can handle multiple lines of code. Try it: >> n \\= 10 \\=> 10 >> if n < 10 >> puts \"small\" >> else ?> puts \"big\" >> end big \\=> nil >> Here we set n = 10 and then enter a conditional statement line-by-line. After we enter the final end , IRB interprets the code and outputs the result. You\u2019ll often enter more than one line of code in IRB. If you find yourself frustrated because you\u2019ve entered typos and had to enter the same code repeatedly, you can use IRB to load code you\u2019ve saved in a file: >> load './mytest.rb'","title":"14.2.1 IRB for Blocks of Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1422-quitting-irb","text":"It can be very frustrating to find you are stuck inside IRB. Unlike most shell commands, you can\u2019t quit with Control-c. Enter Control-d or type exit to quit IRB: $ irb >> exit","title":"14.2.2 Quitting IRB"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1423-learn-more-about-irb","text":"Here\u2019s an entertaining way to learn about IRB: Why\u2019s (Poignant) Guide to Ruby (with a Basic Introduction to IRB) Here\u2019s a more conventional way to learn about IRB: The Pragmatic Programmer\u2019s Guide","title":"14.2.3 Learn More About IRB"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1424-beyond-irb","text":"If you ask experienced Rails developers for help with IRB, they\u2019ll often recommend you switch to Pry. Pry is a powerful alternative to the standard IRB shell for Ruby. As you gain experience, you might take a look at Pry to see what the enthusiasm is all about. But for now, as a beginner trying out a few lines of Ruby code, there\u2019s no need to learn Pry.","title":"14.2.4 Beyond IRB"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#143-rails-console","text":"IRB only evaluates expressions that are defined in the Ruby API. IRB doesn\u2019t know Rails. It\u2019d be great to have a tool like IRB that evaluates any expression defined in the Rails API. The tool exists; it\u2019s called the Rails console. It is particularly useful because it loads your entire Rails application. Your application will be running as if the application was waiting to respond to a web request. Then you can expose behavior of any pieces of the web application. $ rails console ... Loading development environment (Rails 5.x.x) >> The Rails console behaves like IRB but loads your Rails development environment. The prompt shows it is ready to evaluate an expression. Let\u2019s use the Rails console to examine our Owner model: >> myboss \\= Owner.new => # We\u2019ve created a variable named myboss and created a new instance of the Owner class. The Rails console responds by displaying the unique identifier it uses to track the object. The identifier is not particularly useful, except to show that something was created. If you\u2019re unsure about the difference between an instance and a class , we\u2019ve just seen that we can make one or more instances of a class by calling the Owner.new method. When we specify the Owner class, the class definition is loaded into the computer\u2019s working memory (our development environment) from the class definition file on disk. Then we can use the Owner.new method to make one or more instances of the Owner class. Each instance is a unique object with its own data attributes but the same behavior as other objects instantiated from its class. Let\u2019s assign the name of our boss to a variable called name : >> name \\= myboss.name => \"Foobar Kadigan\" Our variable myboss is an instance of an Owner class so it responds to the method Owner.name by returning the owner\u2019s name. We want to show respect to our boss so we\u2019ll perform some string manipulation : >> name \\= 'Mr. ' + name => \"Mr. Foobar Kadigan\" We\u2019re done for now. When we quit the Rails console or shut down the computer the Owner class definition remains stored on disk but the instances disappear. The bits that were organized to create the variable name will evaporate into the ether. Actually, the bits are still there, in the form of logic states in the computer\u2019s chips, but they have no meaning until another program uses them. Enter Control-d or type exit to quit the Rails console. The Rails console is a useful utility. It is like a handy calculator for your code. Use it when you need to experiment or try out short code snippets.","title":"14.3 Rails Console"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#144-rails-logger","text":"As you know, a Rails application sends output to the browser that makes a web request. On every request, it also sends diagnostic output to the server log file . Depending on whether the application is running in the development environment or in production, the log file is here: log/development.log log/production.log In development, everything written to the log file appears in the console window after you run the rails server command. Scrolling the console window is a good way to see diagnostics for every request. Here\u2019s what you see in the log after you visit the application home page: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML Rendering visitors/new.html.erb within layouts/application Rendered visitors/new.html.erb within layouts/application (6.6ms) Completed 200 OK in 650ms (Views: 634.4ms | ActiveRecord: 0.0ms) You may have more than one console window open in the terminal application. If you don\u2019t see your log output in your terminal, check if you have tabs with other windows. Here\u2019s the best part. You can add your own messages to the log output by using the Rails logger. Let\u2019s try it out. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name end end Visit the home page again and you\u2019ll see this in the console output: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application Rendered visitors/new.html.erb within layouts/application (1.1ms) Completed 200 OK in 81ms (Views: 72.2ms | ActiveRecord: 0.0ms) If you really needed to do so, you could add a logger statement at every step in the application. You could see how the application behaves, step by step. And you could \u201cprint\u201d the value of every variable at every step. You\u2019ll never need diagnostics at this level of detail in Rails, but the logger is extremely useful when you are trying to understand unexpected behavior. Let\u2019s add logger statements to the Owner model. Modify the file app/models/owner.rb : class Owner def name name \\= 'Foobar Kadigan' end def birthdate birthdate \\= Date.new(1990, 12, 22) end def countdown Rails.logger.debug 'DEBUG: entering Owner countdown method' today \\= Date.today birthday \\= Date.new(today.year, birthdate.month, birthdate.day) if birthday > today countdown \\= (birthday - today).to_i else countdown \\= (birthday.next_year - today).to_i end end end We added the Rails.logger.debug statement to the Owner.countdown method. Visit the home page and here\u2019s what you\u2019ll see in the console output: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application DEBUG: entering Owner countdown method Rendered visitors/new.html.erb within layouts/application (0.7ms) Completed 200 OK in 69ms (Views: 61.1ms | ActiveRecord: 0.0ms) You\u2019ll often need to \u201cget inside\u201d the model or controller to see what\u2019s happening. The Rails logger is the best tool for the job. Here are some tricks for the Rails logger. In a controller, you can use the method logger on its own. In a model, you have to write Rails.logger (both class and method). You can use any of the methods logger.debug , logger.info , logger.warn , logger.error , or logger.fatal to write log messages. By default, you\u2019ll see any of these messages in the development log. Log messages written with the logger.debug method will not be recorded in a production log file. If you want your log messages to stand out, you can add formating code for color: Rails.logger.debug \"\\033[1;34;40m[DEBUG]\\033[0m \" + 'will appear in bold blue' For more about the Rails logger, see the RailsGuide: Debugging Rails Applications .","title":"14.4 Rails Logger"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#145-revisiting-the-request-response-cycle","text":"Earlier, when we investigated the request-response cycle, we looked in the server log to see the response to the web browser request. Now, with debug statements in the controller and model, we\u2019ll see messages showing the server\u2019s traverse of the model-view-controller architecture. Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Rendering visitors/new.html.erb within layouts/application DEBUG: entering Owner countdown method Rendered visitors/new.html.erb within layouts/application (0.7ms) Completed 200 OK in 69ms (Views: 61.1ms | ActiveRecord: 0.0ms) Notice how the diagnostic messages in the console window match the headers in the browser Developer Tools view. The browser\u2019s \u201cRequest Method:GET\u201d matches the server\u2019s \u201cStarted GET.\u201d The browser\u2019s \u201cStatus Code: 200\u201d matches the server\u2019s \u201cCompleted 200 OK\u201d (you might have to clear the browser\u2019s cache if the browser is showing \u201c304 Not Modified\u201d). We can see evidence of the model-view-controller architecture. \u201cProcessing by VisitorsController#new\u201d shows the program flow entering the controller. Our debug statements show we enter the new method and reveal the value of the Owner name. The next debug statement reveals the flow has passed to the Owner model. A diagnostic message shows the controller has rendered the visitors/new.html.erb view file. Finally, the \u201cCompleted 200 OK\u201d message indicates the response has been sent to the browser. As we learned, the model-view-controller architecture is an abstract design pattern. We\u2019ve seen it reflected in the file structure of the Rails application directory. Now we can see it as activity in the server log.","title":"14.5 Revisiting the Request-Response Cycle"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#146-the-stack-trace","text":"The Rails logger is extremely useful if you want to insert messages to show program flow or display variables. But there will be times when program flow halts and the console displays a stack trace . Let\u2019s deliberately create an error condition and see an error page and stack trace. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name DISASTER end end Visit the home page and you\u2019ll see an error page: Figure 14.1: Error page. You\u2019ll see this error page because we\u2019ve installed the better_errors gem. Without the better_errors gem, you\u2019d see the default Rails error page which is quite similar. In the console log, the stack trace will show everything that happens before Rails encounters the error: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Completed 500 Internal Server Error in 8ms (ActiveRecord: 0.0ms) NameError - uninitialized constant VisitorsController::DISASTER: app/controllers/visitors_controller.rb:7:in `new' . . . To save space, I\u2019m only showing the top line of the stack trace. I\u2019ve eliminated about sixty lines from the stack trace. Don\u2019t feel bad if your reaction to a stack trace is an immediate, \u201cTMI!\u201d Indeed, it is usually Too Much Information. There are times when it pays to carefully read through the stack trace line by line, but most often, only the top line of the stack trace is important. In this case, both the error page and the top line of the stack trace show the application failed (I prefer to say, \u201cbarfed\u201d) when it encountered an \u201cuninitialized constant\u201d at line 7 of the app/controllers/visitors_controller.rb file in the new method. It\u2019s easy to find line 7 in the file and see that is exactly where we added a string that Rails doesn\u2019t understand. The point of this exercise is to encourage you to read the top line of the stack trace and use it to diagnose the problem. I\u2019m always surprised how many developers ignore the stack trace, probably because it looks intimidating.","title":"14.6 The Stack Trace"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#147-raising-an-exception","text":"As you just saw, you can purposefully break your application by adding characters that Rails doesn\u2019t understand. However, there is a better way to force your program to halt, called raising an exception . Let\u2019s try it. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name raise 'Deliberate Failure' end end You can throw an error by using the raise keyword from the Ruby API. You can provide any error message you\u2019d like in quotes following raise . Here\u2019s the console log after you try to visit the home page: Started GET \"/\" for ::1 at ... Processing by VisitorsController#new as HTML DEBUG: entering new method DEBUG: Owner name is Foobar Kadigan Completed 500 Internal Server Error in 6ms (ActiveRecord: 0.0ms) RuntimeError - Deliberate Failure: app/controllers/visitors_controller.rb:7:in `new' . . . Before we continue, let\u2019s remove the deliberate failure. Modify the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new Rails.logger.debug 'DEBUG: entering new method' @owner \\= Owner.new Rails.logger.debug 'DEBUG: Owner name is ' + @owner.name end end Rails and the Ruby API provide a rich library of classes and methods to raise and handle exceptions. For example, you might want to display an error if a user enters a birthdate that is not in the past. Rails includes various exception handlers to display errors in production so users will see a helpful web page explaining the error.","title":"14.7 Raising an Exception"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#148-git","text":"There\u2019s no need to save any of the changes we made for troubleshooting. You could go to each file and carefully remove the debugging code you added. But there\u2019s an easier way. Check which files have changed: $ git status","title":"14.8 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#changes-not-staged-for-commit","text":"","title":"Changes not staged for commit:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#use-git-add-to-update-what-will-be-committed","text":"","title":"(use \"git add ...\" to update what will be committed)"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#use-git-checkout-to-discard-changes-in-working-directory","text":"","title":"(use \"git checkout -- ...\" to discard changes in working directory)"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#_2","text":"","title":""},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#modified-appcontrollersvisitors_controllerrb","text":"","title":"modified:   app/controllers/visitors_controller.rb"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#modified-appmodelsownerrb","text":"","title":"modified:   app/models/owner.rb"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#_3","text":"no changes added to commit (use \"git add\" and/or \"git commit -a\") Use Git to revert your project to the most recent commit: $ git reset --hard HEAD The Git command git reset \u2013hard HEAD discards any changes you\u2019ve made since the most recent commit. Check the status to make sure: $ git status","title":""},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#on-branch-master","text":"nothing to commit, working directory clean We\u2019ve cleaned up after our troubleshooting exercise.","title":"On branch master"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-15-just-enough-ruby","text":"Experienced Rails developers debate whether beginners should study Ruby before learning Rails. By all means, if you love the precision and order of programming languages, dive into the study of Ruby from the beginning. But most people don\u2019t delay starting Rails while learning Ruby; realistically, you\u2019ll retain more knowledge of Ruby if you learn it as you build things in Rails. That is the approach we\u2019ve taken in this book. You\u2019ve already built a simple Rails application and used Ruby as you did so.","title":"Chapter 15 Just Enough Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#151-reading-knowledge-of-ruby","text":"What you need, more than anything, when you start working with Rails, is reading knowledge of Ruby. With a reading knowledge of Ruby you\u2019ll avoid feeling overwhelmed or lost when you encounter code examples or work through a tutorial. Later, as you tackle complex projects and write original code, you\u2019ll need to know enough of the Ruby language to implement the features you need. But as a student, you\u2019ll be following tutorials that give you all the Ruby you need. Your job is to recognize the language keywords and use the correct syntax when you type Ruby code in your text editor. To that end, this chapter will review the Ruby keywords and syntax you\u2019ve already learned. And you\u2019ll extend your knowledge so you\u2019ll be prepared for the Ruby you\u2019ll encounter in upcoming chapters.","title":"15.1 Reading Knowledge of Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#152-ruby-example","text":"To improve your reading knowledge of Ruby, we\u2019ll work with an example file that contains a variety of Ruby expressions. We won\u2019t use this file in our tutorial application, so you\u2019ll delete it at the end of this chapter. But we\u2019ll approach it as real Ruby code, so make a file and copy the code using your text editor. First we have to consider where the file should go. It will not be a model, view, controller, or any other standard component of Rails. Rails has a place for miscellaneous files that don\u2019t fit in the Rails API. We\u2019ll create the file in the lib/ folder. That\u2019s the folder you\u2019ll use for any supporting Ruby code that doesn\u2019t fit elsewhere in the Rails framework. Create a file lib/example.rb : class Example < Object # This is a comment. attr_accessor :honorific attr_accessor :name attr_accessor :date def initialize(name,date) @name \\= name @date \\= date.nil? ? Date.today : date end def backwards_name @name.reverse end def to_s @name end def titled_name @honorific ||= 'Esteemed' titled_name \\= \"#{@honorific} #{@name}\" end def december_birthdays born_in_december \\= [ ] famous_birthdays.each do |name, date| if date.month \\== 12 born_in_december << name end end born_in_december end private def famous_birthdays birthdays \\= { 'Ludwig van Beethoven' \\=> Date.new(1770,12,16), 'Dave Brubeck' \\=> Date.new(1920,12,6), 'Buddy Holly' \\=> Date.new(1936,9,7), 'Keith Richards' \\=> Date.new(1943,12,18) } end end In some ways, this Ruby code is like a poem from Lewis Carroll: 'Twas brillig, and the slithy toves Did gyre and gimble in the wabe; All mimsy were the borogoves, And the mome raths outgrabe. \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch! Beware the Jubjub bird, and shun The frumious Bandersnatch!\" The poem corresponds to the rules of English syntax but is nonsense. The code follows the rules of Ruby syntax, and unlike the poem, uses meaningful words. But it is unclear how the author intends anyone to use the code. If you\u2019re beginning a career as a Rails developer, this won\u2019t be the last time you look at code and wonder what the author was intending. In this case, I just want to give you some code that illustrates typical Ruby syntax and structure.","title":"15.2 Ruby Example"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#153-ruby-keywords","text":"When reading Ruby code, the first challenge is determining which words are Ruby keywords and which were made up by the developer. Code is only strings of characters. But some strings have special meaning for everyone and all others are arbitrary words that only have meaning to an individual developer. As you gain experience, you\u2019ll recognize Ruby keywords because you\u2019ve seen them before. You\u2019ll also recognize a developer\u2019s made-up words because of their position relative to other words and symbols. Some made-up words will be obvious because they are just too idiosyncratic to be part of the Ruby language. For example, you\u2019ll rightly guess that myapp or fluffycat are not part of the Ruby language. If you\u2019re reading a Lewis Carroll poem, you could look up words in a dictionary to see if you find them. There is only one way to be sure which words are part of the Ruby language: Check the Ruby API. As an exercise, pick one of the words from the example code that you think might be a Ruby keyword and search the API to find it. If you want to be a diligent student, you can check every keyword in the example code to find out whether it is in the Ruby API. It is more practical to learn to recognize Ruby keywords, which we\u2019ll do next.","title":"15.3 Ruby Keywords"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1531-api-documentation","text":"The Ruby API documentation lists every keyword in the language: ruby-doc.org - the official Ruby API apidock.com/ruby - Ruby API docs with usage notes","title":"15.3.1 API Documentation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#154-ruby-files","text":"When we write code, we save it in files. We\u2019ve added our miscellaneous example file to the lib/ folder. By convention, Ruby files end with the file extension .rb .","title":"15.4 Ruby Files"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1541-using-irb","text":"In the \u201cTroubleshooting\u201d chapter, you used IRB (the Interactive Ruby Shell) to try out Ruby code. You can use IRB to try out the example code in the console. $ irb >> load 'lib/example.rb' \\=> true >> require 'date' \\=> true >> ex \\= Example.new('Daniel',nil) \\=> #<Example:0x007fb46c9eecd8 @name=\"Daniel\", @date=# \\> list \\= ex.december\\_birthdays \\=> [\"Ludwig van Beethoven\", \"Dave Brubeck\", \"Keith Richards\"] >> Entering the load directive and the filename brings the code into IRB. The require \u2019date\u2019 statement loads the Ruby date library. The statement ex = Example.new(\u2019Daniel\u2019,nil) creates an object from the Example class. The ex.december_birthdays method returns an array of names. Remember you can use Control-d to exit from IRB. Now, for practice, we\u2019ll read the Ruby code.","title":"15.4.1 Using IRB"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#155-whitespace-and-line-endings","text":"Whitespace characters such as spaces and tabs are generally ignored in Ruby code, except when they are included in strings. There are several special cases where whitespace is significant in Ruby expressions but you are not likely to encounter these cases as a beginning Rails developer. Some programming languages (Java and the C family) require a semicolon as a terminator character at the end of statements. Ruby does not require a semicolon to terminate a statement. Instead, if the Ruby code on a line is a complete expression, the line ending signifies the end of the statement. If the line ends with a + or other operator, or a backslash character, the statement is split into multiple lines.","title":"15.5 Whitespace and Line Endings"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#156-comments","text":"Ruby ignores everything that is marked as a comment. Use comments for notes to yourself or other programmers. # This is a comment. You can also turn code into comments if you don\u2019t want the code to run. This is a common trick when you want to \u201cturn off\u201d some part of your code but you don\u2019t want to delete it just yet, because you are trying out alternatives.","title":"15.6 Comments"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#157-the-heart-of-programming","text":"Three principles are at the heart of all programming: syntax conditional execution transformation Computers allow no ambiguity. Code must exactly follow the syntax of a language. Typos, guesses, and code that is almost-but-not-quite right will simply fail, often without any helpful error messages. Computers seem intelligent because they can execute code conditionally . You can write a program so that given one set of conditions, certain parts of the code will execute, and given different conditions, other parts of the code will execute. Lastly, programs are written to transform abstractions from one form to another. That\u2019s why computer programs look like math. When we learn simple arithmetic, we learn we can take the symbols for numbers and add them together to make a different number. Computer programs do more than add numbers; a program can transform words and other abstractions.","title":"15.7 The Heart of Programming"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#158-assignment","text":"In Ruby, like many other programming languages, the equals sign indicates we are assigning a value. name \\= 'Foobar Kadigan' Assignment is the first step to transformation. Here \u2019Foobar Kadigan\u2019 is a string of letters. The equals sign is the assignment operator. And name is a variable that stores the value so it can be easily reused. We don\u2019t have to type \u2019Foobar Kadigan\u2019 every time we need a name; we can use name instead. Just as we can assign a value to a variable, we can reassign a new value whenever we want. That is why we call them variables; the value can vary. name \\= 'Mr. Foobar Kadigan' Variables can be assigned strings of letters, numbers, or anything else. \u201cAnything else\u201d is very broad because we can use Ruby to make complex structures that contain data and also \u201cdo work.\u201d These complex structures are objects and we say that Ruby is object-oriented because it is easy to work with objects in Ruby.","title":"15.8 Assignment"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#159-object-oriented-terminology","text":"Software architects use a common vocabulary to talk about programming languages: class instance or object method attribute or property inheritance class hierarchy There are three ways to learn what these words mean. You can memorize the definitions. You can write code and intuitively grasp the meanings. Or you can gain an understanding by applying metaphors.","title":"15.9 Object-Oriented Terminology"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1591-houses","text":"For example, some programming textbooks attempt to explain a class like this: A blueprint for a house design is like a class definition . All the houses built from that blueprint are objects of a class we could call House.","title":"15.9.1 Houses"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1592-vehicles","text":"Or: The concept of \u201cvehicle\u201d is like a class . Vehicles can have attributes , like color or number of doors. They have behavior, or methods , like buttons that turn on lights or honk a horn. The concepts of \u201ctruck\u201d or \u201ccar\u201d are also classes, inheriting common characteristics from a superclass \u201cvehicle.\u201d The blue car in your driveway with four doors is an object, a particular instance of the class \u201ccar.\u201d","title":"15.9.2 Vehicles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1593-cookies","text":"I like the cookie metaphor the best. A class definition is like a cookie cutter. Bits in the computer memory are like cookie dough. The cookie cutter makes as many individual cookies as you want. Each cookie is an instance of the Cookie class, with the same shape and size as the others. Cookies are objects . You can decorate each cookie with sprinkles, which are attributes that are unique to each instance. Some cookies get red sprinkles, some get green, but the shape remains the same. Running a program is like baking. The cookies change state from raw to cooked. Sticking a toothpick in a cookie is like calling a method . The method returns a result that tells you about the state: Is it done?","title":"15.9.3 Cookies"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1594-limitations-of-metaphors","text":"Metaphors are imperfect. If baking was like running a program, all the cookies would disappear as soon as the oven was turned off. When a software program contains a \u201ccar\u201d model, it doesn\u2019t fully model cars in the physical world. It represents an abstraction of characteristics a programmer deems significant. Let\u2019s make a model for a Person that contains an attribute Gender. What values are possible for the attribute Gender? For many years, Facebook offered two choices, male and female. In 2014, Facebook suddenly offered a choice of over fifty gender terms. As Sarah Mei discusses in a blog post, Why Gender is a Text Field on Diaspora , your assumptions have consequences when you build a model. Most classes in software APIs don\u2019t model anything in the real world. They typically represent an abstraction, like an Array or a Hash, which inherits characteristics from another abstraction, for example, a Collection. Given the limitations of metaphors, maybe it is easier to simply say that software allows us to create abstractions that are \u201cmade real\u201d and then manipulated and transformed. Terminology such as class and instance describe the abstractions and the relationships among them.","title":"15.9.4 Limitations of Metaphors"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1595-definitions","text":"Here are definitions for some of the terms we encounter when we consider Rails from the perspective of a software architect: class an abstraction that encapsulates data and behavior class definition written code that describes a class instance or object a unique copy of a class that exists only while a program is running *inheritance a way to make a class by borrowing from another class class hierarchy classes that are related by inheritance method a command that returns data from an object *attribute or property data that can be set or retrieved from the object variable a name that can be assigned a value or object expression or statement*** any combination of variables, classes, and methods that returns a result Some of these terms are abstractions that are \u201cmade real\u201d in the Ruby API (such as class and method); others are just terms that describe code, much like we use terms such as \u201cadjective\u201d or \u201cnoun\u201d to talk about the grammar of the English spoken language.","title":"15.9.5 Definitions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1510-classes","text":"You don\u2019t have to create classes to program in Ruby. If you only write simple programs, you won\u2019t need classes. Classes are used to organize your code and make your software more modular. For the software architect, classes make it possible to create a structure for complex software programs. To use Rails, you\u2019ll use the classes and methods that are defined in the Rails API. There is one class at the apex of the Ruby class hierarchy: BasicObject . BasicObject is a very simple class, with almost no methods of its own. The Object class inherits from BasicObject . All classes in the Ruby and Rails APIs inherit behavior from Object . Object provides basic methods such as nil? and to_s (\u201cto string\u201d) for every class that inherits from Object . We create a class Example and inherit from Object with the < \u201cinherits from\u201d operator: class Example < Object . . . end The end statement indicates all the preceding code is part of the Example class. In Ruby, all classes inherit from the Object class, so we don\u2019t need to explicitly subclass from Object as we do here. The example just shows it for teaching purposes. Here is the Example class without the explicit subclassing from Object : class Example . . . end Much of the art of programming is knowing what classes are available in the API and deciding when to subclass to inherit useful methods.","title":"15.10 Classes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1511-methods","text":"Classes give organization and structure to a program. Methods get the work done. Any class can have methods. Methods are a series of expressions that return a result (a value). We say methods describe the class behavior. A method definition begins with the keyword def and (predictably) ends with end . def backwards_name @name.reverse end Initializing the object and calling the method returns a result: ex \\= Example.new('Daniel',nil) my_backwards_name \\= ex.backwards_name \\=> leinaD We can also override a method from the parent class. def to_s @name end Here we are overriding the to_s (\u201cto string\u201d) method from the parent Object class. Ordinarily, the to_s method returns the object\u2019s class name and an object id. Here we will return the string assigned to the variable @name . Most times you won\u2019t override the to_s (\u201cto string\u201d) method. This example shows how you can override any method inherited from a parent class.","title":"15.11 Methods"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1512-dot-operator","text":"The \u201cdot\u201d is the method operator. This tiny punctuation symbol is a powerful operator in Ruby. It allows us to call a method to get a result. Sometimes we say we send a message to the object when we invoke a method, implying the object will send a result. Some classes, such as Date , provide class methods which can be called directly on the class without instantiating it first. For example, you can run this in the Rails console: Date.today \\=> Tue, 15 Oct 2013 More often, methods are called on variables which are instances of a class. For example: birthdate \\= Date.new(1990, 12, 22) \\=> Sat, 22 Dec 1990 birthmonth \\= birthdate.month \\=> 12 We can apply method chaining to objects. For example, String has methods reverse and upcase (among many others). We could write: nonsense \\= 'foobar' \\=> \"foobar\" reversed \\= nonsense.reverse \\=> \"raboof\" capitalized \\= reversed.upcase \\=> \"RABOOF\" It is easier to use method chaining and write: 'foobar'.reverse.upcase \\=> \"RABOOF\" Classes create a structure for our software programs and methods do all the work.","title":"15.12 Dot Operator"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#15121-question-and-exclamation-methods","text":"You\u2019ll see question marks and exclamation points (sometimes called the \u201cbang\u201d character) used in method names. These characters are simply a naming convention for Ruby methods. The question mark indicates the method will return a boolean value (true or false). The bang character indicates the method is \u201cdangerous.\u201d In some cases it means the method will change the object rather just return a result. In Rails an exclamation point often means the method will throw an exception on failure rather than failing silently.","title":"15.12.1 Question and Exclamation Methods"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1513-initialize-method","text":"Objects are created from classes before they are used. As I suggested earlier, class definitions are cookie cutters; the Ruby interpreter uses them to cut cookies. When we call the new method, we press the cookie cutter into the dough and get a new object. All the cookies will have the same shape but they can be decorated differently, by sprinkling attributes of different values. The initialize method is one of the ways we sprinkle attributes on our cookie. def initialize(name,date) When we want to use an Example object and assign it to a variable, we will instantiate it with Example.new(name,date) . The new method calls the initialize method automatically. If we don\u2019t define an initialize method, the new method still works, inherited from Object , so we can always instantiate any class.","title":"15.13 Initialize Method"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1514-method-parameters","text":"Methods are useful when they operate on data. If we want to send data to a method, we define the method and indicate it will accept parameters . Parameters are placeholders for data values. The values that are passed to a method are arguments . \u201cParameters\u201d are empty placeholders and \u201carguments\u201d are the actual values. In practice, \u201cparameters\u201d and \u201carguments\u201d are terms that are used interchangeably and not many developers will notice if you mix up the terms. Our initialize method takes name and date arguments: def initialize(name,date) Ruby is clever with method parameters. You can define a method and specify default values for parameters. You can also pass extra arguments to a method if you define a method that allows optional parameters. This makes methods very flexible. We separate our parameters with commas. For readability, we enclose our list of parameters in parentheses. In Ruby, parentheses are always optional but they often improve readability.","title":"15.14 Method Parameters"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1515-variable","text":"In Ruby, everything is an object. We can assign any object to a variable. The variable works like an alias. We can use a variable anywhere as if it were the assigned object. The variable can be assigned a string, a numeric value, or an instance of any class (all are objects). name You can assign a new value to a variable anywhere in your method. You can assign a different kind of object if you want. You can take away someone\u2019s name and give them a number. We can create a variable player , assign it the string \u2019Jackie Robinson\u2019 , replace the value with an integer 42 , or even a date such as Date.new(1947,4,15) .","title":"15.15 Variable"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#15151-symbol","text":"Obviously, we see many symbols when we read Ruby code, such as punctuation marks and alphanumeric characters. But symbol has a specific meaning in Ruby. It is like a variable, but it can only be assigned a value once. After the initial assignment, it is immutable ; it cannot be changed. You will recognize a symbol by the colon that is always the first character. :name Symbols are efficient and fast because the Ruby interpreter doesn\u2019t have to work to check their current values. You\u2019ll often see symbols used in Rails where you might expect a variable.","title":"15.15.1 Symbol"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1516-attributes","text":"In an object, methods do the work and data is stored as variables. We can use the initialize method to input data to the object. We can\u2019t access data in variables from outside the object unless it is exposed as attributes . Classes can have attributes, which we can \u201cset\u201d and \u201cget.\u201d That is, we can establish a value for an attribute and retrieve the value by specifying the attribute name. Attributes are a convenient way to push data to an object and pull it out later. In Ruby, attributes are also called properties. Here we use the attr_accessor directive to specify that we want to expose honorific , name and date attributes. attr_accessor :honorific attr_accessor :name attr_accessor :date If we use attr_accessor to establish attributes, we can use the attribute names as methods. For example, we could write: ex \\= Example.new('Daniel',nil) my_name \\= ex.name In Ruby, attributes are just specialized methods that expose data outside the object.","title":"15.16 Attributes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1517-instance-variable","text":"Inside an object, an ordinary variable only can be used within the method in which it appears. If you use a variable with the same name in two different methods, it will have a different value in each method. The scope of a variable is limited to the method in which it is used. Often you want a variable to be available throughout an instance, within any method. You can declare an instance variable by using an @ (at) sign as the first character of the variable name. The instance variable can be used by any method after the class is instantiated. @name \\= name The values assigned to instance variables are unique for every instance of the class. If you create multiple instances of a class, each will have its own values for its instance variables. Here we create two instances of the Example class. The @name instance variable will be \u201cDaniel\u201d in the first instance and \u201cFoobar\u201d in the second instance. ex1 \\= Example.new('Daniel',nil) ex2 \\= Example.new('Foobar',nil) An instance variable is not visible outside the object in which it appears; but when you create an attr_accessor , it creates an instance variable and makes it accessible outside the object.","title":"15.17 Instance Variable"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#15171-instance-variables-in-rails","text":"In a Rails controller, you\u2019ll often see a model assigned to an instance variable. Earlier we saw @owner = Owner.new when we instantiated an Owner model. We use an instance variable when we want a model to be available to the view template. Rails beginners learn the simple rule that you have to use the @ (at) sign if you want a variable to be available in the view. Intermediate Rails developers learn that the variable with the @ (at) sign is called an instance variable and is only available within the scope of the instance (practically speaking, to other methods in the class definition). That leads to a question: Why is an instance variable available inside a view? There is a good reason. A Rails view is NOT a separate class. It is a template and, under the hood, it is part of the current controller object. From the viewpoint of a programmer, a Rails controller and a view are separate files, segregated in separate folders. From the viewpoint of a software architect, the controller is a single object that evaluates the template code, so an instance variable can be used in the view file. This example shows us that the programmer and the software architect have different perspectives on a Rails application. Understanding Rails requires an integration of multiple points of view.","title":"15.17.1 Instance Variables in Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1518-double-bar-equals-operator","text":"I\u2019ve suggested that the best way to get help is to use Google or Stack Overflow to look for answers. But that\u2019s difficult when you don\u2019t know what symbols are called. Try googling \u201c||=\u201d and you\u2019ll get no results. Instead, try googling \u201cbar bar equals ruby\u201d or \u201cdouble pipe equals ruby\u201d and you\u2019ll find many explanations of the \u201cor equals\u201d operator. This is an example of mysterious shorthand code you\u2019ll often find in Rails. \u201d||=\u201d is used for conditional assignment. In this case, we only assign a value to the variable if no value has been previously assigned. @honorific ||= 'Esteemed' It is equivalent to this conditional expression: if not x x \\= y end Conditional assignment is often used to assign a \u201cdefault value\u201d when no other value has been assigned.","title":"15.18 Double Bar Equals Operator"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1519-conditional","text":"Conditional logic is fundamental to programming. Our code is always a path with many branches. When the Ruby interpreter encounters an if keyword, it expects to find an expression which evaluates as true or false (a boolean ). If the expression is true, the statements following the condition are executed. If the expression is false, any statements are ignored, unless there is an else , in which case an alternative is executed. if date.month \\== 12 . . . end Sometimes you\u2019ll see unless instead of if , which is a convenient way of saying \u201cexecute the following if the condition is false.\u201d In Ruby, the conditional expression can be a simple comparison, as illustrated above with the == (double equals) operator. Or if can be followed by a variable that has been assigned a boolean value. Or you can call a method that returns a boolean result.","title":"15.19 Conditional"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1520-ternary-operator","text":"A basic conditional structure might look like this: if date.nil? @date \\= Date.today else @date \\= date end We test if date is undefined (nil). If nil, we assign today\u2019s date to the instance variable @date . If date is already assigned a value, we assign it to the instance variable @date . This is useful in the initialize(name,date) method in our example code because we want to set today\u2019s date as the default value for the instance variable @date if the parameter date is nil. Ruby developers like to keep their code tight and compact. So you\u2019ll see a condensed version of this conditional structure often, particularly when a default value must be assigned. This compact conditional syntax is named the ternary operator because it has three components. Here is the syntax: condition ? value_if_true : value_if_false Here is the ternary operator we use in our example code: @date \\= date.nil? ? Date.today : date This is another example of Ruby syntax that you must learn to recognize by sight because it is difficult to interpret if you have never seen it before. For more Ruby code that has been condensed into obscurity, see an article on Ruby Golf . Ruby golf is the sport of writing code that uses as few characters as possible.","title":"15.20 Ternary Operator"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1521-interpolation","text":"Rubyists love to find special uses for orthography such as hashmarks and curly braces. It seems Rubyists feel sorry for punctuation marks that don\u2019t get much use in the English language and like to give them new jobs. We already know that we can assign a string to a variable: name \\= 'Foobar Kadigan' We can also perform \u201cstring addition\u201d to concatenate strings. Here we add an honorific, a space, and a name: @honorific \\= 'Mr.' @name \\= 'Foobar Kadigan' titled_name \\= @honorific + ' ' + @name \\=> \"Mr. Foobar Kadigan\" Single quote marks indicate a string. In the example above, we enclose a space character within quote marks so we add a space to our string. You can eliminate the ungainly mix of plus signs, single quote marks, and space characters in the example above. Use double quote marks and you can perform interpolation , which gives a new job to the hashmark and curly brace characters: @honorific \\= 'Mr.' @name \\= 'Foobar Kadigan' titled_name \\= \"#{@honorific} #{@name}\" \\=> \"Mr. Foobar Kadigan\" The hashmark indicates any expression within the curly braces is to be evaluated and returned as a string. This only works when you surround the expression with double quote marks. Interpolation is cryptic when you first encounter the syntax, but it streamlines string concatenation.","title":"15.21 Interpolation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1522-access-control","text":"Any method you define will return a result. Sometimes you want to create a method that only can be used by other methods in the same class. This is common when you need a simple utility method that is used by several other methods. Any methods that follow the keyword private should only be used by methods in the same class (or a subclass). private You often see private methods in Rails. Ruby provides a protected keyword as well, but the difference between protected and private is subtle and protected is seldom seen in Rails applications.","title":"15.22 Access Control"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1523-hash","text":"Our example code includes a private method named famous_birthdays that returns a collection of names and birthdays of famous musicians. Computers have always been calculation machines; they are just as important in managing collections. One important type of collection is named a Hash. A Hash is a data structure that associates a key to some value. You retrieve the value based upon its key. This construct is called a dictionary , an associative array , or a map in other languages. You use the key to \u201clook up\u201d a value, as you would look up a definition for a word in a dictionary. You\u2019ll recognize a Hash when you see curly braces (again, Rubyists give a job to under-utilized punctuation marks). birthdays \\= { 'Ludwig van Beethoven' \\=> Date.new(1770,12,16), 'Dave Brubeck' \\=> Date.new(1920,12,6), 'Buddy Holly' \\=> Date.new(1936,9,7), 'Keith Richards' \\=> Date.new(1943,12,18) } Rubyists also like to create novel uses for mathematical symbols. The combination of an = (equals) sign and > (greater than) sign is called a hashrocket . The => (hashrocket) operator associates a key and value pair in a Hash. You\u2019ll often see hashrockets in code written before Ruby 1.9. Ruby 1.9 introduced a new syntax using colons instead of hashrockets. Whether with colons or hashrockets, you\u2019ll often see Hashes used in Rails. With Ruby 1.9 and later, here\u2019s how we associate key and value pairs in a Hash: birthdays \\= { beethoven: Date.new(1770,12,16), brubeck: Date.new(1920,12,6), holly: Date.new(1936,9,7), richards: Date.new(1943,12,18) } Here, instead of using a string as the key, we are using Ruby symbols, which enable faster processing. The : (colon) character associates the key and value. Ordinarily, a symbol is defined with a leading colon character. In a Hash, a trailing colon makes a string into a symbol. If you want to transform a string containing spaces into a symbol in a Hash, you can do it, though the syntax is awkward: birthdays \\= { 'Ludwig van Beethoven': Date.new(1770,12,16) }","title":"15.23 Hash"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1524-array","text":"An Array is a list. Arrays can hold objects of any data type. In fact, arrays can contain a mix of different objects. For example, an array can contain a string and another array (this is an example of a nested array ). An array can be instantiated with square brackets: born_in_december \\= [ ] We can populate the array with values when we create it: my_list \\= ['apples', 'oranges'] If we don\u2019t want to use quote marks and commas to separate strings in a list, we can use the %w syntax: my_list \\= %w( apples oranges ) We can add new elements to an array with a push method: my_list \\= Array.new \\=> [] my_list.push 'apples' \\=> [\"apples\"] my_list.push 'oranges' \\=> [\"apples\", \"oranges\"] In our example code, we use the << shovel operator to add items to the array: born_in_december << name A Ruby array has close to a hundred available methods, including operations such as size and sort . See the Ruby API for a full list.","title":"15.24 Array"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1525-iterator","text":"Of all the methods available for a Ruby collection such as Hash or Array, the iterator may be the most useful. You\u2019ll recognize an iterator when you see the each method applied to a Hash or Array: famous_birthdays.each The each keyword is always followed by a block of code. Each item in an Array, or key-value pair in a Hash, is passed to the block of code to be processed.","title":"15.25 Iterator"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1526-block","text":"You can recognize a block in Ruby when you see a do ... end structure. A block is a common way to process each item when an iterator such as each is applied to a Hash or Array. In our example, we iterate over the famous_birthdays hash: famous_birthdays.each do |name, date| . . . end Within the two pipes (or bars), we assign the key and value to two variables. The block is like an unnamed method. The two variables are available only within the block. As each key-value pair is presented by the iterator, the variables are assigned, and the statements in the block are executed. In our example code, we evaluate each date in the famous_birthdays hash to determine if the musician was born in December. When we find a December birthday, we add the name of the musician to the born_in_december array: famous_birthdays.each do |name, date| if date.month \\== 12 born_in_december << name end end When you use a block within a method, any variable in your method is available within the block. That\u2019s why we can add name to the array born_in_december . Computer scientists consider a block to be a programming language construct called a closure . Ruby has other closures, including the proc (short for procedure) and the lambda . Though blocks are common you\u2019ll seldom see procs or lambdas in ordinary Rails code. They are more common in the Rails source code where advanced programming techniques are used more frequently. The key point to know about a block (or a proc or a lambda) is that it works like a method. Though you don\u2019t see a method definition, you can use a block to evaluate a sequence of statements and obtain a result.","title":"15.26 Block"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1527-rails-and-more-keywords","text":"We\u2019ve looked at only a few of the keywords and constructs you will see in Ruby code. The exercise has improved your Ruby literacy, so you\u2019ll have an easier time reading Ruby code. Nothing in the exercise is Rails. The example code only uses keywords from the Ruby API. Rails has its own API, with hundreds of classes and methods. The Rails API uses the syntax and keywords of the Ruby language to construct new classes and create new keywords that are specific to Rails and useful for building web applications. We say Ruby is a general-purpose language because it can be used for anything. Rails is a domain-specific language (DSL) because it is used only by people building web applications (in this sense, \u201cdomain\u201d means area or field of activity). Ruby is a great language to use for building a DSL, which is why it was used for Rails. Unlike some other programming languages, Ruby easily can be extended or tweaked. For example, developers can redefine classes, add extra methods to existing classes, and use the special method_missing method to handle method calls that aren\u2019t previously defined. Software architects call this metaprogramming which simply means clever programming that twists and reworks the programming language. When you add a gem to a Rails project, you\u2019ll add additional keywords. Some of the most powerful gems add their own DSLs to your project. For example, the Cucumber gem provides a DSL for turning user stories into automated tests. Adding Rails, additional gems, and DSLs provides powerful functionality at the cost of complexity. But it all conforms to the syntax of the Ruby language. As you learn to recognize Ruby keywords and language structures, you\u2019ll be able to pick apart the complexity and make sense of any code.","title":"15.27 Rails and More Keywords"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1528-more-ruby","text":"To develop your proficiency as a Rails developer, I hope you will make an effort to learn Ruby as you learn Rails. Don\u2019t be lazy; when you encounter a bit of Ruby you don\u2019t understand, make an effort to find out what is going on. Spend time with a Ruby textbook or interactive course when you work on Rails projects.","title":"15.28 More Ruby"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#15281-collaborative-learning","text":"The best way to learn Ruby is to actually use it. That\u2019s the concept behind this site: Exercism.io With Exercism, you\u2019ll work though code exercises and get feedback from other learners.","title":"15.28.1 Collaborative Learning"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#15282-online-tutorials","text":"TryRuby.org - free browser-based interactive tutorial from Code School Codecademy Ruby Track - free browser-based interactive tutorials from Codecademy Ruby Koans - free browser-based interactive exercises from Jim Weirich and Joe O\u2019Brien Ruby in 100 Minutes - free tutorial from JumpstartLab Code Like This - free tutorials by Alex Chaffee RailsBridge Ruby - basic introduction to Ruby CodeSchool Ruby Track - instructional videos with in-browser coding exercises","title":"15.28.2 Online Tutorials"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#15283-books","text":"Learn To Program - free ebook by Chris Pine Learn To Program - expanded $18.50 ebook by Chris Pine Learn Code the Hard Way - free from Zed Shaw and Rob Sobers Beginning Ruby - by Peter Cooper Programming Ruby - by Dave Thomas, Andy Hunt, and Chad Fowler Eloquent Ruby - by Russ Olsen Books by Avdi Grimm , including Confident Ruby and Objects on Rails .","title":"15.28.3 Books"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#15284-newsletters","text":"Practicing Ruby - $8/month for access to over 90 helpful articles on Ruby RubySteps - weekly lessons by email from Pat Maddox","title":"15.28.4 Newsletters"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#15285-screencasts","text":"RubyTapas - $9/month for access to over 100 screencasts on Ruby","title":"15.28.5 Screencasts"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1529-git","text":"There\u2019s no need to save the file lib/example.rb file we created to learn Ruby. You can simply delete the file: $ rm lib/example.rb Check the Git status to make sure the file is gone: $ git status","title":"15.29 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#on-branch-master_1","text":"nothing to commit, working directory clean We\u2019ve cleaned up after our Ruby exercise. From here on, we\u2019re done with silly code examples. No more fooling around. With the next chapter, we start building a real-world Rails website.","title":"On branch master"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-16-layout-and-views","text":"In previous chapters we created a dynamic home page and learned techniques for troubleshooting. In this chapter we\u2019ll look closely at view files, particularly the application layout, so we can organize the design of our web pages. We\u2019ll also learn how to add a CSS stylesheet to improve the graphic design of our web pages. This chapter covers a lot of ground, so take a break before jumping in, or pace yourself to absorb it all.","title":"Chapter 16 Layout and Views"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#161-template-languages","text":"HTML is intended for markup, which means applying formatting to a text file. For a web application, ordinary HTML is not sufficient; we need to mix in Ruby code. We\u2019ll use a templating language that gives us a syntax for mixing HTML tags and Ruby code. The Ruby code will be processed by a templating engine built into Rails. The output will be pure HTML sent to the browser. The most popular templating language available for Rails is ERB , Embedded Ruby, which is the Rails default. In the \u201cConcepts\u201d chapter in Book One, you learned that components of Rails can be mixed for different \u201cstacks.\u201d Some developers substitute Haml or Slim for ERB. We\u2019ll use ERB in this book because it is the most popular.","title":"16.1 Template Languages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#162-introducing-the-application-layout","text":"We\u2019ve already created the view file for our home page. The file app/views/visitors/new.html.erb looks like this:","title":"16.2 Introducing the Application Layout"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#163-where-did-all-the-extra-html-come-from","text":"The final HTML file is more than twice the size of the view file. The additional tags come from the default application layout file. Rails has combined the Visitors#New view with the default application layout file. To be precise, the new method in the Visitors controller creates the home page by combining two files: the application layout file app/views/layouts/application.html.erb the Visitors#New template in the file app/views/visitors/new.html.erb We say Rails \u201crenders\u201d (or \u201cdelivers\u201d) a new view by combining two files. Let\u2019s examine the application layout file. Open the file app/views/layouts/application.html.erb : LearnRails <%= csrf_meta_tags %> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %> < %= yield %> Static pages delivered from the public folder do not use the default application layout. But every page generated by the model-view-controller architecture in the app/ folder incorporates the default application layout, unless you specify otherwise. The default application layout is where you put HTML that you want to include on every page of your website. Remember when we looked at the hidden code in the controller that renders a view? The controller uses the render method to combine the view file with the application layout. Here\u2019s the Visitors controller, again, with the hidden render method revealed: class VisitorsController < ApplicationController def new @owner \\= Owner.new render 'visitors/new' end end The render method combines the app/views/visitors/new.html.erb view file with the app/views/layouts/application.html.erb application layout. Alternatively, you could tell the controller to render the view without any application layout: render 'visitors/new', :layout \\=> false Or you could specify an alternative layout file, for example app/views/layouts/special.html.erb : render 'visitors/new', :layout \\=> 'special' An alternative layout can be useful for special categories of pages, such as administrative pages or landing pages. We won\u2019t use alternative layouts in this tutorial application, but it\u2019s good to know they are an option. The reference RailsGuides: Layouts and Rendering in Rails explains more about using alternative layouts.","title":"16.3 Where did all the extra HTML come from?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#164-yield","text":"How does the render method insert the view file in the application layout? How do the two files get combined? Notice that the default application layout contains the Ruby keyword yield . . . . <%= yield %> . . . The yield keyword is replaced with a view file that is specific to the controller and action, in this case, the app/views/visitors/new.html.erb view file. The content from the view is inserted where you place the yield keyword. The yield keyword pulls in another view file.","title":"16.4 Yield"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#165-yield-variations","text":"We won\u2019t do it, but you could also use the yield keyword to insert a sidebar or a footer. Rails provides ways to insert content into a layout file at different places. The content_for method is helpful when your layout contains distinct regions such as sidebars and footers that should contain their own blocks of content. For example, you could create an application layout that includes a sidebar. This is just an example, so don\u2019t add it to the application you are building: LearnRails <%= csrf_meta_tags %> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %> < %= yield %> < %= yield :sidebar %> This view file provides both the main content and a sidebar: <% content_for :sidebar do %>","title":"16.5 Yield Variations"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#166-erb-delimiters","text":"Earlier, we saw ERB <%= ... %> delimiters allow us to insert Ruby expressions which are replaced by the result of evaluating the code. Here is an example that displays the number 4 <%= 2 + 2 %> Look closely and you\u2019ll see this ERB delimiter is slightly different: <% 3.times do %> list item <% end %> An ERB delimiter that does not contain the = (equals) sign will execute Ruby code but will not display the result. It is commonly used to add Ruby blocks to HTML code, so you\u2019ll often see do and end statements within ERB <% ... %> delimiters. The example above will create three list items, like this: list item list item list item A third version of the ERB delimiter syntax is rarely seen: <%# this is a comment %> It is only used for adding comments. The expression within the ERB <%# ... %> delimiters will not execute and will not appear when the page is output as HTML.","title":"16.6 ERB Delimiters"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#167-introducing-view-helpers","text":"We can use ERB delimiters to create Rails view helpers . We\u2019ve seen how ERB delimiters can enclose Ruby code. In the application layout file, the <%= ... %> delimiters don\u2019t include anything that looks like Ruby code. For example, we see <%= csrf_meta_tags %> which seems to be neither HTML nor anything from the Ruby API. In fact, this expression is Ruby code, but it is from the Rails API and only found in Rails applications. Ruby is an ideal choice for a web application development platform such as Rails because it can easily be used to create a domain-specific language (or DSL ). Much of Rails is a domain-specific language. The Smalltalk programming language was famous for its slogan \u201cCode should read like a conversation.\u201d Ruby, which borrows much from Smalltalk, makes it easy to add new words to the conversation. We can add new keywords that produce complex behaviour, creating entire new APIs such as Rails. Ruby makes it easy for the Rails core team to add keywords such as csrf_meta_tags that are additions to the Ruby language. In this case, Ruby\u2019s ability to produce a domain-specific language gives us Rails view helpers . Think of Rails view helpers as \u201cmacros to generate HTML.\u201d You may have used macros to automate a series of commands in World of Warcraft or other games. If you\u2019re an office worker, you may have used macros in Microsoft Word or Excel. A Rails view helper is a keyword that expands into a longer string of HTML tags and content. In this case, the csrf_meta_tags view helper expands into two lines of HTML: Why do we need this cryptic code? It turns out that almost any website that accepts user input via a form is vulnerable to a security bug (an exploit ) named a cross-site request forgery . To prevent rampant CSRF exploits, the Rails core team includes the csrf_meta_tags view helper in the default application layout. Rails provides a number of similar features that make websites more secure. A Rails view file becomes much less mysterious when you realize that many of the keywords you see are view helpers. Strange new keywords may be part of the Rails API. Or they may be provided by gems you\u2019ve added (gem developers often use the Ruby DSL capability to create new keywords). Think of it this way: Ruby gives developers the power to create an unlimited number of new \u201cHTML tags.\u201d These tags are not really HTML because they are not part of the HTML specification. But they serve as shortcuts to produce complex snippets of HTML and content. Now that we\u2019ve learned about view helpers, we can start building our default application layout.","title":"16.7 Introducing View Helpers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#168-the-rails-layout-gem","text":"Every Rails application needs a well-designed application layout. The Rails default starter application, which we get when we run rails new , provides a barebones application layout. It is purposefully simple so developers can add the code they need to accommodate any front-end framework (we\u2019ll look closely at front-end frameworks in the next chapter). In this chapter we\u2019ll start with a simple application layout file, adding a little CSS for simple styling. In the next chapter, we\u2019ll upgrade the application layout file to use the Bootstrap front-end framework. To make it easy, we\u2019ll use the rails_layout gem to generate files for an application layout. In this chapter, we\u2019ll use the rails_layout gem to create our basic layout and CSS files. In the next chapter, we\u2019ll use the rails_layout gem to create layout files for Bootstrap. In your Gemfile , you\u2019ve already added: gem 'rails_layout' and previously run $ bundle install . Rails provides the rails generate command to run simple scripts that are packaged into gems. The rails_layout gem uses the rails generate command to set up files we need. Run: $ rails generate layout:install simple --force The \u2013force argument will force the gem to replace the existing app/views/layouts/application.html.erb file. If you have the app/views/layouts/application.html.erb file open in your text editor, it will change. The rails_layout gem will rename the file: app/assets/stylesheets/application.css to: app/assets/stylesheets/application.css.scss The gem will add (or modify) five files: app/views/layouts/application.html.erb app/assets/stylesheets/simple.css app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/_navigation_links.html.erb Examining these files closely will reveal a great deal about the power of Rails. We\u2019ll dedicate the rest of this chapter to exploring the contents of these files.","title":"16.8 The Rails Layout Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#169-basic-boilerplate","text":"Open the file app/views/layouts/application.html.erb : <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content= \"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> Some of this code is already familiar. You\u2019ll recognize the standard HTML DOCTYPE , <head> , and <body> tags. We\u2019ve already discussed the yield keyword. We\u2019ve seen the <%= ... %> delimiters surrounding the csrf_meta_tags view helper: csrf_meta_tags - generates <meta> tags that prevent cross-site request forgery The rest of the file may be unfamiliar. We\u2019ll examine it line by line.","title":"16.9 Basic Boilerplate"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1610-adding-boilerplate","text":"Webmasters who build static websites are accustomed to setting up web pages with \u201cboilerplate,\u201d or basic templates for a standard web page. The well-known HTML5 Boilerplate project has been recommending \u201cbest practice\u201d tweaks to web pages since 2010. Very few of the HTML5 Boilerplate recommendations are relevant for Rails developers, as Rails already provides almost everything required. We\u2019ll discuss one important boilerplate item and a few \u201cnice to have\u201d extras. If you want to learn more, the article HTML5 Boilerplate for Rails Developers looks at the recommendations.","title":"16.10 Adding Boilerplate"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16101-viewport","text":"The viewport metatag improves the presentation of web pages on mobile devices. Setting a viewport tells the browser how content should fit on the device\u2019s screen. The tag is required for either Bootstrap or Zurb Foundation front-end frameworks. The viewport metatag looks like this: Apple\u2019s developer documentation on Configuring the Viewport provides details.","title":"16.10.1 Viewport"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16102-title-and-description","text":"If you want to maximize traffic to your website, you should make your web pages search-engine friendly. That means adding title and description metatags. Google uses contents of the title tag to display titles in search results. And it will sometimes use the content of a description metatag in search results snippets. See Google\u2019s explanation of how it uses Site Title and Description . Good titles and descriptions improve clickthrough from Google searches. Title and description looks like this: <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content=\"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> The rails_layout gem has created a default title and description based on our project name. Later in the tutorial, we\u2019ll see how to use a content_for statement to set a title and description for each individual page. The code is complex if you haven\u2019t seen advanced Ruby before. It uses the Ruby ternary operator which maximizes compactness at the price of introducing obscurity. You\u2019ll recall from the \u201cJust Enough Ruby\u201d chapter that it is a fancy conditional statement that says, \u201cif content_for?(:title) is present in the view file, use yield(:title) to include it, otherwise just display \u2018Learn Rails\u2019.\u201d","title":"16.10.2 Title and Description"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1611-asset-pipeline","text":"You may have noticed these Rails helper methods: stylesheet_link_tag javascript_include_tag These are tags that add CSS and JavaScript to the web page using the Rails asset pipeline . The Rails asset pipeline utility is one of the most powerful features of the platform. It offers convenience to the developer and helps organize an application; more importantly, it improves the speed and responsiveness of any complex website. If you\u2019re going to do any front-end development with CSS or JavaScript in Rails, you must understand the Rails asset pipeline. Here\u2019s how it works.","title":"16.11 Asset Pipeline"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16111-assets-without-rails","text":"When building non-Rails websites, webmasters add JavaScript to a page using the <script> tag. For every JavaScript file, they add an additional <script> tag, so a page HEAD section looks like this: Page that uses multiple JavaScript files The same is true for CSS files in non-Rails websites. You add a <link> tag for each stylesheet file. With multiple stylesheets, the HEAD section of your application layout might look like this: Page that uses multiple CSS files If you want to handle CSS and JavaScript without Rails, you can place your files in the public folder. If you do so, every time you add a JavaScript or CSS file, you must modify the application layout file. Instead, use the asset pipeline and simplify this.","title":"16.11.1 Assets Without Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16112-assets-with-rails","text":"The asset pipeline consists of two folders: app/assets/javascripts/ app/assets/stylesheets/ Any JavaScript and CSS file you add to these folders is automatically added to every page. In development, when the web browser makes a page request, the files in the asset pipeline folders are combined together and concatenated as single large files, one for JavaScript and one for CSS. If you examine the application layout file, you\u2019ll see the tags that perform this service: <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> The HTML delivered to the browser looks like this: Using the asset pipeline, there is no need to modify the application layout file each time you create a new JavaScript or CSS file. Create as many files as you need to organize your JavaScript or CSS code and, in production, you\u2019ll automatically get one single file delivered to the browser. In development mode, Rails continues to deliver multiple files for easier debugging. In production, there\u2019s a big performance advantage with the asset pipeline. Requesting files from the server is a time-consuming operation for a web browser, so every extra file request slows down the browser. The Rails asset pipeline eliminates the performance penalty of multiple <script> or <link> tags. The Rails asset pipeline also compresses JavaScript and CSS files for faster page loads. The asset pipeline is an example of a Rails convention that helps developers build complex websites. It is not needed for a simple website that uses a few JavaScript or CSS files. But it is beneficial on bigger projects. The asset pipeline has limitations, especially for projects with complex front-end JavaScript. Rails developers who integrate JavaScript front-end frameworks such as React or Angular often choose not to use the asset pipeline. Instead they rely on JavaScript tooling such as Webpack to manage complex JavaScript assets. Now that you understand the purpose of the Rails asset pipeline, let\u2019s look at more of the code in the default application layout file.","title":"16.11.2 Assets With Rails"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1612-navigation-links","text":"Every website needs navigation links. You can add navigation links directly to your application layout but many Rails developers prefer to create a partial template \u2013\u2013a \u201cpartial\u201d\u2013\u2013to better organize the default application layout.","title":"16.12 Navigation Links"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16121-introducing-partials","text":"A partial is similar to any view file, except the filename begins with an underscore character. Place the file in any view folder and you can use the render keyword to insert the partial. We\u2019re not going to add a footer to our tutorial application, but here is how we could do it. We\u2019d use the render keyword with a file named app/views/layouts/_footer.html.erb : <%= render 'layouts/footer' %> Notice that you specify the folder within the app/views/ directory with a truncated version of the filename. The render method doesn\u2019t want the _ underscore character or the .html.erb file extension. That can be confusing; it makes sense when you remember that Rails likes \u201cconvention over configuration\u201d and economizes on extra characters when possible. We\u2019re not going to add a footer to our application, but we will add navigation links by using a partial. First, let\u2019s learn about link helpers .","title":"16.12.1 Introducing Partials"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16122-introducing-link-helpers","text":"There\u2019s no rule against using raw HTML in our view files, so we could create a partial for navigation links that uses the HTML <a> anchor tag like this: Home About Contact Rails gives us another option, however. We can use the Rails link_to view helper instead of the HTML <a> anchor tag. The Rails link_to helper eliminates the crufty <> angle brackets and the unnecessary href=\"\" . More importantly, it adds a layer of abstraction, using the routing configuration file to form links. This is advantageous if we make changes to the location of the link destinations. Earlier, when we created a static \u201cAbout\u201d page, we first set the config/routes.rb file with a route to the \u201cAbout\u201d page: root to: redirect(\u2019/about.html\u2019) . Later we removed the static \u201cAbout\u201d page and set the config/routes.rb file with a route to the dynamic home page: root to: \u2019visitors#new\u2019 . If we used the raw HTML <a> anchor tag, we\u2019d have to change the raw HTML everywhere we had a link to the home page. Using the Rails link_to helper, we name a route and make any changes once, in the config/routes.rb file. When you use the Rails link_to helper, you\u2019ll avoid the problem of link maintenance that webmasters face on static websites. Some webmasters like to use absolute URLs, specifying a host name in the link, for example http://www.example.com/about.html . Absolute URLs are a headache when moving the site, for example from staging.example.com to www.example.com . The problem is avoided by using relative URLs, such as /about.html , about.html , or even ../about.html . But relative URLs are fragile, and moving files or directories often results in overlooked and broken links. Instead, with the Rails link_to helper, you always get the destination location specified in the config/routes.rb file.","title":"16.12.2 Introducing Link Helpers"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16123-navigation-partial","text":"Examine the app/views/layouts/application.html.erb and you\u2019ll see the use of the navigation partial. We include the navigation partial in our application layout with the expression: . . . <%= render 'layouts/navigation' %> . . . Open the file app/views/layouts/_navigation.html.erb : < %= link\\_to 'Home', root\\_path %> < %= render 'layouts/navigation\\_links' %> You\u2019ll see the link_to helper. Here the link_to helper takes two parameters. The first parameter is the string displayed as the anchor text ( \u2019Home\u2019 ). The second parameter is the route. In this case, the route root_path has been set in the config/routes.rb file. The navigation partial includes another partial, which we\u2019ll call the navigation links partial: . . . <%= render 'layouts/navigation_links' %> . . . This demonstrates that one partial can include another partial, so that partials can be \u201cnested.\u201d","title":"16.12.3 Navigation Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16124-navigation-links-partial","text":"In our simple application, there\u2019s no obvious reason to nest another partial. But we\u2019ll see in the next chapter that it is convenient, because we can isolate the complex markup required by Bootstrap from the simple list of links we need for navigation. Open the file app/views/layouts/_navigation_links.html.erb : <%# add navigation links to this file %> As we add pages to our application, we\u2019ll add links to this file. For now, we have nothing to add.","title":"16.12.4 Navigation Links Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1613-flash-messages","text":"Rails provides a standard convention to display alerts (including error messages) and other notices (including success messages), called a flash message . The name comes from the term \u201cflash memory\u201d and should not be confused with the \u201cAdobe Flash\u201d web development platform that was once popular for animated websites. The flash message is documented in the RailsGuides: Action Controller Overview . Here\u2019s a flash message you might see after logging in to an application: Figure 16.1: Flash message in Rails. It is called a \u201cflash message\u201d because it appears on a page temporarily. When the page is reloaded or another page is visited, the message disappears. Typically, you will see only one flash message on a page. But there is no limit to the number of flash messages that can appear on a page.","title":"16.13 Flash Messages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16131-creating-flash-messages","text":"Flash messages are created in a controller. For example, we can add messages to the home page by modifying the file app/controllers/visitors_controller.rb like this: class VisitorsController < ApplicationController def new @owner \\= Owner.new flash[:notice] \\= 'Welcome!' flash[:alert] \\= 'My birthday is soon.' end end If you test the application after adding the messages to the VisitorsController, you\u2019ll see two flash messages appear on the page. Rails provides the flash object so that messages can be created in the controller and displayed on the rendered web page. In this example, we create a flash message by associating the object flash[:notice] with the string \u2019Welcome!\u2019 . We can assign other messages, such as flash[:alert] or even flash[:warning] . In practice, Rails uses only :notice and :alert as flash message keys so it is wise to stick with just these.","title":"16.13.1 Creating Flash Messages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16132-flash-and-flash-now","text":"You can control the persistence of the flash message by choosing from two variants of the flash directive. Use flash.now in the controller when you immediately render a page, for example with a render :new directive. With flash.now , the message will vanish after the user clicks any links. Use the simple variant, flash , in the controller when you redirect to another page, for example with a redirect_to root_path directive. If you use flash.now before a redirect, the user will not see the flash message because flash.now does not persist through redirects or links. If you use the simple flash directive before a render directive, the message will appear on the rendered page and reappear on a subsequent page after the user clicks a link. In our example above, we really need to use the flash.now variant because the controller provides a hidden render method. Update the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @owner \\= Owner.new flash.now[:notice] \\= 'Welcome!' flash.now[:alert] \\= 'My birthday is soon.' end end Using flash.now will make sure the message only appears on the rendered page and will not persist after a user follows a link to a new page. If you ever see a \u201csticky\u201d flash message that won\u2019t go away, you need to use flash.now instead of flash .","title":"16.13.2 Flash and Flash Now"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16133-explaining-the-ruby-code","text":"If you\u2019re new to programming in Ruby, it may be helpful to learn how the flash object works. The flash object is a Ruby hash . You\u2019ll recall from the \u201cJust Enough Ruby\u201d chapter that a hash is a data structure that associates a key to some value. You retrieve the value based upon its key. This construct is called a dictionary in other languages, which is appropriate because you use the key to \u201clook up\u201d a value, as you would look up a definition for a word in a dictionary. Hash is a type of collection . Presumably, the Rails core contributors who implemented the code chose to use a collection so that a page could be given multiple flash messages. Because we have a collection with (possibly) multiple messages, we need to retrieve each message one at a time. We learned earlier that all collections support an iterator method named each . Iterators return all the elements of a collection, one after the other. The iterator returns each key-value pair, item by item, to a block . In Ruby, a block is delimited by do and end or { } braces. You can add any code to a block to process each item from the collection. Here is simple Ruby code to iterate through a flash object, outputting each flash message in an HTML div tag and applying a CSS class for styling: flash.each do |key, value| puts '' + value + '' end In this simple example, we use each to iterate through the flash hash, retrieving a key and value that are passed to a block to be output as a string. We\u2019ve chosen the variable names key and value but the names are arbitrary. In the next example, we\u2019ll use name and msg as variables for the key-value pair. The output string will appear as HTML like this: Welcome! My birthday is soon. Let\u2019s continue examining our layout files.","title":"16.13.3 Explaining the Ruby Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#16134-the-flash-messages-partial","text":"Flash messages are a very useful feature for a dynamic website. Code to display flash messages can go directly in your application layout file or you can use a partial. Examine the file app/views/layouts/_messages.html.erb : <% flash.each do |name, msg| %> <% if msg.is_a?(String) %> <%= content_tag :div, msg, :class \\=> \"flash_#{name}\" %> <% end %> <% end %> It improves on our simple Ruby example in several ways. First, the expression if msg.is_a?(String) serves as a test to make sure we only display messages that are strings. Second, we use the Rails content_tag view helper to create the HTML div . The content_tag helper eliminates the messy soup of angle brackets and quote marks we used to create the HTML output in the example above. Finally, we apply a CSS class and combine the word \u201cflash\u201d with \u201cnotice\u201d or \u201calert\u201d to make the CSS class. We include the flash messages partial in our application layout with the expression: . . . <%= render 'layouts/messages' %> . . .","title":"16.13.4 The Flash Messages Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1614-html5-elements","text":"Let\u2019s look again at the app/views/layouts/application.html.erb file. To complete our examination of the application layout file, we\u2019ll look at a few structural elements. These elements are not unique to a Rails application and will be familiar to anyone who has done front-end development. Notice the tags that are structural elements in the HTML5 specification: <header> <main> These elements add structure to a web page. The tags don\u2019t add any new behavior but make it easier to determine the structure of the page and apply CSS styles. We wrap the navigation partial in the <header> tag: < %= render 'layouts/navigation' %> The <header> tag is typically used for branding or navigation. Notice the main tag : < %= render 'layouts/messages' %> < %= yield %> We wrap our messages partial and yield expression in a <main role=\"main\"> element. The <main> tag is among the newest HTML5 elements (see the W3C specification for details). From the specification: \u201cThe main content area of a document includes content that is unique to that document and excludes content that is repeated across a set of documents such as site navigation links, copyright information, site logos.\u201d We follow the advice of the specification and wrap our unique content in the <main> tag. The specification recommends, \u201cAuthors are advised to use ARIA role=\u2019main\u2019 attribute on the main element until user agents implement the required role mapping.\u201d ARIA , the Accessible Rich Internet Applications Suite, is a specification to make web applications more accessible to people with disabilities. That means the role=\"main\" attribute is there for any web browsers that don\u2019t yet recognize the <main> tag, and may help people with disabilities. We could add a <footer> tag. It typically contains links to copyright information, legal disclaimers, or contact information. We don\u2019t have a footer in our tutorial application but you can add the <footer> tag, with additional content, if you want.","title":"16.14 HTML5 Elements"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1615-application-layout","text":"Our application layout is complete. We don\u2019t have to add anything because the rails_layout gem has created everything we need. <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content= \"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> We have the viewport metatag, a title, and a description. We have partials for navigation links and flash messages. Finally we have HTML5 structural elements. That\u2019s all we need for now. In the next chapter, we\u2019ll revise it to support styling with Bootstrap.","title":"16.15 Application Layout"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1616-simple-css","text":"So far, we\u2019ve examined four files that were added by the rails_layout gem: app/views/layouts/application.html.erb app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/_navigation_links.html.erb Let\u2019s examine the CSS file that was created by the rails_layout gem. Open the file app/assets/stylesheets/simple.css : /* * Simple CSS stylesheet for a navigation bar and flash messages. */ main { background-color: #eee; padding-bottom: 80px; width: 100%; } header { border: 1px solid #d4d4d4; background-image: linear-gradient(to bottom, white, #f2f2f2); background-color: #f9f9f9; -webkit-box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); -moz-box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); box-shadow: 0 1px 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; } ul.nav li { display: inline; } ul.nav li a { padding: 10px 15px 10px; color: #777777; text-decoration: none; text-shadow: 0 1px 0 white; } .flash_notice, .flash_alert { padding: 8px 35px 8px 14px; margin-bottom: 20px; text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5); border: 1px solid #fbeed5; -webkit-border-radius: 4px; -moz-border-radius: 4px; border-radius: 4px; font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; } .flash_notice { background-color: #dff0d8; border-color: #d6e9c6; color: #468847; } .flash_alert { background-color: #f2dede; border-color: #eed3d7; color: #b94a48; } If you already know CSS, you\u2019ll see we\u2019ve set a background color for the main section of the page. We\u2019ve also set styles for a header, navigation links, and flash messages. This book is about Rails, not CSS, so we won\u2019t examine this closely. For more on CSS, there are thousands of tutorials on the web, but I like these: Codeacademy HTML Dog Remember what we learned about the Rails asset pipeline. By default, any CSS file in the app/assets/stylesheets/ folder will be added automatically to the application.css file that is included in the default application layout. In the next chapter, we remove the app/assets/stylesheets/simple.css and use Bootstrap to supply styles for the header, navigation links, and flash messages. For now, the simple.css file adds some basic styling and layout to the application.","title":"16.16 Simple CSS"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1617-test-the-application","text":"Let\u2019s run the application to see how it looks with the new application layout. The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . If you experimented with adding flash messages \u201cWelcome\u201d and \u201cMy birthday is soon,\u201d you\u2019ll see the messages when you visit the home page. Our home page now has only one navigation link, for \u201cHome.\u201d We\u2019ll add links for \u201cAbout\u201d and \u201cContact\u201d pages soon.","title":"16.17 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1618-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"update application layout\" $ git push","title":"16.18 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-17-front-end-framework","text":"This chapter discusses front-end development and design using CSS. I\u2019ll show you how to add style to a Rails application, using Bootstrap for a simple theme. What do we mean by \u201cfront-end development\u201d? A website back end is the Rails application that assembles files that are sent to the browser, plus a database and any other server-side services. A website front end is all the code that runs in the browser. Everything that controls the appearance of the website in the browser is the responsibility of a front-end developer, including page layout, CSS stylesheets, and JavaScript code. Front-end development has grown increasingly important as websites have become more sophisticated. And front-end technology has grown increasingly complex, to the degree that front-end development has become a job for specialists. Front-end developers are primarily concerned with: markup - the layout and structure of the page style - graphic design for visual communication interactivity - browser-based visual effects and user interaction Broader concerns include: cross-browser and cross-device functionality interaction design to improve website usability accessibility for users with physical or perceptual limitations For years, front-end development was haphazard; webmasters each had their own quirky techniques. Around the time that Rails became popular, front-end developers at large companies began to share best practices and establish open source projects to bring structure and consistency to front-end development, leading to development of CSS frameworks.","title":"Chapter 17 Front-End Framework"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#171-css-frameworks","text":"Web developers began putting together \u201cboilerplate\u201d CSS stylesheets as early as 2000, when browsers first began to fully support CSS. Boilerplate CSS made it easy to reuse CSS stylesheet rules from project to project. More importantly, designers often implemented \u201cCSS reset\u201d stylesheets to enforce typographic uniformity across different browsers. Engineers at Yahoo! released the Yahoo! User Interface Library (YUI) as an open source project in February 2006 . Inspired by an article by Jeff Croft , and reacting to the huge size of the YUI library, independent developers began releasing other CSS frameworks such as the 960 grid system and the Blueprint CSS framework. There are dozens of CSS frameworks . In general, they all seek to implement a common set of requirements: An easily customizable grid Some default typography A typographic baseline CSS reset for default browser styles A stylesheet for printing More recently, with the ubiquity of smartphones and tablets, CSS frameworks support responsive web design , accommodating differences in screen sizes across a range of devices. In tandem with the development of CSS frameworks, we\u2019ve seen the emergence of JavaScript libraries and frameworks.","title":"17.1 CSS Frameworks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#172-javascript-libraries-and-frameworks","text":"JavaScript has nothing like RubyGems, a built-in package manager for code libraries, so initially there were few open source JavaScript libraries. Now there are several competing JavaScript package managers and many software libraries. Prototype was one of the first open source JavaScript libraries, created by Sam Stephenson in February 2005 to improve JavaScript support in Ruby on Rails. MooTools , Dojo , and jQuery soon followed. Of these libraries, jQuery has become the most popular, largely because of thousands of modular jQuery plug-ins that implement a wide range of effects and widgets (web page features). These plug-ins are used to add visual effects and interactivity to web pages. Examples are drop-down menus, modal windows, tabbed panels, autocompletion search forms, and sliders or carousels for images. Even without plugins, jQuery is useful as a high-level interface for manipulating the browser DOM ( document object model ), to make it easy to do things like hiding or revealing HTML elements on a page. Any Rails application can use jQuery because it is included by default in any new Rails application. Libraries such as jQuery add functionality to server-side applications, such as those built with Rails. Other JavaScript libraries serve as fully featured web application development frameworks, allowing developers to build client-side applications that run in the browser and only interact with a server to read or write data. Examples of these full-fledged JavaScript frameworks are Ember.js , AngularJS , and Backbone.js . All use a variant of the model-view-controller (MVC) software design pattern to implement single-page applications which function more like desktop or mobile applications than websites. Developers who build a single-page application with one of these frameworks often use Ruby on Rails as a back end; an MVC JavaScript framework can replace all the Rails view files. None of these JavaScript frameworks dominate web application development like Ruby on Rails, but they are gaining popularity for single-page applications. We won\u2019t look at Ember.js, AngularJS, or Backbone.js in this book; they are an advanced topic and require entire books themselves. The biggest problem with adding JavaScript to Rails is the difficult-to-maintain \u201cJavaScript soup\u201d that results from adding JavaScript to Rails views. Ember.js, AngularJS, or Backbone.js are more than is needed for simply structuring JavaScript in Rails views. But there\u2019s a newer framework that can be used to dry up JavaScript soup. It\u2019s React , a JavaScript framework developed by engineers at Facebook. Unlike AngularJS or Ember.js, React only manages views, not connections to databases or routing of requests, so it is not a full-stack framework, just a framework for the view layer. React\u2019s approach to building web pages is abstract and complex. But React is a good choice for complex interactive features, if you\u2019re determined to avoid JavaScript soup in your Rails application. We won\u2019t look at JavaScript frameworks in this book, but we will use the Bootstrap framework to manage our CSS stylesheets.","title":"17.2 JavaScript Libraries and Frameworks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#173-front-end-frameworks","text":"Front-end frameworks combine CSS and JavaScript libraries. Many elements that are found on sophisticated web pages, such as modal windows or tabs, require a combination of JavaScript and CSS. Combining CSS and JavaScript libraries in a common framework makes it possible to standardize and reuse common web page features. There are many responsive front-end frameworks to choose from, including: Bootstrap Zurb Foundation Material Design Lite Bourbon Neat Semantic UI and many others Each has its fans, though Bootstrap and Zurb Foundation are the most popular among Rails developers. Each adds a library of markup, styles, and standardized web page features such as modal windows, pagination, breadcrumbs, and navigation. Bootstrap is the best-known front-end framework. It is the result of an effort to document and share common design patterns and assets across projects at Twitter, released as an open source project in August 2011. Just ahead, we\u2019ll look at why we use Bootstrap in this book. But first, you\u2019ll need to learn about Sass.","title":"17.3 Front-End Frameworks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#174-css-preprocessing-with-sass","text":"Ordinary CSS is not a programming language. As a result, CSS rules are verbose and often repetitive. To add efficiency to CSS, Bootstrap relies on a CSS preprocessor named Sass . Sass extends CSS to give it more powerful programming language features. As a result, your stylesheets can use variables, mixins, and nesting of CSS rules, just like a real programming language. For example, in Sass you can create a variable such as $blue: #3bbfce and specify colors anywhere using the variable, such as border-color: $blue . Mixins are like variables that let you use snippets of reusable CSS. Nesting eliminates repetition by layering CSS selectors. Sass is included in any new Rails application with the default sass-rails gem.","title":"17.4 CSS Preprocessing with Sass"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#175-bootstrap-or-others","text":"Which front-end framework should you use? Bootstrap or another such as Zurb Foundation? The Bootstrap team maintains a Ruby gem that provides a drop-in version of Bootstrap for Rails. Other front-end frameworks, such as Zurb Foundation, are also available as Ruby gems. But Bootstrap has a large developer community and many more third-party projects, as evidenced by a Big Badass List of Useful Twitter Bootstrap Resources . In its sheer magnitude, this list, from Michael Buckbee and Bootstrap Hero, demonstrates the popularity of Bootstrap and the vitality of its open source community. We\u2019ll use Bootstrap here because of its sheer popularity and solid support. Before I show you how to integrate Bootstrap with your Rails application, let\u2019s briefly consider matters of design.","title":"17.5 Bootstrap or Others?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#176-graphic-design-options","text":"There are three approaches to graphic design for your Rails application. If you\u2019re well-funded and well-connected, you can put together a team or hire a freelance graphic designer to implement a unique design, built from scratch using CSS or customized from a framework such as Bootstrap or Zurb Foundation. If you\u2019ve got strong design skills, or can partner with an experienced web designer, you\u2019ll get a custom design that expresses the purpose and motif of your website. A second approach is to use Bootstrap or another CSS framework to quickly add attractive CSS styling to your application. Many developers don\u2019t have the skill or resources to customize the design. Consequently, sites that use Bootstrap look very similar. If that\u2019s your situation, it\u2019s okay, really! It\u2019s better to have a decent site with the clean look of Bootstrap than to leak ugliness onto the web. A third option is to obtain a pre-designed theme for your website. You may have visited ThemeForest or other theme galleries that offer pre-built themes for a few dollars each. These huge commercial galleries offer themes for WordPress, Tumblr, or CMS applications such as Drupal or Joomla. They don\u2019t offer themes for Rails. Your best option is to convert open source themes designed with Bootstrap. You can visit sites such as Start Bootstrap , Bootswatch , or the Themestrap gallery to find Bootstrap themes. Whether you use a prepackaged theme or design your own layout, you\u2019ll need to know how to set up a front-end framework in Rails. We\u2019ll look at setting up Bootstrap next.","title":"17.6 Graphic Design Options"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#177-bootstrap-3-or-4","text":"At the time this was written, the new Bootstrap 4 version was in alpha release. The Bootstrap 4 version is significantly different from earlier versions. It has been in alpha for testing and feedback for over a year. Many Rails developers are already using the Bootstrap 4 version but almost all themes and third-party add-ons are only available for Bootstrap 3. Eventually, the Bootstrap 4 beta and final versions will be released but until then, I recommend sticking with Bootstrap 3. As a beginner, you\u2019ll find more resources and help for Bootstrap 3. We\u2019ll use it here for this tutorial.","title":"17.7 Bootstrap 3 or 4?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#178-bootstrap-gem","text":"Bootstrap provides a standard grid for layout plus dozens of reusable components for common page elements such as navigation, forms, and buttons. More importantly, it gives CSS the kind of structure and convention that makes Rails popular for back-end development. Bootstrap is packaged as a gem. In your Gemfile , you\u2019ve already added: gem 'bootstrap-sass' and previously run $ bundle install . The bootstrap-sass gem provides the files required to integrate Bootstrap 3 with Rails. Developers who want to use the new Bootstrap 4 release will use the Bootstrap 4 gem . Rather than following the installation instructions provided in the Bootstrap documentation , we\u2019ll use the rails_layout gem to set up Bootstrap and create the files we need.","title":"17.8 Bootstrap Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#179-rails-layout-gem-with-bootstrap","text":"In the previous chapter, we used the rails_layout gem to configure the default application layout with HTML5 elements, navigation links, and flash messages. Now we\u2019ll use the rails_layout gem to set up Bootstrap and generate new files for the application layout as well as the navigation and messages partials. The new files will replace the layout files we created in the previous chapter. We\u2019ll use the generator provided by the rails_layout gem to set up Bootstrap and add the necessary files. Run: $ rails generate layout:install bootstrap3 --force With the \u2013force argument, the rails_layout gem will replace existing files. The gem will create the file: app/assets/stylesheets/1st_load_framework.css.scss and modify the files: app/assets/javascripts/application.js app/views/layouts/_messages.html.erb app/views/layouts/_navigation.html.erb app/views/layouts/application.html.erb It will also remove the file: app/assets/stylesheets/simple.css Let\u2019s examine the files to see how our application is configured to use Bootstrap.","title":"17.9 Rails Layout Gem with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1710-renaming-the-applicationcss-file","text":"The rails_layout gem renamed the app/assets/stylesheets/application.css file as app/assets/stylesheets/application.css.scss . Note the .scss file extension. This will allow you to use the advantages of an improved syntax for your application stylesheet. You learned earlier that stylesheets can use variables, mixins, and nesting of CSS rules when you use Sass. Sass has two syntaxes. The most commonly used syntax is known as \u201cSCSS\u201d (for \u201cSassy CSS\u201d), and is a superset of the CSS syntax. This means that every valid CSS stylesheet is valid SCSS as well. SCSS files use the extension .scss . The Sass project also offers a second, older syntax with indented formatting that uses the extension .sass . We\u2019ll use the SCSS syntax. You can use Sass in any file by adding the file extension .scss . The asset pipeline will preprocess any .scss file and expand it as standard CSS. For more on the advantages of Sass and how to use it, see the Sass website or the Sass Basics RailsCast from Ryan Bates. Before you continue, make sure that the rails_layout gem renamed the app/assets/stylesheets/application.css file as app/assets/stylesheets/application.css.scss . Otherwise you won\u2019t see the CSS styling we will apply.","title":"17.10 Renaming the application.css File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1711-the-applicationcssscss-file","text":"In the previous chapter, I introduced the Rails asset pipeline . Your CSS stylesheets get concatenated and compacted for delivery to the browser when you add them to this directory: app/assets/stylesheets/ The asset pipeline helps web pages display faster in the browser by combining all CSS files into a single file (it does the same for JavaScript). Let\u2019s examine the file app/assets/stylesheets/application.css.scss : /* * This is a manifest file that'll be compiled into application.css, which will include all the files * listed below. * * Any CSS and SCSS file within this directory, lib/assets/stylesheets, or any plugin's * vendor/assets/stylesheets directory can be referenced here using a relative path. * * You're free to add application-wide styles to this file and they'll appear at the bottom of the * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS * files in this directory. Styles in this file should be added after the last require_* statement. * It is generally better to create a new file per style scope. * *= require_tree . *= require_self */ The app/assets/stylesheets/application.css.scss file serves two purposes. First, you can add any CSS rules to the file that you want to use anywhere on your website. Second, the file serves as a manifest , providing a list of files that should be concatenated and included in the single CSS file that is delivered to the browser. If you are familiar with CSS syntax, it may seem odd that the relevant lines are commented out (using asterisks). These lines are not CSS, so they must be commented out so they won\u2019t be interpreted as CSS. Though they are commented out, the Rails asset pipeline reads and understands them. It\u2019s a bit of a hack, but it works.","title":"17.11 The application.css.scss File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#17111-a-global-css-file","text":"Any CSS style rules that you add to the app/assets/stylesheets/application.css.scss file will be available to any view in the application. You could use this file for any style rules that are used on every page, particularly simple utility rules such as highlighting or resetting the appearance of links. However, in practice, you are more likely to modify the style rules provided by Bootstrap. These modifications don\u2019t belong in the app/assets/stylesheets/application.css.scss file; they will go in the app/assets/stylesheets/1st_load_framework.css.scss file. In general, it\u2019s bad practice to place a lot of CSS in the app/assets/stylesheets/application.css.scss file (unless your CSS is very limited). Instead, structure your CSS in multiple files. CSS that is used on only a single page can go in a file with a name that matches the page. Or, if sections of the website share common elements, such as themes for landing pages or administrative pages, make a file for each theme. How you organize your CSS is up to you; the asset pipeline lets you organize your CSS so it is easier to develop and maintain. Just add the files to the app/assets/stylesheets/ folder.","title":"17.11.1 A Global CSS File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#17112-a-manifest-file","text":"It\u2019s not obvious from the name of the app/assets/stylesheets/application.css.scss file that it serves as a manifest file as well as a location for miscellaneous CSS rules. For most websites, you can ignore its role as a manifest file. In the comments at the top of the file, the *= require_self directive indicates that any CSS in the file should be delivered to the browser. The *= require_tree . directive (note the Unix \u201cdot operator\u201d) indicates any files in the same folder, including files in subfolders, should be combined into a single file for delivery to the browser. If your website is large and complex, you can remove the *= require_tree . directive and specify individual files to be included in the file that is generated by the asset pipeline. This gives you the option of reducing the size of the application-wide CSS file that is delivered to the browser. For example, you might segregate a file that includes CSS that is used only in the site\u2019s administrative section. In general, only large and complex sites need this optimization. The speed of rendering a single large CSS file is faster than fetching multiple files.","title":"17.11.2 A Manifest File"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1712-bootstrap-javascript","text":"Bootstrap provides both CSS and JavaScript libraries. Like the application.css.scss file, the application.js file is a manifest that allows a developer to designate the JavaScript files that will be combined for delivery to the browser. The rails_layout gem modified the file app/assets/javascripts/application.js to include jQuery and the Bootstrap JavaScript libraries: //= require jquery //= require jquery_ujs //= require turbolinks //= require bootstrap-sprockets //= require_tree . It added the directives //= require jquery and //= require jquery_ujs to make jQuery available to the application. Keep in mind that Rails 5.1 dropped jQuery and no longer includes the jquery-rails gem by default. We added the jquery-rails gem to the Gemfile (and ran bundle install ). Without the jquery-rails gem, you\u2019ll get an error when you run the application. The rails_layout command also added the directive //= require bootstrap-sprockets before //= require_tree . to enable the Bootstrap front-end framework. Some of the features offered by Bootstrap require the jQuery library which is why the rails_layout command modifies the app/assets/javascripts/application.js file.","title":"17.12 Bootstrap JavaScript"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1713-bootstrap-css","text":"The rails_layout gem added a file app/assets/stylesheets/1st_load_framework.css.scss containing: // import the CSS framework @import \"bootstrap-sprockets\"; @import \"bootstrap\"; . . . The file app/assets/stylesheets/1st_load_framework.css.scss is automatically included and compiled into your Rails application.css file by the *= require_tree . statement in the app/assets/stylesheets/application.css.scss file. The file could be named anything. However, by giving it a name beginning with \u201c1\u201d it will load before any other stylesheet files we may add later. The asset pipeline loads files in alphabetical order. We want the Bootstrap framework to load before any custom CSS files. The @import \"bootstrap\"; and @import \"bootstrap-sprockets\"; directives will import the Bootstrap CSS rules from the Bootstrap gem. You could add the Bootstrap @import code to the app/assets/stylesheets/application.css.scss file. However, it is better to have a separate app/assets/stylesheets/1st_load_framework.css.scss file. You may wish to modify the Bootstrap CSS rules; placing changes to Bootstrap CSS rules in the 1st_load_framework.css.scss file will keep your CSS better organized. In addition to the simple @import directives, the app/assets/stylesheets/1st_load_framework.css.scss contains a collection of Sass mixins. We\u2019ll look at these later in the chapter.","title":"17.13 Bootstrap CSS"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1714-using-bootstrap-css-classes","text":"Now that you\u2019ve installed Bootstrap, you have a rich library of interactive effects you can add to your pages. Take a look at the Bootstrap documentation to see your options. Here are just a few examples: buttons navigation bar alerts At a simpler level, Bootstrap provides a collection of carefully-crafted styling rules in the form of CSS classes. These are building blocks you use for page layout and typographic styling. For example, Bootstrap gives you CSS classes to set up rows and columns in a grid system. Let\u2019s take a closer look at the Bootstrap grid system.","title":"17.14 Using Bootstrap CSS Classes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#17141-bootstrap-grid","text":"The Bootstrap grid is responsive because it has \u201cbreakpoints.\u201d There are actually four grids: Extra small: browser windows 0 to 768 pixels wide (phones) Small: browser windows 768 to 992 pixels wide (tablets) Medium: browser windows 992 to 1200 pixels wide (desktops) Large: browser windows 1200 pixels and wider (large desktops) Start by designing for the extra small screen; then add classes prefixed \u201csmall,\u201d \u201cmedium,\u201d or \u201clarge\u201d if you want a different layout for larger screens. The layout will change at each breakpoint. The grid gives you 12 columns by default. You can organize your layout in horizontal and vertical sections using row and columns classes. For example, you could use Bootstrap grid classes to set up an application layout with a footer as a row with two sections: Copyright 2016 All rights reserved. The Bootstrap row class will create a horizontal break. The footer will contain two side-by-side sections. The first will be four columns wide; the second will be eight columns wide. Here\u2019s the same footer with a responsive design: Copyright 2016 All rights reserved. On desktops and tablets, the footer will contain two side-by-side sections. On phones, each section will expand to take the full browser width, appearing as stacked rows. To better understand the grid system with all its options, see the documentation for the Bootstrap grid .","title":"17.14.1 Bootstrap Grid"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#17142-presentational-versus-semantic-styles","text":"There are two schools of thought among front-end developers. Some developers are content to use Bootstrap\u2019s classes directly in Rails view files. For these developers, the Bootstrap classes are both practical and descriptive, making it easy for any developer who knows the Bootstrap framework to visualize the layout of a page. Other developers take issue with this approach. They argue that Bootstrap\u2019s markup is often presentational , with class names describing the appearance of the page. In an ideal world, all markup would be semantic , with class names describing the function or purpose of a style. For example, a submit button often needs styling. Compare these two approaches to markup: presentational: <button class=\"big red button\">Order Now</button> semantic: <button class=\"submit\">Order Now</button> Suppose your user testing indicates a green button generates more sales. With the presentational approach you\u2019d have to change both the Rails view file and the CSS file. With a semantic approach, you\u2019d just change the CSS file to reassign the color of the submit class.","title":"17.14.2 Presentational Versus Semantic Styles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#17143-use-bootstrap-classes-directly","text":"For quick and simple websites, where you don\u2019t need to be concerned about long-term maintenance, use Bootstrap\u2019s CSS classes directly. For example, you can style a button like this: <button type=\"button\" class=\"btn btn-success\">Order Now</button> The btn-success class is semantic and applies an \u201calert color\u201d which is green, by default, in Bootstrap.","title":"17.14.3 Use Bootstrap Classes Directly"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#17144-or-use-sass-mixins-with-bootstrap","text":"You can use Sass mixins to create your own semantic class names. Sass mixins add a layer of complexity that can map Bootstrap class names to your own semantic class names. For example, the Bootstrap grid system is presentational. Specifying rows and columns, and quantifying the size of columns, describes the visual appearance of sections of the layout rather than the purpose of each section. The presentational approach makes it easy to visualize the layout of a page. But you\u2019ll be tied to Bootstrap 3 class names for the life of your website. If class names change in a future version of Bootstrao, or you decide to switch to another front-end framework, it will be difficult to update your application, as you will have to carefully rebuild each view file. Is it worth the effort to add the complexity of Sass mixins just to future-proof your website? Probably not for a simple website such as the one you are building for Foobar Kadigan. The rails_layout gem uses Sass mixins to apply CSS style rules to the default application layout. In doing so, the default application layout is free of framework-specific code and can be used with either Bootstrap or Zurb Foundation. Before we examine the default application layout, let\u2019s take a look at the Sass mixins supplied by the rails_layout gem. Look again at the file app/assets/stylesheets/1st_load_framework.css.scss created by the rails_layout gem: // import the CSS framework @import \"bootstrap-sprockets\"; @import \"bootstrap\"; // make all images responsive by default img { @extend .img-responsive; margin: 0 auto; } // override for the 'Home' navigation link .navbar-brand { font-size: inherit; } // THESE ARE EXAMPLES YOU CAN MODIFY // create your own classes // to make views framework-neutral .column { @extend .col-md-6; @extend .text-center; } .form { @extend .col-md-6; } .form-centered { @extend .col-md-6; @extend .text-center; } .submit { @extend .btn; @extend .btn-primary; @extend .btn-lg; } // apply styles to HTML elements // to make views framework-neutral main { @extend .container; background-color: #eee; padding-bottom: 80px; width: 100%; margin-top: 51px; // accommodate the navbar } section { @extend .row; margin-top: 20px; } The rails_layout gem is in active development so the file you\u2019ve created may be different from the example in this tutorial. It will probably be very similar. At the top of the file we import the Bootstrap framework CSS files from the gem. We override a Bootstrap style rule so the \u201cHome\u201d navigation link matches the other links in the navigation bar. Then we use mixins to create semantic classes. Mixins can take a block of CSS styles, other mixins, or a CSS selector (a CSS class or ID). If you\u2019d like to combine CSS classes, or rename a CSS class, use the @extend directive. The first declaration column combines the Bootstrap classes col-md-6 and text-center to make a new class, column . Next we create a few classes that combine Bootstrap CSS classes. For example, the new submit class can be used for a button. When we use it in a view, this class will be purely semantic since it describes the purpose of the element, allowing us to set its appearance outside of any view file. Finally, to avoid applying Bootstrap classes in the application layout file, we apply styles to HTML elements main and section to make the views framework-neutral. We use the @extend directive to add a Bootstrap CSS class. And we directly set standard CSS properties such as background-color and margin-top . Using this technique, the file app/assets/stylesheets/1st_load_framework.css.scss becomes the single point of intersection between the Bootstrap framework and the application layout. For a simple website, this could be over-engineering and counter-productive. The rails_layout gem uses the technique so that either Bootstrap or Zurb Foundation can be used without any change to the default application layout. We\u2019ll use the CSS classes provided by the rails_layout gem in the tutorial application, but if you choose to customize the application, feel free to use Bootstrap classes directly to keep your project simple.","title":"17.14.4 Or Use Sass Mixins with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1715-application-layout-with-bootstrap","text":"Let\u2019s look at the application layout file created by the rails_layout gem: Examine the contents of the file app/views/layouts/application.html.erb : <%= content_for?(:title) ? yield(:title) : \"Learn Rails\" %> <meta name=\"description\" content=\"<%= content_for?(:description) ? yield(:description) : \"Learn Rails\" %>\"> <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' \\=> 'reload' %> <%= javascript_include_tag 'application', 'data-turbolinks-track' \\=> 'reload' %> <%= csrf_meta_tags %> < %= render 'layouts/navigation' %> < %= render 'layouts/messages' %> < %= yield %> This file is almost identical to the simple application layout file we looked at in the previous chapter. Because we\u2019ve applied Bootstrap classes to the HTML element main in the app/assets/stylesheets/1st_load_framework.css.scss file, there\u2019s no need to use Bootstrap classes directly in the application layout.","title":"17.15 Application Layout with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1716-flash-messages-with-bootstrap","text":"The messages partial we use with Bootstrap is complex. Examine the file app/views/layouts/_messages.html.erb : <%# Rails flash messages styled for Bootstrap 3.0 %> <% flash.each do |name, msg| %> <% if msg.is_a?(String) %> \u00d7 < %= content\\_tag :div, msg, :id \\=> \"flash\\_#{name}\" %> <% end %> <% end %> We use each to iterate through the flash hash, retrieving a name and msg that are passed to a block to be output as a string. The expression if msg.is_a?(String) serves as a test to make sure we only display messages that are strings. We construct a div that applies Bootstrap CSS styling around the message. Bootstrap provides classes alert and alert-dismissible to style the message. We use the Ruby ternary operator to check the type of the alert. A class of either success or danger styles the message. Rails notice messages will get styled with the Bootstrap success class. Any other Rails messages, including alert messages, will get styled with the Bootstrap danger class. We use the Rails content_tag view helper to create a div containing the message. Bootstrap creates a \u201cclose\u201d icon by applying the class alert-dismissible . Bootstrap\u2019s integrated JavaScript library will hide the alert box when the \u201cclose\u201d link is clicked. Bootstrap provides detailed documentation if you want to change the styling of the alert boxes.","title":"17.16 Flash Messages with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1717-navigation-partial-with-bootstrap","text":"The layout and styling required for the Bootstrap navigation bar are in the navigation partial file. Examine the file app/views/layouts/_navigation.html.erb : <%# navigation styled for Bootstrap 3.0 %> Toggle navigation < %= link\\_to 'Home', root\\_path, class: 'navbar-brand' %> < %= render 'layouts/navigation\\_links' %> The navigation partial is now more complex, with layout and Bootstrap classes needed to produce a responsive navigation bar. At the conclusion of this chapter, you\u2019ll test the responsive navigation by resizing the window. At small sizes, the navigation links will disappear and be replaced by an icon labeled \u201cMenu.\u201d Clicking the icon will reveal a vertical menu of navigation links. The navigation menu is a great demonstration of the ability of Bootstrap to adjust to the small screen size of a tablet or smartphone. If you\u2019d like to add a site name or logo to the tutorial application, you can replace the link helper <%= link_to \u2019Home\u2019, root_path %> . It is important to preserve the enclosing layout and classes, even if you don\u2019t want to display a site name or logo. The enclosing layout is used to generate the navigation menu when the browser window shrinks to accommodate a tablet or smartphone. You\u2019ll see we wrap the nested partial render \u2019layouts/navigation_links\u2019 with Bootstrap classes to complete the navigation bar.","title":"17.17 Navigation Partial with Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1718-navigation-links-partial","text":"The file app/views/layouts/_navigation_links.html.erb is unchanged: <%# add navigation links to this file %> Later we\u2019ll add links to \u201cAbout\u201d and \u201cContact\u201d pages. The navigation links partial will be simply a list of navigation links. We\u2019re following the separation of concerns principle here. By separating the links from the styling that creates the navigation bar, we segregate the code that is unique to Bootstrap. In the future, if the Bootstrap layout or CSS classes change, we can make changes without touching the navigation links. If we wish, we can replace the navigation partial and substitute one that uses a different framework instead of Bootstrap, leaving the navigation links intact.","title":"17.18 Navigation Links Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1719-test-the-application","text":"Let\u2019s see how the application looks with Bootstrap. The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You should see a new page design that displays Bootstrap styling. Thanks to the open source efforts of the Bootstrap core team and contributors, we\u2019ve added powerful front-end features to our website with little effort. You can click the \u201cX\u201d close icons to hide the flash messages, thanks to the integrated CSS and JavaScript of the Bootstrap framework. Next we\u2019ll add \u201cAbout\u201d and \u201cContact\u201d pages to the application. After we update the navigation links, you\u2019ll see how the Bootstrap responsive web design adjusts the navigation bar at different browser widths.","title":"17.19 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1720-remove-the-flash-messages","text":"Before we continue, we\u2019ll remove the flash messages we created for our demonstration. Update the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @owner \\= Owner.new end end","title":"17.20 Remove the Flash Messages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1721-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"front-end framework\" $ git push","title":"17.21 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-18-add-pages","text":"Let\u2019s begin adding pages to our web application. There are three types of web pages in a Rails application. We\u2019ve looked at two types so far: static pages in the public/ folder that contain no Ruby code dynamic pages such as our home page that use the application layout There\u2019s another type of web page that is required on many websites. It has static content; that is, no dynamic data is needed on the page. But it uses the default application layout to maintain consistency in the website look and feel. We classify this type of page as a: static view that uses the application layout Examples include: \u201cAbout\u201d page Legal page FAQ page It\u2019s possible to place these pages in the public/ folder and copy the HTML and CSS from the default application layout but this leads to duplicated code and maintenance headaches. And dynamic elements such as navigation links can\u2019t be included. For these reasons, developers seldom create static pages in the public/ folder. Alternatively, a dynamic page can be created that has no model, a nearly-empty controller, and a view that contains no instance variables. This solution is quite common for static views that use the application layout. This solution is implemented so frequently that many developers create a gem to encapsulate the functionality. We\u2019re going to use the best-known of these gems, the high_voltage gem created by the Thoughtbot consulting firm. We\u2019ll use the High Voltage gem to create an \u201cAbout\u201d Page. We also will create a Contact page. We\u2019ll again use the High Voltage gem, but only for the first version of the Contact page. Later we\u2019ll discard the page we created with the High Voltage gem and replace it with a full model-view-controller implementation. The process will show the difference between an older form of web application architecture and a newer \u201cRails way.\u201d","title":"Chapter 18 Add Pages"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#181-high-voltage-gem","text":"We can add a page using the High Voltage gem almost effortlessly. The gem implements Rails \u201cconvention over configuration\u201d so well that there is nothing to configure. There are alternatives to its defaults which can be useful but we won\u2019t need them; visit the GitHub home page for the high_voltage gem if you want to explore all the options. In your Gemfile , you\u2019ve already added: gem 'high_voltage' and previously run $ bundle install .","title":"18.1 High Voltage Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#182-views-folder","text":"Create a folder app/views/pages : $ mkdir app/views/pages Any view files we add to this directory will automatically use the default application layout and appear when we use a URL that contains the filename. The High Voltage gem contains all the controller and routing magic required for this to happen. Let\u2019s try it out.","title":"18.2 Views Folder"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#183-about-page","text":"Create a file app/views/pages/about.html.erb : <% content_for :title do %>About<% end %>","title":"18.3 \u201cAbout\u201d Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#184-contact-page","text":"For the initial version of the Contact page, create a file app/views/pages/contact.html.erb : <% content_for :title do %>Contact<% end %>","title":"18.4 Contact Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#185-routing-for-the-high-voltage-gem","text":"The High Voltage gem provides a PagesController. You\u2019ll never see it; it is packaged inside the gem. In addition to providing a controller, the High Voltage gem provides default routing so any URL with the form http://localhost:3000/pages/about will obtain a view from the app/views/pages directory. Like the PagesController, the code that sets up the route is packaged inside the gem. For details about the syntax of routing directives, refer to RailsGuides: Routing from the Outside In .","title":"18.5 Routing for the High Voltage Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#186-update-the-navigation-partial","text":"You can use a Rails route helper to create a link to any view in the app/views/pages directory like this: link_to 'About', page_path('about') Let\u2019s add links to the \u201cAbout\u201d and \u201cContact\u201d pages. Replace the contents of the file app/views/layouts/_navigation_links.html.erb with this: <%# add navigation links to this file %> < %= link\\_to 'About', page\\_path('about') %> < %= link\\_to 'Contact', page\\_path('contact') %> With an updated navigation bar, we can test the application.","title":"18.6 Update the Navigation Partial"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#187-test-the-application","text":"The web server may already be running. If not, enter the command: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Links to the pages \u201cAbout\u201d and \u201cContact\u201d should work. If you get an error \u201cuninitialized constant PagesController,\u201d make sure the config/routes.rb file looks like this: Rails.application.routes.draw do root to: 'visitors#new' end Watch what happens when you resize the page. At smaller sizes, the navigation bar changes to display a menu icon. Clicking the menu icon reveals a drop-down menu of navigation links. You\u2019re seeing the power of the Bootstrap framework. Here\u2019s a troubleshooting tip. If clicking the menu icon doesn\u2019t reveal a drop-down menu, the application may not be loading the Bootstrap JavaScript library. Make sure that the file app/assets/javascripts/application.js contains: //= require jquery //= require jquery_ujs //= require turbolinks //= require bootstrap-sprockets //= require_tree .","title":"18.7 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#188-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add 'about' and 'contact' pages\" $ git push There is nothing more we need for our \u201cAbout\u201d page. In the next chapter, we\u2019ll explore two different implementations for the Contact page.","title":"18.8 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-19-contact-form","text":"Forms are ubiquitous on the web, to the degree we seldom notice how often they are used for data entry, whether we\u2019re logging into a website or posting a blog comment. To build any interactive website, you\u2019ll need to understand forms. Here we\u2019ll build a contact form for our tutorial application. A contact form is common on many websites. If you think about it, contact forms are often unnecessary; simply displaying an email address is sufficient, more convenient, and easier to implement. But building a contact form is an excellent way to learn how to handle user data input. We\u2019ll pretend that our odd client, Mr. Foobar Kadigan, insists that he needs a contact form on his website. We\u2019re not backing the tutorial application with a database so we won\u2019t store the contact data after the information is submitted. Instead, in a subsequent chapter we\u2019ll learn how to send the contents of the form by email to the website owner.","title":"Chapter 19 Contact Form"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#191-the-old-way-and-the-rails-way","text":"In this chapter, we\u2019ll explore two ways to implement a contact form. The first way will be familiar to anyone who has used PHP or similar web platforms. It is an obvious and straightforward way to handle a form. As we look closer, we\u2019ll see the approach has limitations. We\u2019ll discard our first approach and rebuild the Contact page, discovering how the \u201cRails way\u201d is more powerful. You may wonder why I\u2019m going to show you two different ways to implement the contact form. First, it is worthwhile to see there is more than one way to implement a web application. Maturity as a software developer means imagining different approaches and evaluating your options. With this exercise, you\u2019ll contrast two approaches and see how we make choices about software architecture. More importantly, it is not always obvious why we do things in a \u201cRails way.\u201d It would be easy to simply walk you through the steps to build a contact form without showing you alternative implementations (that\u2019s how most tutorials do it). But you\u2019ll gain a deeper understanding of Rails by building the contact form in a less sophisticated fashion and then seeing the more elegant Rails approach.","title":"19.1 The \u201cOld Way\u201d and the \u201cRails Way\u201d"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#192-user-story","text":"Let\u2019s plan our work with a user story: *Contact Page* As a visitor to the website I want to fill out a form with my name, email address, and some text In order to send a message to the owner of the website Our first step will be to create a route to a controller that will process the submitted form.","title":"19.2 User Story"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#193-routing","text":"We\u2019re going to create a ContactsController to process the submitted form data. Every form must have a destination URL that receives the form submission. We need to set a route to generate the destination URL. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do post 'contact', to: 'contacts#process_form' root to: 'visitors#new' end The route post \u2019contact\u2019, to: \u2019contacts#process_form\u2019 will create a route helper that generates a URL and hands off the request to a controller. You can run the rails routes command to see our routes in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contact POST /contact(.:format) contacts#process_form root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command is somewhat cryptic but confirms we\u2019ve created the routes we need. The first item in the rails routes output indicates we can add \u201ccontact\u201d to \u201c_path\u201d to get our route helper, contact_path : contact_path - a route helper that can be used in a controller or view The second item indicates the request will be handled with the HTTP POST protocol: POST - HTTP method to submit form data The third item indicates the application will respond to the following URL: http://localhost:3000/contact - URL generated by the route helper The fourth item indicates a request to the URL will be handled by: contacts - the name of the controller process_form - a controller action For details about the syntax of routing directives, refer to RailsGuides: Routing from the Outside In . The route won\u2019t work yet; we need to create a ContactsController. But first we\u2019ll create the form.","title":"19.3 Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#194-adding-a-form-to-the-contact-page","text":"Let\u2019s add the code for a contact form to the Contact page. Forms were simple in the early days of the web. An HTML <form> tag creates a container for a form. The form element specifies a URL (an \u201caction\u201d) which receives and processes the form submission. Form fields accept input such as text or checkboxes. A submit button gathers the input and sends a request to the URL specified in the form action. Rails tries to simplify forms and make them more powerful. First, to simplify forms, Rails provides a set of view helpers for forms. These view helpers automate the creation of the necessary HTML elements. Some developers use an alternative set of form helpers (such as the SimpleForm gem ) which make the syntax of forms even simpler. Form helpers such as SimpleForm add a dependency that I like to avoid (sometimes the gem is not updated or breaks). We\u2019ll use the standard Rails form helpers. Rails also makes forms more powerful by providing a form builder that can be associated with a model. Associating a model with a form allows Rails to perform validation on the input data. We\u2019ll first build a form without a model (the \u201cold way\u201d) and then add a model (the \u201cRails way\u201d). Unfortunately, in the quest for simplicity and power, the Rails maintainers have made forms much more complicated than the original HTML specification. A large part of the complication is a new forms syntax introduced in Rails 5.1. Prior to Rails 5.1, Rails provided two different ways to create forms. One approach, using the form_tag directive, was simpler and didn\u2019t use a form builder and associated model. The second approach, using the form_for directive, was more powerful and widely used because it enabled validation of form data using an associated model. In Rails 5.1, the Rails maintainers introduced a third approach, using the form_with directive. The form_with approach replaces both the form_tag and form_for directives, combining both earlier approaches in one set of view helpers. There is very little documentation to explain how to use the form_with approach. As of this writing, the RailsGuides: Rails Form Helpers official document has not been updated for the new form_with syntax. Most tutorials (and Stack Overflow answers) explain forms using the form_tag or form_for helpers. The only official documentation is the Rails API document . These are persuasive reasons not to use the new form_with syntax. However, a future version of Rails will deprecate (remove) the form_tag or form_for helpers. It\u2019s best to learn to use form_with for your forms. Our tutorial will use form_with . Replace the contents of the file app/views/pages/contact.html.erb : <% content_for :title do %>Contact<% end %>","title":"19.4 Adding a Form to the Contact Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#195-controller","text":"We need code to process the form data. The form data is sent to the server as a POST request attached to a URL. As we\u2019ve learned, in Rails we use controllers to respond to browser requests. For this implementation, we\u2019ll create a ContactsController to process the submitted form data. Create a file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def process_form Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash[:notice] \\= \"Received request from #{params[:name]}\" redirect_to root_path end end The ContactsController inherits the behavior of the base ApplicationController. We create a process_form method to respond when the form is submitted. Later we\u2019ll learn that process_form doesn\u2019t fit the \u201cRails way.\u201d We\u2019ll use it for now. Before we look closely at the code for the process_form method, we need to learn about the params hash.","title":"19.5 Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1951-params-hash","text":"Take a close look at these two lines: Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash\\[:notice\\] \\= \"Received request from #{params\\[:name\\]}\" Notice the params object. Earlier we learned about the Ruby Hash class. It is a data structure for key/value pairs and Hash instances are ideal for storing form data. Each field on the form can be mapped as label and data , or key and value, and stored in a Hash. Rails does all the work of extracting the form data from the browser\u2019s POST request. Rails creates a hash with the form field data mapped to the form field labels. Here\u2019s part of the hash: {... \"name\"\\=>\"Daniel\", \"email\"\\=>\" [email protected] \", \"content\"\\=>\"hi\" ...} The full params hash actually contains more data which we can see with a debug command: {\"utf8\"\\=>\"\u2713\", \"authenticity_token\"\\=>\"...\", \"name\"\\=>\"Daniel\", \"email\"\\=>\" [email protected] \", \"content\"\\=>\"hi\", \"commit\"\\=>\"Submit\", \"controller\"\\=>\"contacts\", \"action\"\\=>\"process_form\"} The params hash includes these elements: the utf8 checkmark character forces browsers to recognize Unicode the authenticity token prevents CSRF ( Cross Site Request Forgery ) form data current controller current action You will see the contents of the params hash in the console log after you submit the form. We\u2019ll look at the console log when we test the implementation.","title":"19.5.1 Params Hash"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1952-process_form-method","text":"Now that we know about the params hash, take a look again at the process_form method: def process_form Rails.logger.debug \"DEBUG: params are #{params.inspect}\" flash[:notice] \\= \"Received request from #{params[:name]}\" redirect_to root_path end We use a logger.debug method to reveal the form data in our console log by revealing the contents of the params hash. The inspect method shows the parameters in an easy-to-read list. Then we extract the data posted to the name field of the form and construct a flash message. A hash containing the data from the contact form is nested inside the params hash. We can retrieve the value of the name field with the expression params[:name] . We use double quotes and string interpolation to form the message using the #{...} syntax that evaluates a Ruby expression and combines it with a string. Finally we use the redirect_to directive to render the home page. We haven\u2019t actually sent the contact data to anyone. We\u2019ll add code for that later, after we refactor the controller to be a better example of the \u201cRails way.\u201d Before we do that, let\u2019s test the current implementation. We\u2019ve already set up routing for the new controller.","title":"19.5.2 Process_form Method"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#196-test-the-application","text":"If you need to start the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link; then fill out and submit the form. You should see the flash message \u201cReceived request from \u2026\u201d on the home page. If you see the message \u201cMy birthday is soon\u201d you need to delete your earlier experiment from the Visitors controller. If you get an error message \u201cuninitialized constant ContactsController,\u201d make sure you created the file app/controllers/contacts_controller.rb as instructed above. Notice what appears in the console log: Started POST \"/contact\" for 127.0.0.1 at 2017-07-19 16:22:13 +0800 Processing by ContactsController#process_form as JS Parameters: {\"utf8\"=>\"\u2713\", \"authenticity_token\"=>\"..\", \"name\"=>\"Daniel\", \"email\"=>\" [email protected] \", \"content\"=>\"hi\", \"commit\"=>\"Submit\"} DEBUG: params are \"\u2713\", \"authenticity_token\"=>\"...\", \"name\"=>\"Daniel\", \"email\"=>\" [email protected] \", \"content\"=>\"hi\", \"commit\"=>\"Submit\", \"controller\"=>\"contacts\", \"action\"=>\"process_form\"} permitted: false> Redirected to http://localhost:3000/ Completed 200 OK in 7ms The console log is our most important tool for debugging. Let\u2019s analyze what we see: Started POST - shows the server is responding to an HTTP POST request \u201c/contact\u201d - the path portion of the URL at \u2026 - timestamp Processing by ContactsController - the controller process_form - the controller action (the method that handles the request) as JS - the standard syntax (not XML or some other markup) Parameters: - the params hash containing all the submitted data \u201cutf8\u201d=\u201d\u2713\u201d - a Rails workaround to set the language encoding in Internet Explorer \u201cauthenticity token\u201d - prevents CSRF security exploits the form data \u201ccommit\u201d - the \u201cSubmit\u201d label from the button DEBUG - our debug message containing the form data Redirected to http://localhost:3000/ - responded by displaying the home page Completed 200 OK - HTTP response status code 200 indicating success in 7ms - time required to process the request That\u2019s a lot of data. For now, we really only care about the form data buried in the params hash. You can see that we really don\u2019t need the debug message because the console log shows us the contents of the params hash.","title":"19.6 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#197-the-validation-problem","text":"It looks like we\u2019ve got everything we need to handle a form submission. As a next step, we could implement code to send an email message using form data extracted from the params hash. But consider a potential problem. What if the email address is poorly formed? The visitor will think the message has been sent but it will never be delivered. Or what if the name field or message is blank? It\u2019s not just a problem for the hapless visitor. An evildoer could repeatedly click the submit button, filling Foobar Kadigan\u2019s email inbox with endless empty messages. We need validation of the form data before we process it. We could dig into the Rails String API and look for a way to test if the string is empty or contains only whitespaces. And we could raise an Exception if the string is blank. Here\u2019s what validation code could look like. We won\u2019t use this code (because there\u2019s a better way to do this): class ContactsController < ApplicationController def process_form if params[:name].blank? raise 'Name is blank!' end if params[:email].blank? raise 'Email is blank!' end if params[:content].blank? raise 'Message is blank!' end message \\= \"Received request from #{params[:name]}\" redirect_to root_path, :notice \\=> message end end We would need additional code to test for invalid email addresses (it will be a complex regex , or regular expression ). And we would need a nicer way of showing the error to the visitor (right now, raising the exception displays an error message that makes it appear the application is broken). If we were implementing this on another web application platform, we might go further down this path, googling for code examples, and implementing a lengthy but bulletproof validation function. Rails offers a better way.","title":"19.7 The Validation Problem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#198-remove-the-contact-page","text":"We will implement a model-view-controller architecture for our Contact feature. That means we need a Contact model, a Contacts controller, and view files in the app/views/contacts/ folder. We no longer need the Contact page in the app/views/pages/ folder. Let\u2019s get started by removing the file app/views/pages/contact.html.erb : $ rm app/views/pages/contact.html.erb Before we implement a model-view-controller architecture, let\u2019s take time to understand the advantages of the Rails model-view-controller approach.","title":"19.8 Remove the Contact Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#199-implementing-the-rails-way","text":"Our initial implementation of the contact form is consistent with the earliest approach to web application development. That\u2019s why I call it the \u201cold way.\u201d It is an approach that originated in 1993 with a specification for CGI, the Common Gateway Interface . Before CGI, every page on the web existed only as a static HTML file. CGI made it possible to run a program, or CGI script, that dynamically generated HTML. In the early years of the web, every web URL matched either an HTML file or a CGI script. This is the \u201cpage paradigm\u201d of the web. So far, we\u2019re following the \u201cpage paradigm.\u201d Our Contact page hosts the form. Clicking the submit button makes a request to another page that is actually a program that returns HTML. Until the late 1990s, this is how the web worked. But soon after the introduction of CGI, developers began exploring the possibility of running a single program (an application server) that responds to any URL, parsing the URL to establish routing, and generating pages dynamically. This was the genesis of the \u201cweb application paradigm.\u201d It\u2019s how Rails works. The web application paradigm frees us from one-to-one correspondence of a URL with a single file or script. It allows us to refactor our code into object-oriented classes and methods that can be inherited rather than duplicated, which means we don\u2019t repeat the same code on every page that processes a form. The web application paradigm makes it possible to use the model-view-controller architecture. Instead of looking at the web as URLs that return pages, we see requests that are routed to controllers that render views. We can segregate any code that manipulates data into a model class, instead of mixing HTML with data manipulation in a single script. With the \u201cweb application paradigm,\u201d we can have a generic model class that isolates the code that connects to a database or validates form data. We can create models that inherit the generic behavior from a parent class and get a database connection or validation \u201cfor free.\u201d Unlike the \u201cpage paradigm,\u201d we\u2019ll avoid duplicating validation code every time we need to process a form. Consider our process_form method again: class ContactsController < ApplicationController def process_form if params[:name].blank? raise 'Name is blank!' end if params[:email].blank? raise 'Email is blank!' end if params[:content].blank? raise 'Message is blank!' end message \\= \"Received request from #{params[:name]}\" redirect_to root_path, :notice \\=> message end end We\u2019ll replace it with something better. Our \u201csegregation of concerns\u201d philosophy suggests that validation belongs in a model, since validation is a type of data manipulation (strictly speaking, a test of data integrity). Furthermore, it would be nice to make the validation tests generic so they could be used to validate data submitted from any form. Rails, as a framework, provides all this for us. We call it the \u201cRails way.\u201d","title":"19.9 Implementing the \u201cRails Way\u201d"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1910-activemodel","text":"Rails extracts and generalizes common code that every website requires. The code that websites need for access to databases is abstracted into the Rails ActiveRecord class. ActiveRecord includes code from the ActiveModel class that handles interaction with forms and data validation. The ActiveModel class interfaces with SimpleForm to provide sophisticated validation and error handling. We can mix in behavior from the ActiveModel class to add validation and error handling to any model we create. SimpleForm will recognize ActiveModel methods if we provide a model as an argument to the SimpleForm view helper. SimpleForm will give the form a name that matches the model name. And SimpleForm will automatically generate a destination URL for the form based on the model name. More significantly, SimpleForm will add sophisticated error handling to the form. If a visitor doesn\u2019t enter a name or submits an invalid email address, and we declare in our model that we require validation, SimpleForm will highlight the invalid field and display an inline message indicating the problem. Compared to what we\u2019ve implemented so far, this kind of error handling provides a vastly superior user experience. Instead of displaying a message that the application failed, the form will be redisplayed with the problem marked and noted. Now that we\u2019ve seen the advantages of the \u201cRails way,\u201d let\u2019s re-implement our contact form using the model-view-controller architecture.","title":"19.10 ActiveModel"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1911-model","text":"When we build database-backed applications with Rails, we base our models on a parent class named ActiveRecord. We are not using a database for our tutorial application, so we\u2019ll mix in behavior from ActiveModel, which adds validation and error handling to our model. Let\u2019s set up a model that doesn\u2019t require a database. Create a file app/models/contact.rb : class Contact include ActiveModel::Model attr_accessor :name, :email, :content validates_presence_of :name validates_presence_of :email validates_presence_of :content validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i validates_length_of :content, :maximum \\=> 500 end When you copy this, be careful to keep the long regex expression ( with: /.../i ) on one line (no line breaks). We give the model the name \u201cContact.\u201d We mix in behavior from the ActiveModel class using include ActiveModel::Model . We create attributes (data fields) for the model by using the attr_accessor keyword. The attributes match the fields in the contact form. If we were using a database for our tutorial application, we would not need to use attr_accessor because ActiveRecord would create access methods for reading and writing attributes directly from the database. ActiveModel gives us validation methods named validates_presence_of , validates_format_of , and validates_length_of . We check that name , email , and content exist (no blanks are allowed). We provide a complex regex , or regular expression , to test if the email address is valid. Finally, we declare that the message content cannot exceed 500 characters. The model is elegant. We describe the fields we need and state our validation requirements. ActiveModel does all the rest. Next we\u2019ll add a new Contact page by creating a view in the app/views/contacts/ folder. The new contact form will use our new model.","title":"19.11 Model"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1912-create-a-new-contact-page","text":"First, let\u2019s create the app/views/contacts/ folder: $ mkdir app/views/contacts/ Create a file app/views/contacts/new.html.erb : <% content_for :title do %>Contact<% end %>","title":"19.12 Create a New Contact Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1913-seven-controller-actions","text":"Consider all the possibilities for managing a list. It\u2019s a list of anything: users, inventory, thingamajigs. We use a web application to manage the list, so we\u2019ll fill out a form to record each item in our list. The web application offers seven features to help us manage our records: index - display a list of all items show - display a record of one item new - display an empty form create - save a record of a new item edit - display a record for editing update - save an edited record destroy - delete a record You can manage any list using these seven actions. There are a few extra actions that are helpful, such as: pagination - displaying a portion of a list sorting - displaying the list in a different order bulk edit - changing multiple items at once But seven basic actions are all you need for managing any list of items. The \u201cRails way\u201d is about taking advantage of structure and convention to leverage the power of the framework. The ApplicationController contains code to implement each of the seven standard actions. When we create a controller that inherits from the ApplicationController, we get these standard actions \u201cfor free.\u201d That\u2019s why our new method in our VisitorsController was so simple. The controller knew to render a view file named new.html.erb from the views/visitors/ folder because of behavior inherited from the ApplicationController. Just like the Rails directory structure provides consistency to make it easy for any Rails developer to collaborate with other Rails developers, relying on the seven standard controller actions makes it easy for other team members to understand how your controllers work. A controller that uses these actions is said to be \u201cRESTful\u201d (a term that refers to representational state transfer , a software design abstraction). Experienced Rails developers follow the \u201cRails way\u201d and try to use RESTful controller methods when possible. When necessary, you will add other controller actions. For example, imagine you\u2019ve built a subscription website. When a user\u2019s subscription ends, you may not want to destroy the subscriber record. Instead you might add a controller expire or suspend action that marks the subscriber record as expired so you can continue to access the subscriber\u2019s contact information for customer service or renewal offers. To the extent you can, use the seven standard controller actions and be cautious about adding more. Earlier, I said our ContactsController process_form method isn\u2019t suitable for the \u201cRails way.\u201d With our model-view-controller architecture, we can piggyback on the ApplicationController to display our empty contact form and process the form when it is submitted. We\u2019ll use only two of the seven standard controller actions: new - display the empty contact form create - validate and process the submitted form Our ContactsController will know to render a view from the app/views/contacts/new.html.erb file when we call the controller new method. We won\u2019t piggyback on behavior from the ApplicationController create method. But we\u2019ll implement a create method because, by convention, the form will submit the data to the controller\u2019s create method. SimpleForm will create a destination URL that corresponds to the ContactsController#create action.","title":"19.13 Seven Controller Actions"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1914-controller","text":"Replace the contents of the file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def new @contact \\= Contact.new end def create @contact \\= Contact.new(secure_params) if @contact.valid? # TODO send message flash[:notice] \\= \"Message sent from #{@contact.name}.\" redirect_to root_path else render :new end end private def secure_params params.require(:contact).permit(:name, :email, :content) end end We\u2019ve dropped the \u201cold school\u201d process_form method and added the \u201cRails way\u201d new and create methods. The controller new action will instantiate an empty Contact model, assign it to the @contact instance variable, and render the app/views/contacts/new.html.erb view. We\u2019ve already created the view file containing the form. SimpleForm will set a destination URL that corresponds to the ContactsController#create action. The create method will instantiate a new Contact model using the data from the form (we take steps to avoid security vulnerabilities first\u2014more on that later). The ActiveModel class provides a method valid? which we can call on the Contact model. Our conditional statement if @contact.valid? checks each of the validation requirements we\u2019ve set in the model. If all the Contact fields are valid, we can send a message (which we\u2019ll add later), prepare a flash message, and redirect to the home page. Notice that we don\u2019t need to dig into the params hash for the visitor\u2019s name; it is now available as @contact.name directly from the model. If any validation fails, the controller create action will render the app/views/contacts/new.html.erb view. This time, appropriate error messages are set and the form object\u2019s error_notification method will highlight the invalid field and display a matching prompt. You\u2019re looking at the tightly bound interaction of the \u201cRails way\u201d model, view, and controller. The only element we are missing is routing. But first, let\u2019s look closer at the steps we take to avoid security exploits.","title":"19.14 Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#19141-mass-assignment-vulnerabilities","text":"Rails protects us from a class of security exploits called \u201cmass-assignment vulnerabilities.\u201d Rails won\u2019t let us initialize a model with just any parameters submitted on a form. Suppose we were creating a new user and one of the user attributes was a flag allowing administrator access. A malicious hacker could create a fake form that provides a user name and sets the administrator status to \u201ctrue.\u201d Rails forces us to \u201cwhite list\u201d each of the parameters used to initialize the model. We create a method named secure_params to screen the parameters sent from the browser. The params hash contains two useful methods we use for our screening: require(:contact) - makes sure that params[:contact] is present permit(:name, :email, :content) - our \u201cwhite list\u201d With this code, we make sure that params[:contact] only contains :name, :email, :content . If other parameters are present, they are stripped out. Rails will raise an error if a controller attempts to pass params to a model method without explicitly permitting attributes via permit . In older versions of Rails (before Rails 4.0), the mass-assignment exploit was blocked by using a \u201cwhite list\u201d of acceptable parameters with the attr_accessible keyword in a model. You\u2019ll see this code in examples and tutorials that were written before Rails 4.0 introduced \u201cstrong parameters\u201d in the controller.","title":"19.14.1 Mass-Assignment Vulnerabilities"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#19142-private-methods","text":"If you paid close attention to the code you added to the Contacts controller, you may have noticed the keyword private above the secure_params method definition. This is a bit of software architecture that limits access to the secure_params method (plus any more methods we might add beneath it). Very simply, adding the private keyword restricts access to the secure_params method so only methods in the same class can use it. You might be puzzled; after all, how else could it be accessed? We haven\u2019t explored calling methods from other classes, so I\u2019ll just say that without the private keyword, the secure_params method could be used from code anywhere in our application. In this case, we apply the private keyword because we want to be sure the secure_params method is only used in the ContactsController class. It\u2019s just a bit of \u201cbest practice\u201d and for now, you can simply learn that secure_params method should be a private method. Now let\u2019s look at routing for controllers that are built the \u201cRails way.\u201d","title":"19.14.2 Private Methods"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1915-routing","text":"Rails routing is aware of the seven standard controller actions. In fact, it takes only one keyword (with one parameter) to generate seven different routes for any controller. The keyword is resources and supplying a name that matches a model and controller provides all seven routes. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do resources :contacts, only: [:new, :create] root to: 'visitors#new' end Here we\u2019ve added resources :contacts, only: [:new, :create] . We only want two routes so we\u2019ve added the restriction only: [:new, :create] . The new route has these properties: new_contact_path - route helper contacts - name of the controller (ContactsController) new - controller action http://localhost:3000/contacts/new - URL generated by the route helper GET - HTTP method to display a page The create route has these properties: contacts_path - route helper contacts - name of the controller (ContactsController) create - controller action http://localhost:3000/contacts - URL generated by the route helper POST - HTTP method to submit form data You can run the rails routes command to see these in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contacts POST /contacts(.:format) contacts#create new_contact GET /contacts/new(.:format) contacts#new root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command shows we\u2019ve created the routes we need. Our new route new_contact_path can now be used. We\u2019ve completed our move to the model-view-controller architecture by adding the appropriate routes.","title":"19.15 Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1916-change-navigation-links","text":"With our new model-view-controller architecture, we need to change the navigation links. Change the file app/views/layouts/_navigation_links.html.erb : <%# add navigation links to this file %> < %= link\\_to 'About', page\\_path('about') %> < %= link\\_to 'Contact', new\\_contact\\_path %> We\u2019re ready to test the model-view-controller implementation of the Contact feature. Be sure you\u2019ve removed the file app/views/pages/contact.html.erb , as it is no longer used.","title":"19.16 Change Navigation Links"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1917-test-the-application","text":"If you need to restart the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link; then fill out and submit the form. You should see the flash message \u201cMessage sent from \u2026\u201d on the home page. Try submitting the form with a blank name. You\u2019ll see a warning message, \u201cPlease review the problems below.\u201d Try submitting the form with an invalid email address such as \u201c [email protected] \u201d. The form will re-display with a message, \u201cPlease review the problems below,\u201d and next to the email field, \u201cis invalid.\u201d Combining SimpleForm error handling with ActiveModel validation is powerful. If validation fails after the form is submitted, the page will redisplay and SimpleForm will display an appropriate error message.","title":"19.17 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#1918-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"contact form\" $ git push We\u2019ve built a sophisticated Contact form.","title":"19.18 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-20-send-mail","text":"Email sent from a web application is called transactional email . As a website visitor, you\u2019ve probably seen transactional email such as these messages: sign up confirmation email response to a password reset request acknowledgment of a purchase notice of a change to a user profile setting A web application can send email to a visitor. It can also send messages to its owner or webmaster. On large active sites, email notices can be impractical (an admin interface is better) but for our small-volume tutorial application, it makes sense to email the contact request directly to the site owner (Foobar Kadigan is retired and enjoys receiving email).","title":"Chapter 20 Send Mail"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#201-user-story","text":"Let\u2019s plan our work with a user story: *Send Contact Message* As the owner of the website I want to receive email messages with a visitor's name, email address, and some text In order to communicate with visitors To implement the user story, let\u2019s create a feature that sends the contact data as an email message.","title":"20.1 User Story"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#202-implementation","text":"Rails makes it easy to send email. The ActionMailer gem is part of any Rails installation. Implementation of email closely follows the model-view-controller architecture. To implement email, you\u2019ll need: model view mailer The \u201cmailer\u201d is similar to a controller, combining data attributes from a model with a view file. Any methods we add to the mailer class can be called from a controller, triggering delivery of an email message. The model can be any we\u2019ve already created. In this case, we\u2019ll use the Contact model, since it gives us access to the visitor\u2019s name, email address, and message. We\u2019ll create a mail-specific view file in the app/views/user_mailer/ folder. Our folder for mail-specific views will go in the app/views/ directory as a sibling of the app/views/layouts folder. The Rails directory structure already gives us a folder app/mailers/ for the mailer class and, not surprisingly, it is a sibling of the app/controllers/ folder. We don\u2019t have to create the necessary folders and files manually, as the rails generate command runs a utility to create what we need.","title":"20.2 Implementation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#203-create-view-folder-and-mailer","text":"Use the rails generate command to create a mailer with a folder for views: $ rails generate mailer UserMailer The name of the mailer isn\u2019t important; we\u2019ll use UserMailer because it is obvious. The rails generate command will create a file: app/mailers/user_mailer.rb It also creates test files which we won\u2019t use in this tutorial. It uses three additional files which are provided by default in a Rails 5 application: app/mailers/application_mailer.rb app/views/layouts/mailer.html.erb app/views/layouts/mailer.text.erb This implements our model-view-mailer architecture.","title":"20.3 Create View Folder and Mailer"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#204-edit-the-mailer","text":"Add a contact_email method to the mailer by editing the file app/mailers/user_mailer.rb : class UserMailer < ApplicationMailer default from: \" [email protected] \" def contact_email(contact) @contact \\= contact mail(to: Rails.application.secrets.owner_email, from: @contact.email, :subject \\=> \"Website Contact\") end end The UserMailer class inherits behavior from the ApplicationMailer class. We\u2019ll create a method definition that assigns the contact argument to the instance variable @contact . Like a controller that combines a model with a view, our mailer class makes the instance variable available in the view. The name of the method isn\u2019t important; it can be anything obvious. We\u2019ll use it in the ContactsController to trigger mail delivery. Like the render method in a web page controller, the ActionMailer parent class has a mail method that renders the view. You\u2019ll need to use your email address in the mailer. You should have already set a configuration variable for your email address in the file config/secrets.yml . If you haven\u2019t done so, do it now. By inserting the configuration variable with your email address after to: , your inbox will receive the message. If Foobar Kadigan was a real person, we\u2019d supply his email address here. We need to insert a \u201cfrom\u201d address in two places. First there is a default, for all messages that do not set a \u201cfrom\u201d address. We will use \u201c [email protected] \u201d for the default \u201cfrom\u201d address. The email is originating from a web application that does not receive email, so this indicates the email address should not be used for replies. For emails going to website visitors, it would be best to provide a default email address for a customer service representative on the \u201cfrom\u201d line, so the recipient can easily reply. We\u2019re not sending email messages to visitors so we can ignore this nicety. For our contact_email method, we\u2019ll insert the email address of the visitor as the \u201cfrom\u201d address since we are sending a message to the site owner. This makes it easy for Foobar Kadigan to click \u201creply\u201d when he is reading the contact messages in his inbox. You can see our use of the email attribute from the Contact model in the expression from: @contact.email . That\u2019s all we need for mailer class. Next we\u2019ll create a view containing the message.","title":"20.4 Edit the Mailer"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#205-create-mailer-view","text":"There are two types of mailer views. One contains plain text, for recipients who don\u2019t like formatted email (some people still read email from the Unix command line). The other type contains HTML markup to provide formatting. It\u2019s good to create a message of both types, though most recipients will benefit from HTML formatting. The mailer view for formatted email looks very similar to a web page view file. It contains HTML markup plus Ruby expressions embedded in <%= ... %> delimiters. In the UserMailer class, we\u2019ve assigned the Contact model to the instance variable @contact so any attributes are available for use in the message. Create a file app/views/user_mailer/contact_email.html.erb :","title":"20.5 Create Mailer View"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#206-modify-controller","text":"We\u2019ll add code to the ContactsController: UserMailer.contact_email(@contact).deliver_now Replace the contents of the file app/controllers/contacts_controller.rb : class ContactsController < ApplicationController def new @contact \\= Contact.new end def create @contact \\= Contact.new(secure_params) if @contact.valid? UserMailer.contact_email(@contact).deliver_now flash[:notice] \\= \"Message sent from #{@contact.name}.\" redirect_to root_path else render :new end end private def secure_params params.require(:contact).permit(:name, :email, :content) end end The UserMailer class is available to any controller in the application. We call the contact_email method we\u2019ve created, passing the @contact instance variable as an argument, which renders the email message. Finally, the deliver_now method initiates delivery. For more on sending email from a Rails application, see RailsGuides: Action Mailer Basics .","title":"20.6 Modify Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#207-test-the-application","text":"If your web server is not running, start it: $ rails server Open a web browser window and navigate to http://localhost:3000/ . Click the \u201cContact\u201d link and try submitting the form. The email message should be visible in the console. If you didn\u2019t get an email message in your inbox, make sure you set your config/environments/development.rb file to perform deliveries as described in the \u201cConfiguration\u201d chapter. Be sure to restart your server if you change the configuration file.","title":"20.7 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#208-troubleshooting","text":"If you get an error, you can practice troubleshooting. You\u2019ve set up a complex system with many dependencies. It\u2019s great if it works, but there are several opportunities for errors. The most likely errors are a missing user name or password. We are trying to connect to the SendGrid email service. SendGrid expects your SendGrid user name. Mine is DanielKehoe (it is not my email address). SendGrid also expects a password.","title":"20.8 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2081-user-name-issues","text":"If you get the error message, \u201cSMTP-AUTH requested but missing user name,\u201d SendGrid is not receiving a user name it recognizes. Check that the user name is set in your Unix environment variables: $ echo \"$SENDGRID_USERNAME\" You should see your SendGrid user name. Make sure you\u2019ve used underscores consistently. If your Unix environment variable is SENDGRID_USER_NAME and the config/secrets.yml file contains SENDGRID_USERNAME , you\u2019ll have a problem.","title":"20.8.1 User Name Issues"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2082-password-issues","text":"If you get the error message, \u201cSMTP-AUTH requested but missing secret phrase,\u201d SendGrid is not receiving the SendGrid password. Check that the SendGrid password is set in your Unix environment variables: $ echo \"$SENDGRID_PASSWORD\" You should see the long cryptic string in the console response. Again, make sure you\u2019ve used underscores consistently, and SENDGRID_PASSWORD is used for the Unix environment variable as well as the config/secrets.yml file.","title":"20.8.2 Password Issues"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2083-problems-with-environment-variables","text":"First, close and reopen your terminal to make sure your environment reflects any recent changes you\u2019ve made to your shell configuration. Then try echo \"$SENDGRID_USERNAME\" to see if you get the credentials you set in your .bash_profile or .bashrc files. If you\u2019ve set up Unix environment variables but echo \"$SENDGRID_USERNAME\" doesn\u2019t return the correct variable in the console, you may have a problem with the way you\u2019ve set Unix environment variables. Most computers use the bash shell and you can set environment variables in your .bash_profile or .bashrc files. But not every system is alike. If it seems Unix environment variables are not working, you may have to find a colleague who can help you troubleshoot. If your Unix environment variables are not working, you can hardcode the variables in your config/secrets.yml file: Replace the following: development: email_provider_username: <%= ENV[\"SENDGRID_USERNAME\"] %> email_provider_password: <%= ENV[\"SENDGRID_PASSWORD\"] %> with: development: email_provider_username: example email_provider_password: 's#cr*t' In a YAML file, you do not need quotes unless your string contains special characters. If your password contains any of these characters you should surround the string with single quotes: : { } [ ] & * # ? | - < > = ! % @ \\ Remember the security rule: Don\u2019t commit the config/secrets.yml file to Git if it contains any secrets. Test the application and finish your troubleshooting. Then remove the hardcoded values from the config/secrets.yml file before committing to Git.","title":"20.8.3 Problems with Environment Variables"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#209-asynchronous-mailing","text":"You may notice a delay in the responsiveness of the Contact form after adding the email feature. Unfortunately, there\u2019s a performance penalty with our new feature. Our controller code connects to the SendGrid server and waits for a response before it renders the home page and displays the acknowledgment message. The performance penalty can be avoided by changing the implementation so that the controller doesn\u2019t wait for a response from the SendGrid server. We call this asynchronous behavior because sending email does not need to be \u201cin sync\u201d with displaying the acknowledgment. Eliminating a delay improves the user experience and makes the site feel more responsive. Asynchronous mailing requires a queueing system for background jobs . For our tutorial application, and for a typical small business website, the delay caused by lack of queueing is no big deal. Keep in mind, though, as you tackle bigger projects in Rails, you will need to implement a queueing system. Rails includes the Active Job feature for background processing. The Mailing List with Active Job tutorial in the Capstone Rails Tutorials series explains how to use it.","title":"20.9 Asynchronous Mailing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2010-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"sending mail\" $ git push You\u2019ve created a Rails application that handles a form and sends email to the site owner. Mail is a practical way to connect with site visitors. Let\u2019s implement a feature that collects email addresses for mass mailing of a newsletter.","title":"20.10 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-21-mailing-list","text":"Even as other messaging avenues become increasingly popular, such as messaging apps or Facebook messages, email remains the most practical way to stay in touch with website visitors. Encouraging a visitor to provide an email address means offering an invitation to a dialog and a relationship beyond a single visit. If you have a legitimate reason to stay in touch, and you\u2019ve motivated the visitor to leave an email address, you\u2019ll need a mailing list service. You\u2019ve seen how Rails can send an email message. From what you\u2019ve seen so far, you can imagine it would not take much code to loop through a list of email addresses from a database, sending a message to each. In the early days of the web, it was easy for any system administrator to write a script for mass mailings. Since there is negligible cost to sending bulk email, unscrupulous and ignorant operators sent email to any address they could scrape, borrow, or steal. The resulting flood of spam made checking one\u2019s inbox an icky experience and destroyed much of the early culture of the Internet. Fortunately, services such as Gmail arose to filter email. There is now a thick (but leaky) layer of screening protocols that redirect spam to a junk folder. One reason you won\u2019t use a Rails application to send bulk email is that a web application server is not the most efficient tool for sending email. More significantly, there\u2019s a good chance your email won\u2019t go through or, if it does (and someone complains), you\u2019ll quickly see your IP address blacklisted. That\u2019s why we use mailing list services to send bulk email such as newsletters or promotional offers. Considerable expertise is required to keep email from being filtered as spam (see MailChimp\u2019s article Email Delivery For IT Professionals . Email service providers increase reliability of delivery. These services track deliveries and show how well your email is being delivered. You\u2019ll also get features such as management of \u201cunsubscribe\u201d requests and templates to design attractive messages. There are at least a dozen well-established email service providers that allow a Rails application to programmatically connect to the service (via an API) to add or remove email addresses. For a list, see the article Send Email with Rails . For this tutorial application, we\u2019ll use MailChimp because there is no cost to open an account and you can send up to 12,000 emails/month to list of 2000 or fewer subscribers for free. Spam is unsolicited email. Don\u2019t ever send spam, whether for yourself, a client, or an employer. If recipients complain, your IP address and domain name will be blacklisted. So be very careful to only send to subscribers who signed up, send what subscribers expect, and be sure to offer value. If you get complaints, or the unsubscribe rate is high, stop. We\u2019ll assume we\u2019ve discussed the rules with Foobar Kadigan and he is eager to offer a newsletter to his visitors that will be genuinely appreciated.","title":"Chapter 21 Mailing List"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#211-user-story","text":"Let\u2019s plan our work with a user story: *Subscribe to Mailing List* As a visitor to the website I want to sign up for a mailing list In order to receive news and announcements To implement the user story, we\u2019ll add a mailing list feature.","title":"21.1 User Story"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#212-implementation","text":"We\u2019ll use the Rails model-view-controller architecture. We\u2019ll need: Visitors model view for visitors#new Visitors controller with new and create methods routing for visitors#new and visitors#create We\u2019ll add a Visitor model that has a data attribute for an email address. We already have a Visitors controller that renders the home page using the file in the app/views/visitors/ folder. We\u2019ll replace the contents of the view file with a nice photo, a marketing message, and a form. Our Visitors controller new and create methods will be very similar to what we created for the Contacts controller. Instead of connecting to SendGrid to send a message, we\u2019ll call a method to save the visitor\u2019s email address to a MailChimp mailing list.","title":"21.2 Implementation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#213-gibbon-gem","text":"The Gibbon gem is a convenient wrapper for the MailChimp API . We could connect to the MailChimp API using other gems that provide low-level plumbing such as HTTP connections ( httparty ) and data parsing ( multi_json ), but other developers have already done the work of wrapping the plumbing in a higher-level abstraction that easily fits into a Rails application. Amro Mousa\u2019s Gibbon gem is popular and actively maintained. In your Gemfile , you\u2019ve already added: gem 'gibbon' and previously run $ bundle install .","title":"21.3 Gibbon Gem"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#214-home-page","text":"Earlier we built a home page that provided a simple demonstration of the Ruby language. We\u2019ll discard it and replace it with a page that you could adapt for a typical small-business website. We want a nice photo, space for a marketing message, and the \u201csign up\u201d form. Replace the contents of the file app/views/visitors/new.html.erb : <% content_for :title do %>Foobar Kadigan<% end %> <% content_for :description do %>Website of Foobar Kadigan<% end %>","title":"21.4 Home Page"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2141-photo-options","text":"You\u2019re free to modify this page as you wish, as long as you keep the form intact. You might wish to modify the placeholder photo. If you don\u2019t like cats, try http://lorempixel.com/1170/600/nightlife/1 or any other categories from the lorempixel.com service. You can change the size by modifying the dimensions from 1170 (pixel width) by 600 (pixel height). You can replace the placeholder photo with your own. Look for the app/assets/images folder and add an image. Instead of the HTML <img> tag, use the Rails image_tag view helper, like this: <%= image_tag \"myphoto.jpg\" %> We\u2019ll need a Visitor model to initialize the form.","title":"21.4.1 Photo Options"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#215-visitor-model","text":"The Visitor model is almost identical to the Contact model we created earlier, except there is just one data attribute for the email field. We\u2019ll also add a subscribe method to add a visitor to a MailChimp list. We\u2019ll call this method from the controller when we process the submitted form. Create a file app/models/visitor.rb : class Visitor include ActiveModel::Model attr_accessor :email validates_presence_of :email validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i def subscribe mailchimp \\= Gibbon::Request.new(api_key: Rails.application.secrets.mailchimp_api_key) list_id \\= Rails.application.secrets.mailchimp_list_id result \\= mailchimp.lists(list_id).members.create( body: { email_address: self.email, status: 'subscribed' }) Rails.logger.info(\"Subscribed #{self.email} to MailChimp\") if result end end When you copy this, be careful to keep the long regex expression with: /.../i on one line (no line breaks). Just as we did for the Contact model, we use include ActiveModel::Model to mix in behavior from the ActiveModel class. This is the best way to create a model that does not use a database. In other applications, where models use a database, you will create a model class that inherits from ActiveRecord instead. We create the email attribute using the attr_accessor keyword. We set validation requirements using validates_presence_of and validates_format_of keywords. To subscribe a visitor to a mailing list, you need to provide: list_id - identify the MailChimp list email_address - address of the visitor status - subscribed, pending, or unsubscribed We specify \u201csubscribed\u201d to immediately add the address without asking the user for confirmation. We could specify \u201cPending\u201d if we wanted to add the address with double-opt-in so the visitor receives a request to confirm the email address before they are subscribed. Our subscribe method does the work of connecting to the MailChimp server to add the visitor to the mailing list. We instantiate the Gibbon object which provides all the connectivity, providing the mailchimp_api_key value, which we\u2019ve set in the config/secrets.yml file. We assign the Gibbon object to the mailchimp variable (we could name it anything). We set the list_id from a configuration variable in the config/secrets.yml file. The visitor\u2019s email_address is an attribute of the model we obtain from self . We must set the status property to \u2019subscribed\u2019 to indicate the visitor should receive mailings. Finally, if the application successfully adds the new subscriber, we write a message to the logger. If we get an error when trying to add the subscriber, Gibbon will raise an exception.","title":"21.5 Visitor Model"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#216-visitors-controller","text":"We already have a Visitors controller that contains a simple new method. We\u2019ll change the new method, add a create method, and provide a secure_params private method to secure the controller from mass assignment exploits. Replace the contents of the file app/controllers/visitors_controller.rb : class VisitorsController < ApplicationController def new @visitor \\= Visitor.new end def create @visitor \\= Visitor.new(secure_params) if @visitor.valid? @visitor.subscribe flash[:notice] \\= \"Signed up #{@visitor.email}.\" redirect_to root_path else render :new end end private def secure_params params.require(:visitor).permit(:email) end end Our new method now assigns the Visitor model to an instance variable instead of the Owner model. The create method is almost identical to the Contacts controller create method. We instantiate the Visitor model with scrubbed parameters from the submitted form. If the validation check succeeds, we subscribe the visitor to the MailChimp mailing list with the @visitor.subscribe method. All the work of connecting to MailChimp happens in the Visitor model. If the validation check fails, we redisplay the home page (the new action).","title":"21.6 Visitors Controller"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#217-clean-up","text":"We no longer use the Owner model, so we can delete the file app/models/owner.rb : $ rm app/models/owner.rb There\u2019s no harm if it remains but it is good practice to remove code that is no longer used.","title":"21.7 Clean Up"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#218-routing","text":"Our routing is now more complex. In addition to rendering the visitors# new view as the application root (the home page), we need to handle the create action. We can use a \u201cresourceful route\u201d as we did with the Contacts controller. Open the file config/routes.rb . Replace the contents with this: Rails.application.routes.draw do resources :contacts, only: [:new, :create] resources :visitors, only: [:new, :create] root to: 'visitors#new' end The root path remains visitors#new . Order is significant in the config/routes.rb file. As the final designated route, the root path will only be active if nothing above it matches the route. We\u2019ve added resources :visitors, only: [:new, :create] . We only want two routes so we\u2019ve added the restriction only: [:new, :create] . The new route has these properties: new_visitor_path - route helper visitors - name of the controller (VisitorsController) new - controller action http://localhost:3000/visitors/new - URL generated by the route helper GET - HTTP method to display a page The create route has these properties: visitors_path - route helper visitors - name of the controller (VisitorsController) create - controller action http://localhost:3000/visitors - URL generated by the route helper POST - HTTP method to submit form data You can run the rails routes command to see these in the console: $ rails routes Prefix Verb URI Pattern Controller#Action contacts POST /contacts(.:format) contacts#create new_contact GET /contacts/new(.:format) contacts#new visitors POST /visitors(.:format) visitors#create new_visitor GET /visitors/new(.:format) visitors#new root GET / visitors#new page GET /pages/*id high_voltage/pages#show The output of the rails routes command shows we\u2019ve created the routes we need.","title":"21.8 Routing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#219-test-the-application","text":"If you need to start the server: $ rails server Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see our new home page with the placeholder photo and the \u201csign up\u201d form. Enter your email address and click the \u201csign up\u201d button. You should see the page redisplay with an acknowledgment message. Try entering an invalid email address such as \u201c [email protected] @\u201d, or click the submit button without entering an email address, and you should see an error message. You\u2019ll have to log in to MailChimp and check your list of subscribers to see if the new email address was added successfully. With MailChimp, you can send a welcome message automatically when the visitor signs up for the mailing list. Use the welcome message to inform the visitor that they\u2019ve successfully subscribed to the mailing list and will receive the next newsletter email. It\u2019s a bit difficult to find the MailChimp option to create a welcome message. Strangely, MailChimp considers a welcome message a \u201cform.\u201d Here\u2019s how to find it. On the MailChimp \u201cLists\u201d page, click the \u201cdown arrow\u201d for a list and click \u201cSignup forms.\u201d Then click \u201cGeneral forms.\u201d On the \u201cCreate Forms\u201d page, there is a drop-down list of \u201cForms & Response Emails.\u201d The gray box shows \u201cSignup form.\u201d Click the down arrow. Select the menu item named \u201cFinal \u2018Welcome\u2019 Email\u201d and you\u2019ll be able to create a welcome message.","title":"21.9 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2110-git","text":"Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"mailing list\" $ git push Our tutorial application is feature complete. Let\u2019s deploy it so we can see it running as a real website.","title":"21.10 Git"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-22-deploy","text":"You\u2019ve been running the default web server on your local machine. If you wanted, you could leave your computer running, set up a managed DNS service , and your web application would be accessible to anyone. But even if you wanted to leave your computer running 24 hours a day, you\u2019re probably not a security expert, your web server isn\u2019t tuned to handle much traffic, and your computer is distant from the interconnection hubs where most websites are hosted. For these reasons, when we move a web application from development to production, we deploy it to a web hosting service that provides a hosting platform on a server located in a strategically-located data center . Data centers offer colocation services , renting rack-mounted computers with fast Internet connections that can be configured as web servers. In the early days of the web, deploying a web application required system administration skills to configure and maintain a web server. Today, some developers like to set up their web servers \u201cfrom bare metal\u201d using virtual private servers from Linode, Slicehost, Rackspace, Amazon EC2, or others. With sufficent skills and study, they say there is a feeling of satisfaction from doing it yourself. But not everyone wants to be a system administrator. Most Rails developers simply use a hosted platform as a service (PaaS) provider such as Heroku , DigitalOcean , EngineYard , OpenShift , or Pivotal Cloud Foundry . If you\u2019ve previously built web sites, you may already be using a shared web hosting service such as GoDaddy or DreamHost. Be skeptical if a shared web hosting service, designed for WordPress or static websites, claims to support Rails applications; most do so badly. Shared hosting services offer file space for static websites on servers that are shared by thousands of websites. A Rails application requires considerably greater computing resources and specialized expertise. In contrast, a platform as a service provider offers a hardware and software stack optimized for application performance and developer convenience. Heroku is the best known and most popular PaaS provider and we\u2019ll use it to deploy the tutorial application. Using Heroku or another PaaS provider means you don\u2019t need skills as a system administrator to manage your web server. Instead, you\u2019ll have experts maintaining the production environment, tuning system performance, and keeping the servers running.","title":"Chapter 22 Deploy"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#221-heroku-costs","text":"It costs nothing to set up a Heroku account and deploy as many applications as you want. You\u2019ll pay only if you upgrade your hosting to accommodate a busy website. Heroku pricing is based on a measure of computing resources the company calls a \u201cdyno.\u201d Think of a dyno as a virtual server (though it is not). For personal projects, you can run your Rails application on a single dyno and never incur a charge, as long as it is not active more than 12 hours a day. A single dyno idles after one hour of inactivity, \u201cgoing to sleep\u201d until it receives a new web request. For a personal project, this means your web application will respond with a few seconds delay if it hasn\u2019t received a web request in over an hour. After it wakes up, it will respond quickly to every browser request. If you want your web application running 24 hours per day and responding to every request without delay, Heroku will charge $7 per month for a \u201chobby\u201d account. You\u2019ll be able to set up a custom domain, using your own domain name. Heroku offers the option of adding dynos to handle more traffic for $25 per month; here\u2019s an article that compares Heroku costs . A single dyno can serve thousands of requests per second, but performance depends greatly on your application. As a default, Heroku supports Puma , the recommended web server for Rails 5. Serving a typical Rails application that takes 100ms on average to process each request, Puma can accommodate about 50 requests per second per dyno, which is adequate for a personal project. If traffic surges on your website and exceeds 50 requests per second, you can scale up with more dynos. Heroku is ideal for hosting our application: no system administration expertise is required hosting is free performance is excellent For this tutorial application, we won\u2019t concern ourselves with the possibility that the website may get a lot of traffic. I\u2019m sure you\u2019ll join me in offering hearty thanks to Heroku for providing a convenient service that beginners can use for free. Let\u2019s deploy!","title":"22.1 Heroku Costs"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#222-test-the-application","text":"Before deploying an application to production, a professional Rails developer runs integration or acceptance tests. If the developer follows the discipline of test-driven development , he or she will have a complete test suite that confirms the application runs as expected. Often the developer uses a continuous integration server which automatically runs the test suite each time the code is checked into the GitHub repository. We haven\u2019t used test-driven development to build this application so no test suite is available. You\u2019ve tested the application manually at each stage.","title":"22.2 Test the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#223-preparing-for-heroku","text":"You\u2019ll need to prepare your Rails application for deployment to Heroku.","title":"22.3 Preparing for Heroku"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2231-gemfile","text":"We need to modify the Gemfile for Heroku. We add a group :production block for a gem that Heroku needs: pg - PostgreSQL gem Heroku doesn\u2019t support the SQLite database; the company provides a PostgreSQL database. Though we won\u2019t need it for our tutorial application, we must include the PostgreSQL gem for Heroku. We\u2019ll mark the sqlite3 gem to be used in development only. Open your Gemfile and replace the contents with the following: Gemfile source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' gem 'sqlite3' end group :production do gem 'pg' end We have to run bundle install because we\u2019ve changed the Gemfile. The gem we\u2019ve added is only needed in production so we don\u2019t install it on our local machine. When we deploy, Heroku will read the Gemfile and install the gem in the production environment. We\u2019ll run bundle install with the \u2013without production argument so we don\u2019t install the new gem locally: $ bundle install --without production You\u2019ll see: . . . Gems in the group production were not installed. Use `bundle show [gemname]` to see where a bundled gem is installed. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"gems for Heroku\" $ git push","title":"22.3.1 Gemfile"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2232-asset-pipeline-in-production","text":"It is important to understand that assets are compiled by Heroku at the time of deployment. Rails compiles assets to make our application faster for the user. The Rails asset pipeline produces single CSS and JavaScript files that combine all the files in the folders app/assets/javascripts/ and app/assets/stylesheets/ . In development mode, the Rails asset pipeline \u201clive compiles\u201d all CSS and JavaScript files so any changes are reflected immediately. But compiling assets adds processing overhead. In production, a web application would be slowed unnecessarily if assets were compiled for every web request. Consequently, assets are precompiled by Heroku at the time we deploy our application to production. When assets are compiled, the Rails asset pipeline will automatically produce concatenated and minified application.js and application.css files from files listed in the manifest files app/assets/javascripts/application.js and app/assets/stylesheets/application.css.scss . The result will be several files added to the public/assets/ folder. The filenames will contain a long unique identifier that prevents caching when you change the application CSS or JavaScript. You can precompile assets manually with the command rails assets:precompile but ordinarily it is not necessary. It is a likely indicator that the asset pipeline is not working or assets are not compiled if CSS styling is missing from your web pages. If you want to learn more about the asset pipeline, refer to the Rails Guide on the Asset Pipeline or an article from LaunchSchool .","title":"22.3.2 Asset Pipeline in Production"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2233-option-to-ban-spiders","text":"Do you want your website to show up in Google search results? If there\u2019s a link anywhere on the web to your site, within a few days (sometimes hours) the Googlebot spider will visit your site and add it to the database for the Google search engine. Most webmasters want their sites to be found in Google search results. If that\u2019s not what you want, you may want to modify the file public/robots.txt to prevent indexing by search engines. Only change this file if you want to prevent your website from appearing in search engine listings: # See http://www.robotstxt.org/robotstxt.html for documentation","title":"22.3.3 Option to Ban Spiders"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#_4","text":"","title":""},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#to-ban-all-spiders-from-the-entire-site-uncomment-the-next-two-lines","text":"","title":"To ban all spiders from the entire site uncomment the next two lines:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#user-agent","text":"","title":"User-agent: *"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#disallow","text":"To block all search engine spiders, remove the commenting from the User-Agent and Disallow lines. You can learn more about the format of the robots exclusion standard .","title":"Disallow: /"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2234-humanstxt","text":"Many websites include a robots.txt file for nosy bots so it\u2019s only fair that you offer a humans.txt file for nosy people. Few people will look for it but you can add a file public/humans.txt to credit and identify the creators and software behind the website. The HTML5 Boilerplate project offers an example file or you can borrow from RailsApps .","title":"22.3.4 Humans.txt"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#224-sign-up-for-a-heroku-account","text":"In the chapter, \u201cAccounts You May Need,\u201d I suggested you sign up for a Heroku account. To deploy an app to Heroku, you must have a Heroku account. Visit https://id.heroku.com/signup/devcenter to set up an account. Be sure to use the same email address you used to configure Git locally. You can check the email address you used for Git with: $ git config --get user.email","title":"22.4 Sign Up for a Heroku Account"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#225-heroku-toolbelt","text":"Heroku provides a command line utility for creating and managing Heroku apps. Visit https://toolbelt.heroku.com/ to install the Heroku Toolbelt. A one-click installer is available for Mac OS X, Windows, and Linux. The installation process will install the Heroku command line utility. It also installs the Foreman gem which is useful for duplicating the Heroku production environment on a local machine. The installation process will also make sure Git is installed. To make sure the Heroku command line utility is installed, try: $ heroku version heroku-toolbelt/... You\u2019ll see the heroku-toolbelt version number. You should be able to login using the email address and password you used when creating your Heroku account: $ heroku login Enter your Heroku credentials. Email: [email protected] Password: Could not find an existing public key. Would you like to generate one? [Yn] Generating new SSH public key. Uploading ssh public key /Users/adam/.ssh/id_rsa.pub The Heroku command line utility will create SSH keys if necessary to guarantee a secure connection to Heroku.","title":"22.5 Heroku Toolbelt"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#226-heroku-create","text":"Be sure you are in your application root directory and you\u2019ve committed the tutorial application to your Git repository. Use the Heroku create command to create and name your application. $ heroku create myapp Replace myapp with something unique. Heroku demands a unique name for every hosted application. If it is not unique, you\u2019ll see an error, \u201cname is already taken.\u201d Chances are, \u201clearn-rails\u201d is already taken. The name must start with a letter and can only contain lowercase letters, numbers, and dashes. If you don\u2019t specify your app name ( myapp in the example above), Heroku will supply a placeholder name. You can easily change Heroku\u2019s placeholder name to a name of your choice with the heroku apps:rename command (see Renaming Apps from the CLI ). Don\u2019t worry too much about getting the \u201cperfect name\u201d for your Heroku app. The name of your Heroku app won\u2019t matter if you plan to set up your Heroku app to use your own domain name. You\u2019ll just use the name for access to the instance of your app running on the Heroku servers; if you have a custom domain name, you\u2019ll set up DNS ( domain name service ) to point your domain name to the app running on Heroku. The heroku create command sets your Heroku application as a Git remote repository. That means you\u2019ll use the git push command to deploy your application to Heroku.","title":"22.6 Heroku Create"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#227-enable-email","text":"You\u2019ll need to enable email for production or else you\u2019ll get errors when your application tries to send email from Heroku. To use SendGrid, add the following to your config/environments/production.rb file: # email enabled in production config.action_mailer.smtp_settings \\= { address: \"smtp.sendgrid.net\", port: 587, domain: Rails.application.secrets.domain_name, authentication: \"plain\", enable_starttls_auto: true, user_name: Rails.application.secrets.email_provider_username, password: Rails.application.secrets.email_provider_password } # ActionMailer Config config.action_mailer.default_url_options \\= { :host \\=> Rails.application.secrets.domain_name } config.action_mailer.delivery_method \\= :smtp config.action_mailer.perform_deliveries \\= true config.action_mailer.raise_delivery_errors \\= false You can use port 25, 587, or 2525 (some ISPs restrict connections on port 25). Be sure to add the new settings before the end keyword in the file. The settings can be added anywhere, as long as they precede the end keyword! You\u2019ll need to specify the unique name you\u2019ve selected for your hosted application. We\u2019re using the Rails.application.secrets.domain_name configuration variable in two places in the file. The config/secrets.yml file provides configuration variables for use in production. Be sure to commit your code to the Git local repository: $ git add -A $ git commit -m \"email set for Heroku\" $ git push Next we\u2019ll set Heroku environment variables.","title":"22.7 Enable Email"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#228-set-heroku-environment-variables","text":"When you run your application, configuration values are obtained from the config/secrets.yml file, which contains Unix environment variables which are set in the .bash_profile or .bashrc files. Heroku doesn\u2019t have a .bash_profile or .bashrc file, so you\u2019ll need a way to set environment variables on Heroku. You can use the heroku config:add command. $ heroku config:add SENDGRID_USERNAME\\='example' $ heroku config:add SENDGRID_PASSWORD\\='secret' $ heroku config:add MAILCHIMP_API_KEY\\='my-key' $ heroku config:add MAILCHIMP_LIST_ID\\='mylistid' $ heroku config:add OWNER_EMAIL\\=' [email protected] ' $ heroku config:add DOMAIN_NAME\\='myapp.herokuapp.com' Don\u2019t use the values shown above. Instead, look in your .bash_profile or .bashrc files and copy the values you find there. When you set myapp.herokuapp.com , replace myapp with the name that Heroku is using for your application. If you want to use a custom domain name, you\u2019ll need to set up DNS ( domain name service ), which we won\u2019t cover in this tutorial. You don\u2019t need to set SECRET_KEY_BASE , even though it is in your config/secrets.yml file. Heroku sets it automatically. Check that the environment variables are set with: $ heroku config See the Heroku documentation on Configuration and Config Vars and the article Rails Environment Variables for more information.","title":"22.8 Set Heroku Environment Variables"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#229-push-to-heroku","text":"After all this preparation, you can finally push your application to Heroku. Be sure to commit any recent changes to the Git local repository before you push to Heroku. You commit your code to Heroku just like you push your code to GitHub. Here\u2019s how to push to Heroku: $ git push heroku master You may see a message, \u201cThe authenticity of host \u2018heroku.com\u2019 can\u2019t be established. Are you sure you want to continue connecting (yes/no)?\u201d. You can answer \u201cyes\u201d and safely continue. The push to Heroku takes several minutes. You\u2019ll see a sequence of diagnostic messages in the console, beginning with: Counting objects... and finishing with: remote: Verifying deploy.... done.","title":"22.9 Push to Heroku"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2210-updating-the-application","text":"It is likely you\u2019ll make changes to your application after deploying to Heroku. Each time you update your site and push the changes to GitHub, you\u2019ll also have to push the new version to Heroku. A typical update scenario looks like this: $ git add -A $ git commit -m \"revised application\" $ git push $ git push heroku master","title":"22.10 Updating the Application"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2211-visit-your-site","text":"Your application will be running at http://my-app-name.herokuapp.com/ . You can open any web browser and visit the site. For a shortcut, you can open your default web browser and visit your site from the command line: $ heroku open If you\u2019re using hosted development such as Cloud9, you\u2019ll need to open a browser manually to visit the site. If you\u2019ve configured everything correctly, you should be able to sign up for the newsletter and send a contact request.","title":"22.11 Visit Your Site"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2212-customizing","text":"For a real application, you\u2019ll likely want to use your own domain name for your app. See Heroku\u2019s article about custom domains for instructions. You may also want to improve website responsiveness by adding page caching with a content delivery network such as CloudFlare . CloudFlare can also provide an SSL connection for secure connections between the browser and server. Heroku offers many add-on services . These are particularly noteworthy: Adept Scale - automated scaling of Heroku dynos New Relic - performance monitoring For an in-depth look at your options, see the Rails Heroku Tutorial .","title":"22.12 Customizing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2213-troubleshooting","text":"When you get errors, troubleshoot by reviewing the log files: $ heroku logs If necessary, use the Unix tail flag to monitor your log files. Open a new terminal window and enter: $ heroku logs -t to watch the server logs in real time.","title":"22.13 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2214-where-to-get-help","text":"Your best source for help with Heroku is Stack Overflow . Use the tag \u201cheroku,\u201d \u201clearn-ruby-on-rails,\u201d or \u201crailsapps\u201d when you post your question. Your issue may have been encountered and addressed by others. You can also check the Heroku Dev Center or the Heroku Google Group .","title":"22.14 Where to Get Help"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-23-analytics","text":"In earlier chapters, we built the tutorial application and deployed it for hosting on Heroku. We\u2019ve left something out. Though not obvious, it\u2019s very important: analytics. Analytics services provide reports about website traffic and usage. You\u2019ll use the data to increase visits and improve your site. Analytics close the communication loop with your users; your website puts out a message and analytics reports show how visitors respond. Google Analytics is the best known tracking service. It is free, easy to use, and familiar to most web developers. In this chapter we\u2019ll integrate Google Analytics with the tutorial application. There are several ways to install Google Analytics for Rails. The article on Analytics for Rails looks at various approaches and explains how Google Analytics works. For this tutorial, we\u2019ll use the Segment.com service. The service provides an API to send analytics data to dozens of different services, including Google Analytics.","title":"Chapter 23 Analytics"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#231-segmentcom","text":"Segment.com is a subscription service that gathers analytics data from your application and sends it to dozens of different services, including Google Analytics. The service is free for low-volume websites, accommodating 1000 tracked users per month at no cost. There is no charge to sign up for the service. Using Segment.com means you install one JavaScript library and get access to reports from dozens of analytics services. You can see a list of supported services . The company offers helpful advice about which analytics tools to choose from . For low-volume sites, many of the analytics services are free, so Segment.com makes it easy to experiment and learn about the available analytics tools. The service is fast and reliable, so there\u2019s no downside to trying it.","title":"23.1 Segment.com"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#232-accounts-you-will-need","text":"You will need an account with Segment.com. Sign up for Segment.com . You will need accounts with each of the services that you\u2019ll use via Segment.com. You\u2019ll likely want to start with Google Analytics, so you\u2019ll need a Google Analytics account and tracking ID. Visit the Google Analytics website to obtain the Tracking ID for your website. You\u2019ll need to know the domain name of your website to get an account for your website. If you\u2019ve deployed to Heroku without a custom domain, use the domain that looks like \u201cmyapp.herokuapp.com\u201d. Or use your custom domain if you have one. Use it for fields for \u201cWebsite Name,\u201d \u201cWeb Site URL,\u201d and \u201cAccount Name.\u201d Choose the defaults when you create your Google Analytics account and click \u201cGet Tracking ID.\u201d Your tracking ID will look like this: UA-XXXXXXX-XX . You won\u2019t need the tracking code snippet as we will use the Segment.com JavaScript snippet instead. You\u2019ll check your Google Analytics account later to verify that Google is collecting data.","title":"23.2 Accounts You Will Need"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#233-installing-the-javascript-library","text":"Segment.com provides a JavaScript snippet that sets an API token to identify your account and installs a library named analytics.js . This is similar to how Google Analytics works. The Segment.com library loads asynchronously, so it won\u2019t affect page load speed. The Segment.com JavaScript snippet should be loaded on every page and it can be included as an application-wide asset using the Rails asset pipeline. We\u2019ll add the Segment.com JavaScript snippet to a file named app/assets/javascripts/segment.js . The manifest directive //= require_tree . in the file app/assets/javascripts/application.js will ensure that the new file is included in the concatenated application JavaScript file. If you\u2019ve removed the //= require_tree . directive, you\u2019ll have to add a directive to include the app/assets/javascripts/segment.js file. Create a file app/assets/javascripts/segment.js and include the following: (function(){ // Create a queue, but don't obliterate an existing one! var analytics \\= window.analytics \\= window.analytics || []; // If the real analytics.js is already on the page return. if (analytics.initialize) return; // If the snippet was invoked already show an error. if (analytics.invoked) { if (window.console && console.error) { console.error('Segment snippet included twice.'); } return; } // Invoked flag, to make sure the snippet // is never invoked twice. analytics.invoked \\= true; // A list of the methods in Analytics.js to stub. analytics.methods \\= [ 'trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'reset', 'group', 'track', 'ready', 'alias', 'debug', 'page', 'once', 'off', 'on' ]; // Define a factory to create stubs. These are placeholders // for methods in Analytics.js so that you never have to wait // for it to load to actually record data. The `method` is // stored as the first argument, so we can replay the data. analytics.factory \\= function(method){ return function(){ var args \\= Array.prototype.slice.call(arguments); args.unshift(method); analytics.push(args); return analytics; }; }; // For each of our methods, generate a queueing stub. for (var i \\= 0; i < analytics.methods.length; i++) { var key \\= analytics.methods[i]; analytics[key] \\= analytics.factory(key); } // Define a method to load Analytics.js from our CDN, // and that will be sure to only ever load it once. analytics.load \\= function(key){ // Create an async script element based on your key. var script \\= document.createElement('script'); script.type \\= 'text/javascript'; script.async \\= true; script.src \\= ('https:' \\=== document.location.protocol ? 'https://' : 'http://') + 'cdn.segment.com/analytics.js/v1/' + key + '/analytics.min.js'; // Insert our script next to the first script element. var first \\= document.getElementsByTagName('script')\\[0\\]; first.parentNode.insertBefore(script, first); }; // Add a version to keep track of what's in the wild. analytics.SNIPPET_VERSION \\= '4.0.0'; // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load(\"YOUR_WRITE_KEY\"); })(); You can get the newest version of the code from the Segment.com Quickstart page. If you copy a newer version of the code, remove the <script type=\"text/javascript\"> and </script> tags from the top and bottom. The Rails asset pipeline will add the code to the application.js file which already contains the necessary <script> tags. If you copy the code from the Segment.com Quickstart instructions, also remove: // Make the first page call to load the integrations. If // you'd like to manually name or tag the page, edit or // move this call however you'd like. analytics.page(); We\u2019ll add analytics.page(); later, wrapping it in additional code to accommodate Rails Turbolinks. Note that the Segment.com website offers a minified version of the snippet for faster page loads. We\u2019ve used the non-minified version so you can read the code and comments. If you want, you can get minified version from the Segment.com website for improved speed.","title":"23.3 Installing the JavaScript Library"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#234-replace-the-write-key","text":"You must replace YOUR_WRITE_KEY with your Segment.com \u201cWrite Key.\u201d After you log in to Segment.com , click on your \u201cworkspace,\u201d then choose a \u201csource,\u201d click \u201csettings,\u201d and click \u201cAPI Keys\u201d in the side navigation bar. Add the \u201cWrite Key\u201d in the file where you see this line: // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load(\"YOUR_WRITE_KEY\"); Now you must add extra code to the Segment.com JavaScript snippet. The extra code accommodates Turbolinks, plus page view and event tracking, which we\u2019ll look at next.","title":"23.4 Replace the Write Key"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#235-add-integration-code","text":"To make sure every page is tracked when Rails Turbolinks is used, plus track page views and events, you must add the following JavaScript to the end of the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { console.log('page loaded'); analytics.page(); analytics.trackForm($('#new_visitor'), 'Signed Up'); analytics.trackForm($('#new_contact'), 'Contact Request'); }) Add it after the last line. Add it after the orthographic car wreck that looks like })(); . I\u2019ll explain the purpose of this code next.","title":"23.5 Add Integration Code"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#236-page-view-tracking-with-turbolinks","text":"To make sure every page is tracked when Rails Turbolinks is used, we\u2019ve added the following JavaScript to the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { . . . analytics.page(); . . . }) Rails 4.0 introduced a feature named Turbolinks to increase the perceived speed of a website. Turbolinks makes an application appear faster by only updating the body and the title of a page when a link is followed. By not reloading the full page, Turbolinks reduces browser rendering time and trips to the server. With Turbolinks, the user follows a link and sees a new page but Segment.com or Google Analytics thinks the page hasn\u2019t changed because a new page has not been loaded. To resolve the issue, you could disable Turbolinks by removing the turbolinks gem from the Gemfile. However, it\u2019s nice to have both the speed of Turbolinks and tracking data, so I\u2019ll show you how to get tracking data with Turbolinks. Turbolinks fires a load event when a page has been replaced. The code listens for the load event and calls the Segment.com analytics.page() method. This code will work even on pages that are not visited through Turbolinks (for example, the first page visited).","title":"23.6 Page View Tracking with Turbolinks"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#237-event-tracking","text":"Segment.com gives us a convenient method to track page views. Page view tracking gives us data about our website traffic, showing visits to the site and information about our visitors. It\u2019s also important to learn about a visitor\u2019s activity on the site. Site usage data helps us improve the site and determine whether we are meeting our business goals. This requires tracking events as well as page views. The Segment.com JavaScript library gives us two methods to track events: trackLink trackForm Link tracking can be used to send data to Segment.com whenever a visitor clicks a link. It is not useful for our tutorial application because we simply record a new page view when a visitor clicks a link on our site. However, if you add links to external sites and want to track click-throughs, you could use the trackLink method. The method can also be used to track clicks that don\u2019t result in a new page view, such as changing elements on a page. The trackForm method is more useful for our tutorial application. We\u2019ve already appended it to the app/assets/javascripts/segment.js file: // accommodate Turbolinks // track page views and form submissions $(document).on('turbolinks:load', function() { console.log('page loaded'); analytics.page(); analytics.trackForm($('#new_visitor'), 'Signed Up'); analytics.trackForm($('#new_contact'), 'Contact Request'); }) I\u2019ve included a console.log(\u2019page loaded\u2019) statement so you can check the browser JavaScript console to see if the code runs as expected. The trackForm method takes two parameters, the ID attribute of a form and a name given to the event. Form tracking will show us how many visitors sign up for the newsletter or submit the contact request form. Obviously we can count the number of subscribers in MailChimp or look in the site owner\u2019s inbox to see how many contact requests we\u2019ve received. But form tracking helps us directly correlate the data with visitor data. For example, we can analyze our site usage data and see which traffic sources result in the most newsletter sign-ups. You can read more about the Segment.com JavaScript library in the Segment.com documentation .","title":"23.7 Event Tracking"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#238-troubleshooting","text":"Click \u201cDebugger\u201d in the navigation bar so you can monitor data sent to Segment.com from your application. When you test the application locally, you should see the results of page visits and form submissions within seconds in the Segment.com debugger. If you don\u2019t see your page visits in the Segment.com debugger, open the browser JavaScript console, visit a page, and check for the message \u201cpage loaded\u201d in the JavaScript console. In the Chrome browser, the JavaScript console is available under the item \u201cDeveloper\u201d in the \u201cView\u201d menu.","title":"23.8 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#239-segmentcom-integrations","text":"After installing the Segment.com JavaScript snippet in your application, go to your \u201csources\u201d page and click the \u201cintegrations\u201d link to visit the integrations page to select the services that will receive your data. Each service requires a different configuration information. At a minimum, you\u2019ll have to provide an account identifier or API key that you obtained when you signed up for the service. For Google Analytics, enter your Google Analytics tracking id. It looks like UA-XXXXXXX-XX . With Google Analytics enabled as a Segment.com integration, you\u2019ll see form submissions appear in the Google Analytics Real-Time report, under the \u201cEvents\u201d heading. Note that Google doesn\u2019t process their data in real-time in most of its reports. Data appears immediately in the Google Analytics Real-Time report. Other Google Analytics reports, such as the Audience report, won\u2019t show data immediately. Check the next day for updated reports.","title":"23.9 Segment.com Integrations"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2310-deploy","text":"Commit to the Git repo and deploy to Heroku: $ git add -A $ git commit -m \"analytics\" $ git push Then you can deploy to Heroku: $ git push heroku master When you visit the site, you should see real-time tracking of data sent to Segment.com in the Segment.com debugger. Log into your Google Analytics account to see real-time tracking of visits to your website. Under \u201cStandard Reports\u201d see \u201cReal-Time Overview.\u201d You\u2019ll see data within seconds after visiting any page.","title":"23.10 Deploy"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2311-improving-the-user-experience","text":"Website analytics can be used to improve visitors\u2019 experience of the website. Deploying the website is not the last step in your project. Unlike many earlier forms of communication (such as releasing a film, publishing a book, or broadcasting an advertisement), we can see how every visitor responds to the website. That means your work is not done when you deploy the site. Look at your usage data to see which elements of the site are getting attention and which are being used. Does no one visit the \u201cAbout\u201d page? Maybe the navigation link is difficult to find. Do many people visit the Contact page but few submit a contact request form? Maybe you should change the label on the button or offer other ways to contact the site owner. Effective and successful websites often are the result of systematic A/B testing (sometimes called split testing ). A/B testing is a technique of creating variations on a web page, such as changing text, layout, or button colors, and using website analytics to measure the effect of the change. You can learn more about services such as Content Analytics in Google Analytics, Optimizely , or Visual Website Optimizer . These services provide complete \u201cdashboards\u201d to set up usage experiments and measure results ( Optimizely is available as a Segment.com integration).","title":"23.11 Improving the User Experience"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2312-conversion-tracking","text":"You may only be interested in knowing that people visit your site, without measuring visitors\u2019 engagement or response to the site. But in most cases, if you build a website, you\u2019ll offer a way for visitors to respond, whether it is by purchasing a product, signing up for a newsletter, or clicking a \u201clike\u201d button. The ultimate measure of website effectiveness is the conversion rate . The term comes from the direct marketing industry and originally referred to a measure of how people responded to \u201cjunk mail\u201d offers. For a website, the conversion rate indicates the proportion of visitors who respond to a call to action , which may be an offer to make a purchase, register for a membership, sign up for a newsletter, or any other activity which shows the visitor is engaged and interested. For our tutorial application, we can measure our website effectiveness by looking at the conversion rate for newsletter sign-ups. We\u2019re tracking page views which will give us a count of visits to the website home page. And we\u2019ve got event tracking in place to count newsletter sign-ups. If 100 people visit the home page and 10 people request a newsletter, we\u2019ve got a conversion rate of 10%. We can try to improve the conversion rate by improving the user experience (perhaps through A/B testing) or focusing on increasing traffic from sources that provide a higher conversion rate. You can monitor your site\u2019s conversion rate by setting up events as goals in Google Analytics. Segment.com also integrates with many services which provide conversion tracking.","title":"23.12 Conversion Tracking"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2313-enjoy-what-youve-achieved","text":"You\u2019ve completed building the tutorial application. If your project was to build an application for someone else, whether the company you work for, or a client like Foobar Kadigan, you\u2019ve completed the deliverable . You started with project planning, in the form of user stories. You implemented the application using a variety of technologies supported by the Ruby on Rails development platform. And you\u2019ve deployed the application for others to use, with analytics in place to track traffic and usage. Not every manager or client will appreciate the effort or the complexity of the project you\u2019ve built. Mr. Kadigan\u2019s happiness may depend on how well you\u2019ve understood his goals and the degree to which you\u2019ve met his expectations. If you\u2019re working for yourself, or launching your startup, you may be your own toughest boss, because there is always more to do. With technology projects, like many other aspects of life, though it seems you\u2019ll never get it right, and never get it done, there are moments when you can savor a sense of accomplishment. This is one of those moments. Before you start thinking about adding one more feature, or updating the application for the new releases that inevitably came out during the time you were working, take time to bask in the satisfaction of seeing the results of your work. Software development has its own unique rhythm of frustration and satisfaction. As software developers, we subject ourselves to hours, days, or weeks of struggle with code that is cryptic and resists understanding. We gain mastery for a few minutes and then turn to the next problem. With each feature you implement, or issue you resolve, you\u2019ll experience brief elation before resuming the grind of development. But at each milestone, and at the completion of the project, you\u2019ve built something tangible that you can use. You can try it out yourself and show it to others. Give yourself full credit. You\u2019ve built something extraordinary with little more than intelligence and attention. You\u2019ve leveraged the work of other developers who have contributed to the open source Ruby on Rails platform and you\u2019ve created your own unique product. This is what drives us as developers; to create something from nothing, using only our collective intelligence and ambition.","title":"23.13 Enjoy What You\u2019ve Achieved"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-24-testing","text":"You don\u2019t need to read this chapter if you will always be a student, or a hobbyist, working on personal projects. But if you wish to work as a professional Rails developer, or launch your own startup, with money and reputation at stake, you must learn about testing. In this chapter, I\u2019ll introduce the basic concepts of testing and show how to build a test suite for the tutorial application.","title":"Chapter 24 Testing"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#241-why-test","text":"Software applications are fragile. When you write a song, you can include a wrong note and the song won\u2019t break. In a film, technical flaws like a \u201cjump cut\u201d or a microphone in the frame won\u2019t ruin an entire movie. But an unseen error in a software program can disrupt a key feature or crash the entire application. Software applications are never finished. Songs and movies reach a stage of completion and are delivered to their audience, with no expectation that the completed work will change. With software applications, there\u2019s always an upcoming version with bug fixes or new features. As web developers, we continue to make changes to the applications that our customers are actively using. Sometimes new features are delivered within minutes, or hours, of committing new code to the repository. Software applications are complex. A web application, or any software program, is a machine with intricately connected parts, or dependencies . As an application grows, the connections quickly grow more complex, to the point where no one is able to see all the dependencies at once. Plus, web applications are often a collaborative effort, so no one person is familiar with every line of code. Combine the evolving nature of an application, with the complexity of the product, and the likelihood that flaws will be immediately noticed by users, and you\u2019ll realize why testing is so important to the software development process. Testing was once considered the sole responsibility of a quality assurance (QA) department. Senior developers created new features or fixed bugs. When the work was \u201cdone,\u201d lesser paid (and lower status) developers \u201cin QA\u201d clicked through screens, with written notes or scripts, as if they were users testing every feature of a program. Invariably, manual testing led to oversights, because testing notes were out of date, \u201cedge cases\u201d were overlooked, and the work was monotonous. In the best-run companies, QA engineers are now expert consultants on testing methods and a source of guidance for other developers. We now rely on automated testing . Even more important, the job of writing test code now belongs to the developer who creates a feature or fixes a bug. It\u2019s our responsibility to write adequate tests for any code we add to the repository.","title":"24.1 Why Test?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#242-what-are-tests","text":"Developers talk about testing as if it were an activity different from writing code. It is not. Testing is something we do while writing code. We create tests with the same text editor we use use to write code. The tests themselves are written in Ruby, just like any other part of a Rails application. You\u2019ll put the test code in either a tests/ or spec/ folder, committed to the Git repository with all the other code. You\u2019ll use the specialized API of a testing framework for the methods of your tests, either Minitest or RSpec . Test code is different from code that implements features in one significant way: Instead of supporting interactions with a user, test code interacts with the code you\u2019ve written, verifying the code behaves as intended.","title":"24.2 What Are Tests?"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#243-scripted-or-exploratory","text":"When testing is used for quality assurance, the goal is to create a suite of automated tests that will reveal any bugs that creep into code and break the application. Sometimes this is called scripted testing . These tests are checked into the software repository and maintained with the application. Often developers will set up a system for continuous integration (CI), which will automatically run the test suite whenever the repository is updated. Developers can set up a CI server such as Jenkins or use a hosted CI service such as Travis CI , CircleCI , or Semaphore to run tests automatically. Automated testing with continuous integration serves as a safety net for developers. There is another role for testing, which is often called exploratory testing , or developer testing . These tests may end up in an application test suite, but the primary purpose is to help a developer construct an application. Many developers, after gaining experience in writing tests for quality assurance, realize that writing tests can be a useful first step in figuring out how a feature should be implemented. It may seem odd to write tests first, but exploratory testing can clarify what behavior will be required, and help the developer think through alternatives and edge cases. This approach is called test-first development , and many developers will tell you that when you write tests first, you\u2019ll be more satisfied; you\u2019ll be more focused; and you\u2019ll avoid tangents and detours of the \u201cnice-to-have-but-not-really-needed\u201d variety. We\u2019ll look closely at test-first development in conjunction with Test-Driven Development (TDD) and Behavior-Driven Development (BDD) at the end of this chapter. First, let\u2019s gain an understanding of testing terminology and practice.","title":"24.3 Scripted or Exploratory"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#244-regression-and-acceptance","text":"We describe tests by the purpose they serve. In addition to exploratory testing used in test-first development, there are several kinds of tests used for quality assurance. Regression tests are run every time we change code. Sometimes we want to make sure new features don\u2019t break the existing application. More often, we run tests after changing existing code to make it more readable, elegant, or effective. We call this tinkering \u201c refactoring .\u201d Refactoring is very similar to what we call editing or rewriting when we work with the written word. Before we refactor, we need to know what results we expect from our code, and we need automated tests to execute our code and check for the expected results. If our automated tests are adequate, we can use the tests as regression tests, making sure our refactoring hasn\u2019t introduced new bugs. Acceptance tests are sometimes identical to regression tests, and may use the same test code. The purpose is different, so we give this kind of testing a different name. Acceptance tests provide accountability and serve a management function. These are tests that determine if a feature has been implemented as expected. It is common to run acceptance tests when an outside contractor delivers code, so we can determine if the team has delivered what we requested. We can also use acceptance tests to determine if our internal team has implemented the stated requirements. Proponents of behavior-driven development claim that the process of creating acceptance tests clarifies the product requirements. Obviously, if we want adequate acceptance tests, we need to plan carefully when specifying the product requirements. If we\u2019ve planned well, we can turn our user stories into automated tests that serve as acceptance tests.","title":"24.4 Regression and Acceptance"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#245-units-and-integration","text":"We also describe tests by their relationship to the rest of the code. Unit tests probe the internal workings of the machine. If we\u2019ve written our code well, a small section of the code, such as a class or a method, will be a discrete unit that can be tested independently of all other units. Unit tests inspect the integrity of small parts of the application in isolation. When a unit test fails, we can quickly identify and fix broken code. We use integration tests to make sure the entire application works as expected. Integration tests mimic the behavior of real users. For a web application, an integration test may simulate a user signing in, filling out forms, clicking between pages, and verifying that contents of pages match expected results. Integration tests can also be called feature tests if they are designed to confirm that product features work as expected. Our feature tests can serve as acceptance tests if we use the test suite to determine if we\u2019ve correctly implemented our user stories or other product specifications. Sometimes these tests are called black box tests because the code is tested as if the application was a black box, with the internal workings of the application hidden from the observer. They are also called system tests or end-to-end tests .","title":"24.5 Units and Integration"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#246-sample-data","text":"When we write tests, either feature tests or unit tests, we often want to check whether a method returns the data we expect. That means we have to create the data we need in advance of the test. Either we populate a database with the data we expect, or we disconnect the database and instantiate an object that provides the data we expect. Test frameworks give us a tool named a factory or a fixture to create sample data. Developers argue about what is better, factories or fixtures, but you\u2019ll encounter factories more often, particularly the popular FactoryGirl gem. A factory is an object that creates other objects. When you use FactoryGirl, you have the option of saving your object to the database (which is slow) or building your object in memory only (which is faster). Fixtures are used to populate a database with sample data before your tests run. If you use fixtures, you\u2019ll save sample data in a configuration file. Before tests run, Rails automatically loads all fixtures from configuration files in the test/fixtures folder. As you gain experience with testing, you\u2019ll become familiar with both factories and fixtures.","title":"24.6 Sample Data"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#247-test-doubles","text":"In unit testing, to isolate small parts of the application, sometimes we artificially decouple the code from the rest of the application. For example, with a unit test, we don\u2019t want to connect to an external service with an API to obtain data. Or we simply want a method to get a predictable response from another object. Test doubles stand in for external dependencies. The term is borrowed from Hollywood, where stunt doubles stand in for actors in action scenes. A test double is any kind of pretend object used in place of a real object for testing purposes. There are two types of test doubles, stubs and mocks . Stubs provide canned answers to calls made during the test, only responding when queried by the test. Sometimes stubs record information about the call, for example, the message sent or the number of times called. Mocks are pre-programmed objects that reproduce the behavior of the object they represent, forming a specification of an object\u2019s behavior. It takes time to write stubs and mocks and lots of experience to use them correctly, so as a beginner, you probably won\u2019t write stubs and mocks without help. As you can gain experience, you\u2019ll better understand the difference between stubs and mocks and learn how to use them. For now, it is enough to recognize the terminology and remember that tests run faster and better when we reduce coupling and complexity with test doubles.","title":"24.7 Test Doubles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#248-minitest-and-rspec","text":"You\u2019ve already learned that Rails developers mix and match gems to create a favorite technology stack . Not everyone likes ERB for view templates. Some prefer Haml or Slim syntax for mixing HTML and Ruby in a view. Developers often stray from the default Rails stack when it comes to testing. Since the release of Ruby 1.9, Minitest has been supplied as a standard gem with all Ruby installations. Yet most Rails developers use RSpec for testing. In this tutorial, I\u2019ll use Minitest to introduce you to testing. Minitest is easier to set up and offers a syntax that is very similar to RSpec. Some developers say that there is no reason to use RSpec because Minitest provides almost all the convenience of RSpec with smaller size, faster speed, and less complexity. Other developers insist that RSpec is more expressive and flexible. Realistically, if you want a job working on most Rails teams, you\u2019ll need to learn RSpec. Get started with Minitest to learn the basics of testing. When you\u2019re ready for the next step, the Capstone Rails Tutorials will take you deeper. I also recommend the books Rails 4 Test Prescriptions by Noel Rappin and Everyday Rails Testing with RSpec by Aaron Sumner.","title":"24.8 Minitest and RSpec"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#249-capybara-the-ghost-in-the-machine","text":"Unit tests are simple, in principle and often in practice. The tests are just Ruby code, supplemented with methods from the test framework API. If we want unit tests for all the methods of a User class, we instantiate the class and write code that calls each method and verifies if the response matches our expectations. Using methods from the Minitest or RSpec test framework, we output a message that indicates whether each unit test passes or fails. Integration tests, or feature tests, require more of a framework than unit tests. We want our tests to be as realistic as possible, as if a robot was using a web browser and interacting with our web application. Fortunately, the maintainers of the Capybara gem have created such a robot. To create integration tests, we add the Capybara gem, using it with either Minitest or RSpec. Capybara gives us a visit method that simulates a user visiting a page. After we call the visit method, Capybara gives us a page object and allows us to test whether the page contains the content we expect. Every Rails application relies on a layer of middleware named Rack that ties into a web server. Capybara interacts with the web application, via calls to Rack, as if it was a browser making requests and receiving HTML files as a response. When we use Capybara, by default it operates in headless mode , interacting directly with the Rails application via Rack. \u201cHeadless\u201d means there is no graphical user interface (as if the absent screen was a computer\u2019s head). In headless mode, JavaScript is unavailable. If some of our application features require JavaScript, we must set up Capybara to act as a robot using a real web browser. Capybara has a built-in driver (named Selenium ) that gives our robot the option of automatically launching and using a real web browser for each test. By default, Capybara will use the Firefox web browser if it is installed on your computer. What you\u2019ll see is amazing. When you run tests using Capybara with the JavaScript option, the Firefox web browser will pop open on your desktop and you\u2019ll watch a ghost flying through your web application. With Capybara, you now have a ghostly QA department running your integration tests.","title":"24.9 Capybara, the Ghost in the Machine"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2410-four-phases-of-feature-tests","text":"Test code is easier to understand when you recognize that tests proceed in stages, or phases. Code that simulates a user visiting a web page tends to be organized in four phases: set up visit page verify page contents neutralize The setup phase may include creating a user, signing in, or any other activity that creates the conditions for a test. With Capybara, the test visits the page, which requires Capybara to simulate a browser request to the Rails application. Then, in the third stage, we check if the server response contains the data we expect. Finally, we may need to clean up, resetting the original state of the application, or removing any data the test added to the database.","title":"24.10 Four Phases of Feature Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2411-four-phases-of-unit-tests","text":"Unit tests also are organized in four stages: set up exercise verify teardown When you test a small part of the application in isolation, you\u2019ll focus on an object or method which we call the \u201csystem under test.\u201d The setup phase prepares the system under test. Often this means instantiating an object. Here is an example: user \\= User.new(email: ' [email protected] ') During the exercise phase, something is executed. Often this is a method call: user.save During verification, the result of the exercise is verified against the developer\u2019s expectations: user.email.must_equal ' [email protected] ' During teardown, the system under test is reset to its initial state. Rails integrates with Minitest or RSpec to reset a database to its initial state. You will seldom write code for the teardown phase. Now that you\u2019ve learned about the basic concepts of testing, let\u2019s set up Minitest for our first tests.","title":"24.11 Four Phases of Unit Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2412-set-up-minitest","text":"We\u2019ll set up testing with both Minitest and Capybara, so we can write both unit tests and feature tests. Minitest is a standard Ruby gem, installed when you install Ruby in your environment. We\u2019ll install the minitest-spec-rails gem which makes it easy to use an RSpec-like syntax with Minitest. We\u2019ll also add the minitest-rails-capybara gem to integrate Capybara with Minitest and Rails. Open your Gemfile and replace the contents with the following: Gemfile source 'https://rubygems.org' ruby '2.4.1' gem 'rails', '~> 5.1.2' # Rails defaults gem 'sqlite3' gem 'puma', '~> 3.7' gem 'sass-rails', '~> 5.0' gem 'uglifier', '>= 1.3.0' gem 'coffee-rails', '~> 4.2' gem 'turbolinks', '~> 5' gem 'jbuilder', '~> 2.5' group :development, :test do gem 'byebug', platforms: [:mri, :mingw, :x64_mingw] gem 'capybara', '~> 2.13' gem 'selenium-webdriver' end group :development do gem 'web-console', '>= 3.3.0' gem 'listen', '>= 3.0.5', '< 3.2' gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0' end # learn-rails gem 'bootstrap-sass' gem 'gibbon' gem 'high_voltage' gem 'jquery-rails' group :development do gem 'better_errors' gem 'rails_layout' gem 'sqlite3' end group :production do gem 'pg' end group :test do gem 'minitest-spec-rails' gem 'minitest-rails-capybara' end We\u2019ve added the two gems to the test group. Now, some gems are loaded only when we\u2019re writing code (during development), some are loaded only when the application is running on Heroku (deployed to production), and our newest additions only are loaded when we run tests. Next, install the additional gems: $ bundle install The bundle install command will download and install the gems from the rubygems.org server.","title":"24.12 Set Up Minitest"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24121-run-tests","text":"The command rails test will execute Minitest. Let\u2019s see what happens when we run tests: $ rails test Running via Spring preloader in process 29254 /Users/danielkehoe/workspace/learn-rails/db/schema.rb doesn't exist yet. Run `rails db:migrate` to create it, then try again. If you do not intend to use a database, you should instead alter /Users/danielkehoe/workspace/ /learn-rails/config/application.rb to limit the frameworks that will be loaded. Run options: --seed 35136","title":"24.12.1 Run Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#running","text":"Finished in 0.005570s, 0.0000 runs/s, 0.0000 assertions/s. 0 runs, 0 assertions, 0 failures, 0 errors, 0 skips Rails Minitest informs us that our application is not set up to use a database. The easiest way to resolve the issue is to run rails db:migrate which sets up the database schema file. We\u2019re not using a database for this application so the database schema file will be empty. $ rails db:migrate The rails db:migrate command doesn\u2019t produce any result in the terminal but it will create a new db/schema.rb file. Try running rails test again: $ rails test Running via Spring preloader in process 29468 Run options: --seed 46952","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#running_1","text":"Finished in 0.005945s, 0.0000 runs/s, 0.0000 assertions/s. 0 runs, 0 assertions, 0 failures, 0 errors, 0 skips The output shows that Minitest executes but we have no tests for it to run. Let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"set up minitest\" $ git push","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2413-unit-test-standard-syntax","text":"In its default form, Minitest uses the syntax of the older test_unit framework that was supplied with Ruby before version 1.9. The test_unit syntax uses explicit Ruby to set up tests. Here\u2019s an example of Minitest using the test_unit syntax: require 'test_helper' class VisitorTest < ActiveSupport::TestCase def valid_params { email: ' [email protected] ' } end def test_valid visitor \\= Visitor.new valid_params assert visitor.valid?, \"Can't create with valid params: #{visitor.errors.messages}\" end def test_invalid_without_email params \\= valid_params.clone params.delete :email visitor \\= Visitor.new params refute visitor.valid?, \"Can't be valid without email\" assert visitor.errors[:email], \"Missing error when without email\" end end Notice that we must declare a class VisitorTest that inherits from ActiveSupport::TestCase . Then we must define a new method for each test case using the def keyword. This syntax is not popular with Rails developers. RSpec offers its own DSL (domain specific language) that hides the overhead of setting up classes and methods behind convenience methods. Minitest offers its own version of the the RSpec DSL, allowing us to use the more popular syntax. I\u2019ll use the new RSpec-like syntax in this tutorial, since you are likely to encounter RSpec more frequently.","title":"24.13 Unit Test (Standard Syntax)"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2414-unit-test-spec-syntax","text":"For our first test, let\u2019s create a simple unit test for our Visitor model. Every time we run our tests, we want to know that we\u2019re able to create a Visitor model. We\u2019ll also check that the Visitor model contains a method that returns an email address. The default Rails directory structure already contains a test/models/ folder. Thanks to Rails conventions, we know exactly where to create our test file. Create a file test/models/visitor_test.rb : require 'test_helper' describe Visitor do let(:visitor_params) { {email: ' [email protected] '} } let(:visitor) { Visitor.new visitor_params } it 'is valid when created with valid parameters' do visitor.must_be :valid? end it 'is invalid without an email' do # Delete email before visitor let is called visitor_params.delete :email visitor.wont_be :valid? # Must not be valid without email visitor.errors[:email].must_be :present? # Must have error for missing email end end The test above, written in the RSpec-like syntax, is functionally identical to the previous example, written in the old test_unit syntax. Take a close look at both, so the structure and keywords will be familiar when you see it again. We need require \u2019test_helper\u2019 to enable the test framework and apply any configuration settings. The keywords describe , let , and it are keywords that are also used in the RSpec DSL (domain-specific language). When you see these keywords, you know you are looking at test code, either Minitest or RSpec. The purpose of a unit test is to describe the system under test, in terms of its expected behavior. We create a do ... end block using the describe keyword and specifying a class we wish to test: describe Visitor do . . . end","title":"24.14 Unit Test (Spec Syntax)"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24141-create-a-test-class-with-describe","text":"The describe keyword creates a test class. In this case, the describe keyword will create a class named VisitorTest that inherits from ActiveSupport::TestCase . Using the old test_unit syntax, we could do this with class VisitorTest < ActiveSupport::TestCase but the describe keyword is more convenient. When Minitest runs, it recognizes and executes test classes. By including our code inside a test class, we get to use methods such as let and it which are useful for writing tests. Minitest will recognize various classes like models or controllers and provide appropriate behavior.","title":"24.14.1 Create a Test Class With Describe"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24142-setup-phase","text":"We must set up everything we need for the test. Minitest provides a simple way to set up everything before a test using the before keyword: before do do_some_setup end We could initialize the Visitor model using a before block and setting instance variables: before do @visitor_params \\= {email: ' [email protected] '} @visitor \\= Visitor.new(visitor_params) end Instead of using a before block, we\u2019ll use the convenient let keyword: let(:visitor_params) { {email: ' [email protected] '} } let(:visitor) { Visitor.new visitor_params } The let keyword is a specialized version of the before keyword. It caches the objects that you create so they are ready for every test you write in the test class. And it is lazy-loaded , which means it does not require any processing overhead until the first time it is used.","title":"24.14.2 Setup Phase"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24143-do-it","text":"Each test is defined by the it keyword and a do ... end block that contains the exercise and verify phases of the test. The it keyword must be accompanied by a description. The description will be displayed if the test fails. For our first test, we want to check if the Visitor model can be created when we provide a valid email address. Before the test runs, the let statement makes sure the Visitor object is instantiated with an email value. The verification phase of each test consists of a comparison between the results of an operation and our expectations. We expect that each time we create a Visitor object with a valid email address, the visitor.valid? method will return true. We can create a test: it 'is valid when created with valid parameters' do assert_equal visitor.valid?, true end The keyword assert_equal is the old test_unit syntax. It compares the result of visitor.valid? with true and tells Minitest the test has passed or failed. We can write the same thing using the new RSpec-style syntax: it 'is valid when created with valid parameters' do visitor.must_be :valid? end The method must_be is an expectation . You can see a Minitest cheat sheet with a list of all the expectation methods. As you might guess, must_be functions as a comparison operator, checking if a call to visitor.valid? returns true. For our second test, we want to make sure the Visitor object is invalid when no email address is provided: it 'is invalid without an email' do # Delete email before visitor let is called visitor_params.delete :email visitor.wont_be :valid? # Must not be valid without email visitor.errors[:email].must_be :present? # Must have error for missing email end We created the visitor_params hash with a let statement. Before we invoke the Visitor object and call the visitor.valid? method, we delete the email address from the visitor_params hash. When the Visitor object is invoked, it will be created by the let statement without an email address. The wont_be expectation confirms that the result of visitor.valid? method is false . Then we check if a validation error message is present. At this point, don\u2019t expect to be ready to write unit tests for every model method. You\u2019ll need to spend time with the documentation for Minitest expectations or the Minitest cheat sheet to become familiar with all the possible ways to write tests. This introduction should help you recognize the syntax of tests, understand the structure, and give you the background you need to learn more about unit testing.","title":"24.14.3 Do It"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2415-run-tests","text":"Let\u2019s run our unit tests: $ rails test Running via Spring preloader in process 29585 Run options: --seed 7800","title":"24.15 Run Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#running_2","text":".. Finished in 0.020289s, 98.5770 runs/s, 147.8655 assertions/s. 2 runs, 3 assertions, 0 failures, 0 errors, 0 skips The output shows that our tests pass.","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24151-breaking-the-test","text":"Let\u2019s see what happens if we purposefully break our Visitor model. Modify the file app/models/visitor.rb : class Visitor include ActiveModel::Model attr_accessor :email # validates_presence_of :email # validates_format_of :email, with: /\\A[-a-z0-9_+\\.]+\\@([-a-z0-9]+\\.)+[a-z0-9]{2,4}\\z/i def subscribe mailchimp \\= Gibbon::Request.new(api_key: Rails.application.secrets.mailchimp_api_key) list_id \\= Rails.application.secrets.mailchimp_list_id result \\= mailchimp.lists(list_id).members.create( body: { email_address: self.email, status: 'subscribed' }) Rails.logger.info(\"Subscribed #{self.email} to MailChimp\") if result end end When you copy this, be careful to keep the long regex expression (/\\A\u2026\\z/i) on one line (no line breaks). We\u2019ve commented out the statements that require validation for the email attribute. Let\u2019s run the tests again: $ rails test Running via Spring preloader in process 29655 Run options: --seed 45089","title":"24.15.1 Breaking the Test"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#running_3","text":"F Failure: Visitor#test_0002_is invalid without an email [/Users/danielkehoe/workspace//learn-rails/test/models/visitor_test.rb:15]: Expected # , @messages={}, @details={}>> to not be valid?. bin/rails test test/models/visitor_test.rb:12 . Finished in 0.008457s, 236.4993 runs/s, 236.4993 assertions/s. 2 runs, 2 assertions, 1 failures, 0 errors, 0 skips The output shows a failure. The diagnostic message displays the description of the failing test, \u201cVisitor#test_0002_is invalid without an email\u201d, and indicates the line number where the test failed. Now you know what a failing test looks like. Before you continue, restore the file app/models/visitor.rb to its original state, and make sure the tests pass. If you wish, you can continue writing unit tests. You could create a similar unit test for the Contact model. With more experience, or some independent research, you could create a test for the subscribe method in the Visitor model. This method connects to an external API, so it requires test doubles to fake the response of the external services. Our goal here is to introduce you to the concepts of testing, so we\u2019ll put aside advanced work on unit tests, and take a look at feature tests.","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2416-feature-test","text":"Let\u2019s start with a user story for our home page. It might seem trivial to call the home page a \u201cfeature\u201d and describe it with a user story, but it illustrates a process that works just as well with more complex features. Here\u2019s our user story: *Feature: Home page* As a visitor I want to visit a home page And see a welcome message For our test, we know we want to visit the home page and check if the words \u201cStay in touch\u201d appear on the page. This is the scenario we\u2019ll test: *Scenario: Visit the home page* Given I am a visitor When I visit the home page Then I see \"Stay in touch\" If you think of your application as a collection of features, and you describe each feature in terms of \u201cAs a (role), I want (goal), In order to (benefit),\u201d and then imagine scenarios for each feature using the \u201cGiven\u2026, When\u2026, Then\u2026\u201d formula, you\u2019ll be able to write automated tests to cover every feature in the application. Let\u2019s try it for the home page. Examine the folders within the test/ directory. Remember that feature tests are also called integration tests. You\u2019ll see a folder test/integration/ . That\u2019s where we\u2019ll add our feature tests. Create a file test/integration/home_page_test.rb : require 'test_helper' # Feature: Home page # As a visitor # I want to visit a home page # So I can learn more about the website feature 'Home page' do # Scenario: Visit the home page # Given I am a visitor # When I visit the home page # Then I see \"Welcome\" scenario 'visit the home page' do visit root_path page.must_have_content 'Stay in touch' end end I\u2019ve included the user story and scenario description in comments. There\u2019s no convention to do so, but it will help you to see the relationship between testing and the product planning process. It should be easy to transform a \u201cGiven\u2026 When\u2026 Then\u2026\u201d scenario into the code needed for a feature test.","title":"24.16 Feature Test"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24161-feature","text":"When we created a unit test, we used the describe keyword to create a test class. The feature keyword creates a test class that inherits from the Capybara::Rails::TestCase class, giving us methods such as visit and page . Feature tests are created with a do ... end block using the feature keyword and providing a description of the feature: feature 'Home page' do . . . end Notice that the description is placed in quotes. In this case, Minitest will automatically generate a class named HomePageTest .","title":"24.16.1 Feature"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24162-scenario","text":"Typically we test a single feature with multiple scenarios in a single test file. The scenario keyword is similar to the it keyword you\u2019ve seen in unit tests. Each feature test is defined by the scenario keyword and a do ... end block that contains the visit and verify phases of the test. The scenario keyword must be accompanied by a description. The description will be displayed if the test fails. scenario 'visit the home page' do visit root_path page.must_have_content 'Stay in touch' end The directive visit is a Capybara method that takes a URL or Rails route as an argument. You could specify either visit \u2019/\u2019 or visit root_path to direct Capybara to retrieve the home page. Capybara provides other actions in addition to visit . You can see the documentation for Capybara actions that include actions for filling in a form and clicking a button. Capybara creates a page object for us as a response to the visit. The page object is a representation of the HTML file returned by the application. We can call the must_have_content method, testing if the string \u201cStay in touch\u201d is present in the page. Capybara gives us a collection of methods we can use to verify our expectations. The documentation for Capybara expectations provides an extensive collection of methods we can use to verify what\u2019s on a web page. For example, must_have_link checks for a link. With Capybara expectations, you can check almost anything on a page. Combining Capybara actions and expectations allows you to build a powerful page-checking robot.","title":"24.16.2 Scenario"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2417-run-tests","text":"Let\u2019s run all our tests: $ rails test Running via Spring preloader in process 30144 Run options: --seed 51858","title":"24.17 Run Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#running_4","text":"... Finished in 0.459255s, 6.5323 runs/s, 8.7098 assertions/s. 3 runs, 4 assertions, 0 failures, 0 errors, 0 skips We have three tests (in two test files) making four assertions, all passing.","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24171-troubleshooting","text":"You might get an error message: rails aborted! NoMethodError: undefined method `feature' for main:Object You\u2019ll see this error message if you neglected to modify the test/test_helper.rb file to allow use of the Capybara test framework methods.","title":"24.17.1 Troubleshooting"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24172-breaking-the-test","text":"Let\u2019s see what happens if we purposefully break our home page. Modify the file app/view/visitors/new.html.erb : <% content_for :title do %>Foobar Kadigan<% end %> <% content_for :description do %>Website of Foobar Kadigan<% end %> <section> <img src\\=\"http://lorempixel.com/1170/600/cats/1\">","title":"24.17.2 Breaking the Test"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#running_5","text":"F Failure: Home page Feature Test#test_0001_visit the home page [/Users/danielkehoe/workspace//learn-rails/test/integration/home_page_test.rb:15]: Expected to find text \"Stay in touch\" in \"Toggle navigation Home About Contact GO AWAY!\". bin/rails test test/integration/home_page_test.rb:13 .. Finished in 5.124522s, 0.5854 runs/s, 0.7806 assertions/s. 3 runs, 4 assertions, 1 failures, 0 errors, 0 skips The output shows a failure. The diagnostic message displays the description of the failing test, \u201cHome page Feature Test#test_0001_visit the home page\u201d, showing a failure, \u201cExpected to include \u2018Stay in touch\u2019.\u201d Before you continue, restore the file app/view/visitors/new.html.erb to its original state, and make sure the tests pass. Now that we have written a few basic tests, let\u2019s commit our changes to the Git repository and push to GitHub: $ git add -A $ git commit -m \"add tests\" $ git push You\u2019ve written a complete application with tests. Very good!","title":"Running:"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#24173-using-capybara","text":"There is an art to developing feature tests. You can test that all the text on the home page is exactly what you want. That would make your test files large. And your tests would be \u201cbrittle,\u201d because any changes you made in development, even the slightest changes to the words on the page, would break your tests. For good integration tests, focus on the features that are essential to your application. For example, use the Capybara robot to make sure the user can follow a critical path through your application, visiting important pages, filling in forms, clicking buttons, and seeing results. Capybara lets you select any HTML element on a page, so you can check an ID or class attribute of an HTML tag, not just text on a page. You\u2019ll want to be confident that application navigation and page flow continues to work after any code changes. That will serve you better than tests that tell you a word changed here or there.","title":"24.17.3 Using Capybara"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2418-other-tests","text":"The art of testing lies in making good choices about what to test. It\u2019s common to write feature tests because they will test the entire application from the viewpoint of the user. It is also common to write unit tests for models because models contain much of the uniqueness of an application. Every other aspect of a Rails application can be tested, including controllers, helpers, and views. Developers seldom write tests for every aspect of a Rails application. If your controllers contain only the standard RESTful actions, with no extra logic, you probably don\u2019t need to write unit tests for your controllers. If you only have simple HTML markup in helpers, helpers don\u2019t need to be tested. And views are rarely tested with unit tests (use feature tests if you want to make sure a page contains what you expect). As a beginner, you\u2019ll make a good start if you concentrate on unit tests for models and integration tests for your page flow.","title":"24.18 Other Tests"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2419-behavior-driven-development","text":"In Book One, you learned about the software development approach called Behavior-Driven Development (BDD), or sometimes, Behavior-Driven Design. In writing the feature tests for the home page, you saw it in action. With BDD, you turn user stories into detailed scenarios that are accompanied by tests. BDD is a powerful approach for managing software development. It helps you define your product requirements, refine your project scope, and divide your project into well-defined tasks. The BDD process is complete when each feature has automated tests, when you enter rails test on the command line and see that every feature is implemented and functioning as expected. You may feel lost or overwhelmed when you attempt to build a Rails application for the first time, especially if your only experience is following the step-by-step instructions of a tutorial. When you experience that panic, BDD is your lifeline. Start by writing user stories for a few simple features. Write feature tests and implement the code required to make the tests pass. As you focus on the process of writing scenarios and tests, and implementing the code for each feature, you\u2019ll begin to gain momentum, and before you know it, you\u2019ll be over the first hurdle.","title":"24.19 Behavior-Driven Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2420-test-driven-development","text":"You can see how the BDD approach refines the product requirements and user experience. At a microscopic level, a similar discipline, named test-driven development , helps refine the implementation. Where BDD is driven by feature tests, TDD is focused on unit tests. TDD is an approach to software development that emphasizes that all code should be written to be tested. Excellent test coverage, allowing easy refactoring, is not the only goal of TDD. Just as important, the developer focuses on what needs to be accomplished and thinks through alternatives and edge cases. Some TDD aficionados say testing is a tool to write better code, and regression tests are a side effect. Unit tests are at the heart of TDD, and easiest to write when code is carefully decoupled into systems that can be tested in isolation. An application that is composed of decoupled units with clearly defined interfaces is a well-designed application that is easy to extend and maintain. If you make it a practice to write unit tests in conjunction with all the code you write, you\u2019ll write better code, and you\u2019ll be practicing TDD.","title":"24.20 Test-Driven Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2421-test-first-development","text":"Often when you are practicing TDD, you\u2019ll write tests before you write implementation code. Earlier in this chapter, I referred to test-first development and explained that it serves a different purpose than testing for quality assurance. In some situations, test-first development is simply exploratory testing, a means of describing the behavior of the code that must be built. Test-first development is particularly useful when you\u2019ve solved a similar problem and know exactly what results to expect, making it easy to write tests before writing the implementation. Test-first development leads to a \u201cred-green-refactor\u201d workflow. A developer imagines the results of an operation, writes a test that checks for the results, and runs tests which fail (with the right configuration, failing tests display as red in the console). Then the developer writes code that produces the correct results and runs the tests again, improving the code until the tests pass (displaying in green). At this point, the developer has an adequate regression test and can begin to refactor to improve the implementation, checking that the tests continue to pass. Developers like the rhythm and coherency of the \u201cred-green-refactor\u201d workflow. Writing tests creates discrete, manageable tasks. When tests pass, turning green, there is a feeling of satisfaction, of a job well-done. By postponing concerns about improving the code to a refactoring phase, it\u2019s easier to get the job done without trying to get it perfect. And perfection can be pursued in the refactoring phase without worrying about regressing to a broken state. David Heinemeier Hansson, the creator of Rails, famously declared that TDD is dead. Long live testing. . He pointed out that sometimes ardent advocates of TDD will try out an implementation before writing tests, to determine what needs to be done, or to clarify a problem. In the real world, even though developers recommend writing tests first, there are often times when a developer will write tests only after writing code and settling on an approach. TDD, which emphasizes the benefit of writing tests as a first step, doesn\u2019t really require that you write tests before you write code, or even that you write tests for all code. The test-first emphasis of TDD is a recommendation, not a rule. You\u2019ll be a better developer if you find opportunities to get \u201cin the zone\u201d with the red-green-refactor workflow of test-first development, but testing is worthwhile whether it comes first or last.","title":"24.21 Test-First Development"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2422-words-of-encouragement","text":"Testing often intimidates the newcomer. It is difficult to find good examples. The syntax of Minitest and RSpec has evolved over time, so there is little consistency among examples you\u2019ll find. Older examples are not a good guide to current practices. But once you gain familiarity with the concepts in this chapter, you can start writing tests. Testing is one of the few things in Rails that you can jump into without getting just right. You can\u2019t screw up your code base by writing incorrect tests. Experienced developers seem to worry that inexperienced developers will write slow tests, but in truth, a slow test is better than no test. Tests won\u2019t affect the performance of your application in production. If your code is clumsy, don\u2019t worry, you\u2019ll get better with practice. What\u2019s most important is that you\u2019ve begun writing tests. That\u2019s an indication you are committed to Rails best practices. Your tests are only \u201cbad\u201d if they don\u2019t cover your code adequately or if they give you a false sense of assurance. You will only discover this over time, as you find bugs you didn\u2019t anticipate (which is inevitable). It\u2019s better to just begin testing, even if you\u2019re not sure you\u2019re doing it right, than to not test at all.","title":"24.22 Words of Encouragement"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-25-rails-composer","text":"I\u2019m going to show you how to skip all the work you already did, and build a ready-to-use Rails application in less than five minutes. When you\u2019re done with this chapter, you may wonder why you read the rest of the book. Watch the video for a demonstration of Rails Composer: Rails Composer","title":"Chapter 25 Rails Composer"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#251-building-starter-applications","text":"This chapter is about Rails Composer , a tool for building starter applications. Rails Composer makes building applications so easy, it feels like a guilty pleasure. In the introductory \u201cCreate the Application\u201d chapter, you learned that developers often use a starter application instead of assembling an application from scratch. You\u2019ve seen how the rails new command gives you a rudimentary starter application. Developers typically add a front-end framework, a testing framework, and a handful of favorite gems before they get started on any custom development. Since most applications start with the same basic components, it makes sense to rely on an open source effort to stitch them together, so any integration issues or update problems are quickly resolved by the community. That\u2019s the idea behind the RailsApps project . The project provides a collection of starter applications, plus Rails Composer, a tool that creates the starter applications. I\u2019ve been leading the RailsApps project for several years because I think the project saves time for developers and makes things easier. I may be biased, so take a look and judge for yourself.","title":"25.1 Building Starter Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#252-build-learn-rails-in-less-than-five-minutes","text":"In less than five minutes, we can build our tutorial application using Rails Composer. It will be identical to the application you\u2019ve built, but we\u2019ll call it \u201cfoobar-kadigan.\u201d It\u2019s a new application, so if you\u2019re still in the workspace/learn-rails/ project directory, move up a level to the workspace/ project directory: $ cd ../ $ pwd /Users/danielkehoe/workspace Or jump to it directly, if it\u2019s one level below your home directory: $ cd ~/workspace $ pwd /Users/danielkehoe/workspace Use the \u201clearn-rails\u201d gemset we created earlier: $ rvm use [email protected] Now create the \u201cfoobar-kadigan\u201d application: $ rails new foobar-kadigan -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb We\u2019re using the rails new command and designating \u201cfoobar-kadigan\u201d as the name for the application. The -m flag applies an application template , which is a script that generates an application. The application template can be on your local computer, or retrieved from a remote server. Rails Composer is an application template that is stored on GitHub. When you run the rails new command as shown above, a new Rails application is built and then modified by the Rails Composer script. Here\u2019s the first prompt you\u2019ll see: option Build a starter application? 1) Build a RailsApps example application 2) Contributed applications 3) Custom application choose Enter your selection: Options #2 and #3 are not for beginners. We\u2019ll skip any contributed applications. And the \u201cCustom application\u201d option is strictly for experts. Enter 1 to select \u201cBuild a RailsApps example application.\u201d You\u2019ll see a list of available starter applications: option Choose a starter application. 1) learn-rails 2) rails-bootstrap 3) rails-foundation 4) rails-mailinglist-activejob 5) rails-omniauth 6) rails-devise 7) rails-devise-roles 8) rails-devise-pundit 9) rails-signup-download 10) rails-stripe-checkout 11) rails-stripe-coupons choose Enter your selection: We\u2019ll explore the list later. For now, enter 1 to select \u201clearn-rails\u201d. Here\u2019s your chance to get news and announcements about Rails Composer: Get on the mailing list for Rails Composer news? option Enter your email address: Enter your email address (if you want news) or press \u201creturn\u201d to skip it (if you\u2019re shy). In less than the time it took me to write a few sentences, you\u2019ll have a new Rails application. Look for it in your folder: $ ls -1 foobar-kadigan learn-rails You\u2019ve just created a new application named \u201cfoobar-kadigan\u201d that is almost identical to the \u201clearn-rails\u201d application you created from scratch. If you have a file compare tool on your computer, you can compare the folders and see that the only differences are the application name embedded in the application, plus a few configuration settings such as the secret keys in the config/secrets.yml file. Move into the project directory: $ cd foobar-kadigan As soon as you move into the foobar-kadigan/ folder, RVM will automatically begin using the gemset named \u201cfoobar-kadigan.\u201d That\u2019s because Rails Composer created hidden .ruby-gemset and .ruby-version files. Run bundle install to install the necessary gems in the RVM gemset: $ bundle install Try running the application. $ cd foobar-kadigan $ rails server \\=> Booting Puma . . . Open a web browser window and navigate to http://localhost:3000/ . Try it out. You\u2019ll see our new home page with the placeholder photo and the \u201csign up\u201d form. The application will be almost identical to the one you already built. Compare the project files side-by-side in your editor. The files will be nearly identical. In fact, if you made mistakes when you built the tutorial application, Rails Composer will give you the newest and most correct version of the application so you can check for your mistakes with a file compare tool. You are probably already aware that a perfect version of the tutorial application is already on GitHub, in the learn-rails GitHub repository . You could use git clone to get a copy to use as a starter application. The version generated by Rails Composer differs in one important respect. Rails Composer generates the application with any name you give it, so there\u2019s no need to search and change every use of the name in the application. I hope you\u2019re not irritated that I asked you to spend hours building the \u201clearn-rails\u201d application, and then showed you how to build the same application in less than five minutes. I promise you the time you spent with the book is worthwhile, because you\u2019ve gained a knowledge of Rails you can\u2019t get from using Rails Composer.","title":"25.2 Build \u2018Learn Rails\u2019 in Less Than Five Minutes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#253-a-collection-of-starter-applications","text":"Since you\u2019ve already built the \u201clearn-rails\u201d application, the identical \u201cfoobar-kadigan\u201d application may not be interesting. Let\u2019s look at the other applications you can generate with Rails Composer.","title":"25.3 A Collection of Starter Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2531-rails-bootstrap","text":"The \u201crails-bootstrap\u201d application provides an integration of Rails and Bootstrap , the popular front-end framework. This application gives you everything you built in this book\u2019s chapters on \u201cLayout and Views\u201d and \u201cFront-End Framework,\u201d including flash messages and navigation, set up for Bootstrap. It\u2019s a good beginning point for many custom applications. You can examine the example application on GitHub, in the rails-bootstrap repository. If you have subscribed for the Capstone Rails Tutorials, you can read the Bootstrap Quickstart Guide to understand the code.","title":"25.3.1 Rails Bootstrap"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2532-rails-foundation","text":"The \u201crails-foundation\u201d application is just like the \u201crails-bootstrap\u201d application, only with the Zurb Foundation front-end framework instead of Bootstrap. It\u2019s a stripped-down version of the \u201clearn-rails\u201d application you just built, without the contact form or mailing list sign-up, using Foundation. If you want to build a custom application, starting with nothing more than Foundation and an \u201cabout\u201d page, generate the \u201crails-foundation\u201d application. You can examine the example application on GitHub, in the rails-foundation repository. There\u2019s a Foundation Quickstart Guide with the Capstone Rails Tutorials.","title":"25.3.2 Rails Foundation"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2533-rails-mailing-list-with-active-job","text":"Rails 4.2 added the Active Job feature for background processing. The Mailing List with Active Job tutorial explains how to use it. You can use Rails Composer to generate the rails-mailinglist-activejob starter application. In the \u201cSend Mail\u201d chapter I wrote about \u201cAsynchronous Mailing\u201d which provides a queueing system for background jobs. For a production website, it is smart to use Active Job for better website performance for users. The Mailing List with Active Job tutorial in the Capstone Rails Tutorials series explains the code.","title":"25.3.3 Rails Mailing List with Active Job"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2534-rails-omniauth","text":"OmniAuth is a gem for authentication. Most web applications need a way for users to sign in, allowing access to some features of the application only for signed-in users. OmniAuth allows a user to sign in using an account they already have with a service such as Facebook, Twitter, or GitHub. If you\u2019re building an application that needs quick and easy sign-in, this is a useful starter application. You can examine the example application on GitHub, in the rails-omniauth repository. You can read the OmniAuth Tutorial in the Capstone Rails Tutorials series to learn about authentication with OmniAuth.","title":"25.3.4 Rails OmniAuth"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2535-rails-devise","text":"Devise is the most popular gem for authentication. Devise provides user management and authentication, letting a user sign up to create an account and log in with an email address and password. Most websites need email/password authentication, so this is a popular starter application. You can examine the example application on GitHub, in the rails-devise repository. You can read the Devise Quickstart Guide in the Capstone Rails Tutorials series to learn about user management and authentication with Devise.","title":"25.3.5 Rails Devise"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2536-rails-devise-roles","text":"Devise is a popular gem for authentication , verifying a user\u2019s registered identity. In conjunction with authentication, authorization limits access to pages of a web application. With role-based authorization, a user can be assigned a role such as \u201cuser,\u201d \u201cadmin,\u201d or \u201cVIP\u201d (a \u201cvery important person\u201d). If you want to control access to features of the website by checking a user\u2019s role, this is a useful starter application. You can examine the example application on GitHub, in the rails-devise-roles repository. You can read the Rails Authorization Tutorial in the Capstone Rails Tutorials series to learn about authorization.","title":"25.3.6 Rails Devise Roles"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2537-rails-devise-pundit","text":"To keep controllers skinny, Rails developers often use the Pundit gem for authorization. It improves upon simple role-based authorization to move access control code from controllers to separate \u201cpolicy objects.\u201d For complex applications with elegant architecture, use the \u201crails-devise-pundit\u201d starter application. You can examine the example application on GitHub, in the rails-devise-pundit repository. You can read the Pundit Quickstart Guide in the Capstone Rails Tutorials series to learn about authorization with Pundit.","title":"25.3.7 Rails Devise Pundit"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2538-other-starter-applications","text":"Other applications in the Rails Composer collection include: rails-signup-download rails-stripe-checkout rails-stripe-coupons You can use the rails-signup-download application to build a website where a user can download a PDF file after registering with an email address. Using the code in the Signup and Download Tutorial , you could customize the \u201clearn-rails\u201d application so visitors could download an ebook by Foobar Kadigan after they sign up for his newsletter. Stripe is a popular service used to accept credit card payments. Stripe offers two approaches to implementing payment processing. Stripe Checkout is Stripe\u2019s entry-level approach. Stripe Checkout competes with the button-based payment options from Google, PayPal, or Amazon, adding a pop-up payment form to any web page. Stripe Checkout is very limited because the pop-up payment form cannot be customized for use with a Rails application. Our Stripe Checkout Tutorial in the Capstone Rails Tutorials series shows how to combine Stripe Checkout with Devise for simple applications. Stripe.js is optimal for use with a Rails application, allowing full customization of a payment form and integration with Rails form processing. The rails-stripe-coupons application implements a payment feature using Stripe JS so a visitor pays to download a PDF file. The application accommodates promotional coupons and adds payment forms to landing pages, for real-world payment processing. Our Stripe JS With Coupons tutorial in the Capstone Rails Tutorials series provides the details.","title":"25.3.8 Other Starter Applications"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#254-rails-composer-options","text":"If all Rails Composer did was copy example applications from GitHub repos, it would be convenient but not very interesting. When you built the \u201cfoobar-kadigan\u201d application with Rails Composer, it simply built a replica of our tutorial application. When you build the other starter application, the options get more interesting. Rails Composer lets developers customize their starter applications for their favorite stack (we discussed stacks in the \u201cConcepts\u201d chapter in Book One). Let\u2019s see what options we get when we build the powerful rails-devise-roles starter application. Jump to your workspace/ folder so we can create a new application: $ cd ~/workspace $ pwd /Users/danielkehoe/workspace It\u2019s okay to start with the \u201clearn-rails\u201d gemset. We have to start with a gemset that already has the Rails gem installed. After that, Rails Composer will create a new gemset for the new project. $ rvm use [email protected] Now generate the \u201crails-devise-roles\u201d starter application: $ rails new rails-devise-roles -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb Don\u2019t worry if some of the prompts are different from the ones I describe here. Rails Composer changes often. At the time I wrote this, I saw: option Build a starter application? 1) Build a RailsApps example application 2) Contributed applications 3) Custom application choose Enter your selection: Enter 1 to select \u201cBuild a RailsApps example application.\u201d option Choose a starter application. 1) learn-rails 2) rails-bootstrap 3) rails-foundation 4) rails-mailinglist-activejob 5) rails-omniauth 6) rails-devise 7) rails-devise-roles 8) rails-devise-pundit 9) rails-signup-download 10) rails-stripe-checkout 11) rails-stripe-coupons choose Enter your selection: Select \u201crails-devise-roles\u201d (it was #7 when I wrote this, but the list may have changed). Get on the mailing list for Rails Composer news? option Enter your email address: Another chance to get on the mailing list. Just hit \u201creturn\u201d if you already signed up. option Web server for development? 1) Puma (default) 2) Thin 3) Unicorn 4) Phusion Passenger (Apache/Nginx) 5) Phusion Passenger (Standalone) choose Enter your selection: Our first option! We\u2019ve always used Puma since it is the Rails default. Choose \u201cPuma\u201d to keep things familiar. option Web server for production? 1) Same as development 2) Thin 3) Unicorn 4) Puma 5) Phusion Passenger (Apache/Nginx) 6) Phusion Passenger (Standalone) choose Enter your selection: We could get fancy for deployment. Choose \u201cSame as development\u201d to stay in our comfort zone. option Database used in development? 1) SQLite 2) PostgreSQL 3) MySQL choose Enter your selection: We haven\u2019t explored applications that use databases in this book, but Devise and role-based authorization require saving a User model to a database. Choose \u201cSQLite,\u201d which is built-in and ready to run in the Mac or Ubuntu environments. Developers prefer PostgreSQL for production applications, but it takes extra effort to set up, so we\u2019ll stick with SQLite for now. option Template engine? 1) ERB 2) Haml 3) Slim choose Enter your selection: In this book, all our view templates were written using the ERB template language. In the \u201cConcepts\u201d chapter in Book One, you learned that components of Rails can be mixed for different stacks. Some developers substitute Haml or Slim for ERB. I\u2019ve written an article on Haml and Rails if you\u2019d like to know more. Choose \u201cERB\u201d for now. option Test framework? 1) None 2) RSpec with Capybara choose Enter your selection: You\u2019ve had an introduction to testing with Minitest in the \u201cTesting\u201d chapter of this book. RSpec is popular among many developers, so Rails Composer offers an \u201cRSpec with Capybara\u201d option. Rails Composer will install a test suite for the rails-devise-roles application when RSpec is selected. You can read the RSpec Quickstart Guide in the Capstone Rails Tutorials series to get started with RSpec. Choose \u201cnone\u201d for now. option Front-end framework? 1) None 2) Bootstrap 4.0 3) Bootstrap 3.3 4) Bootstrap 2.3 5) Zurb Foundation 5.5 6) Zurb Foundation 4.0 7) Simple CSS choose Enter your selection: You learned to use Bootstrap 3 in this book. Let\u2019s stick with that. Choose \u201cBootstrap 3.3.\u201d option Add support for sending email? 1) None 2) Gmail 3) SMTP 4) SendGrid 5) Mandrill choose Enter your selection: Devise will need to send email for its \u201cforgot password\u201d feature. Configuring email took some time for our tutorial application. Rails Composer will instantly set up everything we need to send email using our choice of services. Choose \u201cSendGrid\u201d for now. option Devise modules? 1) Devise with default modules 2) Devise with Confirmable module 3) Devise with Confirmable and Invitable modules choose Enter your selection: Choose \u201cDevise with default modules.\u201d Devise has options, like a Confirmable module that requires users to click a link in an email message to confirm a new account. The Invitable module provides a feature that allows administrators or other users to invite users to establish accounts. We won\u2019t need these extra features. option Admin interface for database? 1) None 2) Thoughtbot Administrate choose Enter your selection: Thoughtbot Administrate adds an administrative interface to a database application. Choose \u201cNone\u201d for now. option Use a form builder gem? 1) None 2) SimpleForm choose Enter your selection: We could add the SimpleForm gem to make it easy to build forms. We didn\u2019t use it in this book, so we\u2019ll choose \u201cnone.\u201d Next you\u2019ll see a menu of page layout options from Rails Composer. These are available if you use Bootstrap 3. option Add Bootstrap page templates? 1) None 2) 1 Col Portfolio 3) 2 Col Portfolio 4) 3 Col Portfolio 5) 4 Col Portfolio 6) Bare 7) Blog Home 8) Business Casual 9) Business Frontpage 10) Clean Blog 11) Full Width Pics 12) Heroic Features 13) Landing Page 14) Modern Business 15) One Page Wonder 16) Portfolio Item 17) Round About 18) Shop Homepage 19) Shop Item 20) Simple Sidebar 21) Small Business 22) Stylish Portfolio 23) The Big Picture 24) Thumbnail Gallery choose Enter your selection: You\u2019ll get an option to install any of 23 different Bootstrap page templates. Some of these are simple one page layouts. Others are complex, multipage websites. If you\u2019d like to see what all the templates look like, browse the Start Bootstrap website to see the gallery of Bootstrap themes & templates. I like the \u201cModern Business\u201d template for several ready-made website pages, so choose 14 to install the template. option Install page-view analytics? 1) None 2) Google Analytics 3) Segment.com choose Enter your selection: In our \u201cAnalytics\u201d chapter, I said every application needs a way to analyze traffic. Let\u2019s choose \u201cSegment.com\u201d since we learned about it already. option Segment.com Write Key? You can enter your Segment.com Write Key here, if you know it. Otherwise, hit return and you\u2019ll get a placeholder you can replace later. option Prepare for deployment? 1) no 2) Heroku 3) Capistrano choose Enter your selection: This option sets up your starter application for deployment to Heroku. Choose \u201cno\u201d for now. Some developers find Rails Turbolinks annoying when they wish to integrate JavaScript with their Rails applications. option Disable Rails Turbolinks? (y/n) We\u2019re not adding any JavaScript so choose \u201cn\u201d to use Rails Turbolinks. option Set a robots.txt file to ban spiders? (y/n) In the \u201cDeploy\u201d chapter you learned that you can leave your website out of Google search results with the robots.txt file. Let\u2019s answer \u201cy\u201d or \u201cyes\u201d and play it safe. option Create a GitHub repository? (y/n) Rails Composer will create a GitHub repository for your starter application if your credentials are set up correctly. Let\u2019s play it safe and answer \u201cn\u201d or \u201cno\u201d to skip the repository option. Rails Composer has all the answers it needs. On my computer, with a fast Internet connection in the heart of San Francisco, Rails composer takes about thirty seconds to build the starter application. It installs every needed gem; sets configuration files; and generates views, models, controllers, and routes. The developers who maintain the Rails Composer project have worked out any tricky integration issues so you can expect the starter application to work without any problems.","title":"25.4 Rails Composer Options"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#255-try-it-out","text":"You\u2019ve added a new application to your collection of projects: $ ls -1 foobar-kadigan learn-rails rails-devise-roles Let\u2019s examine the application. $ cd rails-devise-roles $ git log --oneline 087167a rails_apps_composer: extras 6d4f710 rails_apps_composer: add Bootstrap page layouts be68589 rails_apps_composer: navigation links 3126403 rails_apps_composer: set up database 53a029f rails_apps_composer: add README files 7c78031 rails_apps_composer: add analytics 99e9c0c rails_apps_composer: add pages 1886d2c rails_apps_composer: front-end framework 38242d7 rails_apps_composer: add roles to a User model 839749f rails_apps_composer: devise 62753db rails_apps_composer: set email accounts 0754893 rails_apps_composer: generators 09104b9 rails_apps_composer: Gemfile b61cd18 rails_apps_composer: initial commit Rails Composer set up a Git repository and committed files as it built the application. We can see a list of Git commits with the git log \u2013oneline command. When you move into the rails-devise-roles/ folder, RVM will automatically begin using the gemset named \u201crails-devise-roles\u201d because of the hidden .ruby-gemset and .ruby-version files. Run bundle install to install the necessary gems in the RVM gemset: $ bundle install Let\u2019s try running the application: $ rails server \\=> Booting Puma . . . Open a web browser window and navigate to http://localhost:3000/ . You\u2019ll see a navigation bar with \u201cSign in\u201d and \u201cSign up\u201d links that implement an authentication feature using Devise. Sign in with the email address \u201c [email protected] \u201d and the password \u201cchangeme\u201d. You\u2019ll see a link to the Users page in the navigation bar that is only seen by administrators. Click the \u201cUsers\u201d link and you\u2019ll see a list of users (just one initially). The first user (created by Rails Composer) is automatically assigned administrator privileges. Sign out and sign up to create a new account with your own email address and password. You\u2019ll see a message \u201cWelcome! You have signed up successfully.\u201d You will not see the \u201cUsers\u201d link. Your new account is an ordinary user without administrator privileges, so you are not allowed to see the list of all users. Notice the navigation link \u201cEdit account.\u201d It displays a page for account management where you can change your name, email address, or password. Sign out and sign in again with the administrative account \u201c [email protected] \u201d and the password \u201cchangeme\u201d. Now you can view the list of users. You can change the role of any user. You\u2019ve got a useful starter application. Without Rails Composer, an experienced developer needs at least an hour or two to set up a similar starter application (and possibly more time if version updates have created integration issues). Examine the application in your editor. Here\u2019s where a starter application can be useful as a learning tool. Given what you\u2019ve learned so far, what do recognize as familiar? Every Rails application shares a similar structure, so you will recognize files such as the Gemfile; and folders such as app/models/ , app/controllers/ , and app/views/ . Explore the application. Try to guess the purpose of the unfamiliar files and code. If you\u2019re overwhelmed by unfamiliar files and code, try building one of the simpler starter applications, such as rails-bootstrap or rails-devise . Every line of code is explained in the Capstone Rails Tutorials series so there\u2019s no mystery code. As a beginner, you can use Rails Composer for two purposes. You can quickly build apps that are guaranteed to work and then pick them apart. A \u201cbreakable toy\u201d can be a wonderful instrument for learning. Make an effort to understand everything in the RailsApps example applications and you\u2019ll gain a solid understanding of the basic components used in real-world Rails projects. Secondly, start building custom applications based on the Rails Composer starter applications. By starting with Rails Composer, you\u2019ll skip the frustrating preliminaries of setting up a front-end framework, authentication, or authorization and jump right into implementing your ideas for new features. Rails Composer is often used at hackathons, where teams race to build interesting applications for a prize, to avoid the time sink of setting up a basic application. A final word: Use Rails Composer judiciously. It\u2019s intended to be a tool for experienced developers who already know how to build starter applications from scratch using databases, front-end frameworks, authentication, or authorization, and all the bells and whistles offered in the Rails Composer options. Use it to pinpoint what you need to learn, or use it to turbocharge your learning process, but don\u2019t use it as a crutch to avoid learning the basics. To learn Rails, you must be able to build every starter application from scratch, without Rails Composer. To learn more about Rails Composer, see the Rails Composer home page and the README for the Rails Composer project on GitHub.","title":"25.5 Try It Out"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-26-version-notes","text":"If you are reading the online edition of the book, you have the most recent version of the book. If you\u2019ve gotten your copy of the book elsewhere, you may have an older version that doesn\u2019t have the newest updates. You\u2019ll find the version number and release date on the first page of this book (under the book title). Check the learn-rails GitHub repository to find out if you have the newest version of the book. The README page on the GitHub repo always shows the most recent version number for the book and the tutorial application. If you have trouble building the application in this book, and suspect something may be out of date, you can check the Gemfile in the repo to see if we\u2019ve changed gems or specified version numbers to avoid compatibility issues. You can also check the CHANGELOG , look at recent commits , and check the issues to see the current state of the application. Here are the changes I\u2019ve made.","title":"Chapter 26 Version Notes"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#261-version-420","text":"Version 4.2.0 was released August 2, 2017 Additional revisions to accommodate Rails 5.1 form_with . Add the jquery-rails gem for the jQuery JavaScript library because it was dropped as a default gem from Rails 5.1. Minor revisions and corrections for clarity.","title":"26.1 Version 4.2.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#262-version-410","text":"Version 4.1.0 was released July 3, 2017 Updated for Rails 5.1 and Ruby 2.4.1. Removed SimpleForm and replaced with Rails 5.1 form_with . No need to configure MiniTest for Capybara (included in Rails 5.1).","title":"26.2 Version 4.1.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#263-version-402","text":"Version 4.0.2 was released November 25, 2016 Minor revisions for clarity. Apple now calls the operating system macOS not Mac OS X. Updated for Ruby 2.3.2.","title":"26.3 Version 4.0.2"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#264-version-401","text":"Version 4.0.1 was released November 4, 2016 Fixed broken links. Removed references to Nitrous.io because Nitrous.io is out of business.","title":"26.4 Version 4.0.1"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#265-version-400","text":"Version 4.0.0 was released October 31, 2016 Updated for Rails 5.0 and Ruby 2.3.1. Switch to using Bootstrap instead of Zurb Foundation front-end framework. Extensive revisions.","title":"26.5 Version 4.0.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#266-version-310","text":"Version 3.1.0 was released March 1, 2016 Switch to using the SendGrid service to send email. Mandrill is no longer offering a free trial.","title":"26.6 Version 3.1.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#267-version-302","text":"Version 3.0.2 was released January 30, 2016 Minor change: \u2018email_provider_username\u2019 was \u2018mandrill_username\u2019 and email_provider_api_key\u2019 was \u2018mandrill_apikey\u2019.","title":"26.7 Version 3.0.2"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#268-version-301","text":"Version 3.0.1 was released January 29, 2016 Specify version 5.5 of the foundation-rails gem. Foundation 6 is out but Zurb has not yet released documentation for migration from Foundation 5 to 6.","title":"26.8 Version 3.0.1"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#269-version-300","text":"Version 3.0.0 was released January 14, 2016 Extensive revision throughout the book, and the length of the book increased, so the book is now two books. Book One contains the introductory and self-help chapters and can be read without access to a computer. Book Two contains the step-by-step tutorial and requires use of a computer. Switch to using the Mandrill service to send email. Previously used Gmail but Google has taken steps to make Gmail more secure and now it can be difficult to send email from a Rails application using Gmail. Sending mail now requires the method deliver_now instead of deliver . The UserMailer class now inherits from ApplicationMailer . Updated references to Rails from version 4.2.4 to 4.2.5. Updated references to Ruby from version 2.2.3 to 2.3.0.","title":"26.9 Version 3.0.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2610-version-222","text":"Version 2.2.2 was released October 30, 2015 In the \u201cFront-End Framework\u201d chapter, updated filename to 1st_load_framework.css.scss from framework_and_overrides.css.scss to reflect a change in the rails_layout gem.","title":"26.10 Version 2.2.2"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2611-version-221","text":"Version 2.2.1 was released September 19, 2015 Updated references to Ruby from version 2.2.0 to 2.2.3. Updated references to Rails from 4.2.0 to Rails 4.2.4. Updated Visitor model subscribe method for the new Gibbon 2.0 API. Recommending Cloud9 instead of Nitrous.io because Nitrous.io is no longer free.","title":"26.11 Version 2.2.1"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2612-version-220","text":"Version 2.2.0 was released June 6, 2015 For Amazon customers, added an offer to access the online version or download a PDF at learn-rails.com . Google now requires use of OAuth 2.0 for application access to Google Drive. The implementation is considerably more complex than the previous implementation using a Gmail address and password. I\u2019ve dropped the \u201cSpreadsheet Connection\u201d chapter. Minor clarification in the \u201cLayout and Views\u201d chapter.","title":"26.12 Version 2.2.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2613-version-216","text":"Version 2.1.6 was released March 17, 2015 Remove references to the Thin web server in the \u201cDeploy\u201d chapter. Correct version number for gem \u2019sass-rails\u2019 in various Gemfile listings. Fixes issue 49 and an error \u201cSass::SyntaxError - Invalid CSS\u201d when the Foundation front-end framework is used. In the \u201cTesting\u201d chapter, the file test/integration/home_page_test.rb was missing require \u2019test_helper\u2019 . Updated \u201cRails Composer\u201d chapter to describe new options. Minor improvements and corrections of typos.","title":"26.13 Version 2.1.6"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2614-version-215","text":"Version 2.1.5 was released March 4, 2015 Use the Ruby 1.9 hash syntax in the validates_format_of :email statement. Minor improvements and corrections of typos.","title":"26.14 Version 2.1.5"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2615-version-214","text":"Version 2.1.4 was released January 3, 2015 Updated references to Ruby from version 2.1.5 to 2.2.0. Specify the \u201cv0\u201d version of the google_drive gem in the \u201cSpreadsheet Connection\u201d chapter.","title":"26.15 Version 2.1.4"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2616-version-213","text":"Version 2.1.3 was released December 25, 2014 Updated references to Rails 4.1.8 to Rails 4.2.0.","title":"26.16 Version 2.1.3"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2617-version-212","text":"Version 2.1.2 was released December 4, 2014 Released for sale as a Kindle book on Amazon, with new cover art (same cat, though). RailsApps Tutorials now named the Capstone Rails Tutorials . Updated references to Ruby from version 2.1.3 to 2.1.5. Updated references to Rails 4.1.6 to Rails 4.1.8 (minor releases with bug and security fixes). Removed link to the (now defunct?) Lowdown web application in the \u201cPlan Your Product\u201d chapter. Changes to the \u201cAsynchronous Mailing\u201d section of \u201cSend Mail\u201d chapter to describe Active Job in Rails 4.2. Minor improvements to the \u201cDynamic Home Page,\u201d \u201cDeploy,\u201d \u201cConfigure,\u201d \u201cTroubleshoot,\u201d and \u201cCreate the Application\u201d chapters.","title":"26.17 Version 2.1.2"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2618-version-211","text":"Version 2.1.1 was released October 22, 2014 Minor rewriting for clarity. Updated \u201cPrecompile Assets\u201d section of the \u201cDeploy\u201d chapter. Mentioned explainshell.com in the \u201cGet Started\u201d chapter. Mentioned Zeal as a Linux alternative to Dash . Recommended book Practicing Rails by Justin Weiss.","title":"26.18 Version 2.1.1"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2619-version-210","text":"Version 2.1.0 was released October 12, 2014 Updated references to Ruby from version 2.1.1 to 2.1.3. Updated references to Rails 4.1.1 to Rails 4.1.6 (minor releases with bug and security fixes). Four new chapters: \u201cTesting\u201d \u201cRails Composer\u201d \u201cCrossing the Chasm\u201d \u201cLevel Up\u201d Use ActiveModel instead of the activerecord-tableless gem. In the \u201cConfiguration\u201d chapter, add a note to use spaces (not tabs) in the config/secrets.yml file. Updated \u201cGems\u201d chapter to add a troubleshooting note to the \u201cInstall the Gems\u201d section (about errors with the Nokogiri gem). Added a section on \u201cMultiple Terminal Windows\u201d to the \u201cCreate the Application\u201d chapter. In the \u201cGet Help When You Need It\u201d chapter, updated the list of recommended newsletters, replaced rubypair.com with codermatch.me , and added a section on code review. Removed reference to defunct Rails Development Directory .","title":"26.19 Version 2.1.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2620-version-202","text":"Version 2.0.2 was released May 6, 2014 Updated references to Rails 4.1.0 to Rails 4.1.1 (a minor release with a security fix). For Nitrous.io users, clarify that \u201chttp://localhost:3000/\u201d means the Preview browser window. Update \u201cGems\u201d chapter, section \u201cWhere Do Gems Live?\u201d to add more explanation. Minor change to code in the \u201cMailing List\u201d chapter, setting \u2018mailchimp_api_key\u2019 explicitly when instantiating Gibbon, for easier troubleshooting.","title":"26.20 Version 2.0.2"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2621-version-201","text":"Version 2.0.1 was released April 16, 2014 Minor updates for Rails 4.1.0. Mostly small changes to the \u201cConfigure\u201d and \u201cFront-End Framework\u201d chapters. Added an explanation that, in the config/secrets.yml file, domain_name doesn\u2019t have to be kept secret and set as a Unix environment variable. Added a hint about passwords that use punctuation marks (plus a completely irrelevant note about profanitype). Replaced Rails.application.secrets.gmail_username with Rails.application.secrets.email_provider_username . Also replaced gmail_password with email_provider_password . Just trying to make things a little more generic in case Gmail is not used as a provider. Added a section explaining the horrid details of the config.assets.precompile configuration setting in the config/application.rb file. Please convey my displeasure to those responsible for subjecting beginners to this travesty. In the \u201cDeploy\u201d chapter, restored RAILS_ENV=production rake assets:precompile because Rails 4.1.0 no longer barfs on this. Added resources to the \u201cGet Help When You Need It\u201d chapter. Minor rewriting of the introduction.","title":"26.21 Version 2.0.1"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2622-version-200","text":"Version 2.0.0 was released April 8, 2014 Updated references to Ruby from version 2.1.0 to 2.1.1. Updated the book to Rails 4.1. The application name is no longer used in the config/routes.rb file. Rails 4.1 changes the app/assets/stylesheets/application.css.scss file. Updated the \u201cFront-End Framework\u201d chapter. Also expanded the explanation of the Foundation grid. In Rails 4.1, configuration variables are set in the config/secrets.yml file. The Figaro gem is dropped, along with the config/application.yml file. Updated the \u201cConfigure\u201d chapter and references to configuration variables throughout the book. In the \u201cDeploy\u201d chapter, changed RAILS_ENV=production rake assets:precompile to rake assets:precompile to avoid the error \u201cdatabase configuration does not specify adapter.\u201d Updated \u201cThe Parking Structure\u201d chapter with comments about \u201cFolders of Future Importance\u201d that experienced developers often use: test/ , spec/ , features/ , policies/ , and services/ . Updated the \u201cSpreadsheet Connection\u201d chapter to mention service-oriented architectures (SOA). Extended the section on \u201cLimitations of Metaphors\u201d in the \u201cJust Enough Ruby\u201d chapter to include the example of gender when modeling a person. Minor rewriting for clarity throughout.","title":"26.22 Version 2.0.0"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2623-version-119","text":"Version 1.19 was released February 1, 2014 Updated the book to use Foundation 5.0. Foundation 5.0.3 was released January 15, 2014 (earlier versions 5.0.1 and 5.0.2 were incompatible with Rails Turbolinks and the Rails asset pipeline). Changed the Gemfile to remove gem \u2019compass-rails\u2019 and replace gem \u2019zurb-foundation\u2019 with gem \u2019foundation-rails\u2019 . Updated a line in the \u201cFront-End Framework\u201d chapter for Foundation 5.0: $ rails generate layout foundation5 --force The files navigation.html.erb and application.html.erb are changed for Foundation 5.0. The Bootstrap front-end framework is now independent of Twitter, so I call it \u201cBootstrap\u201d not \u201cTwitter Bootstrap.\u201d Revised the chapter \u201cJust Enough Ruby\u201d to incorporate suggestions from technical editor Pat Shaughnessy. Revised the chapter \u201cRequest and Response\u201d to incorporate suggestions from technical editor Kirsten Jones. Minor rewriting for clarity throughout.","title":"26.23 Version 1.19"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2624-version-118","text":"Version 1.18 was released January 10, 2014 Updated references to Ruby from version 2.0.0 to 2.1.0. Changed one line in the \u201cFront-End Framework\u201d chapter to accommodate a change in the rails_layout gem version 1.0.1. The command was: $ rails generate layout foundation4 \u2014force Changed to: $ rails generate layout:install foundation4 \u2014force Updated the \u201cConfigure\u201d chapter to add ActionMailer configuration values to the file config/environments/development.rb .","title":"26.24 Version 1.18"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2625-version-117","text":"Version 1.17 was released December 21, 2013 Updated Rails version from 4.0.1 to 4.0.2 . Changed Gemfile to remove gem \u2019compass-rails\u2019, \u2019> 2.0.alpha.0\u2019 and replace it with gem \u2019compass-rails\u2019, \u2019> 1.1.2\u2019 . The 2.0.alpha.0 version was yanked from the RubyGems server. The compass-rails gem is needed for Foundation 4.3. It will not be needed for Foundation 5.0. Changed Gemfile to replace gem \u2019zurb-foundation\u2019 with gem \u2019zurb-foundation\u2019, \u2019> 4.3.2\u2019 . Foundation 5.0 will require gem \u2019foundation-rails\u2019 but we can\u2019t use it until an incompatibility with Turbolinks is resolved. So we will stick with Foundation 4.3.2 for now. Revised code in the \u201cAnalytics\u201d chapter. Using ready page:change instead of page:load to accommodate Turbolinks. Updated the segmentio.js file to use a new tracking script from Segment.io. Updated instructions for setting up Google Analytics tracking on Segment.io. Added concluding paragraphs \u201cMaking Mr. Kadigan Happy\u201d to the \u201cAnalytics\u201d chapter. Minor clarification in the \u201cFront-End Framework\u201d chapter to explain that the navigation bar won\u2019t show a dropdown menu until the next chapter, when we add navigation links. Minor clarification in the \u201cSpreadsheet Connection\u201d chapter to explain that Google may block access if you attempt access from a new and different computer (including Nitrous.io). Added cat names in the \u201cCredits and Comments\u201d chapter. Revised \u201cGetting Help\u201d chapter and added \u201cVersion Notes\u201d chapter. Minor clarifications, plus fixes for various typos and insignificant errors.","title":"26.25 Version 1.17"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#chapter-27-credits-and-comments","text":"Was the book useful to you? Follow @rails_apps on Twitter and tweet some praise. I\u2019d love to know you were helped out by the tutorial. You can find me on Facebook or Google+ . I\u2019m happy to connect if you want to stay in touch. If you\u2019d like to recommend the book to others, the landing page for the book is here: http://learn-rails.com/learn-ruby-on-rails.html I\u2019d love it if you mention the book online, whether it is a blog post, Twitter, Facebook, or online forums. Recommending the book with a link makes it easier for people to find the book.","title":"Chapter 27 Credits and Comments"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#271-credits","text":"The book was created with the encouragement, financial support, and editorial assistance of hundreds of people in the Rails community. Daniel Kehoe wrote the book and implemented the application.","title":"27.1 Credits"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2711-kickstarter","text":"Thank you to contributors to two Kickstarter campaigns, for the first edition of the book and for the revision for Rails 5.0. Learn Ruby on Rails Learn Ruby on Rails 5","title":"27.1.1 Kickstarter"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2712-financial-backers-for-the-first-edition","text":"The following individuals provided financial contributions of over $50 to help launch the book. Please join me in thanking them for their encouragement and support. Al Zimmerman, Alan W. Smith, Alberto A. Col\u00f3n Viera, Andrew Terry, Avi Flombaum, Brian Hays, Charles Treece, Dave Doolin, Denzil Villarico, Derek Rockwell, Eito Katagiri, Evan Sparkman, Frank Castle, Fred Dixon, Fred Schoeneman, Gant Laborde, Gardner Monks, Gerard de Brieder, GoodWorksOnEarth.org, Hanspeter Leupin, Harald Lazardzig, Harsh Patel, James Bond, Jared Koumentis, Jason Landry, Jeff Whitmire, Jesse House, Joe Wilmoth Jr., John Shannon, Joost Baaij, Juan Cristobal Pazos, Kathleen Sidenblad, Laird Hayward, Logan Hasson, Ludovic Kuty, Mark Gilbert, Matt Esterly, Mike Gilbert, Niko Roberts, Norman Cohen, Paul Philippov, Robert Nadar, Rogier Hof, Ross Kinney, Ruben Calzadilla, Stephane Moreau, Susan Wilson, Sven Fuchs, Thomas Nitsche, Tom Michel, Youn Shin Kang, Yuen Lock","title":"27.1.2 Financial Backers for the First Edition"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2713-technical-editors","text":"Rails and Ruby experts are very busy. I am very grateful for the assistance I received from my colleagues for the technical review of individual chapters. Kirsten Jones , reviewed the chapter \u201cRequest and Response\u201d Pat Shaughnessy , author of Ruby Under a Microscope , reviewed the chapter \u201cJust Enough Ruby\u201d Noel Rappin , author of Rails Test Prescriptions , reviewed chapters 1-7, and the \u201cTesting\u201d chapter Aaron Sumner , author of Everyday Rails Testing with RSpec , reviewed the \u201cTesting\u201d chapter Ken Collins reviewed the \u201cTesting\u201d chapter Buy their books. I recommend them.","title":"27.1.3 Technical Editors"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2714-editors-and-proofreaders","text":"Dozens of volunteers offered corrections and made suggestions, from fixing typos to advice about organizing the chapters. Alberto Dubois Rib\u00f3, Alex Finnarn, Alex Zielonko, Alexandru Muntean, Alexey Dotokin, Alexey Ershov, Andr\u00e9 Arko, Andreas Basurto, Ben Swee, Brandon Schabel, Cam Skene, Daniella Zimmermann, Dapo Babatunde, Dave Levine, Dave Mox, David Kim, Duany Dreyton Bezerra Sousa, Erik Trautman, Erin Nedza, Flavio Bordoni, Fritz Rodriguez Jr, Hendri Firmana, Ishan Shah, James Hamilton, Jasna Vukovic, Jeremy Schneider, Joanne Daudier, Joel Dezenzio, Jonah Ruiz, Jonathan Lai, Jonathan Miller, Jordan Stone, Joreal Whitfield, Josh Morrow, Joyce Hsu, Julia Mokus, Julie Hamwood, Jutta Frieden, Laura Pierson Wadden, Marc Ignacio, Mark D. Blackwell, Mark Everhart, Michael Wong, Miguel Herrera, Mike Janicki, Miran Omanovic, Neha Jain, Norman Cohen, Oana Sipos, Peter Rangelov, Richard Afolabi, Robin Paul, Roderick Silva, Sakib Ash, Sebastian Lobato Genco, Silvia Obajdin, Stas Su\u0219cov, Stefan Streichsbier, Sven Fuchs, Tam Eastley, Tim Goshinski, Timothy Jones, Tom Connolly, Tom Michel, Tomas Olivares, Verena Brodbeck, Will Schive, William Yorgan, Zachary Davy","title":"27.1.4 Editors and Proofreaders"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#2715-photos","text":"Images provided by the lorempixel.com service are used under the Creative Commons license . Visit the Flickr accounts of the photographers to learn more about their work: photo of a white cat by Tomi Tapio photo of a cat by Steve Garner photo of a cat by Ian Barbour The photo of a fluffy white cat by Tomi Tapio is used in the application.","title":"27.1.5 Photos"},{"location":"Learn%20Ruby%20on%20Rails%20Book%20Two/#272-comments","text":"I regularly update the book. Your comments and suggestions for improvements are welcome. Feel free to email me directly at [email protected] . Are you stuck with code that won\u2019t work? Stack Overflow provides a question-and-answer forum for readers of this book. Use the tag \u201clearn-ruby-on-rails\u201d or \u201crailsapps\u201d when you post your question. Found a bug in the tutorial application? Please create an issue on GitHub.","title":"27.2 Comments"},{"location":"Links%20and%20Logs/","text":"Links and Logs G8 Transferee Grade Sheet email for grade correction: Fwd: Grade Correction of Q1 Grade for PADRON (10-Charm) - for manual correction in e-Based","title":"Links and Logs"},{"location":"Links%20and%20Logs/#links-and-logs","text":"G8 Transferee Grade Sheet email for grade correction: Fwd: Grade Correction of Q1 Grade for PADRON (10-Charm) - for manual correction in e-Based","title":"Links and Logs"},{"location":"MariaDB%20backup/","text":"MariaDB backup mysqldump -u -p restore DB: moodle < moodle.sql cd /var/www mkdir backup cp -pr moodle backup/ cp -rp moodledata backup/ cd sudo mysqldump -u root -p moodle_db > moodle_db.sql sudo mysql -u root -p show databases drop database moodle_db create database moodle_db cd sudo mysql -u root -p moodle_db < moodle_db.sql Backup the Moodle database on the old server: mysqldump -h example.com -u myusername -p'mypassword' -C -Q -e --create-options mydatabasename > moodle-database.sql -h :: hostname -C :: compress -Q :: quote identifiers -e :: extended-insert (speed up) --create-options :: include all mysql-specific table options mysqldump --allow-keywords --opt -uMySQL_USERNAME -pPASSWORD DATABASE | ssh USER@DOMAIN \"mysql -uMySQL_USERNAME -pPASSWORD DATABASE\" --allow-keywords :: allow creation of column names that are keywords --opt :: Shorthand for --add-drop-table --add-locks --create-options --disable-keys --extended-insert --lock-tables --quick --set-charset Restore the database backup to the new server: mysql -p new_database < moodle-database.sql","title":"MariaDB backup"},{"location":"MariaDB%20backup/#mariadb-backup","text":"mysqldump -u -p restore DB: moodle < moodle.sql cd /var/www mkdir backup cp -pr moodle backup/ cp -rp moodledata backup/ cd sudo mysqldump -u root -p moodle_db > moodle_db.sql sudo mysql -u root -p show databases drop database moodle_db create database moodle_db cd sudo mysql -u root -p moodle_db < moodle_db.sql Backup the Moodle database on the old server: mysqldump -h example.com -u myusername -p'mypassword' -C -Q -e --create-options mydatabasename > moodle-database.sql -h :: hostname -C :: compress -Q :: quote identifiers -e :: extended-insert (speed up) --create-options :: include all mysql-specific table options mysqldump --allow-keywords --opt -uMySQL_USERNAME -pPASSWORD DATABASE | ssh USER@DOMAIN \"mysql -uMySQL_USERNAME -pPASSWORD DATABASE\" --allow-keywords :: allow creation of column names that are keywords --opt :: Shorthand for --add-drop-table --add-locks --create-options --disable-keys --extended-insert --lock-tables --quick --set-charset Restore the database backup to the new server: mysql -p new_database < moodle-database.sql","title":"MariaDB backup"},{"location":"Markdown%20Cheatsheet/","text":"Markdown Cheatsheet This cheatsheet is intended as a quick reference and showcase of the markdown syntax in QOwnNotes . Headers # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 ====== Alt-H2 ------ H1 H2 H3 H4 H5 H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 Alt-H2 Emphasis Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Emphasis, aka italics, with asterisks or underscores . Strong emphasis, aka bold, with asterisks or underscores . Combined emphasis with asterisks and underscores . Lists (In this example, leading and trailing spaces are shown with with dots: \u22c5) 1. First ordered list item 2. Another item \u22c5\u22c5* Unordered sub-list. 1. Actual numbers don't matter, just that it's a number \u22c5\u22c51. Ordered sub-list 4. And another item. \u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). \u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5 \u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5 * Unordered list can use asterisks - Or minuses + Or pluses First ordered list item Another item Unordered sub-list. Actual numbers don't matter, just that it's a number Ordered sub-list And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. Unordered list can use asterisks Or minuses Or pluses Links There are two ways to create links. [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [You can use numbers for reference-style link definitions][1] URLs and URLs in angle brackets will automatically get turned into links in the preview. http://www.example.com or <http://www.example.com> [1]: https://www.qownnotes.org I'm an inline-style link I'm an inline-style link with title You can use numbers for reference-style link definitions URLs and URLs in angle brackets will automatically get turned into links in the preview. http://www.example.com or http://www.example.com Inline code and code blocks Inline `code` has `back-ticks around` it. Inline code has back-ticks around it. Blocks of code are either fenced by lines with three back-ticks, or are indented with four spaces. s = \"Code with space indent\" print s s = \"Code with space indent\" print s Tables Tables aren't part of the core Markdown spec, but the QOwnNotes preview supports them. Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 Colons can be used to align columns. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3 Blockquotes > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Horizontal Rule Three or more... --- Hyphens *** Asterisks ___ Underscores Three or more... Hyphens Asterisks Underscores Line Breaks Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a *separate paragraph*. This line is also begins a separate paragraph, but... This line is only separated by two trailing spaces and a single newline, so it's a separate line in the *same paragraph*. Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph . This line is also begins a separate paragraph, but... This line is only separated by two trailing spaces and a single newline, so it's a separate line in the same paragraph . Comments [comment]: # (This comment will not appear in the preview) Checkbox lists - [x] done - [ ] todo [x] done [ ] todo Credit: markdown-here License: CC-BY","title":"Markdown Cheatsheet"},{"location":"Markdown%20Cheatsheet/#markdown-cheatsheet","text":"This cheatsheet is intended as a quick reference and showcase of the markdown syntax in QOwnNotes .","title":"Markdown Cheatsheet"},{"location":"Markdown%20Cheatsheet/#headers","text":"# H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 ====== Alt-H2 ------","title":"Headers"},{"location":"Markdown%20Cheatsheet/#h1","text":"","title":"H1"},{"location":"Markdown%20Cheatsheet/#h2","text":"","title":"H2"},{"location":"Markdown%20Cheatsheet/#h3","text":"","title":"H3"},{"location":"Markdown%20Cheatsheet/#h4","text":"","title":"H4"},{"location":"Markdown%20Cheatsheet/#h5","text":"","title":"H5"},{"location":"Markdown%20Cheatsheet/#h6","text":"Alternatively, for H1 and H2, an underline-ish style:","title":"H6"},{"location":"Markdown%20Cheatsheet/#alt-h1","text":"","title":"Alt-H1"},{"location":"Markdown%20Cheatsheet/#alt-h2","text":"","title":"Alt-H2"},{"location":"Markdown%20Cheatsheet/#emphasis","text":"Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Emphasis, aka italics, with asterisks or underscores . Strong emphasis, aka bold, with asterisks or underscores . Combined emphasis with asterisks and underscores .","title":"Emphasis"},{"location":"Markdown%20Cheatsheet/#lists","text":"(In this example, leading and trailing spaces are shown with with dots: \u22c5) 1. First ordered list item 2. Another item \u22c5\u22c5* Unordered sub-list. 1. Actual numbers don't matter, just that it's a number \u22c5\u22c51. Ordered sub-list 4. And another item. \u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). \u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5 \u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5 * Unordered list can use asterisks - Or minuses + Or pluses First ordered list item Another item Unordered sub-list. Actual numbers don't matter, just that it's a number Ordered sub-list And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. Unordered list can use asterisks Or minuses Or pluses","title":"Lists"},{"location":"Markdown%20Cheatsheet/#links","text":"There are two ways to create links. [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [You can use numbers for reference-style link definitions][1] URLs and URLs in angle brackets will automatically get turned into links in the preview. http://www.example.com or <http://www.example.com> [1]: https://www.qownnotes.org I'm an inline-style link I'm an inline-style link with title You can use numbers for reference-style link definitions URLs and URLs in angle brackets will automatically get turned into links in the preview. http://www.example.com or http://www.example.com","title":"Links"},{"location":"Markdown%20Cheatsheet/#inline-code-and-code-blocks","text":"Inline `code` has `back-ticks around` it. Inline code has back-ticks around it. Blocks of code are either fenced by lines with three back-ticks, or are indented with four spaces. s = \"Code with space indent\" print s s = \"Code with space indent\" print s","title":"Inline code and code blocks"},{"location":"Markdown%20Cheatsheet/#tables","text":"Tables aren't part of the core Markdown spec, but the QOwnNotes preview supports them. Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 Colons can be used to align columns. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3","title":"Tables"},{"location":"Markdown%20Cheatsheet/#blockquotes","text":"> Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.","title":"Blockquotes"},{"location":"Markdown%20Cheatsheet/#horizontal-rule","text":"Three or more... --- Hyphens *** Asterisks ___ Underscores Three or more... Hyphens Asterisks Underscores","title":"Horizontal Rule"},{"location":"Markdown%20Cheatsheet/#line-breaks","text":"Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a *separate paragraph*. This line is also begins a separate paragraph, but... This line is only separated by two trailing spaces and a single newline, so it's a separate line in the *same paragraph*. Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph . This line is also begins a separate paragraph, but... This line is only separated by two trailing spaces and a single newline, so it's a separate line in the same paragraph .","title":"Line Breaks"},{"location":"Markdown%20Cheatsheet/#comments","text":"[comment]: # (This comment will not appear in the preview)","title":"Comments"},{"location":"Markdown%20Cheatsheet/#checkbox-lists","text":"- [x] done - [ ] todo [x] done [ ] todo Credit: markdown-here License: CC-BY","title":"Checkbox lists"},{"location":"Markdown%20Showcase/","text":"Markdown Showcase Another header Let's see _if the emphasis carries over_ to another paragraph. And maybe this should Hello not be Header Header List 0 List Hello! Hello Item 2 Hello Hibuli habuli! Code here Item 3 Hello again Hassd *code* Code here Stuff Hello Markdown FTW! 1986. What a great season. A link here: http://www.example.com/ that should be automatically detected. Stuff here! . This is pretty cool. Hello Booboo What up to the cats n dogs :) He ll o!! Some emphasized stuff here. A * star * has [born]. This * i dont know what*will happen. Stuff Hello Again Stuff This is an example inline link. Hello **`strong text** here These * should * not *be* selected. This neither! should be. This neither should* be 2nd Headline Yeah. Some code (name) name Third headline Some stuff here...","title":"Markdown Showcase"},{"location":"Markdown%20Showcase/#markdown-showcase","text":"","title":"Markdown Showcase"},{"location":"Markdown%20Showcase/#another-header","text":"Let's see _if the emphasis carries over_ to another paragraph. And maybe this should Hello not be","title":"Another header"},{"location":"Markdown%20Showcase/#header","text":"","title":"Header"},{"location":"Markdown%20Showcase/#header_1","text":"List 0 List Hello! Hello Item 2 Hello Hibuli habuli! Code here Item 3 Hello again Hassd *code* Code here Stuff Hello Markdown FTW! 1986. What a great season. A link here: http://www.example.com/ that should be automatically detected. Stuff here! . This is pretty cool. Hello Booboo What up to the cats n dogs :) He ll o!! Some emphasized stuff here. A * star * has [born]. This * i dont know what*will happen. Stuff Hello Again Stuff This is an example inline link. Hello **`strong text** here These * should * not *be* selected. This neither! should be. This neither should* be","title":"Header"},{"location":"Markdown%20Showcase/#2nd-headline","text":"Yeah. Some code (name) name","title":"2nd Headline"},{"location":"Markdown%20Showcase/#third-headline","text":"Some stuff here...","title":"Third headline"},{"location":"MoM%202020-10-14T19.37.13/","text":"MoM 2020-10-14T19.37.13 https://seriousmd.com/telemedicine-software https://medgatephilippines.com/ https://www.kitika.com/about https://www.aide-app.com/ Research: https://www.hindawi.com/journals/ijta/2013/457491/ Open-source Telemedicine Systems: * https://www.medfloss.org/taxonomy/term/107 * https://www.intelehealth.org/products * https://www.goodfirms.co/blog/the-best-10-free-and-open-source-telemedicine-software Required Reading: https://topflightapps.com/ideas/how-to-create-a-telehealth-app/","title":"MoM 2020 10 14T19.37.13"},{"location":"MoM%202020-10-14T19.37.13/#mom-2020-10-14t193713","text":"https://seriousmd.com/telemedicine-software https://medgatephilippines.com/ https://www.kitika.com/about https://www.aide-app.com/ Research: https://www.hindawi.com/journals/ijta/2013/457491/ Open-source Telemedicine Systems: * https://www.medfloss.org/taxonomy/term/107 * https://www.intelehealth.org/products * https://www.goodfirms.co/blog/the-best-10-free-and-open-source-telemedicine-software Required Reading: https://topflightapps.com/ideas/how-to-create-a-telehealth-app/","title":"MoM 2020-10-14T19.37.13"},{"location":"MoM%202021-04-12/","text":"MoM 2021-04-12 10am meeting with Traxion 1pm meeting with GIZ next meeting May 10, 1pm 9am meeting with IT DATE/ TIME: 4/12/21 9 AM PROJECT: TELEMED SUBJECT: I.T. [VENUE] : zoom ATTENDEES: Neomi, Angel, Roy ACTION ITEMS no. What Who When 1 have a IT personnel skills assessment Roy mid-April 2 NOTES we want an IT personnel assessment we want a roadmap to boost cloud IT prepare a training program as intro to the cloud charge and have multiple skills: teacher and consultant, course provider 10am meeting with Traxion DATE/ TIME: 4/12/21 PROJECT: SUBJECT: Demo of \"all\" features [VENUE] : ATTENDEES: Roy Dante Noemi Kristine ACTION ITEMS no. What Who When 1 Export CHMF DB Peppermint ? 2 DB export and Bulk upload CHMF April 15 ** Find out if API is in TOR Roy April 13 4 UAT prep NOTES telemed app can get bulk uploads of data traxion wants to do UAT even without the API issue on doctor appointment/ triaging April 16, UAT? April 23, UAT result? is API counted in API deliver a boolean value when queried about a policy number deliver and available relevant information given first name, last name and birthday cp # and birthday email address","title":"MoM 2021 04 12"},{"location":"MoM%202021-04-12/#mom-2021-04-12","text":"","title":"MoM 2021-04-12"},{"location":"MoM%202021-04-12/#10am-meeting-with-traxion","text":"","title":"10am meeting with Traxion"},{"location":"MoM%202021-04-12/#1pm-meeting-with-giz","text":"next meeting May 10, 1pm","title":"1pm meeting with GIZ"},{"location":"MoM%202021-04-12/#9am-meeting-with-it","text":"DATE/ TIME: 4/12/21 9 AM PROJECT: TELEMED SUBJECT: I.T. [VENUE] : zoom","title":"9am meeting with IT"},{"location":"MoM%202021-04-12/#attendees","text":"Neomi, Angel, Roy","title":"ATTENDEES:"},{"location":"MoM%202021-04-12/#action-items","text":"no. What Who When 1 have a IT personnel skills assessment Roy mid-April 2","title":"ACTION ITEMS"},{"location":"MoM%202021-04-12/#notes","text":"we want an IT personnel assessment we want a roadmap to boost cloud IT prepare a training program as intro to the cloud charge and have multiple skills: teacher and consultant, course provider","title":"NOTES"},{"location":"MoM%202021-04-12/#10am-meeting-with-traxion_1","text":"DATE/ TIME: 4/12/21 PROJECT: SUBJECT: Demo of \"all\" features [VENUE] :","title":"10am meeting with Traxion"},{"location":"MoM%202021-04-12/#attendees_1","text":"Roy Dante Noemi Kristine","title":"ATTENDEES:"},{"location":"MoM%202021-04-12/#action-items_1","text":"no. What Who When 1 Export CHMF DB Peppermint ? 2 DB export and Bulk upload CHMF April 15 ** Find out if API is in TOR Roy April 13 4 UAT prep","title":"ACTION ITEMS"},{"location":"MoM%202021-04-12/#notes_1","text":"telemed app can get bulk uploads of data traxion wants to do UAT even without the API issue on doctor appointment/ triaging April 16, UAT? April 23, UAT result? is API counted in","title":"NOTES"},{"location":"MoM%202021-04-12/#api","text":"deliver a boolean value when queried about a policy number deliver and available relevant information given first name, last name and birthday cp # and birthday email address","title":"API"},{"location":"MoM%20template/","text":"MoM template MEETING MINUTES DATE/ TIME: PROJECT: SUBJECT: [VENUE] : ATTENDEES: Roy ACTION ITEMS no. What Who When NOTES","title":"MoM template"},{"location":"MoM%20template/#mom-template","text":"","title":"MoM template"},{"location":"MoM%20template/#meeting-minutes","text":"DATE/ TIME: PROJECT: SUBJECT: [VENUE] :","title":"MEETING MINUTES"},{"location":"MoM%20template/#attendees","text":"Roy","title":"ATTENDEES:"},{"location":"MoM%20template/#action-items","text":"no. What Who When","title":"ACTION ITEMS"},{"location":"MoM%20template/#notes","text":"","title":"NOTES"},{"location":"Moodle%20install%202020-09-08T16.03.31/","text":"Moodle install 2020-09-08T16.03.31 Let\u2019s say we start from the beginning so it\u2019s more clear, Prepare Ubuntu 18.04 LTS Rebuild linode using Ubuntu 20.04 LTS ubuntu20.04LTSpassword adduser sir_roy add password for linode Setting Up a Basic Firewall ufw allow OpenSSH ufw enable ufw status Configure Firewall https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands It might be good to setup ssh keys First, you need to update your system sudo apt update && sudo apt dist-upgrade && sudo apt autoremove Install Nginx HTTP Server sudo apt install nginx After installing Nginx, the commands below can be used to stop, start and enable Nginx service to always startup when your computer boots. sudo systemctl stop nginx.service sudo systemctl start nginx.service sudo systemctl enable nginx.service Install Postgresql 11 [Install MariaDB Database Server] This is if using the default MariaDB, sudo apt install mariadb-server mariadb-client After installing, the commands below can be used to stop, start and enable MariaDB service to always start up when the server boots. sudo systemctl stop mariadb.service sudo systemctl start mariadb.service sudo systemctl enable mariadb.service After that, run the commands below to secure MariaDB server. sudo mysql_secure_installation ```` Enter current password for root (enter for none): Just press the Enter Set root password? [Y/n]: Y New password: Enter MariaDBpassword Re-enter new password: Repeat MariaDBpassword Re-enter new password: Repeat MariaDBpassword Remove anonymous users? [Y/n]: Y Disallow root login remotely? [Y/n]: Y Remove test database and access to it? [Y/n]: Y Reload privilege tables now? [Y/n]: Y `````` Next, run the commands below to open MySQL default configuration file. nano /etc/mysql/mariadb.conf.d/50-server.cnf Now to add some configuration to your instance default_storage_engine = innodb innodb_file_per_table = 1 innodb_file_format = Barracuda innodb_large_prefix = 1 sudo systemctl restart mariadb.service Now we need to create a Database for our Moodle installation. Enter your MariaDB instance like sudo mysql -u root -p enter MariaDBpassword Then create a database and configure it for usage CREATE DATABASE moodle_db; CREATE USER 'moodle_user'@'localhost' IDENTIFIED BY 'moodle_password'; GRANT ALL ON moodle_db.* TO 'moodle_user'@'localhost' IDENTIFIED BY 'moodle_password' WITH GRANT OPTION; FLUSH PRIVILEGES; EXIT; Install PHP7.4 and Related PHP Modules sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt update sudo apt install php7.4-fpm php7.4-common php7.4-mysql php7.4-gmp php7.4-curl php7.4-intl php7.4-mbstring php7.4-soap php7.4-xmlrpc php7.4-gd php7.4-xml php7.4-cli php7.4-zip php7.4-pgsql After installing PHP 7.4, go and configure some basic settings that may be required for Moodle to function properly. sudo nano /etc/php/7.4/fpm/php.ini file_uploads = On allow_url_fopen = On short_open_tag = On memory_limit = 256M cgi.fix_pathinfo = 0 upload_max_filesize = 200M max_execution_time = 360 date.timezone = Asia/Manila post_max_size = 200M Download moodle 3.9 I'm choosing to download moodle 3.9 stable. The latest atm is 3.10 stable. The oldest supported is 3.7 sudo apt install git curl cd /var/www/ sudo git clone -b MOODLE_39_STABLE git://git.moodle.org/moodle.git moodle Then run the commands below to set the correct permissions for Moodle to function. sudo mkdir -p /var/www/moodledata sudo chown -R www-data:www-data /var/www/ sudo chmod -R 755 /var/www/ sudo chown www-data:www-data /var/www/moodledata Configure Nginx You can type the following to create the file needed $ sudo nano /etc/nginx/sites-available/moodle ``` server { listen 80; listen [::]:80; root /var/www/moodle; index index.php index.html index.htm; server_name moodle.172.105.217.30.nip.io; client_max_body_size 100M; autoindex off; location / { try_files $uri $uri/ =404; } location /dataroot/ { internal; alias /var/www/moodledata/; } location ~ [^/].php(/|$) { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } ``` Update firewall settings sudo ufw allow ssh sudo ufw allow 22 sudo ufw allow http sudo ufw allow 80 sudo ufw allow https sudo ufw allow 443 sudo ufw allow proto tcp from any to any port 80,443 [sudo ufw allow 3306] sudo ufw allow 25 sudo ufw allow 465 sudo ufw allow 587 Enable the Moodle site sudo ln -s /etc/nginx/sites-available/moodle /etc/nginx/sites-enabled/ Restart Nginx sudo systemctl restart nginx.service sudo apt install ghostscript Set up moodle http://moodle.172.105.217.30.nip.io/ language: english Data directory: /var/www/moodledata directory is writeable by 'www-data' database: MariaDB (native/mariadb) Moodle Learning Management System moodlelms Asia/Manila self-registration on I agree to the Privacy notice and data processing agreement Site administration-> Server -> System Paths * /usr/bin/ghostscript * save changes Restart VPS","title":"Moodle install 2020 09 08T16.03.31"},{"location":"Moodle%20install%202020-09-08T16.03.31/#moodle-install-2020-09-08t160331","text":"Let\u2019s say we start from the beginning so it\u2019s more clear,","title":"Moodle install 2020-09-08T16.03.31"},{"location":"Moodle%20install%202020-09-08T16.03.31/#prepare-ubuntu-1804-lts","text":"Rebuild linode using Ubuntu 20.04 LTS ubuntu20.04LTSpassword adduser sir_roy add password for linode Setting Up a Basic Firewall ufw allow OpenSSH ufw enable ufw status","title":"Prepare Ubuntu 18.04 LTS"},{"location":"Moodle%20install%202020-09-08T16.03.31/#configure-firewall","text":"https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands It might be good to setup ssh keys First, you need to update your system sudo apt update && sudo apt dist-upgrade && sudo apt autoremove","title":"Configure Firewall"},{"location":"Moodle%20install%202020-09-08T16.03.31/#install-nginx-http-server","text":"sudo apt install nginx After installing Nginx, the commands below can be used to stop, start and enable Nginx service to always startup when your computer boots. sudo systemctl stop nginx.service sudo systemctl start nginx.service sudo systemctl enable nginx.service","title":"Install Nginx HTTP Server"},{"location":"Moodle%20install%202020-09-08T16.03.31/#install-postgresql-11","text":"","title":"Install Postgresql 11"},{"location":"Moodle%20install%202020-09-08T16.03.31/#install-mariadb-database-server","text":"This is if using the default MariaDB, sudo apt install mariadb-server mariadb-client After installing, the commands below can be used to stop, start and enable MariaDB service to always start up when the server boots. sudo systemctl stop mariadb.service sudo systemctl start mariadb.service sudo systemctl enable mariadb.service After that, run the commands below to secure MariaDB server. sudo mysql_secure_installation ```` Enter current password for root (enter for none): Just press the Enter Set root password? [Y/n]: Y New password: Enter MariaDBpassword Re-enter new password: Repeat MariaDBpassword Re-enter new password: Repeat MariaDBpassword Remove anonymous users? [Y/n]: Y Disallow root login remotely? [Y/n]: Y Remove test database and access to it? [Y/n]: Y Reload privilege tables now? [Y/n]: Y `````` Next, run the commands below to open MySQL default configuration file. nano /etc/mysql/mariadb.conf.d/50-server.cnf Now to add some configuration to your instance default_storage_engine = innodb innodb_file_per_table = 1 innodb_file_format = Barracuda innodb_large_prefix = 1 sudo systemctl restart mariadb.service Now we need to create a Database for our Moodle installation. Enter your MariaDB instance like sudo mysql -u root -p enter MariaDBpassword Then create a database and configure it for usage CREATE DATABASE moodle_db; CREATE USER 'moodle_user'@'localhost' IDENTIFIED BY 'moodle_password'; GRANT ALL ON moodle_db.* TO 'moodle_user'@'localhost' IDENTIFIED BY 'moodle_password' WITH GRANT OPTION; FLUSH PRIVILEGES; EXIT;","title":"[Install MariaDB Database Server]"},{"location":"Moodle%20install%202020-09-08T16.03.31/#install-php74-and-related-php-modules","text":"sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt update sudo apt install php7.4-fpm php7.4-common php7.4-mysql php7.4-gmp php7.4-curl php7.4-intl php7.4-mbstring php7.4-soap php7.4-xmlrpc php7.4-gd php7.4-xml php7.4-cli php7.4-zip php7.4-pgsql After installing PHP 7.4, go and configure some basic settings that may be required for Moodle to function properly. sudo nano /etc/php/7.4/fpm/php.ini file_uploads = On allow_url_fopen = On short_open_tag = On memory_limit = 256M cgi.fix_pathinfo = 0 upload_max_filesize = 200M max_execution_time = 360 date.timezone = Asia/Manila post_max_size = 200M","title":"Install PHP7.4 and Related PHP Modules"},{"location":"Moodle%20install%202020-09-08T16.03.31/#download-moodle-39","text":"I'm choosing to download moodle 3.9 stable. The latest atm is 3.10 stable. The oldest supported is 3.7 sudo apt install git curl cd /var/www/ sudo git clone -b MOODLE_39_STABLE git://git.moodle.org/moodle.git moodle Then run the commands below to set the correct permissions for Moodle to function. sudo mkdir -p /var/www/moodledata sudo chown -R www-data:www-data /var/www/ sudo chmod -R 755 /var/www/ sudo chown www-data:www-data /var/www/moodledata","title":"Download moodle 3.9"},{"location":"Moodle%20install%202020-09-08T16.03.31/#configure-nginx","text":"You can type the following to create the file needed $ sudo nano /etc/nginx/sites-available/moodle ``` server { listen 80; listen [::]:80; root /var/www/moodle; index index.php index.html index.htm; server_name moodle.172.105.217.30.nip.io; client_max_body_size 100M; autoindex off; location / { try_files $uri $uri/ =404; } location /dataroot/ { internal; alias /var/www/moodledata/; } location ~ [^/].php(/|$) { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } ``` Update firewall settings sudo ufw allow ssh sudo ufw allow 22 sudo ufw allow http sudo ufw allow 80 sudo ufw allow https sudo ufw allow 443 sudo ufw allow proto tcp from any to any port 80,443 [sudo ufw allow 3306] sudo ufw allow 25 sudo ufw allow 465 sudo ufw allow 587","title":"Configure Nginx"},{"location":"Moodle%20install%202020-09-08T16.03.31/#enable-the-moodle-site","text":"sudo ln -s /etc/nginx/sites-available/moodle /etc/nginx/sites-enabled/ Restart Nginx sudo systemctl restart nginx.service sudo apt install ghostscript","title":"Enable the Moodle site"},{"location":"Moodle%20install%202020-09-08T16.03.31/#set-up-moodle","text":"http://moodle.172.105.217.30.nip.io/ language: english Data directory: /var/www/moodledata directory is writeable by 'www-data' database: MariaDB (native/mariadb) Moodle Learning Management System moodlelms Asia/Manila self-registration on I agree to the Privacy notice and data processing agreement Site administration-> Server -> System Paths * /usr/bin/ghostscript * save changes Restart VPS","title":"Set up moodle"},{"location":"Muon%20Pics/","text":"Muon Pics","title":"Muon Pics"},{"location":"Muon%20Pics/#muon-pics","text":"","title":"Muon Pics"},{"location":"Nginx%20config%20for%20Moodle%203.9/","text":"Nginx config for Moodle 3.9 Nginx configuration PHP-FPM Nginx is usually configured to interface with PHP via php-fpm . This is both fast and robust. PHP-FPM's default behaviour for pools is usually to restrict the execution of scripts to a specific extension, i.e. .php. You should ensure that this behaviour is configured within your particular package/distribution, e.g. for debian, /etc/php5/fpm/pool.d/www.conf security.limit_extensions = .php Nginx Add the following 'slash arguments' compatible 'location' block to your vhosts 'server' in your nginx configuration (further explanation at ' Using slash arguments '). nginx.conf location: location ~ \\[^/\\]\\\\.php(/|$) { fastcgi\\_split\\_path\\_info ^(.+\\\\.php)(/.+)$; fastcgi\\_index index.php; fastcgi\\_pass 127.0.0.1:9000 (or your php-fpm socket); include fastcgi\\_params; fastcgi\\_param PATH\\_INFO $fastcgi\\_path\\_info; fastcgi\\_param SCRIPT\\_FILENAME $document\\_root$fastcgi\\_script\\_name; } If the above does not work try the following: Note: This was for CentOS 7.6 (1804), MariaDB 10.3, Nginx 1.15 and PHP 7.3.5 location ~ ^(.+\\\\.php)(.\\*)$ { root /usr/share/nginx/html/moodle/; fastcgi\\_split\\_path\\_info ^(.+\\\\.php)(.\\*)$; fastcgi\\_index index.php; fastcgi\\_pass 127.0.0.1:9000; include /etc/nginx/mime.types; include fastcgi\\_params; fastcgi\\_param PATH\\_INFO $fastcgi\\_path\\_info; fastcgi\\_param SCRIPT\\_FILENAME $document\\_root$fastcgi\\_script\\_name; } If you find that this does not work (scripts, styles, and images not loading) and that there are open() \"...\" failed (20: Not a directory) lines appearing in your logs: Check whether there are any directives related to static content before this block and try moving them after this block. Another potential pitfall is the use of try_files . Many guides recommend configurations like try\\_files $fastcgi\\_script\\_name =404; . But if try_files is used, nginx deletes the content of the $fastcgi_path_info variable (this is intended behavior ). This causes PATH_INFO to also be empty, so slash arguments don't work. An alternative is the use of `if(!-f $document_root$fastcgi_script_name) {return 404;}`` as recommended by the nginx documentation, although the nginx documentation also recommends not using if . Error pages # This passes 404 pages to Moodle so they can be themed error\\_page 404 /error/index.php; error\\_page 403 =404 /error/index.php; Hiding internal files # Hide all dot files but allow \"Well-Known URIs\" as per RFC 5785 location ~ /\\\\.(?!well-known).\\* { return 404; } #This should be after the php fpm rule and very close to the last nginx ruleset. #Don't allow direct access to various internal files. See MDL-69333 location ~ (/vendor/|/node\\_modules/|composer\\\\.json|/readme|/README|readme\\\\.txt|/upgrade\\\\.txt|db/install\\\\.xml|/fixtures/|/behat/|phpunit\\\\.xml|\\\\.lock|environment\\\\.xml) { deny all; return 404; } XSendfile aka X-Accel-Redirect Setting Moodle and Nginx to use XSendfile functionality is a big win as it frees PHP from delivering files allowing Nginx to do what it does best, i.e. deliver files. Enable xsendfile for Nginx in Moodles config.php, this is documented in the config-dist.php, a minimal configuration look like this, $CFG->xsendfile = 'X-Accel-Redirect'; $CFG->xsendfilealiases = array( '/dataroot/' => $CFG->dataroot ); Accompany this with a matching 'location' block in your nginx server configuration. location /dataroot/ { internal; alias <full\\_moodledata\\_path>; # ensure the path ends with / } The definition of 'internal' here is critical as it prevents client access to your dataroot.","title":"Nginx config for Moodle 3.9"},{"location":"Nginx%20config%20for%20Moodle%203.9/#nginx-config-for-moodle-39","text":"","title":"Nginx config for Moodle 3.9"},{"location":"Nginx%20config%20for%20Moodle%203.9/#nginx-configuration","text":"","title":"Nginx configuration"},{"location":"Nginx%20config%20for%20Moodle%203.9/#php-fpm","text":"Nginx is usually configured to interface with PHP via php-fpm . This is both fast and robust. PHP-FPM's default behaviour for pools is usually to restrict the execution of scripts to a specific extension, i.e. .php. You should ensure that this behaviour is configured within your particular package/distribution, e.g. for debian, /etc/php5/fpm/pool.d/www.conf security.limit_extensions = .php","title":"PHP-FPM"},{"location":"Nginx%20config%20for%20Moodle%203.9/#nginx","text":"Add the following 'slash arguments' compatible 'location' block to your vhosts 'server' in your nginx configuration (further explanation at ' Using slash arguments '). nginx.conf location: location ~ \\[^/\\]\\\\.php(/|$) { fastcgi\\_split\\_path\\_info ^(.+\\\\.php)(/.+)$; fastcgi\\_index index.php; fastcgi\\_pass 127.0.0.1:9000 (or your php-fpm socket); include fastcgi\\_params; fastcgi\\_param PATH\\_INFO $fastcgi\\_path\\_info; fastcgi\\_param SCRIPT\\_FILENAME $document\\_root$fastcgi\\_script\\_name; } If the above does not work try the following: Note: This was for CentOS 7.6 (1804), MariaDB 10.3, Nginx 1.15 and PHP 7.3.5 location ~ ^(.+\\\\.php)(.\\*)$ { root /usr/share/nginx/html/moodle/; fastcgi\\_split\\_path\\_info ^(.+\\\\.php)(.\\*)$; fastcgi\\_index index.php; fastcgi\\_pass 127.0.0.1:9000; include /etc/nginx/mime.types; include fastcgi\\_params; fastcgi\\_param PATH\\_INFO $fastcgi\\_path\\_info; fastcgi\\_param SCRIPT\\_FILENAME $document\\_root$fastcgi\\_script\\_name; } If you find that this does not work (scripts, styles, and images not loading) and that there are open() \"...\" failed (20: Not a directory) lines appearing in your logs: Check whether there are any directives related to static content before this block and try moving them after this block. Another potential pitfall is the use of try_files . Many guides recommend configurations like try\\_files $fastcgi\\_script\\_name =404; . But if try_files is used, nginx deletes the content of the $fastcgi_path_info variable (this is intended behavior ). This causes PATH_INFO to also be empty, so slash arguments don't work. An alternative is the use of `if(!-f $document_root$fastcgi_script_name) {return 404;}`` as recommended by the nginx documentation, although the nginx documentation also recommends not using if .","title":"Nginx"},{"location":"Nginx%20config%20for%20Moodle%203.9/#error-pages","text":"# This passes 404 pages to Moodle so they can be themed error\\_page 404 /error/index.php; error\\_page 403 =404 /error/index.php;","title":"Error pages"},{"location":"Nginx%20config%20for%20Moodle%203.9/#hiding-internal-files","text":"# Hide all dot files but allow \"Well-Known URIs\" as per RFC 5785 location ~ /\\\\.(?!well-known).\\* { return 404; } #This should be after the php fpm rule and very close to the last nginx ruleset. #Don't allow direct access to various internal files. See MDL-69333 location ~ (/vendor/|/node\\_modules/|composer\\\\.json|/readme|/README|readme\\\\.txt|/upgrade\\\\.txt|db/install\\\\.xml|/fixtures/|/behat/|phpunit\\\\.xml|\\\\.lock|environment\\\\.xml) { deny all; return 404; }","title":"Hiding internal files"},{"location":"Nginx%20config%20for%20Moodle%203.9/#xsendfile-aka-x-accel-redirect","text":"Setting Moodle and Nginx to use XSendfile functionality is a big win as it frees PHP from delivering files allowing Nginx to do what it does best, i.e. deliver files. Enable xsendfile for Nginx in Moodles config.php, this is documented in the config-dist.php, a minimal configuration look like this, $CFG->xsendfile = 'X-Accel-Redirect'; $CFG->xsendfilealiases = array( '/dataroot/' => $CFG->dataroot ); Accompany this with a matching 'location' block in your nginx server configuration. location /dataroot/ { internal; alias <full\\_moodledata\\_path>; # ensure the path ends with / } The definition of 'internal' here is critical as it prevents client access to your dataroot.","title":"XSendfile aka X-Accel-Redirect"},{"location":"No%20classes%20-%202021/","text":"No classes - 2021 check this email: Fwd: DOST Memorandum Subject: Proclamation No. 1107 \"Amending Proclamation No. 986, S. 2020, Declaring the Regular Holidays and Special (Non-Working) Days for the Year 2021\" Inbox Christianne Mercado Attachments Mar 17, 2021, 1:03 PM","title":"No classes   2021"},{"location":"No%20classes%20-%202021/#no-classes-2021","text":"check this email: Fwd: DOST Memorandum Subject: Proclamation No. 1107 \"Amending Proclamation No. 986, S. 2020, Declaring the Regular Holidays and Special (Non-Working) Days for the Year 2021\" Inbox Christianne Mercado Attachments Mar 17, 2021, 1:03 PM","title":"No classes -  2021"},{"location":"Note%202020-02-26T05.32.48/","text":"Note 2020-02-26T05.32.48 Gratitude I am so happy and grateful for the wonderful trip to Dentist Teng with my wife. I am so happy and grateful that I get to go to Mass more and am more attentive to it. I am so happy and grateful for the cleaning of my ears in a manner that's fun and relaxing and loving. I am so happy and grateful I have wonderful healthy meals. I am so happy and grateful that I can try out setups in windows 10 now. I am so happy and grateful now that there's a reactos project that I see be helping me in porting legacy software later on. I am so happy and grateful now that I'm happily transitioning to a plant-based diet. I am so happy and grateful now that I live in a wonderful, healthy and strong body. I am so happy and grateful now that I have set programs for Pisay CS and BA ISAD. I am so happy and grateful that I have a bouncing jolly baby. PSHS There's going to be practical tests today! hehehehe. Let's make them.","title":"Note 2020 02 26T05.32.48"},{"location":"Note%202020-02-26T05.32.48/#note-2020-02-26t053248","text":"","title":"Note 2020-02-26T05.32.48"},{"location":"Note%202020-02-26T05.32.48/#gratitude","text":"I am so happy and grateful for the wonderful trip to Dentist Teng with my wife. I am so happy and grateful that I get to go to Mass more and am more attentive to it. I am so happy and grateful for the cleaning of my ears in a manner that's fun and relaxing and loving. I am so happy and grateful I have wonderful healthy meals. I am so happy and grateful that I can try out setups in windows 10 now. I am so happy and grateful now that there's a reactos project that I see be helping me in porting legacy software later on. I am so happy and grateful now that I'm happily transitioning to a plant-based diet. I am so happy and grateful now that I live in a wonderful, healthy and strong body. I am so happy and grateful now that I have set programs for Pisay CS and BA ISAD. I am so happy and grateful that I have a bouncing jolly baby.","title":"Gratitude"},{"location":"Note%202020-02-26T05.32.48/#pshs","text":"There's going to be practical tests today! hehehehe. Let's make them.","title":"PSHS"},{"location":"Note%202020-05-20T10.41.12/","text":"Note 2020-05-20T10.41.12 Gratitude I'm so happy and grateful that I have a great wife I'm happy and grateful that breakfast today was yummy, energizing and healthy ISHAGT I'm steadily getting to my goals ISHAGT BA is taking interest in what I can contribute and I'm learning in the process ISHAGT Provident is still WFH tasks Take a Laravel quickstart Clone the UPPFI repo Set it up locally Call on Regi","title":"Note 2020 05 20T10.41.12"},{"location":"Note%202020-05-20T10.41.12/#note-2020-05-20t104112","text":"","title":"Note 2020-05-20T10.41.12"},{"location":"Note%202020-05-20T10.41.12/#gratitude","text":"I'm so happy and grateful that I have a great wife I'm happy and grateful that breakfast today was yummy, energizing and healthy ISHAGT I'm steadily getting to my goals ISHAGT BA is taking interest in what I can contribute and I'm learning in the process ISHAGT Provident is still WFH","title":"Gratitude"},{"location":"Note%202020-05-20T10.41.12/#tasks","text":"Take a Laravel quickstart Clone the UPPFI repo Set it up locally Call on Regi","title":"tasks"},{"location":"Note%202020-06-05T12.31.07/","text":"Note 2020-06-05T12.31.07 I want to learn and become a master Long Term Active Stock Investor Goal / Target / Objective Purpose / Reason / Y / Why Action / Strategy I have learned that we are in the weak bear market. I shall look for the V, L , U and W curves. Check the green stocks if they're ripe for selling Check the red stocks for good switching opportunities. Check SAM stocks for good timing w.r.t. target price and max exposure Prioritize the sellables and buyables execute sells and buys Tue, Jun 9 2020 I'm buying SECB and SHLPH. I believe this is a good time for both. I'm putting around 5000 each.","title":"Note 2020 06 05T12.31.07"},{"location":"Note%202020-06-05T12.31.07/#note-2020-06-05t123107","text":"I want to learn and become a master Long Term Active Stock Investor Goal / Target / Objective Purpose / Reason / Y / Why Action / Strategy I have learned that we are in the weak bear market. I shall look for the V, L , U and W curves. Check the green stocks if they're ripe for selling Check the red stocks for good switching opportunities. Check SAM stocks for good timing w.r.t. target price and max exposure Prioritize the sellables and buyables execute sells and buys","title":"Note 2020-06-05T12.31.07"},{"location":"Note%202020-06-05T12.31.07/#tue-jun-9-2020","text":"I'm buying SECB and SHLPH. I believe this is a good time for both. I'm putting around 5000 each.","title":"Tue, Jun 9 2020"},{"location":"Note%202020-08-24T22.39.33/","text":"Note 2020-08-24T22.39.33 The Association for Computing Machinery (ACM) is the largest and most prominent educational and scientific computing group. Their code of conduct is one of the most widely used reference around the world. The ACM Code of Ethics and Professional Conduct, often referred to as \u201c the Code \u201d, is meant to guide the ethics of computing practitioners. This includes professionals, instructors, students and anyone who wishes to use technology in an impactful way. It operates on the understanding that the public good should always come first . The original version was created in 1992 when people saw computing as a purely technical form of work. However, today\u2019s practitioners\u2019 work can affect the lives of people in unintended and unpredicatble ways. As technologies evolve, the contexts in which they can be applied also evolve with it. Something that was originally designed for one intent could be used in a completely different, ethically questionable way later on. So ACM updated their code in 2018 to reflect the changing times. It is divided into three parts: General Ethical Principles Professional Responsibilities Professional Leadership Principles GENERAL ETHICAL PRINCIPLES Contribute to society and to human well-being acknowledging that all people are stakeholders in computing. Computing practitioners should: use their skills for the benefit of society. consider if their efforts will result in socially responsible uses and can be broadly accessible Avoid Harm Here, harm means negative consequences which include: Unjustified physical or mental injury Unjustified destruction or disclosure of information Unjustified damage to property, reputation and the environment Be honest and trustworthy Computing practitioners should disclose and discuss all important system capabilities, limitations and potential problems to the clients or users. If you as a programmer are aware that your program might have some flaws or potential errors, then you must be responsible enough to notify the parties involved. Be fair take action not to discriminate Technology should be inclusive and accessible. Professionals should avoid creating technologies that may constitute unfair discrimination, exclusion or harassment. Nowadays, many applications have interfaces that require direct user interaction. Computing professionals should take care to consider the needs and sensitivities of a large and diverse group of potential users. 5. Respect the work required to produce new ideas, inventions, creative works, and computing artifacts Computing professionals should credit the creators of ideas and other work and respect copyrights and other intellectual property. They should not claim ownership of work that is not their own. Open source software is source code wherein the creator grants other users the rights to use, study, change and distrtibute the software to anyone. If this is the case, then computing professionals should not claim private owndership of work that they have shared as public resources. 6. Respect privacy A lot of technology collects, monitors and exchanges personal information without the user knowing. Computing professionals should make themselves knowledgable about the different forms of privacy and understand the rights and responsibilities associated with the collection of personal data and information. They must take precaution to prevent unauthorized data collection and protect it from being accessed by outside parties or being accidentally disclosed. They must establish clear policies so the users will understand what is being collected and what it will be used for. They must show transparency and ask for informed consent from their users.","title":"Note 2020 08 24T22.39.33"},{"location":"Note%202020-08-24T22.39.33/#note-2020-08-24t223933","text":"The Association for Computing Machinery (ACM) is the largest and most prominent educational and scientific computing group. Their code of conduct is one of the most widely used reference around the world. The ACM Code of Ethics and Professional Conduct, often referred to as \u201c the Code \u201d, is meant to guide the ethics of computing practitioners. This includes professionals, instructors, students and anyone who wishes to use technology in an impactful way. It operates on the understanding that the public good should always come first . The original version was created in 1992 when people saw computing as a purely technical form of work. However, today\u2019s practitioners\u2019 work can affect the lives of people in unintended and unpredicatble ways. As technologies evolve, the contexts in which they can be applied also evolve with it. Something that was originally designed for one intent could be used in a completely different, ethically questionable way later on. So ACM updated their code in 2018 to reflect the changing times. It is divided into three parts: General Ethical Principles Professional Responsibilities Professional Leadership Principles","title":"Note 2020-08-24T22.39.33"},{"location":"Note%202020-08-24T22.39.33/#general-ethical-principles","text":"","title":"GENERAL ETHICAL PRINCIPLES"},{"location":"Note%202020-08-24T22.39.33/#contribute-to-society-and-to-human-well-being","text":"acknowledging that all people are stakeholders in computing. Computing practitioners should: use their skills for the benefit of society. consider if their efforts will result in socially responsible uses and can be broadly accessible","title":"Contribute to society and to human well-being"},{"location":"Note%202020-08-24T22.39.33/#avoid-harm","text":"Here, harm means negative consequences which include: Unjustified physical or mental injury Unjustified destruction or disclosure of information Unjustified damage to property, reputation and the environment","title":"Avoid Harm"},{"location":"Note%202020-08-24T22.39.33/#be-honest-and-trustworthy","text":"Computing practitioners should disclose and discuss all important system capabilities, limitations and potential problems to the clients or users. If you as a programmer are aware that your program might have some flaws or potential errors, then you must be responsible enough to notify the parties involved.","title":"Be honest and trustworthy"},{"location":"Note%202020-08-24T22.39.33/#be-fair","text":"take action not to discriminate Technology should be inclusive and accessible. Professionals should avoid creating technologies that may constitute unfair discrimination, exclusion or harassment. Nowadays, many applications have interfaces that require direct user interaction. Computing professionals should take care to consider the needs and sensitivities of a large and diverse group of potential users. 5. Respect the work required to produce new ideas, inventions, creative works, and computing artifacts Computing professionals should credit the creators of ideas and other work and respect copyrights and other intellectual property. They should not claim ownership of work that is not their own. Open source software is source code wherein the creator grants other users the rights to use, study, change and distrtibute the software to anyone. If this is the case, then computing professionals should not claim private owndership of work that they have shared as public resources. 6. Respect privacy A lot of technology collects, monitors and exchanges personal information without the user knowing. Computing professionals should make themselves knowledgable about the different forms of privacy and understand the rights and responsibilities associated with the collection of personal data and information. They must take precaution to prevent unauthorized data collection and protect it from being accessed by outside parties or being accidentally disclosed. They must establish clear policies so the users will understand what is being collected and what it will be used for. They must show transparency and ask for informed consent from their users.","title":"Be fair"},{"location":"Note%202021-05-13T00.40.44/","text":"Note 2021-05-13T00.40.44","title":"Note 2021 05 13T00.40.44"},{"location":"Note%202021-05-13T00.40.44/#note-2021-05-13t004044","text":"","title":"Note 2021-05-13T00.40.44"},{"location":"OpenCV%20research/","text":"OpenCV research 2020-11-05T13.51.31 Ana Victoria Lloren avrlloren@pshs.edu.ph , \"Bemas John D. Cabida\" b21.bemas.cabida@pshs.edu.ph , \"Christopher Luis M. Senatin\" b21.christopher.senatin@pshs.edu.ph \"Jose Francois M. Abedejos\" b21.jose.abedejos@pshs.edu.ph https://meet.google.com/jgq-zyun-caj","title":"OpenCV research"},{"location":"OpenCV%20research/#opencv-research","text":"2020-11-05T13.51.31 Ana Victoria Lloren avrlloren@pshs.edu.ph , \"Bemas John D. Cabida\" b21.bemas.cabida@pshs.edu.ph , \"Christopher Luis M. Senatin\" b21.christopher.senatin@pshs.edu.ph \"Jose Francois M. Abedejos\" b21.jose.abedejos@pshs.edu.ph https://meet.google.com/jgq-zyun-caj","title":"OpenCV research"},{"location":"PHP%207.4/","text":"PHP 7.4 We want Moodle 3.9 in an Ubuntu 20.04 server with PHP 7.4. sudo apt install graphviz aspell ghostscript clamav php7.4-pspell php7.4-curl php7.4-gd php7.4-intl php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-ldap php7.4-zip php7.4-soap php7.4-mbstring php7.4-pgsql php7.4-cli php7.4-fpm php7.4-common php7.4-iconv php7.4-curl php7.4-json libpcre3 libpcre3-dev Check: $ sudo systemctl status php7.4-fpm $ sudo systemctl is-enabled php7.4-fpm","title":"PHP 7.4"},{"location":"PHP%207.4/#php-74","text":"We want Moodle 3.9 in an Ubuntu 20.04 server with PHP 7.4. sudo apt install graphviz aspell ghostscript clamav php7.4-pspell php7.4-curl php7.4-gd php7.4-intl php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-ldap php7.4-zip php7.4-soap php7.4-mbstring php7.4-pgsql php7.4-cli php7.4-fpm php7.4-common php7.4-iconv php7.4-curl php7.4-json libpcre3 libpcre3-dev Check: $ sudo systemctl status php7.4-fpm $ sudo systemctl is-enabled php7.4-fpm","title":"PHP 7.4"},{"location":"PLDT%20Digital%20Transformation%202020-06-16T10.46.01/","text":"PLDT Digital Transformation 2020-06-16T10.46.01 CRM migrates to SalesForce Industry-specific applications migrate to Vlocity Operations migrate to Capgemini Salesforce Salesforce.com, inc. is an American cloud-based software company headquartered in San Francisco, California. It provides customer relationship management (CRM) service and also sells a complementary suite of enterprise applications focused on customer service, marketing automation, analytics, and application development. In 2020, Fortune magazine ranked Salesforce at number six on their Fortune List of the Top 100 Companies to Work For in 2020 based on an employee survey of satisfaction.[1] [1]: Jessica Snouwaert. The 25 best companies to work for, based on employee satisfaction - Business Insider Vlocity Built natively on the Salesforce platform, Vlocity is a leading provider of industry-specific cloud and mobile software for the world\u2019s top communications, media and entertainment, energy, utilities, insurance, health, and government organizations. Capgemini Capgemini SE is a French multinational corporation that provides consulting, technology, professional, and outsourcing services. It is headquartered in Paris, France. Capgemini has over 270,000 employees in over 50 countries, of whom nearly 120,000 are in India. There's an article about this in the Philippine Star, Business Section, June 16, 2020 Toastmasters TME script DT/ DX Developed countries have 10-20% of their potential, pre-COVID. DT of Information DT of Industries/ Organizations DT of Societies DT of Education / Training Introduction A terrific Tuesday evening to our Club President, fellow toastmasters and friends. Welcome to tonight's meeting dubbed Digital Transformation 101 My name is Roy Canseco and I am honored to be your Taostmaster of the Evening. ... I am seeing ____ new faces. Can I have a show of hands from anyone new to toastmasters here? For the benefit of the guests here, I shall explain a bit. Sultan Toastmasters club is a unique, fun and encouraging environment where we learn public speaking and communication through practice. A typical club meeting consists of 3 main parts The first part is where we get comfortable and give short impromptu speeches. The second part is where chosen members deliver speech projects. The third segment is where feedback is given to the speakers, allowing them to reflect and have learning actually happen. Next I want to introduce some people, who are set to make this meeting more exciting and educational. TM Ceasar Jacinto _ will track the time. So if you see him eyeing you weirdly, maybe it's time start building your speech to a close. _TM Alice Kalaw____ will be our Ah-Counter. He/ she will track your err, ahh, umm, ok, alright, actually... \" and other word crutches that we commonly fall into during our speech. TM Michael Jacinto, DTM, TC will be our Grammarian for tonight. He will be our grammar police but this is a good thing. To set us off into learning frame of mind, let me call _TM Micheal Jacinto_____ to share with us the Word of the Day. Up next is the prepared speeches segment. As tonight's TME, I want to start and keep a tradition of giving all our prepared speeches speakers a 10-second round of applause after the end of each speech. We give them extended applause because we understand that it takes time and effort to prepare a speech, and it certainly takes courage to deliver it in front of so many people here tonight. So please unmute your mics and give your thunderous applause later for each speaker after they have delivered their speeches. Intro Speech Most TME uses the \u201cPOETTS\u201d structure when introducing the speaker: P \u2013 Project Title of the speech O \u2013 Objectives of the speech E \u2013 Evaluator: who is the evaluator of this speech T \u2013 Time allocated for the speech T \u2013 Title of the speech to be given S \u2013 Speaker\u2019s introduction Prepare remarks to be used. Consult the VPE for last-minute changes to the program. Check with the speakers for any last-minute changes. Our _ _ speaker this evening is _Linda Navarro, ACB, ALB _ _ _ _ _. He/ She will be delivering his/ her speech entitled Crash Landing on H'yu _ _ . He/ She will then be evaluated by _Lolita Bravo, DL2 ______. Let me call first the evaluator to briefly tell us the Project Title of the speech, The Objectives by which he/ she will be evaluating, and the time alloted for the speech. Thank you evaluator TM Lolita Bravo, DL2____________ Let's welcome TM __Linda Navarro, ACB, ALB_________ to deliver to us Crash Landing on H'yu _ ______ . Our _ _ speaker this evening is _Teddy Tardecilla, ACB,AD _ _ _ _ _. He/ She will be delivering his/ her speech entitled ULYSSES _ . He/ She will then be evaluated by Sonia M. Roco, ACG, ALB,VC2____ . Let me call first the evaluator to briefly tell us the Project Title of the speech, The Objectives by which he/ she will be evaluating, and the time alloted for the speech. Thank you evaluator TM Sonia M. Roco, ACG, ALB,VC2____________ Let's welcome TM __Teddy Tardecilla, ACB,AD________ to deliver to us ULYSSES _ _ .","title":"PLDT Digital Transformation 2020 06 16T10.46.01"},{"location":"PLDT%20Digital%20Transformation%202020-06-16T10.46.01/#pldt-digital-transformation-2020-06-16t104601","text":"CRM migrates to SalesForce Industry-specific applications migrate to Vlocity Operations migrate to Capgemini","title":"PLDT Digital Transformation 2020-06-16T10.46.01"},{"location":"PLDT%20Digital%20Transformation%202020-06-16T10.46.01/#salesforce","text":"Salesforce.com, inc. is an American cloud-based software company headquartered in San Francisco, California. It provides customer relationship management (CRM) service and also sells a complementary suite of enterprise applications focused on customer service, marketing automation, analytics, and application development. In 2020, Fortune magazine ranked Salesforce at number six on their Fortune List of the Top 100 Companies to Work For in 2020 based on an employee survey of satisfaction.[1] [1]: Jessica Snouwaert. The 25 best companies to work for, based on employee satisfaction - Business Insider","title":"Salesforce"},{"location":"PLDT%20Digital%20Transformation%202020-06-16T10.46.01/#vlocity","text":"Built natively on the Salesforce platform, Vlocity is a leading provider of industry-specific cloud and mobile software for the world\u2019s top communications, media and entertainment, energy, utilities, insurance, health, and government organizations.","title":"Vlocity"},{"location":"PLDT%20Digital%20Transformation%202020-06-16T10.46.01/#capgemini","text":"Capgemini SE is a French multinational corporation that provides consulting, technology, professional, and outsourcing services. It is headquartered in Paris, France. Capgemini has over 270,000 employees in over 50 countries, of whom nearly 120,000 are in India. There's an article about this in the Philippine Star, Business Section, June 16, 2020","title":"Capgemini"},{"location":"PLDT%20Digital%20Transformation%202020-06-16T10.46.01/#toastmasters-tme-script","text":"DT/ DX Developed countries have 10-20% of their potential, pre-COVID. DT of Information DT of Industries/ Organizations DT of Societies DT of Education / Training","title":"Toastmasters TME script"},{"location":"PLDT%20Digital%20Transformation%202020-06-16T10.46.01/#introduction","text":"A terrific Tuesday evening to our Club President, fellow toastmasters and friends. Welcome to tonight's meeting dubbed Digital Transformation 101 My name is Roy Canseco and I am honored to be your Taostmaster of the Evening. ... I am seeing ____ new faces. Can I have a show of hands from anyone new to toastmasters here? For the benefit of the guests here, I shall explain a bit. Sultan Toastmasters club is a unique, fun and encouraging environment where we learn public speaking and communication through practice. A typical club meeting consists of 3 main parts The first part is where we get comfortable and give short impromptu speeches. The second part is where chosen members deliver speech projects. The third segment is where feedback is given to the speakers, allowing them to reflect and have learning actually happen. Next I want to introduce some people, who are set to make this meeting more exciting and educational. TM Ceasar Jacinto _ will track the time. So if you see him eyeing you weirdly, maybe it's time start building your speech to a close. _TM Alice Kalaw____ will be our Ah-Counter. He/ she will track your err, ahh, umm, ok, alright, actually... \" and other word crutches that we commonly fall into during our speech. TM Michael Jacinto, DTM, TC will be our Grammarian for tonight. He will be our grammar police but this is a good thing. To set us off into learning frame of mind, let me call _TM Micheal Jacinto_____ to share with us the Word of the Day. Up next is the prepared speeches segment. As tonight's TME, I want to start and keep a tradition of giving all our prepared speeches speakers a 10-second round of applause after the end of each speech. We give them extended applause because we understand that it takes time and effort to prepare a speech, and it certainly takes courage to deliver it in front of so many people here tonight. So please unmute your mics and give your thunderous applause later for each speaker after they have delivered their speeches.","title":"Introduction"},{"location":"PLDT%20Digital%20Transformation%202020-06-16T10.46.01/#intro-speech","text":"Most TME uses the \u201cPOETTS\u201d structure when introducing the speaker: P \u2013 Project Title of the speech O \u2013 Objectives of the speech E \u2013 Evaluator: who is the evaluator of this speech T \u2013 Time allocated for the speech T \u2013 Title of the speech to be given S \u2013 Speaker\u2019s introduction Prepare remarks to be used. Consult the VPE for last-minute changes to the program. Check with the speakers for any last-minute changes. Our _ _ speaker this evening is _Linda Navarro, ACB, ALB _ _ _ _ _. He/ She will be delivering his/ her speech entitled Crash Landing on H'yu _ _ . He/ She will then be evaluated by _Lolita Bravo, DL2 ______. Let me call first the evaluator to briefly tell us the Project Title of the speech, The Objectives by which he/ she will be evaluating, and the time alloted for the speech. Thank you evaluator TM Lolita Bravo, DL2____________ Let's welcome TM __Linda Navarro, ACB, ALB_________ to deliver to us Crash Landing on H'yu _ ______ . Our _ _ speaker this evening is _Teddy Tardecilla, ACB,AD _ _ _ _ _. He/ She will be delivering his/ her speech entitled ULYSSES _ . He/ She will then be evaluated by Sonia M. Roco, ACG, ALB,VC2____ . Let me call first the evaluator to briefly tell us the Project Title of the speech, The Objectives by which he/ she will be evaluating, and the time alloted for the speech. Thank you evaluator TM Sonia M. Roco, ACG, ALB,VC2____________ Let's welcome TM __Teddy Tardecilla, ACB,AD________ to deliver to us ULYSSES _ _ .","title":"Intro Speech"},{"location":"Project%20Management%20-%20CAMMP/","text":"Project Management - CAMMP Customizable Adaptive Methodology for Management of Projects I Project Overview Intro Basis General Process Structure II Project Pre-Launch Stage Introduction Idea Statement Project description Project justification Strategic alignment Stage Gate 1 Decision Explanation of decision Feasibility study What is the Project Feasibility study outline Man Machine Materials Method Money Market Mess Considerations Risks Evaluations and acceptance Conclusion and recommendation Stage Gate 2 Project Authorization Document (PAD) Project description and justification Location and duration Cost and management Assumptions and risks Constraints and stakeholders Success Stage Lessons Learned Closure III Project Launch Stage Intro Basic Requirements Document (BRD) description and characteristics expectations and requirements alternatives evaluations stakeholders' input deliverables and initial WBS project boundaries success factors acceptance criteria sustainability requirements best practices assumptions and constraints project manager comments Stage Gate 3 Project Management Plan Stage Gate 4 Stage Lessons Learned Closure IV Project Definition Stage Intro Project Detailed Plan Scope of Work and WBS Quality, Safety, Health and Environment Time estimates and Schedule Cost Estimate Human Resources Stakeholders Communications Risk Assessment and Management 3-point scale matrix for impact x probability Procurement Sustainability Requirements Other Considerations Project Manager Comments Stage Gate 5 Stage Lessons Learned Closure Project Implementation Stage Intro Implementation Summary Stage Gate 6 Stage Lessons Learned Project Operation Readiness Stage Project Close Stage Intro Lessons Learned Performance Reconciliation Project Closure Comments Project Success Future Follow-up Organizational Records pdate Project Manager Comments Stage Gate 8","title":"Project Management   CAMMP"},{"location":"Project%20Management%20-%20CAMMP/#project-management-cammp","text":"","title":"Project Management - CAMMP"},{"location":"Project%20Management%20-%20CAMMP/#customizable-adaptive-methodology-for-management-of-projects","text":"I Project Overview Intro Basis General Process Structure II Project Pre-Launch Stage Introduction Idea Statement Project description Project justification Strategic alignment Stage Gate 1 Decision Explanation of decision Feasibility study What is the Project Feasibility study outline Man Machine Materials Method Money Market Mess Considerations Risks Evaluations and acceptance Conclusion and recommendation Stage Gate 2 Project Authorization Document (PAD) Project description and justification Location and duration Cost and management Assumptions and risks Constraints and stakeholders Success Stage Lessons Learned Closure III Project Launch Stage Intro Basic Requirements Document (BRD) description and characteristics expectations and requirements alternatives evaluations stakeholders' input deliverables and initial WBS project boundaries success factors acceptance criteria sustainability requirements best practices assumptions and constraints project manager comments Stage Gate 3 Project Management Plan Stage Gate 4 Stage Lessons Learned Closure IV Project Definition Stage Intro Project Detailed Plan Scope of Work and WBS Quality, Safety, Health and Environment Time estimates and Schedule Cost Estimate Human Resources Stakeholders Communications Risk Assessment and Management 3-point scale matrix for impact x probability Procurement Sustainability Requirements Other Considerations Project Manager Comments Stage Gate 5 Stage Lessons Learned Closure Project Implementation Stage Intro Implementation Summary Stage Gate 6 Stage Lessons Learned Project Operation Readiness Stage Project Close Stage Intro Lessons Learned Performance Reconciliation Project Closure Comments Project Success Future Follow-up Organizational Records pdate Project Manager Comments Stage Gate 8","title":"Customizable Adaptive Methodology for Management of Projects"},{"location":"Project%20Proposal%20Template/","text":"Project Proposal Template Since we are in the last submission for the project proposal, we're going to standardize the content via this template. Feel free to choose your fonts, colors and text alignment. Title Page \\<Project Name> Proposal by \\ Submitted to Roy Vincent L. Canseco In partial fulfillment of the requirements for CS 4 this \\ Table of contents (TOC) no need to do this if you have 6 or less pages optional for 7-10 pages mandatory for 11 or more pages First page Put a picture/ screenshot from your project Introduction OR Context OR Background Big Idea that addresses the concern in the Intro List of proposed features and key advantages List of expected constraints and limitations Details pages Show CRC cards Narrate how the program would work while mentioning the different classes, responsibilities and collaborations in the CRD cards Show the UML Diagrams Explain the relationships found in the UML Diagrams Give sample scenarios as examples of how your proposed software will work Show sample User Interfaces or pictures relating to your scenarios User Interface pages Include various user interfaces (UI) from your project. Explain each UI with at least 2 sentences. Milestones and Next steps page List the activities done for the project at this point. (Attach the results of the activities as Appendix) List at least the next 5 activities that are to be done for the project. Bonus Since you are already doing research, if you can include Gantt charts, network diagrams, task matrices and any other project management tools that you were taught, you'll get good bonuses for each of those. Appendix Place any useful information or material here. I will check this for possible bonuses as well.","title":"Project Proposal Template"},{"location":"Project%20Proposal%20Template/#project-proposal-template","text":"Since we are in the last submission for the project proposal, we're going to standardize the content via this template. Feel free to choose your fonts, colors and text alignment.","title":"Project Proposal Template"},{"location":"Project%20Proposal%20Template/#title-page","text":"\\<Project Name> Proposal by \\ Submitted to Roy Vincent L. Canseco In partial fulfillment of the requirements for CS 4 this \\","title":"Title Page"},{"location":"Project%20Proposal%20Template/#table-of-contents-toc","text":"no need to do this if you have 6 or less pages optional for 7-10 pages mandatory for 11 or more pages","title":"Table of contents (TOC)"},{"location":"Project%20Proposal%20Template/#first-page","text":"Put a picture/ screenshot from your project Introduction OR Context OR Background Big Idea that addresses the concern in the Intro List of proposed features and key advantages List of expected constraints and limitations","title":"First page"},{"location":"Project%20Proposal%20Template/#details-pages","text":"Show CRC cards Narrate how the program would work while mentioning the different classes, responsibilities and collaborations in the CRD cards Show the UML Diagrams Explain the relationships found in the UML Diagrams Give sample scenarios as examples of how your proposed software will work Show sample User Interfaces or pictures relating to your scenarios","title":"Details pages"},{"location":"Project%20Proposal%20Template/#user-interface-pages","text":"Include various user interfaces (UI) from your project. Explain each UI with at least 2 sentences.","title":"User Interface pages"},{"location":"Project%20Proposal%20Template/#milestones-and-next-steps-page","text":"List the activities done for the project at this point. (Attach the results of the activities as Appendix) List at least the next 5 activities that are to be done for the project.","title":"Milestones and Next steps page"},{"location":"Project%20Proposal%20Template/#bonus","text":"Since you are already doing research, if you can include Gantt charts, network diagrams, task matrices and any other project management tools that you were taught, you'll get good bonuses for each of those.","title":"Bonus"},{"location":"Project%20Proposal%20Template/#appendix","text":"Place any useful information or material here. I will check this for possible bonuses as well.","title":"Appendix"},{"location":"Punlaan%202020-06-12T09.40.42/","text":"Punlaan 2020-06-12T09.40.42 Certificate request Good day! May I kindly request a signed certificate or certification for my participation in the online meeting this morning. My supervisor in Pisay is asking for such as proof of Professional Activities done. It will be used for my upcoming performance review next year. Performance reviews are held around every 2 years and next year will decide if they would take me as a permanant teacher in Philippine Science. Your certification that I had been a Resource Person for Punlaan School with teachers/ school officials as participants, will help me in this regard. Thank you for your kind consideration. Best regards, Roy Canseco summary Good day, Here's a summary of the tablet specifications and steps that I prescribed this morning. Tablet minimum specifications (the higher the better, good quality reviews for the model is a must) :","title":"Punlaan 2020 06 12T09.40.42"},{"location":"Punlaan%202020-06-12T09.40.42/#punlaan-2020-06-12t094042","text":"","title":"Punlaan 2020-06-12T09.40.42"},{"location":"Punlaan%202020-06-12T09.40.42/#certificate-request","text":"Good day! May I kindly request a signed certificate or certification for my participation in the online meeting this morning. My supervisor in Pisay is asking for such as proof of Professional Activities done. It will be used for my upcoming performance review next year. Performance reviews are held around every 2 years and next year will decide if they would take me as a permanant teacher in Philippine Science. Your certification that I had been a Resource Person for Punlaan School with teachers/ school officials as participants, will help me in this regard. Thank you for your kind consideration. Best regards, Roy Canseco","title":"Certificate request"},{"location":"Punlaan%202020-06-12T09.40.42/#summary","text":"Good day, Here's a summary of the tablet specifications and steps that I prescribed this morning. Tablet minimum specifications (the higher the better, good quality reviews for the model is a must) :","title":"summary"},{"location":"Punlaan%20Tablet%202020-06-16T21.57.24/","text":"Punlaan Tablet 2020-06-16T21.57.24 These are questions from sponsors Is an external keyboard compatible with a tablet? Because we were thinking of asking also for additional funds for an external keyboard...do you think it would be useful or not really needed? The sponsor is requiring us for safety guidelines on child protection for the use of the tablets (ex blocking of unwanted sites)... .what could these guideliines be kaya? We have no idea what could you suggest we reply to the sponsor? External keyboards for tablets This can be useful. It makes a lot of sense in my head, but I haven't seen it in practice. If you want to try it out, I suggest getting one that comes with a case for the tablet and connects by wire. This is normally cheaper. It physically protects the tablet from most falls and is less likely to be lost than bluetooth wireless keyboards. Safety guidelines to protect children Some tablets, for example those sold by Vibal or Felta, already come with child-filters. I don't think those are always appropriate for Senior High School students though. What would be more appropriate would be to setup restrictions to what apps they can download, watch on you-tube and search in their web browser. It would also be good to install a Phone / Tablet Finder App so that you know where each tablet is being used as long at it has internet. Setting this up will require some manpower, because it's done on a per tablet basis. You can install software that does most of it automatically with artificial intelligence. For example MMGuardian app. However this costs around 35 dollars per year per tablet.","title":"Punlaan Tablet 2020 06 16T21.57.24"},{"location":"Punlaan%20Tablet%202020-06-16T21.57.24/#punlaan-tablet-2020-06-16t215724","text":"These are questions from sponsors Is an external keyboard compatible with a tablet? Because we were thinking of asking also for additional funds for an external keyboard...do you think it would be useful or not really needed? The sponsor is requiring us for safety guidelines on child protection for the use of the tablets (ex blocking of unwanted sites)... .what could these guideliines be kaya? We have no idea what could you suggest we reply to the sponsor?","title":"Punlaan Tablet  2020-06-16T21.57.24"},{"location":"Punlaan%20Tablet%202020-06-16T21.57.24/#external-keyboards-for-tablets","text":"This can be useful. It makes a lot of sense in my head, but I haven't seen it in practice. If you want to try it out, I suggest getting one that comes with a case for the tablet and connects by wire. This is normally cheaper. It physically protects the tablet from most falls and is less likely to be lost than bluetooth wireless keyboards.","title":"External keyboards for tablets"},{"location":"Punlaan%20Tablet%202020-06-16T21.57.24/#safety-guidelines-to-protect-children","text":"Some tablets, for example those sold by Vibal or Felta, already come with child-filters. I don't think those are always appropriate for Senior High School students though. What would be more appropriate would be to setup restrictions to what apps they can download, watch on you-tube and search in their web browser. It would also be good to install a Phone / Tablet Finder App so that you know where each tablet is being used as long at it has internet. Setting this up will require some manpower, because it's done on a per tablet basis. You can install software that does most of it automatically with artificial intelligence. For example MMGuardian app. However this costs around 35 dollars per year per tablet.","title":"Safety guidelines to protect children"},{"location":"Q1%20-%20coding%20problems/","text":"Q1 - coding problems I'll use Moodle with CodePost.io (2) Introduction to a programming language - hello world Instructions from your teacher: Click the \"run\" button in the top left and see your text show up in the terminal in the bottom left. You would then have created the quintessential first program, the \"Hello World!\". What can you change in the code for it to say \"Hello Sir Roy!\"? Try it! :) If you got it to work, edit the multiline comments to describe what you've done to the program. #include <iostream> int main() { std::cout << \"Hello World!\\n\"; } (3.1) Constants and Variables - pizza Instructions from your teacher: Pizza problem - Canseco - Aug 2020 Today we'll be computing (not eating) pizzas! The sizes of Shakey's pizzas are the following: - regular - 8\" - large - 11\" - party = 14\" The prices of Shakey's Thin Crust Hawaiian Pizza (my favorite) are the following: - regular - 283 pesos - large - 434 pesos - party - 625 pesos Let's make a program that will help us figure out which pizza size has the best price. We do that by computing the area of each pizza size and comparing that to the price.We want the pizza with the smallest pesos per square inch. Here's what's needed to create such a program. - PI - needed for getting areas of circles. I want to be very accurate, so we're using it with up to 100 decimal places. - const - stands for constant. Useful so that we lock the value of PI and prevent possible changes within the program. - float - this is a type of data that the computer will expect to be a number with a decimal place, for example, PI. - int - these are integers or numbers without decimal places, like our pizza diameters. - string - these are a collection of characters, such as a word, for example, \"regular pizza\". Instructions Read through the program I created. Pay special attention to the multiline comment at the top, which tells you what I want to do in the program.Pay attention too to the single-line comments that I've placed around to help you understand what's going on. Take note: - variables are boxes for data. They have values and they have types (e.g. int, float, string). - constants prevent the program from changing the value of the variable Run the program. You should see the price per square inch of a regular Shakey's Hawaiian Pizza. Now change the given values in the program so that it gives the price per square inch for the large pizza.Now change the given values in the program so that it gives the price per square inch for the party pizza.Which of the pizzas is most cost-effective? Change the given values in the program to the most cost-effective pizza.Check that the output of the black terminal.Submit the program. :) /* I want the students to learn about constants and variables through trying to decipher which pizza sizes are best to buy. One way of doing this is to compare how much a square inch of regular pizza vs a large pizza vs a party pizza. To compute to cost of a square inch of pizza, we have to get the area of the pizza. We then divide the price of the pizza by its area. We print the output to the terminal. */ #include <iostream> using namespace std; // This is where you input the given values const float PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; string pizza_name = \"regular\"; // string means a string of characters int diameter = 8; // int means integer or no decimal parts int price = 283; // float means number with decimal parts float area = 0; // we put 0 here as a placeholder since we haven't computed for the pizza's area // This is the main computing part of your program. int main() { float radius = diameter / 2; area = PI * radius * radius; float price_per_area = price / area; cout << \"Hello!\\n\"; cout << \"The price per square inch of a \" ; cout << pizza_name ; cout << \" Hawaiian pizza is \"; cout << price_per_area; } (3.5) Input and Output Statements - square Instructions from your teacher: Input and Output We use the command cin>> in order to take input from the user.We use the command cout<< in order to print text to the screen. If you are working offline, you'd probably need to enter the input in the terminal when you run the program.In repl.it, you first put input in the stdin text box. To do that, you click on the following icon in the upper right corner of the black terminal. A text box will show up and you just enter the input and click on the \"Set input\" button. Instructions Put 5 as input and run the program Check the terminal and see that it gives the cube of 5 correctly Read the single-line comments and see if you can figure out what's happening with each line of code. Now edit the code so that it gives the square of a number, and says so. Change the input to my (Sir Roy) Pisay batch. Clue, the digits of my batch sum up to 5. Clue, my batch is prime. Run the code. Submit #include <iostream> using namespace std; int main() { int num; // you first make a variable to hold your input // take user's input using cin>> and put it in your variable cin>> num; // now output the cube of that number using cout<< cout << num << \" cubed is \" << num * num * num << \"\\n\"; } (3.7.1) Operators, expressions ( Arithmetic) - Calculator Instructions from your teacher: Simple Calculator Today we shall create the beginnings of a calculator program. It shall have the following abilities:- add - subtract - multiply - divide - get remainder - increment, which means to increase by 1 - decrement, which means to decrease by 1 Here is a table of the code we'll use today. Instructions Note: endl means \"end line\" or print a new line in C++. Read through the program and see if you can create an expectation as to what the output should be Save the program as calculator.cpp compile the program g++ -o calculator calculator.cpp run the program from the commandline with 2 numerical arguments ./calculator 4 5 Notice that only the first line is mathematically correct *Correct the rest of the program Run the corrected program and check if the terminal shows what you expect Upload your calculator.cpp file to codepost.io Dig Deeper The results of the division might be looking weird. In which case, remember that we are only using int in this program.That means it cannot handle decimal places at the moment. Any decimals in the results will be ignored by C++. #include <iostream> using namespace std; int main(int argc, char *argv[]) { string name = argv[0]; int x = atoi(argv[1]); // converts first argument to int int y = atoi(argv[2]); // converts second argument to int cout << \"There are \" << argc << \" arguments for this program, when including the filename.\" << endl; cout << name << endl; cout << \"The first argument in the program is \" << x << endl; cout << \"The second argument in the program is \" << y << endl; cout << \"Adding x and y equals \" << x + y << endl; cout << \"Subracting x from y equals \" << y << endl ; cout << \"Multiplying x by y equals \" << y << endl ; cout << \"Dividing x by y equals \" << y << endl ; cout << \"Getting the modulus of x by y equals \" << y << endl ; cout << \"Incrementing x equals \" << y << endl ; cout << \"Decrementing y equals \" << y << endl ; } (3.7.2) Operators, expressions (Relational) Instructions from your teacher: Binary Problem C++ can compare values and tell you whether they're equal, greater than, less than, or something like that.It then says whether it is or it isn't, but it can only respond in code. - C++ will return \"1\" if it means true. - C++ will return \"0\" if it means false. Instructions Read through the comments in the code and see if you can understand how the code works because of the comments Get a piece of paper and write down what you expect the output of the code will be. Run the code. Is it what you expected? If not exactly, what have you missed? Notice that the numbers in x and y are being compared and 6 comparisons become the 6 digits: 010101 Recall from gr.7 that 010101 in binary is equal to 21 (i.e. 16+4+1) I want the binary output to equal Sir Roy's age, which is 35. Change the values of x and y in the code to achieve this. #include <iostream> using namespace std; int main() { // let's have C++ print out its code true and false cout << \"True: \" << true << endl ; cout << \"False: \" << false << endl ; cout << \"\\n\"; // \"\\n\" means new line. // now let's get two numbers to compare: x and y // remember to place the numbers in the input box, one line each int x,y; x = 5; y = 6; // here we make the comparisons and output whether they're true (i.e. 1) or false (i.e. 0) for each comparison cout << (x == y) ; cout << (x != y) ; cout << (x > y) ; cout << (x < y) ; cout << (x >= y) ; cout << (x <= y) ; Q1 PT Part 1 Adder Fix the following code to be able to do what the comments describe. This program has to be flexible. Examples: ./a 1 3 results in 4 ./a 7.2 3.3 results in 10.5 /********************************************* create a file called a.cpp this file will contain a program that adds two numbers the numbers will be given as commandline arguments if you compile using the following command: g++ -o a a.cpp to run the program and add the numbers 4 and 5 you type: ./a 4 5 this will result to: 9 use the datatype float for all numbers **********************************************/ #include <iostream> using namespace std; int main(int argc, char *argv[]){ float x = atof(argv[1]); // converts alphanumeric to float float y = atof(argv[2]); cout << x << y; } Part 2 Subtracter Fix the following code to be able to do what the comments describe. This program has to be flexible. Examples: ./a 1 3 results in -2 ./a 7.2 3.3 results in 3.9 /********************************************* create a file called s.cpp this file will contain a program that subtracts two numbers the numbers will be given as commandline arguments if you compile using the following command: g++ -o s s.cpp to run the program and add the numbers 4 and 5 you type: ./s 4 5 this will result to: -1 use the datatype float for all numbers **********************************************/ #include <iostream> using namespace std; int main(int argc, char *argv[]){ } Part 3 Multiplier Fix the following code to be able to do what the comments describe. This program has to be flexible. Examples: ./a 1 3 results in 3 ./a 7.2 3.3 results in 23.76 /********************************************* create a file called m.cpp this file will contain a program that multiplies two numbers the numbers will be given as commandline arguments if you compile using the following command: g++ -o m m.cpp to run the program and add the numbers 4 and 5 you type: ./s 4 5 this will result to: 20 use the datatype float for all numbers **********************************************/ #include <iostream> using namespace std; Part 4 Divider Fix the following code to be able to do what the comments describe. This program has to be flexible. Examples: ./a 3 1 results in 3 ./a 7.2 3.6 results in 2 /********************************************* create a file called d.cpp this file will contain a program that divides two numbers the numbers will be given as commandline arguments if you compile using the following command: g++ -o d d.cpp to run the program and add the numbers 4 and 5 you type: ./s 4 5 this will result to: 0.8 use the datatype float for all numbers **********************************************/","title":"Q1   coding problems"},{"location":"Q1%20-%20coding%20problems/#q1-coding-problems","text":"I'll use Moodle with CodePost.io","title":"Q1 - coding problems"},{"location":"Q1%20-%20coding%20problems/#2-introduction-to-a-programming-language-hello-world","text":"","title":"(2) Introduction to a programming language - hello world"},{"location":"Q1%20-%20coding%20problems/#instructions-from-your-teacher","text":"Click the \"run\" button in the top left and see your text show up in the terminal in the bottom left. You would then have created the quintessential first program, the \"Hello World!\". What can you change in the code for it to say \"Hello Sir Roy!\"? Try it! :) If you got it to work, edit the multiline comments to describe what you've done to the program. #include <iostream> int main() { std::cout << \"Hello World!\\n\"; }","title":"Instructions from your teacher:"},{"location":"Q1%20-%20coding%20problems/#31-constants-and-variables-pizza","text":"Instructions from your teacher:","title":"(3.1) Constants and Variables - pizza"},{"location":"Q1%20-%20coding%20problems/#pizza-problem-canseco-aug-2020","text":"Today we'll be computing (not eating) pizzas! The sizes of Shakey's pizzas are the following: - regular - 8\" - large - 11\" - party = 14\" The prices of Shakey's Thin Crust Hawaiian Pizza (my favorite) are the following: - regular - 283 pesos - large - 434 pesos - party - 625 pesos Let's make a program that will help us figure out which pizza size has the best price. We do that by computing the area of each pizza size and comparing that to the price.We want the pizza with the smallest pesos per square inch. Here's what's needed to create such a program. - PI - needed for getting areas of circles. I want to be very accurate, so we're using it with up to 100 decimal places. - const - stands for constant. Useful so that we lock the value of PI and prevent possible changes within the program. - float - this is a type of data that the computer will expect to be a number with a decimal place, for example, PI. - int - these are integers or numbers without decimal places, like our pizza diameters. - string - these are a collection of characters, such as a word, for example, \"regular pizza\".","title":"Pizza problem - Canseco - Aug 2020"},{"location":"Q1%20-%20coding%20problems/#instructions","text":"Read through the program I created. Pay special attention to the multiline comment at the top, which tells you what I want to do in the program.Pay attention too to the single-line comments that I've placed around to help you understand what's going on. Take note: - variables are boxes for data. They have values and they have types (e.g. int, float, string). - constants prevent the program from changing the value of the variable Run the program. You should see the price per square inch of a regular Shakey's Hawaiian Pizza. Now change the given values in the program so that it gives the price per square inch for the large pizza.Now change the given values in the program so that it gives the price per square inch for the party pizza.Which of the pizzas is most cost-effective? Change the given values in the program to the most cost-effective pizza.Check that the output of the black terminal.Submit the program. :) /* I want the students to learn about constants and variables through trying to decipher which pizza sizes are best to buy. One way of doing this is to compare how much a square inch of regular pizza vs a large pizza vs a party pizza. To compute to cost of a square inch of pizza, we have to get the area of the pizza. We then divide the price of the pizza by its area. We print the output to the terminal. */ #include <iostream> using namespace std; // This is where you input the given values const float PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; string pizza_name = \"regular\"; // string means a string of characters int diameter = 8; // int means integer or no decimal parts int price = 283; // float means number with decimal parts float area = 0; // we put 0 here as a placeholder since we haven't computed for the pizza's area // This is the main computing part of your program. int main() { float radius = diameter / 2; area = PI * radius * radius; float price_per_area = price / area; cout << \"Hello!\\n\"; cout << \"The price per square inch of a \" ; cout << pizza_name ; cout << \" Hawaiian pizza is \"; cout << price_per_area; }","title":"Instructions"},{"location":"Q1%20-%20coding%20problems/#35-input-and-output-statements-square","text":"Instructions from your teacher:","title":"(3.5) Input and Output Statements - square"},{"location":"Q1%20-%20coding%20problems/#input-and-output","text":"We use the command cin>> in order to take input from the user.We use the command cout<< in order to print text to the screen. If you are working offline, you'd probably need to enter the input in the terminal when you run the program.In repl.it, you first put input in the stdin text box. To do that, you click on the following icon in the upper right corner of the black terminal. A text box will show up and you just enter the input and click on the \"Set input\" button.","title":"Input and Output"},{"location":"Q1%20-%20coding%20problems/#instructions_1","text":"Put 5 as input and run the program Check the terminal and see that it gives the cube of 5 correctly Read the single-line comments and see if you can figure out what's happening with each line of code. Now edit the code so that it gives the square of a number, and says so. Change the input to my (Sir Roy) Pisay batch. Clue, the digits of my batch sum up to 5. Clue, my batch is prime. Run the code. Submit #include <iostream> using namespace std; int main() { int num; // you first make a variable to hold your input // take user's input using cin>> and put it in your variable cin>> num; // now output the cube of that number using cout<< cout << num << \" cubed is \" << num * num * num << \"\\n\"; }","title":"Instructions"},{"location":"Q1%20-%20coding%20problems/#371-operators-expressions-arithmetic-calculator","text":"Instructions from your teacher:","title":"(3.7.1) Operators, expressions ( Arithmetic) - Calculator"},{"location":"Q1%20-%20coding%20problems/#simple-calculator","text":"Today we shall create the beginnings of a calculator program. It shall have the following abilities:- add - subtract - multiply - divide - get remainder - increment, which means to increase by 1 - decrement, which means to decrease by 1 Here is a table of the code we'll use today.","title":"Simple Calculator"},{"location":"Q1%20-%20coding%20problems/#instructions_2","text":"Note: endl means \"end line\" or print a new line in C++. Read through the program and see if you can create an expectation as to what the output should be Save the program as calculator.cpp compile the program g++ -o calculator calculator.cpp run the program from the commandline with 2 numerical arguments ./calculator 4 5 Notice that only the first line is mathematically correct *Correct the rest of the program Run the corrected program and check if the terminal shows what you expect Upload your calculator.cpp file to codepost.io","title":"Instructions"},{"location":"Q1%20-%20coding%20problems/#dig-deeper","text":"The results of the division might be looking weird. In which case, remember that we are only using int in this program.That means it cannot handle decimal places at the moment. Any decimals in the results will be ignored by C++. #include <iostream> using namespace std; int main(int argc, char *argv[]) { string name = argv[0]; int x = atoi(argv[1]); // converts first argument to int int y = atoi(argv[2]); // converts second argument to int cout << \"There are \" << argc << \" arguments for this program, when including the filename.\" << endl; cout << name << endl; cout << \"The first argument in the program is \" << x << endl; cout << \"The second argument in the program is \" << y << endl; cout << \"Adding x and y equals \" << x + y << endl; cout << \"Subracting x from y equals \" << y << endl ; cout << \"Multiplying x by y equals \" << y << endl ; cout << \"Dividing x by y equals \" << y << endl ; cout << \"Getting the modulus of x by y equals \" << y << endl ; cout << \"Incrementing x equals \" << y << endl ; cout << \"Decrementing y equals \" << y << endl ; }","title":"Dig Deeper"},{"location":"Q1%20-%20coding%20problems/#372-operators-expressions-relational","text":"Instructions from your teacher:","title":"(3.7.2) Operators, expressions (Relational)"},{"location":"Q1%20-%20coding%20problems/#binary-problem","text":"C++ can compare values and tell you whether they're equal, greater than, less than, or something like that.It then says whether it is or it isn't, but it can only respond in code. - C++ will return \"1\" if it means true. - C++ will return \"0\" if it means false.","title":"Binary Problem"},{"location":"Q1%20-%20coding%20problems/#instructions_3","text":"Read through the comments in the code and see if you can understand how the code works because of the comments Get a piece of paper and write down what you expect the output of the code will be. Run the code. Is it what you expected? If not exactly, what have you missed? Notice that the numbers in x and y are being compared and 6 comparisons become the 6 digits: 010101 Recall from gr.7 that 010101 in binary is equal to 21 (i.e. 16+4+1) I want the binary output to equal Sir Roy's age, which is 35. Change the values of x and y in the code to achieve this. #include <iostream> using namespace std; int main() { // let's have C++ print out its code true and false cout << \"True: \" << true << endl ; cout << \"False: \" << false << endl ; cout << \"\\n\"; // \"\\n\" means new line. // now let's get two numbers to compare: x and y // remember to place the numbers in the input box, one line each int x,y; x = 5; y = 6; // here we make the comparisons and output whether they're true (i.e. 1) or false (i.e. 0) for each comparison cout << (x == y) ; cout << (x != y) ; cout << (x > y) ; cout << (x < y) ; cout << (x >= y) ; cout << (x <= y) ;","title":"Instructions"},{"location":"Q1%20-%20coding%20problems/#q1-pt","text":"","title":"Q1 PT"},{"location":"Q1%20-%20coding%20problems/#part-1-adder","text":"Fix the following code to be able to do what the comments describe. This program has to be flexible. Examples: ./a 1 3 results in 4 ./a 7.2 3.3 results in 10.5 /********************************************* create a file called a.cpp this file will contain a program that adds two numbers the numbers will be given as commandline arguments if you compile using the following command: g++ -o a a.cpp to run the program and add the numbers 4 and 5 you type: ./a 4 5 this will result to: 9 use the datatype float for all numbers **********************************************/ #include <iostream> using namespace std; int main(int argc, char *argv[]){ float x = atof(argv[1]); // converts alphanumeric to float float y = atof(argv[2]); cout << x << y; }","title":"Part 1 Adder"},{"location":"Q1%20-%20coding%20problems/#part-2-subtracter","text":"Fix the following code to be able to do what the comments describe. This program has to be flexible. Examples: ./a 1 3 results in -2 ./a 7.2 3.3 results in 3.9 /********************************************* create a file called s.cpp this file will contain a program that subtracts two numbers the numbers will be given as commandline arguments if you compile using the following command: g++ -o s s.cpp to run the program and add the numbers 4 and 5 you type: ./s 4 5 this will result to: -1 use the datatype float for all numbers **********************************************/ #include <iostream> using namespace std; int main(int argc, char *argv[]){ }","title":"Part 2 Subtracter"},{"location":"Q1%20-%20coding%20problems/#part-3-multiplier","text":"Fix the following code to be able to do what the comments describe. This program has to be flexible. Examples: ./a 1 3 results in 3 ./a 7.2 3.3 results in 23.76 /********************************************* create a file called m.cpp this file will contain a program that multiplies two numbers the numbers will be given as commandline arguments if you compile using the following command: g++ -o m m.cpp to run the program and add the numbers 4 and 5 you type: ./s 4 5 this will result to: 20 use the datatype float for all numbers **********************************************/ #include <iostream> using namespace std;","title":"Part 3 Multiplier"},{"location":"Q1%20-%20coding%20problems/#part-4-divider","text":"Fix the following code to be able to do what the comments describe. This program has to be flexible. Examples: ./a 3 1 results in 3 ./a 7.2 3.6 results in 2 /********************************************* create a file called d.cpp this file will contain a program that divides two numbers the numbers will be given as commandline arguments if you compile using the following command: g++ -o d d.cpp to run the program and add the numbers 4 and 5 you type: ./s 4 5 this will result to: 0.8 use the datatype float for all numbers **********************************************/","title":"Part 4 Divider"},{"location":"Q2%20-%20M.E.%20-%20cake/","text":"Q2 - M.E. - cake 4.2.2.2 - Selection Structure (if-else) Instruction: Create a program based on the problem details below and save filename to cake.cpp sample compile command: g++ -o cake cake.cpp sample run command: ./cake 72 20 output: Excess: 12 slice(s) Problem Sample Test Cases and Format command: ./cake 36 12 output: Exact for all command: ./cake 72 20 output: Excess: 12 slice(s) command: ./cake 51 25 output: Excess: 1 slice(s) Sample code template #include <iostream> using namespace std; int main(int argc, char* argv[]) { int slices = atoi(argv[1]); int people = atoi(argv[2]); //insert solution code below }","title":"Q2   M.E.   cake"},{"location":"Q2%20-%20M.E.%20-%20cake/#q2-me-cake","text":"","title":"Q2 - M.E. - cake"},{"location":"Q2%20-%20M.E.%20-%20cake/#4222-selection-structure-if-else","text":"","title":"4.2.2.2 - Selection Structure (if-else)"},{"location":"Q2%20-%20M.E.%20-%20cake/#instruction","text":"Create a program based on the problem details below and save filename to cake.cpp sample compile command: g++ -o cake cake.cpp sample run command: ./cake 72 20 output: Excess: 12 slice(s)","title":"Instruction:"},{"location":"Q2%20-%20M.E.%20-%20cake/#problem","text":"","title":"Problem"},{"location":"Q2%20-%20M.E.%20-%20cake/#sample-test-cases-and-format","text":"command: ./cake 36 12 output: Exact for all command: ./cake 72 20 output: Excess: 12 slice(s) command: ./cake 51 25 output: Excess: 1 slice(s)","title":"Sample Test Cases and Format"},{"location":"Q2%20-%20M.E.%20-%20cake/#sample-code-template","text":"#include <iostream> using namespace std; int main(int argc, char* argv[]) { int slices = atoi(argv[1]); int people = atoi(argv[2]); //insert solution code below }","title":"Sample code template"},{"location":"Q2%20-%20Programming%20Project%20-%20TicTacToe/","text":"Q2 - Programming Project - TicTacToe Useful Links Documentation Template link : https://docs.google.com/document/d/1kWEDRdOH8ELIubh_kq80bTKxaY60WedXFf2b6G0BCGw/edit?usp=sharing Emergency Submission Form Link: https://docs.google.com/forms/d/1s9gHJLTs7hGDHVS_c5TSpxiy55FUBRCSJmbvxp3SLBg/edit?usp=drive_web Instructions (optional) Find a partner and help each other. One can be in-charge of the game play and the other can create code to check if a player has already won. Use the template code provided to create a 2-player Tic Tac Toe game. Add one of the following features to the game (more than one becomes a bonus) Features (1 required): * After the game, the players are asked if they want to play another round. If they say \"yes\", the game restarts * There's a tournament option at the start where the first to score 3 points wins (best of 5) * The players are asked their names and their names are shown whenever it's their turn and if they win. Answer the gdoc documentation individually and submit. Note that you may need to make a copy of the gdoc docu template if it's view only. ## Template Code ``` / * * * * * * * * * * * * * * This is the Q2 Programming Project Template. Use it. * * by: Roy Canseco * * * * * * * * * * * * * ****/ #include using namespace std; int main() { // initialize variables to 'X', 'O' or blank char a1 = 'X'; char a2 = 'O'; char a3 = 'X'; char b1 = 'O'; char b2 = 'X'; char b3 = 'O'; char c1 = 'X'; char c2 = 'O'; char c3 = 'X'; // printout the board cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"\\t\" << a1 << \"\\t\" << \"|\" << \"\\t\" << a2 << \"\\t\" << \"|\" << \"\\t\" << a3 << endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"------------------------------------------------\"<< endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"\\t\" << b1 << \"\\t\" << \"|\" << \"\\t\" << b2 << \"\\t\" << \"|\" << \"\\t\" << b3 << endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"------------------------------------------------\"<< endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"\\t\" << c1 << \"\\t\" << \"|\" << \"\\t\" << c2 << \"\\t\" << \"|\" << \"\\t\" << c3 << endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; } ```","title":"Q2   Programming Project   TicTacToe"},{"location":"Q2%20-%20Programming%20Project%20-%20TicTacToe/#q2-programming-project-tictactoe","text":"","title":"Q2 - Programming Project - TicTacToe"},{"location":"Q2%20-%20Programming%20Project%20-%20TicTacToe/#useful-links","text":"Documentation Template link : https://docs.google.com/document/d/1kWEDRdOH8ELIubh_kq80bTKxaY60WedXFf2b6G0BCGw/edit?usp=sharing Emergency Submission Form Link: https://docs.google.com/forms/d/1s9gHJLTs7hGDHVS_c5TSpxiy55FUBRCSJmbvxp3SLBg/edit?usp=drive_web","title":"Useful Links"},{"location":"Q2%20-%20Programming%20Project%20-%20TicTacToe/#instructions","text":"(optional) Find a partner and help each other. One can be in-charge of the game play and the other can create code to check if a player has already won. Use the template code provided to create a 2-player Tic Tac Toe game. Add one of the following features to the game (more than one becomes a bonus) Features (1 required): * After the game, the players are asked if they want to play another round. If they say \"yes\", the game restarts * There's a tournament option at the start where the first to score 3 points wins (best of 5) * The players are asked their names and their names are shown whenever it's their turn and if they win. Answer the gdoc documentation individually and submit. Note that you may need to make a copy of the gdoc docu template if it's view only. ## Template Code ``` / * * * * * * * * * * * * * * This is the Q2 Programming Project Template. Use it. * * by: Roy Canseco * * * * * * * * * * * * * ****/ #include using namespace std; int main() { // initialize variables to 'X', 'O' or blank char a1 = 'X'; char a2 = 'O'; char a3 = 'X'; char b1 = 'O'; char b2 = 'X'; char b3 = 'O'; char c1 = 'X'; char c2 = 'O'; char c3 = 'X'; // printout the board cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"\\t\" << a1 << \"\\t\" << \"|\" << \"\\t\" << a2 << \"\\t\" << \"|\" << \"\\t\" << a3 << endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"------------------------------------------------\"<< endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"\\t\" << b1 << \"\\t\" << \"|\" << \"\\t\" << b2 << \"\\t\" << \"|\" << \"\\t\" << b3 << endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"------------------------------------------------\"<< endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; cout << \"\\t\" << c1 << \"\\t\" << \"|\" << \"\\t\" << c2 << \"\\t\" << \"|\" << \"\\t\" << c3 << endl; cout << \"\\t \\t\" << \"|\" << \"\\t \\t\" << \"|\" << endl; } ```","title":"Instructions"},{"location":"Q2%20Q3%20Grades%20Deadline/","text":"Q2/ Q3 Grades Deadline Efren Paz Mar 23, 2021, 1:21 PM to Jericca, Christopher, Lieza, Yna, Donna, Mark, Edge, Ralph, Benigno, Efren, Charles, Charles, Robert, Floriedes, Dawn, Gladys, Judah, Leonel, Eileen, Lawrence, PSHS Dear Teachers, Below is our schedule of Encoding of Grades and Third Quarter Scholarship Meeting -March 19 Last day of completion of Q2 NGs (can be extended until March 23) -March 23 submission of APR for Q2 Grades 3.0 and below -April 13 Deadline of encoding of Q2 grades for students with NGs -April 14 CLOSING Q2 EBASED; START OF Q3 ENCODING OF GRADES -April 16 Deadline of encoding of Q3 grades. For students with Final Grades 4.0 and 5.0 below -temporary NG will be given -April 19 - 20 Scholarship Committee Meeting FYP April 19 G8 9:00AM-12:00 NN G7 1:30PM-4:30PM AYP April 20 G9 9:00AM-12:00 NN G10 1:30PM-4:30PM SYP April 20 G11 9 AM-12NN G12 1:30 PM-5:30 PM May 21 Deadline of submission of Q3 pending requirements for students with NGs to get a grade of 3.0 (except for SWANs or with approved requests) Best Regards, Efren Paz -- Mr. Efren P. Paz Special Science Teacher V Chemistry Unit Philippine Science High School - Main Campus Agham Road, Diliman, Quezon City Philippines 1104 Efren Paz Mar 23, 2021, 1:59 PM to Jericca, Christopher, Lieza, Yna, Donna, Mark, Edge, Ralph, Benigno, Efren, Charles, Charles, Robert, Floriedes, Dawn, Gladys, Judah, Leonel, Eileen, Lawrence, PSHS Sorry for the confusion, the -April 16 Deadline of encoding of Q3 grades. For students with Final Grades 4.0 and 5.0 below -temporary NG will be given THIS SHOULD WITH -April 16 Deadline of encoding of Q3 grades. For students with TENTATIVE GRADES OF 4.0 and 5.0 below -temporary NG will be given Regards, Sir Efren","title":"Q2 Q3 Grades Deadline"},{"location":"Q2%20Q3%20Grades%20Deadline/#q2-q3-grades-deadline","text":"Efren Paz Mar 23, 2021, 1:21 PM to Jericca, Christopher, Lieza, Yna, Donna, Mark, Edge, Ralph, Benigno, Efren, Charles, Charles, Robert, Floriedes, Dawn, Gladys, Judah, Leonel, Eileen, Lawrence, PSHS Dear Teachers, Below is our schedule of Encoding of Grades and Third Quarter Scholarship Meeting -March 19 Last day of completion of Q2 NGs (can be extended until March 23) -March 23 submission of APR for Q2 Grades 3.0 and below -April 13 Deadline of encoding of Q2 grades for students with NGs -April 14 CLOSING Q2 EBASED; START OF Q3 ENCODING OF GRADES -April 16 Deadline of encoding of Q3 grades. For students with Final Grades 4.0 and 5.0 below -temporary NG will be given -April 19 - 20 Scholarship Committee Meeting FYP April 19 G8 9:00AM-12:00 NN G7 1:30PM-4:30PM AYP April 20 G9 9:00AM-12:00 NN G10 1:30PM-4:30PM SYP April 20 G11 9 AM-12NN G12 1:30 PM-5:30 PM May 21 Deadline of submission of Q3 pending requirements for students with NGs to get a grade of 3.0 (except for SWANs or with approved requests) Best Regards, Efren Paz -- Mr. Efren P. Paz Special Science Teacher V Chemistry Unit Philippine Science High School - Main Campus Agham Road, Diliman, Quezon City Philippines 1104 Efren Paz Mar 23, 2021, 1:59 PM to Jericca, Christopher, Lieza, Yna, Donna, Mark, Edge, Ralph, Benigno, Efren, Charles, Charles, Robert, Floriedes, Dawn, Gladys, Judah, Leonel, Eileen, Lawrence, PSHS Sorry for the confusion, the -April 16 Deadline of encoding of Q3 grades. For students with Final Grades 4.0 and 5.0 below -temporary NG will be given THIS SHOULD WITH -April 16 Deadline of encoding of Q3 grades. For students with TENTATIVE GRADES OF 4.0 and 5.0 below -temporary NG will be given Regards, Sir Efren","title":"Q2/ Q3 Grades Deadline"},{"location":"Q3%20-%20LT1%20-%20stocks/","text":"Q3 - LT1 - stocks Let's practice working with arrays. You\u2019ll need to rely on some of your basic knowledge of conditionals and flow control too. You shouldn\u2019t need to do anything you haven\u2019t seen before. Instructions Implement a stock picker that takes in an array of stock prices, one for each hypothetical day. With stocks, you first buy low and then sell high. The program should return a pair of days representing the best day to buy and the best day to sell. Days start at 0. Sample input/ output The first number is the input count input: 9 17,3,6,9,15,8,6,1,10 output: 1,4 with a profit of Php15 - Php3 = Php12 Codepost guidance Solve the problem and change the filename into stocks.cpp The first number gives the count of the inputs. All the succeeding numbers are input stock prices on their corresponding dates starting with Day 0. Sample compile commands : g++ -o stocks stocks.cpp Sample run command: .\\stocks 9 17 3 6 9 15 8 6 1 10 Corresponding output: Day 1 buy, Day 4 sell, with a profit of Php15 - Php3 = Php12 Note make sure to follow the input and output format strictly for codepost. do not use cin in codepost, use commandline parameters Tips You need to buy before you can sell Pay attention to edge cases like when the lowest day is the last day or the highest day is the first day. Template code /**************************************************************** * * Implement a stock picker that takes in an array of stock prices, one for each hypothetical day. * With stocks, you first buy low and then sell high. * The program should return a pair of days representing the best day to buy and the best day to sell. * Days start at 0. * * Sample compile commands: g++ -o stocks stocks.cpp Sample run command: .\\stocks 9 17 3 6 9 15 8 6 1 10 Corresponding output: Day 1 buy, Day 4 sell, with a profit of Php15 - Php3 = Php12 * You need to buy before you can sell Pay attention to edge cases like when the lowest day is the last day or the highest day is the first day. * * 1. Get the input count * 2. Get the inputs into an array * 3. * 4. * ****************************************************************/ #include <iostream> using namespace std; int main (int argc, char* argv[]) { // get the count from the commandline arguments int count = atoi(argv[1]); // get the inputs and put them in the array float arr[count]; for (int i=0; i< count; i++){ arr[i] = atof(argv[i+2]); } // change the following code to solve the problem cout << count << endl; for (int i=0; i<count; i++){ cout<< arr[i] << \" \"; } cout << endl; } Credits Idea adapted The Odin Project Picture from Katrina.Tuliao - https://www.tradergroup.org CC BY 2.0 File:Philippine-stock-market-board.jpg Created: 30 July 2008","title":"Q3   LT1   stocks"},{"location":"Q3%20-%20LT1%20-%20stocks/#q3-lt1-stocks","text":"Let's practice working with arrays. You\u2019ll need to rely on some of your basic knowledge of conditionals and flow control too. You shouldn\u2019t need to do anything you haven\u2019t seen before.","title":"Q3 - LT1 - stocks"},{"location":"Q3%20-%20LT1%20-%20stocks/#instructions","text":"Implement a stock picker that takes in an array of stock prices, one for each hypothetical day. With stocks, you first buy low and then sell high. The program should return a pair of days representing the best day to buy and the best day to sell. Days start at 0.","title":"Instructions"},{"location":"Q3%20-%20LT1%20-%20stocks/#sample-input-output","text":"The first number is the input count input: 9 17,3,6,9,15,8,6,1,10 output: 1,4 with a profit of Php15 - Php3 = Php12","title":"Sample input/ output"},{"location":"Q3%20-%20LT1%20-%20stocks/#codepost-guidance","text":"Solve the problem and change the filename into stocks.cpp The first number gives the count of the inputs. All the succeeding numbers are input stock prices on their corresponding dates starting with Day 0. Sample compile commands : g++ -o stocks stocks.cpp Sample run command: .\\stocks 9 17 3 6 9 15 8 6 1 10 Corresponding output: Day 1 buy, Day 4 sell, with a profit of Php15 - Php3 = Php12","title":"Codepost guidance"},{"location":"Q3%20-%20LT1%20-%20stocks/#note","text":"make sure to follow the input and output format strictly for codepost. do not use cin in codepost, use commandline parameters","title":"Note"},{"location":"Q3%20-%20LT1%20-%20stocks/#tips","text":"You need to buy before you can sell Pay attention to edge cases like when the lowest day is the last day or the highest day is the first day.","title":"Tips"},{"location":"Q3%20-%20LT1%20-%20stocks/#template-code","text":"/**************************************************************** * * Implement a stock picker that takes in an array of stock prices, one for each hypothetical day. * With stocks, you first buy low and then sell high. * The program should return a pair of days representing the best day to buy and the best day to sell. * Days start at 0. * * Sample compile commands: g++ -o stocks stocks.cpp Sample run command: .\\stocks 9 17 3 6 9 15 8 6 1 10 Corresponding output: Day 1 buy, Day 4 sell, with a profit of Php15 - Php3 = Php12 * You need to buy before you can sell Pay attention to edge cases like when the lowest day is the last day or the highest day is the first day. * * 1. Get the input count * 2. Get the inputs into an array * 3. * 4. * ****************************************************************/ #include <iostream> using namespace std; int main (int argc, char* argv[]) { // get the count from the commandline arguments int count = atoi(argv[1]); // get the inputs and put them in the array float arr[count]; for (int i=0; i< count; i++){ arr[i] = atof(argv[i+2]); } // change the following code to solve the problem cout << count << endl; for (int i=0; i<count; i++){ cout<< arr[i] << \" \"; } cout << endl; }","title":"Template code"},{"location":"Q3%20-%20LT1%20-%20stocks/#credits","text":"Idea adapted The Odin Project Picture from Katrina.Tuliao - https://www.tradergroup.org CC BY 2.0 File:Philippine-stock-market-board.jpg Created: 30 July 2008","title":"Credits"},{"location":"Q3%20-%20LT2%20-%20bubble/","text":"Q3 - LT2 - bubble Sorting algorithms are important in Computer Science. One of the simpler (but more processor-intensive) ways of sorting a group of items in an array is bubble sort, where each element is compared to the one next to it and they are swapped if the one on the left is larger than the one on the right. This continues until the array is eventually sorted. Check out this video from Harvard\u2019s CS50x on Bubble Sort . There\u2019s also an entry on Bubble Sort on Wikipedia that\u2019s worth taking a look at. Codepost instructions Your task is to create a program that takes a set of numbers, puts them in an array, and outputs the numbers as they get sorted. Output the result of each iteration. The first number of the input is the count of numbers to be arranged The second to last numbers are to be sorted Rename the file to bubble.cpp and upload it to codepost.io sample compile command: g++ -o bubble bubble.cpp sample run command: ./bubble 3 3 2 1 corresponding output: 2 3 1 2 1 3 1 2 3 sample run command: ./bubble 3 1 2 3 corresponding output: 1 2 3 1 2 3 1 2 3 sample run command: ./bubble 5 4 3 78 2 0 corresponding output: 4 3 78 2 0 3 4 78 2 0 3 4 78 2 0 3 4 2 78 0 3 4 2 0 78 3 4 2 0 78 3 2 4 0 78 3 2 0 4 78 2 3 0 4 78 2 0 3 4 78 0 2 3 4 78 Required template code /*********************************************************************** * This is the starter code for the bubble sort. * Those taking the Q3 LT2 are required to use this code. * You may only change the parts indicated for changing * * Output the result of each iteration. * The first number of the input is the count of numbers to be arranged * The second to last numbers are to be sorted * * sample compile command: g++ -o bubble bubble.cpp * sample run command: ./bubble 3 3 2 1 * corresponding output: 2 3 1 2 1 3 1 2 3 * * * *********************************************************************/ #include <iostream> using namespace std; int main(int argc, char* argv[]) { int count = atoi(argv[1]); int arr[count]; for (int i=0; i<count; i++){ arr[i] = atoi(argv[i+2]); } // change the parts below to solve the problem for (int i=0; i<count; i++){ cout << arr[i] << \" \" ; } cout << endl; }","title":"Q3   LT2   bubble"},{"location":"Q3%20-%20LT2%20-%20bubble/#q3-lt2-bubble","text":"Sorting algorithms are important in Computer Science. One of the simpler (but more processor-intensive) ways of sorting a group of items in an array is bubble sort, where each element is compared to the one next to it and they are swapped if the one on the left is larger than the one on the right. This continues until the array is eventually sorted. Check out this video from Harvard\u2019s CS50x on Bubble Sort . There\u2019s also an entry on Bubble Sort on Wikipedia that\u2019s worth taking a look at.","title":"Q3 - LT2 - bubble"},{"location":"Q3%20-%20LT2%20-%20bubble/#codepost-instructions","text":"Your task is to create a program that takes a set of numbers, puts them in an array, and outputs the numbers as they get sorted. Output the result of each iteration. The first number of the input is the count of numbers to be arranged The second to last numbers are to be sorted Rename the file to bubble.cpp and upload it to codepost.io sample compile command: g++ -o bubble bubble.cpp sample run command: ./bubble 3 3 2 1 corresponding output: 2 3 1 2 1 3 1 2 3 sample run command: ./bubble 3 1 2 3 corresponding output: 1 2 3 1 2 3 1 2 3 sample run command: ./bubble 5 4 3 78 2 0 corresponding output: 4 3 78 2 0 3 4 78 2 0 3 4 78 2 0 3 4 2 78 0 3 4 2 0 78 3 4 2 0 78 3 2 4 0 78 3 2 0 4 78 2 3 0 4 78 2 0 3 4 78 0 2 3 4 78","title":"Codepost instructions"},{"location":"Q3%20-%20LT2%20-%20bubble/#required-template-code","text":"/*********************************************************************** * This is the starter code for the bubble sort. * Those taking the Q3 LT2 are required to use this code. * You may only change the parts indicated for changing * * Output the result of each iteration. * The first number of the input is the count of numbers to be arranged * The second to last numbers are to be sorted * * sample compile command: g++ -o bubble bubble.cpp * sample run command: ./bubble 3 3 2 1 * corresponding output: 2 3 1 2 1 3 1 2 3 * * * *********************************************************************/ #include <iostream> using namespace std; int main(int argc, char* argv[]) { int count = atoi(argv[1]); int arr[count]; for (int i=0; i<count; i++){ arr[i] = atoi(argv[i+2]); } // change the parts below to solve the problem for (int i=0; i<count; i++){ cout << arr[i] << \" \" ; } cout << endl; }","title":"Required template code"},{"location":"Q3%20-%20ME%201%20-%20Numeric%20Triangle%20Pattern/","text":"Q3 - ME 1 - Numeric Triangle Pattern Machine Exercise Instructions Based on the example given on the previous module, create a program that replicated the triangle pattern shown. Try to look at the examples closely and think of an algorithm that replicates the outputs. Let\u2019s see if you still look at Triangle problems the same way after this problem. Input: Integer value n. Output: A triangle based on the inputted value of n. Sample Input and Outputs: sample input: 3 corresponding output: * ** *** sample input: 4 corresponding output: * ** *** **** sample input: 7 corresponding output: * ** *** **** ***** ****** ******* Codepost submission Create a C++ program to solve the problem and rename it triangle.cpp . Upload this to Codepost. sample compile command: g++ -o triangle triangle.cpp sample run command: ./triangle 3 corresponding output: * ** *** Template Code /************************************************************ * * Q3 - ME 1 - Numeric Triangle Pattern * sample compile command: *g++ -o triangle triangle.cpp* sample run command: *./triangle 3* corresponding output: * ** *** * * *********************************************************/ #include <iostream> using namespace std; int main (int argc, char* argv[]) { int n = atoi(argv[1]); //edit the code below cout << \"*\" << endl; cout << \"**\" << endl; }","title":"Q3   ME 1   Numeric Triangle Pattern"},{"location":"Q3%20-%20ME%201%20-%20Numeric%20Triangle%20Pattern/#q3-me-1-numeric-triangle-pattern","text":"Machine Exercise","title":"Q3 - ME 1 - Numeric Triangle Pattern"},{"location":"Q3%20-%20ME%201%20-%20Numeric%20Triangle%20Pattern/#instructions","text":"Based on the example given on the previous module, create a program that replicated the triangle pattern shown. Try to look at the examples closely and think of an algorithm that replicates the outputs. Let\u2019s see if you still look at Triangle problems the same way after this problem. Input: Integer value n. Output: A triangle based on the inputted value of n.","title":"Instructions"},{"location":"Q3%20-%20ME%201%20-%20Numeric%20Triangle%20Pattern/#sample-input-and-outputs","text":"sample input: 3 corresponding output: * ** *** sample input: 4 corresponding output: * ** *** **** sample input: 7 corresponding output: * ** *** **** ***** ****** *******","title":"Sample Input and Outputs:"},{"location":"Q3%20-%20ME%201%20-%20Numeric%20Triangle%20Pattern/#codepost-submission","text":"Create a C++ program to solve the problem and rename it triangle.cpp . Upload this to Codepost. sample compile command: g++ -o triangle triangle.cpp sample run command: ./triangle 3 corresponding output: * ** ***","title":"Codepost submission"},{"location":"Q3%20-%20ME%201%20-%20Numeric%20Triangle%20Pattern/#template-code","text":"/************************************************************ * * Q3 - ME 1 - Numeric Triangle Pattern * sample compile command: *g++ -o triangle triangle.cpp* sample run command: *./triangle 3* corresponding output: * ** *** * * *********************************************************/ #include <iostream> using namespace std; int main (int argc, char* argv[]) { int n = atoi(argv[1]); //edit the code below cout << \"*\" << endl; cout << \"**\" << endl; }","title":"Template Code"},{"location":"Q3%20-%20ME%202%20-%20Multipication%20Table/","text":"Q3 - ME 2 - Multipication Table Instructions Codepost guide Create a program to solve the problem and rename it mult_table2.cpp Upload the file to codepost Make sure you use commandline parameters like in the Template Code Do not use cin Sample commands and output Sample compile command: g++ -o mult_table mult_table.cpp Sample run command: ./mult_table2 2 Corresponding output: 1 2 2 4 Sample run command: ./mult_table2 3 Corresponding output: 1 2 3 2 4 6 3 6 9 Template Code /********************************************************************************* * * Q3 - ME 2 - Multipication Table * * Sample compile command: `g++ -o mult_table mult_table.cpp` Sample run command: `./mult_table2 2` Corresponding output: 1 2 2 4 * * ******************************************************************************/ #include <iostream> using namespace std; int main (int argc, char* argv[]) { int n = atoi(argv[1]); // change the code below cout << \"1\" << \"\\t\" << n << \"\\t\" << n * n << endl; }","title":"Q3   ME 2   Multipication Table"},{"location":"Q3%20-%20ME%202%20-%20Multipication%20Table/#q3-me-2-multipication-table","text":"","title":"Q3 - ME 2 - Multipication Table"},{"location":"Q3%20-%20ME%202%20-%20Multipication%20Table/#instructions","text":"","title":"Instructions"},{"location":"Q3%20-%20ME%202%20-%20Multipication%20Table/#codepost-guide","text":"Create a program to solve the problem and rename it mult_table2.cpp Upload the file to codepost Make sure you use commandline parameters like in the Template Code Do not use cin","title":"Codepost guide"},{"location":"Q3%20-%20ME%202%20-%20Multipication%20Table/#sample-commands-and-output","text":"Sample compile command: g++ -o mult_table mult_table.cpp Sample run command: ./mult_table2 2 Corresponding output: 1 2 2 4 Sample run command: ./mult_table2 3 Corresponding output: 1 2 3 2 4 6 3 6 9","title":"Sample commands and output"},{"location":"Q3%20-%20ME%202%20-%20Multipication%20Table/#template-code","text":"/********************************************************************************* * * Q3 - ME 2 - Multipication Table * * Sample compile command: `g++ -o mult_table mult_table.cpp` Sample run command: `./mult_table2 2` Corresponding output: 1 2 2 4 * * ******************************************************************************/ #include <iostream> using namespace std; int main (int argc, char* argv[]) { int n = atoi(argv[1]); // change the code below cout << \"1\" << \"\\t\" << n << \"\\t\" << n * n << endl; }","title":"Template Code"},{"location":"Q3%20-%20Project%20-%20Mastermind/","text":"Q3 - Project - Mastermind Introduction Mastermind is a game where you have to guess your opponent\u2019s secret code within a certain number of turns (like hangman with colored pegs), check it out on Wikipedia . Each turn you get some feedback about how good your guess was \u2013 whether it was exactly correct or just the correct color but in the wrong space. Project Build a simplified Mastermind game from the command line where you have 7 turns to guess the secret 3-color code . The options for colors are Red, Orange, Yellow, Green, Blue, and Violet represented by R, O, Y, G, B, V, respectively. The feedback is represented by numbers. 0 - a guess is both in the wrong location and has a wrong color 1 - a guess is in the wrong location but has the right color 2 - a guess is in the right location and has the right color The secret must not repeat colors. The feedback numbers should be sorted (highest to lowest). Sample Game roycanseco@pop-os:~/projects/cpp_prac$ ./mastermind ------------------- | 1 _ _ _ 0 0 0 | ------------------- | 2 _ _ _ 0 0 0 | ------------------- | 3 _ _ _ 0 0 0 | ------------------- | 4 _ _ _ 0 0 0 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | enter your 3 guesses (R, O, Y, G, B, V): ROY ------------------- | 1 R O Y 0 0 0 | ------------------- | 2 _ _ _ 0 0 0 | ------------------- | 3 _ _ _ 0 0 0 | ------------------- | 4 _ _ _ 0 0 0 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | enter your 3 guesses (R, O, Y, G, B, V): GBV ------------------- | 1 R O Y 0 0 0 | ------------------- | 2 G B V 2 1 0 | ------------------- | 3 _ _ _ 0 0 0 | ------------------- | 4 _ _ _ 0 0 0 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | enter your 3 guesses (R, O, Y, G, B, V): GBB ------------------- | 1 R O Y 0 0 0 | ------------------- | 2 G B V 2 1 0 | ------------------- | 3 G B B 2 1 0 | ------------------- | 4 _ _ _ 0 0 0 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | enter your 3 guesses (R, O, Y, G, B, V): BBG ------------------- | 1 R O Y 0 0 0 | ------------------- | 2 G B V 2 1 0 | ------------------- | 3 G B B 2 1 0 | ------------------- | 4 B B G 2 2 2 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | When you get a \"222\", you've won. :) Template code /************************************************************************* * * This is the CS2 Q3 Programming Project * You can have solo, pair, trio or quad groupings. * You will make a simplified MasterMind Game. * * The game will give you 7 chances to guess a secret series of 3 letters corresponding to colors: * R- red, O- orange, Y- yellow, G- green, B- blue, V- violet * For every guess, the game will give you a clue in the form of 3 numbers in a sorted fashion: * 0- there is a guessed color that is *not* among the secret colors * 1- there is a guessed color that is among the secret colors, but in the *wrong* position * 2- there is a guessed color that is among the secret colors and is in the right position * * Colors in the secret color set may *not* be repeated * * * ************************************************************************/ #include <iostream> using namespace std; char secret[3] ={'B', 'B', 'G'} ; char board [7][7] = { {'1' , '_', '_', '_', '0', '0', '0' } , {'2' , '_', '_', '_', '0', '0', '0' } , {'3' , '_', '_', '_', '0', '0', '0' } , {'4' , '_', '_', '_', '0', '0', '0' } , {'5' , '_', '_', '_', '0', '0', '0' } , {'6' , '_', '_', '_', '0', '0', '0' } , {'7' , '_', '_', '_', '0', '0', '0' } , }; void print_board () { for (int i=0; i<7; i++){ cout << \"\\t -------------------\" << endl; cout << \"\\t | \" ; for (int j=0; j<7; j++){ cout << board[i][j] << \" \"; } cout << \" |\"; cout << endl; } } int main () { print_board(); for (int turn = 0; turn < 7; turn++){ cout << endl << \"enter your 3 guesses (R, O, Y, G, B, V): \"; cin >> board[turn][1] >> board[turn][2] >> board[turn][3] ; print_board(); } }","title":"Q3   Project   Mastermind"},{"location":"Q3%20-%20Project%20-%20Mastermind/#q3-project-mastermind","text":"","title":"Q3 - Project - Mastermind"},{"location":"Q3%20-%20Project%20-%20Mastermind/#introduction","text":"Mastermind is a game where you have to guess your opponent\u2019s secret code within a certain number of turns (like hangman with colored pegs), check it out on Wikipedia . Each turn you get some feedback about how good your guess was \u2013 whether it was exactly correct or just the correct color but in the wrong space.","title":"Introduction"},{"location":"Q3%20-%20Project%20-%20Mastermind/#project","text":"Build a simplified Mastermind game from the command line where you have 7 turns to guess the secret 3-color code . The options for colors are Red, Orange, Yellow, Green, Blue, and Violet represented by R, O, Y, G, B, V, respectively. The feedback is represented by numbers. 0 - a guess is both in the wrong location and has a wrong color 1 - a guess is in the wrong location but has the right color 2 - a guess is in the right location and has the right color The secret must not repeat colors. The feedback numbers should be sorted (highest to lowest).","title":"Project"},{"location":"Q3%20-%20Project%20-%20Mastermind/#sample-game","text":"roycanseco@pop-os:~/projects/cpp_prac$ ./mastermind ------------------- | 1 _ _ _ 0 0 0 | ------------------- | 2 _ _ _ 0 0 0 | ------------------- | 3 _ _ _ 0 0 0 | ------------------- | 4 _ _ _ 0 0 0 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | enter your 3 guesses (R, O, Y, G, B, V): ROY ------------------- | 1 R O Y 0 0 0 | ------------------- | 2 _ _ _ 0 0 0 | ------------------- | 3 _ _ _ 0 0 0 | ------------------- | 4 _ _ _ 0 0 0 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | enter your 3 guesses (R, O, Y, G, B, V): GBV ------------------- | 1 R O Y 0 0 0 | ------------------- | 2 G B V 2 1 0 | ------------------- | 3 _ _ _ 0 0 0 | ------------------- | 4 _ _ _ 0 0 0 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | enter your 3 guesses (R, O, Y, G, B, V): GBB ------------------- | 1 R O Y 0 0 0 | ------------------- | 2 G B V 2 1 0 | ------------------- | 3 G B B 2 1 0 | ------------------- | 4 _ _ _ 0 0 0 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | enter your 3 guesses (R, O, Y, G, B, V): BBG ------------------- | 1 R O Y 0 0 0 | ------------------- | 2 G B V 2 1 0 | ------------------- | 3 G B B 2 1 0 | ------------------- | 4 B B G 2 2 2 | ------------------- | 5 _ _ _ 0 0 0 | ------------------- | 6 _ _ _ 0 0 0 | ------------------- | 7 _ _ _ 0 0 0 | When you get a \"222\", you've won. :)","title":"Sample Game"},{"location":"Q3%20-%20Project%20-%20Mastermind/#template-code","text":"/************************************************************************* * * This is the CS2 Q3 Programming Project * You can have solo, pair, trio or quad groupings. * You will make a simplified MasterMind Game. * * The game will give you 7 chances to guess a secret series of 3 letters corresponding to colors: * R- red, O- orange, Y- yellow, G- green, B- blue, V- violet * For every guess, the game will give you a clue in the form of 3 numbers in a sorted fashion: * 0- there is a guessed color that is *not* among the secret colors * 1- there is a guessed color that is among the secret colors, but in the *wrong* position * 2- there is a guessed color that is among the secret colors and is in the right position * * Colors in the secret color set may *not* be repeated * * * ************************************************************************/ #include <iostream> using namespace std; char secret[3] ={'B', 'B', 'G'} ; char board [7][7] = { {'1' , '_', '_', '_', '0', '0', '0' } , {'2' , '_', '_', '_', '0', '0', '0' } , {'3' , '_', '_', '_', '0', '0', '0' } , {'4' , '_', '_', '_', '0', '0', '0' } , {'5' , '_', '_', '_', '0', '0', '0' } , {'6' , '_', '_', '_', '0', '0', '0' } , {'7' , '_', '_', '_', '0', '0', '0' } , }; void print_board () { for (int i=0; i<7; i++){ cout << \"\\t -------------------\" << endl; cout << \"\\t | \" ; for (int j=0; j<7; j++){ cout << board[i][j] << \" \"; } cout << \" |\"; cout << endl; } } int main () { print_board(); for (int turn = 0; turn < 7; turn++){ cout << endl << \"enter your 3 guesses (R, O, Y, G, B, V): \"; cin >> board[turn][1] >> board[turn][2] >> board[turn][3] ; print_board(); } }","title":"Template code"},{"location":"Q3%20-%20bonus%20-%20ceasar_cipher/","text":"Q3 - bonus - ceasar_cipher From Wikipedia: In cryptography, a Caesar cipher, also known as Caesar\u2019s cipher, the shift cipher, Caesar\u2019s code or Caesar shift, is one of the simplest and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A, E would become B, and so on. The method is named after Julius Caesar, who used it in his private correspondence. There\u2019s a video about it https://youtu.be/36xNpbosfTY Instructions Implement a caesar cipher that takes in a string and the shift factor and then outputs the modified string: Name the file ceasar_cipher.cpp Codepost guidance sample compile command: g++ -o ceasar_cipher ceasar_cipher.cpp sample run command: ./caesar_cipher \"What a string!\" 5 sample output: Bmfy f xywnsl! Quick Tips Don't forget to maintain the punctuation Don\u2019t forget to wrap from z to a. Don\u2019t forget to keep the same case. Template code /*************************************************************** Implement a caesar cipher that takes in a string and the shift factor and then outputs the modified string sample run command: ./caesar_cipher \"What a string!\" 5 sample output: Bmfy f xywnsl! Don't forget to maintain the punctuation Don\u2019t forget to wrap from z to a. Don\u2019t forget to keep the same case. I. Explore: 1. get the string 2. get n 3. shift the string n characters down II. Improve: 1. wrap from z to a. 2. maintain the punctuation 3. keep the same case III. Test with other strings ****************************************************************/ #include <iostream> using namespace std; int main (int argc, char* argv[]) { string s = argv[1]; // s is the input string int n = atoi(argv[2]); // n is the number of characters to shift // change the code below to solve the problem cout << s << endl; cout << n << endl; }","title":"Q3   bonus   ceasar cipher"},{"location":"Q3%20-%20bonus%20-%20ceasar_cipher/#q3-bonus-ceasar_cipher","text":"From Wikipedia: In cryptography, a Caesar cipher, also known as Caesar\u2019s cipher, the shift cipher, Caesar\u2019s code or Caesar shift, is one of the simplest and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A, E would become B, and so on. The method is named after Julius Caesar, who used it in his private correspondence. There\u2019s a video about it https://youtu.be/36xNpbosfTY","title":"Q3 - bonus - ceasar_cipher"},{"location":"Q3%20-%20bonus%20-%20ceasar_cipher/#instructions","text":"Implement a caesar cipher that takes in a string and the shift factor and then outputs the modified string: Name the file ceasar_cipher.cpp","title":"Instructions"},{"location":"Q3%20-%20bonus%20-%20ceasar_cipher/#codepost-guidance","text":"sample compile command: g++ -o ceasar_cipher ceasar_cipher.cpp sample run command: ./caesar_cipher \"What a string!\" 5 sample output: Bmfy f xywnsl!","title":"Codepost guidance"},{"location":"Q3%20-%20bonus%20-%20ceasar_cipher/#quick-tips","text":"Don't forget to maintain the punctuation Don\u2019t forget to wrap from z to a. Don\u2019t forget to keep the same case.","title":"Quick Tips"},{"location":"Q3%20-%20bonus%20-%20ceasar_cipher/#template-code","text":"/*************************************************************** Implement a caesar cipher that takes in a string and the shift factor and then outputs the modified string sample run command: ./caesar_cipher \"What a string!\" 5 sample output: Bmfy f xywnsl! Don't forget to maintain the punctuation Don\u2019t forget to wrap from z to a. Don\u2019t forget to keep the same case. I. Explore: 1. get the string 2. get n 3. shift the string n characters down II. Improve: 1. wrap from z to a. 2. maintain the punctuation 3. keep the same case III. Test with other strings ****************************************************************/ #include <iostream> using namespace std; int main (int argc, char* argv[]) { string s = argv[1]; // s is the input string int n = atoi(argv[2]); // n is the number of characters to shift // change the code below to solve the problem cout << s << endl; cout << n << endl; }","title":"Template code"},{"location":"Q4%20-%20LT2%20-%20part%202%20-%20memory/","text":"Q4 - LT2 - part 2 - memory A game called Memory is played using 50 cards. Each card has one of the letters from A to Y (ASCII 65 to 89) printed on the face, so that each letter appears on exactly two cards. The cards are shuffled into some random order and dealt face down on the table. Jack plays the game by turning two cards face up so the letters are visible. For each of the 25 letters Jack gets a candy from his mother the first time he sees both copies of the letter on the two face up cards. For example, the first time Jack turns over both cards that contain the letter M, he gets a candy. Regardless of whether the letters were equal or not, Jack then turns both cards face down again. The process is repeated until Jack receives 25 candies \u2013 one for each letter. You are to implement a function play that plays the game. Your implementation should call the function faceup(C) which is implemented by the grader. C is a number between 1 and 50 denoting a particular card you wish to be turned face up. The card must not currently be face up. faceup(C) returns the character that is printed on the card C. After every second call to faceup, the grader automatically turns both cards face down again. Your function play may only terminate once Jack has received all 25 candies. It is allowed to make calls to faceup(C) even after the moment when Jack gets the last candy. Instructions Randomly assign letters A to Y in an array or vector. Implement function play and function faceup(C) Function play continuously calls function faceup(C) until Jack receives all 25 candies Produce output according to the following example. Example The following is one possible sequence of calls your function play could make, with explanations. Call cout Output faceup(1) 1- Card 1 contains B. faceup(7) 2- Card 7 contains X. The letters are not equal. The grader automatically turns cards 1 and 7 face down. faceup(7) 3- Card 7 contains X. faceup(15) 4- Card 15 contains O. The letters are not equal. The grader automatically turns cards 7 and 15 face down. faceup(50) 5- Card 50 contains X. faceup(7) 6- Card 7 contains X. Jack gets candy #1. The grader automatically turns cards 50 and 7 face down. faceup(7) 7- Card 7 contains X. faceup(50) 8- Card 50 contains X. Equal letters, but Jack gets no candy. The grader automatically turns cards 7 and 50 face down. faceup(2) 9- Card 2 contains B. ... (some function calls were omitted) ... faceup(1) 99- Card 1 contains B. faceup(2) 100- Card 2 contains B. Jack gets candy #25. Points - total of 50 [40 points] - Implement any strategy that obeys the rules of the game [10 points] - Implement a strategy that finishes any possible game with at most 100 calls to faceup(C).","title":"Q4   LT2   part 2   memory"},{"location":"Q4%20-%20LT2%20-%20part%202%20-%20memory/#q4-lt2-part-2-memory","text":"A game called Memory is played using 50 cards. Each card has one of the letters from A to Y (ASCII 65 to 89) printed on the face, so that each letter appears on exactly two cards. The cards are shuffled into some random order and dealt face down on the table. Jack plays the game by turning two cards face up so the letters are visible. For each of the 25 letters Jack gets a candy from his mother the first time he sees both copies of the letter on the two face up cards. For example, the first time Jack turns over both cards that contain the letter M, he gets a candy. Regardless of whether the letters were equal or not, Jack then turns both cards face down again. The process is repeated until Jack receives 25 candies \u2013 one for each letter. You are to implement a function play that plays the game. Your implementation should call the function faceup(C) which is implemented by the grader. C is a number between 1 and 50 denoting a particular card you wish to be turned face up. The card must not currently be face up. faceup(C) returns the character that is printed on the card C. After every second call to faceup, the grader automatically turns both cards face down again. Your function play may only terminate once Jack has received all 25 candies. It is allowed to make calls to faceup(C) even after the moment when Jack gets the last candy.","title":"Q4 - LT2 - part 2 - memory"},{"location":"Q4%20-%20LT2%20-%20part%202%20-%20memory/#instructions","text":"Randomly assign letters A to Y in an array or vector. Implement function play and function faceup(C) Function play continuously calls function faceup(C) until Jack receives all 25 candies Produce output according to the following example.","title":"Instructions"},{"location":"Q4%20-%20LT2%20-%20part%202%20-%20memory/#example","text":"The following is one possible sequence of calls your function play could make, with explanations. Call cout Output faceup(1) 1- Card 1 contains B. faceup(7) 2- Card 7 contains X. The letters are not equal. The grader automatically turns cards 1 and 7 face down. faceup(7) 3- Card 7 contains X. faceup(15) 4- Card 15 contains O. The letters are not equal. The grader automatically turns cards 7 and 15 face down. faceup(50) 5- Card 50 contains X. faceup(7) 6- Card 7 contains X. Jack gets candy #1. The grader automatically turns cards 50 and 7 face down. faceup(7) 7- Card 7 contains X. faceup(50) 8- Card 50 contains X. Equal letters, but Jack gets no candy. The grader automatically turns cards 7 and 50 face down. faceup(2) 9- Card 2 contains B. ... (some function calls were omitted) ... faceup(1) 99- Card 1 contains B. faceup(2) 100- Card 2 contains B. Jack gets candy #25.","title":"Example"},{"location":"Q4%20-%20LT2%20-%20part%202%20-%20memory/#points-total-of-50","text":"[40 points] - Implement any strategy that obeys the rules of the game [10 points] - Implement a strategy that finishes any possible game with at most 100 calls to faceup(C).","title":"Points - total of 50"},{"location":"Q4%20-%20Quiz%20-%20functions/","text":"Q4 - Quiz - functions Instructions Modify the program in the Template Code. Your task is to display also the difference, product and quotient of the two input numbers. You have to create one function per operation. See sample output below. Example Run: Enter first number: 9 Enter second number: 3 Sum: 12 Difference: 6 Product: 27 Quotient: 3 Codepost Guide Create a program to solve the problem and rename it to functions.cpp . Upload the file to codepost.io sample compile command: g++ -o fucntions fucntions.cpp sample run command: ./functions input the 2 numbers via cin check the corresponding output for correctness and adherence to format Working Template Code /********************************************************************************* * * Modify the following program to display also the difference, product and quotient of the two input numbers. You have to create one function per operation. * * Example Run: Enter first number: 9 Enter second number: 3 Sum: 12 Difference: 6 Product: 27 Quotient: 3 * sample compile command: g++ -o fucntions fucntions.cpp sample run command: ./functions input the 2 numbers via cin * * Make sure the answers (i.e. quotients) make sense. * Check the format of the output is correct. * * ******************************************************************************/ #include <iostream> #include <cmath> using namespace std; //function declaration float sum(float,float); int main(){ float x, y; cout<<\"Enter first number: \"; cin>> x; cout<<\"Enter second number: \"; cin>>y; // CHANGE THE CODE BELOW TO SOLVE THE PROBLEM cout<<\"Sum: \"<<sum(x,y) << endl; //function call return 0; } //function definition float sum(float a, float b) { float c = a+b; return c; } Sir Roy's Solution /********************************************************************************* * * Modify the following program to display also the difference, product and quotient of the two input numbers. You have to create one function per operation. * * Example Run: Enter first number: 9 Enter second number: 3 Sum: 12 Difference: 6 Product: 27 Quotient: 3 * sample compile command: g++ -o fucntions fucntions.cpp sample run command: ./functions input the 2 numbers via cin * * Make sure the answers (i.e. quotients) make sense. * Check the format of the output is correct. * * ******************************************************************************/ #include <iostream> using namespace std; //function declaration float sum(float,float); float diff(float,float); float prod(float,float); float quo(float,float); int main(){ float x, y; cout<<\"Enter first number: \"; cin>> x; cout << endl; cout<<\"Enter second number: \"; cin>>y; cout << endl; cout<<\"Sum: \"<<sum(x,y) << endl; //function call cout<<\"Difference: \"<<diff(x,y) << endl; //function call cout<<\"Product: \"<<prod(x,y) << endl; //function call cout<<\"Quotient: \"<<quo(x,y) << endl; //function call return 0; } //function definition float sum(float a, float b) { float c = a+b; return c; } float diff(float a, float b) { float c = a-b; return c; } float prod(float a, float b) { float c = a*b; return c; } float quo(float a, float b) { float c = a/b; return c; }","title":"Q4   Quiz   functions"},{"location":"Q4%20-%20Quiz%20-%20functions/#q4-quiz-functions","text":"","title":"Q4 - Quiz - functions"},{"location":"Q4%20-%20Quiz%20-%20functions/#instructions","text":"Modify the program in the Template Code. Your task is to display also the difference, product and quotient of the two input numbers. You have to create one function per operation. See sample output below.","title":"Instructions"},{"location":"Q4%20-%20Quiz%20-%20functions/#example-run","text":"Enter first number: 9 Enter second number: 3 Sum: 12 Difference: 6 Product: 27 Quotient: 3","title":"Example Run:"},{"location":"Q4%20-%20Quiz%20-%20functions/#codepost-guide","text":"Create a program to solve the problem and rename it to functions.cpp . Upload the file to codepost.io sample compile command: g++ -o fucntions fucntions.cpp sample run command: ./functions input the 2 numbers via cin check the corresponding output for correctness and adherence to format","title":"Codepost Guide"},{"location":"Q4%20-%20Quiz%20-%20functions/#working-template-code","text":"/********************************************************************************* * * Modify the following program to display also the difference, product and quotient of the two input numbers. You have to create one function per operation. * * Example Run: Enter first number: 9 Enter second number: 3 Sum: 12 Difference: 6 Product: 27 Quotient: 3 * sample compile command: g++ -o fucntions fucntions.cpp sample run command: ./functions input the 2 numbers via cin * * Make sure the answers (i.e. quotients) make sense. * Check the format of the output is correct. * * ******************************************************************************/ #include <iostream> #include <cmath> using namespace std; //function declaration float sum(float,float); int main(){ float x, y; cout<<\"Enter first number: \"; cin>> x; cout<<\"Enter second number: \"; cin>>y; // CHANGE THE CODE BELOW TO SOLVE THE PROBLEM cout<<\"Sum: \"<<sum(x,y) << endl; //function call return 0; } //function definition float sum(float a, float b) { float c = a+b; return c; }","title":"Working Template Code"},{"location":"Q4%20-%20Quiz%20-%20functions/#sir-roys-solution","text":"/********************************************************************************* * * Modify the following program to display also the difference, product and quotient of the two input numbers. You have to create one function per operation. * * Example Run: Enter first number: 9 Enter second number: 3 Sum: 12 Difference: 6 Product: 27 Quotient: 3 * sample compile command: g++ -o fucntions fucntions.cpp sample run command: ./functions input the 2 numbers via cin * * Make sure the answers (i.e. quotients) make sense. * Check the format of the output is correct. * * ******************************************************************************/ #include <iostream> using namespace std; //function declaration float sum(float,float); float diff(float,float); float prod(float,float); float quo(float,float); int main(){ float x, y; cout<<\"Enter first number: \"; cin>> x; cout << endl; cout<<\"Enter second number: \"; cin>>y; cout << endl; cout<<\"Sum: \"<<sum(x,y) << endl; //function call cout<<\"Difference: \"<<diff(x,y) << endl; //function call cout<<\"Product: \"<<prod(x,y) << endl; //function call cout<<\"Quotient: \"<<quo(x,y) << endl; //function call return 0; } //function definition float sum(float a, float b) { float c = a+b; return c; } float diff(float a, float b) { float c = a-b; return c; } float prod(float a, float b) { float c = a*b; return c; } float quo(float a, float b) { float c = a/b; return c; }","title":"Sir Roy's Solution"},{"location":"Q4%20-%20bonus%20-%20comparisons%20%28p11172%29/","text":"Q4 - bonus - comparisons (p11172) Some operators checks about the relationship between two values and these operators are called relational operators. Given two numerical values your job is just to find out the relationship between them that is (i) First one is greater than the second (ii) First one is less than the second or (iii) First and second one is equal. Input Each input contains two integers a and b (|a|, |b| < 1000000001). Output This line contains any one of the relational operators \u2018>\u2019, \u2018<\u2019 or \u2018=\u2019, which indicates the relation that is appropriate for the given two numbers. Sample Input / Output sample input: 10 20 corresponding output: < sample input: 20 10 corresponding output: > sample input: 10 10 corresponding output: = ## Codepost Guide sample compile command: g++ -o comparisons comparisons.cpp sample run command: ./comparisons 10 20 corresponding output: < Template code /***************************************************************************** * * check if two integers are > , < , or = * sample compile command: g++ -o comparisons comparisons.cpp sample run command: ./comparisons 10 20 corresponding output: < * * **************************************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int n1 = atoi(input_array[1]); int n2 = atoi(input_array[2]); // change the following code to solve the problem cout << n1 << \" \" << n2 << endl; }","title":"Q4   bonus   comparisons (p11172)"},{"location":"Q4%20-%20bonus%20-%20comparisons%20%28p11172%29/#q4-bonus-comparisons-p11172","text":"Some operators checks about the relationship between two values and these operators are called relational operators. Given two numerical values your job is just to find out the relationship between them that is (i) First one is greater than the second (ii) First one is less than the second or (iii) First and second one is equal.","title":"Q4 - bonus - comparisons (p11172)"},{"location":"Q4%20-%20bonus%20-%20comparisons%20%28p11172%29/#input","text":"Each input contains two integers a and b (|a|, |b| < 1000000001).","title":"Input"},{"location":"Q4%20-%20bonus%20-%20comparisons%20%28p11172%29/#output","text":"This line contains any one of the relational operators \u2018>\u2019, \u2018<\u2019 or \u2018=\u2019, which indicates the relation that is appropriate for the given two numbers.","title":"Output"},{"location":"Q4%20-%20bonus%20-%20comparisons%20%28p11172%29/#sample-input-output","text":"sample input: 10 20 corresponding output: < sample input: 20 10 corresponding output: > sample input: 10 10 corresponding output: = ## Codepost Guide sample compile command: g++ -o comparisons comparisons.cpp sample run command: ./comparisons 10 20 corresponding output: <","title":"Sample Input / Output"},{"location":"Q4%20-%20bonus%20-%20comparisons%20%28p11172%29/#template-code","text":"/***************************************************************************** * * check if two integers are > , < , or = * sample compile command: g++ -o comparisons comparisons.cpp sample run command: ./comparisons 10 20 corresponding output: < * * **************************************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int n1 = atoi(input_array[1]); int n2 = atoi(input_array[2]); // change the following code to solve the problem cout << n1 << \" \" << n2 << endl; }","title":"Template code"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/","text":"Q4 Removals Plan 2021-06-18T09.54.33 Do this as soon as possible. I'm still checking on the deadline with other teachers, whether you get to have 1 week or 2 weeks for this. Instructions If your CS 2 grade is currently a 4.0 or a 5.0, you can avail of this Removals Plan. We will NOT be using KHub , but instead we will use BacKHub for the Removals Plan. website: http://backhub.172.105.217.30.nip.io/ username: \\ password: Pshs_12345 NOTE: change your password once you've logged in. There is a list of CS 2 third quarter and fourth quarter activities below. Some of those, you haven't submitted. Submit them in the prescribed order. Stop and check your BacKHub gradebook at the prescribed points to see if you already have a 3.0 or better grade. Once you reach 3.0, congratulate yourself, since you are now free to move to CS 3. Activity List Quizzes and Long Tests (theoreticals) The following will instantly and automatically be graded. You only need to check your BacKHub gradebook to see you grade recorded. The activity list shows you the Tile => activity name 340 - Long Test 1 => Q3 - LT 1 - theoretical (part 1 of 2) 350 - Week 5 => Q3 - quiz - linear search 360 - Programming Project => Q3 - quiz - binary search 370 - Long Test 2 => Q3 - LT2 - theoreticals (part 1 of 2) 410 - Q4 Learning Guides => Q4 - Quiz - LG 7.1 At this point, stop. Check you BacKHub gradebook if you have succeeded in obtaining 3.0 or better already. If not, you may proceed to the next set of missed activities to boost your grades. Q4 Bonus Problems Correctly answer as many Q4 bonus problems as you wish to increase your score. Some of them are very very easy. You have to follow the instructions exactly though so the AI checker can award you points. Go to the tile 400 - Fourth Quarter - Bonus Problems Open VS Code OR replit.com Solve the programming problem using commandline arguments (NOT cin) Submit to https://codepost.io/ Press the \"view test results\" button See that ALL the Automated Tests passed If any of the Automated Tests failed, check for the details / clues regarding the differences between actual and expected program output You may re-submit any non-perfect submissions before the deadline ends. If you get stuck, you may ask help from your classmates who excel in CS. You can also ask help from me, but understand that I am busy with managing Pisay's Information Systems at this time. Once you've answered all you can, inform your teacher. email: roy@pshs.edu.ph discord: sir_roy#0855 facebook: Roy Canseco I will then schedule sometime to move your grade from CodePost to BacKHub. All you need is to raise you grade to 3.0 or better. Google Assignments You may answer the following activities Make A Copy of our gdoc documentation template: https://docs.google.com/document/d/1GAGEmy8MeAW_RtAIBNLsitjdhsAFFONwcpyDcIGWwCk/edit?usp=sharing Solve a problems in the section on Programming Problems (Q4 problems weigh more) Fill out the gdoc documentation template with your answers Upload your code and the gdoc documentation template to our Emergency Submission Form Link: https://docs.google.com/forms/d/e/1FAIpQLScu_iuz6P3NVhpZCbvZLTwiB5iAxhCmbOVfJHuzLH9u1qvtPw/viewform Make sure that the gdoc documentation is shared with your teacher: rvlcanseco@pshs.edu.ph See if you can make another copy of the gdoc docu template and answer another problem. If you get stuck, you may ask help from your classmates who excel in CS. You can also ask help from me, but understand that I am busy with managing Pisay's Information Systems at this time. Once you've answered all you can, inform your teacher. email: roy@pshs.edu.ph discord: sir_roy#0855 facebook: Roy Canseco I will then schedule sometime to check your removals submissions. All you need is to raise you grade to 3.0 or better. Programming Problems Q4 - Quiz - functions https://docs.google.com/document/d/e/2PACX-1vQ3cYR2cU2RfgGDmZtunWBpikatS-46bQOQi18IFrs_mt3eXZw1Sq0mhZAOGVVz0dIoiNf0Y85QapB_/pub Q4 - LT2 - part 2 - memory https://docs.google.com/document/d/e/2PACX-1vR1K41S1zFnrpiJuHyvGRgEMdcHnkmyuNZ8T3ItLPmT7lX9G2jsmqi9-URMqtG1c4WdOblry4Gi_SdA/pub Q3 - LT1 - stocks https://docs.google.com/document/d/e/2PACX-1vRK6iQe4EzXS5JO1eOF3YNjiNAWmBpRUtVL5D-IPrhYZ6w9V1aVZ5WYLgPstvqS_jh6NSrIxYerwO1V/pub Q3 - LT2 - bubble https://docs.google.com/document/d/e/2PACX-1vQ74e-YUHGwTwqFpJ3DFWFq-eyLqg3d92Z7gIpRXp5--slfMpvvChhvnrXVnfeg8Xv5GH-mj8Lg38Y2/pub Q3 - Project - Mastermind https://docs.google.com/document/d/e/2PACX-1vRASvByY2UQmq-W6B5znQ3XH4SKKwApDiIRI5ToCwVeHxwMH2bHNxjXUmvpIp-t3FR_NHvY5qF2FNNQ/pub Teacher's contact information For questions or concerns, you may reach me at: email: roy@pshs.edu.ph discord: sir_roy#0855 facebook: Roy Canseco","title":"Q4 Removals Plan 2021 06 18T09.54.33"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/#q4-removals-plan-2021-06-18t095433","text":"Do this as soon as possible. I'm still checking on the deadline with other teachers, whether you get to have 1 week or 2 weeks for this.","title":"Q4 Removals Plan 2021-06-18T09.54.33"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/#instructions","text":"If your CS 2 grade is currently a 4.0 or a 5.0, you can avail of this Removals Plan. We will NOT be using KHub , but instead we will use BacKHub for the Removals Plan. website: http://backhub.172.105.217.30.nip.io/ username: \\ password: Pshs_12345 NOTE: change your password once you've logged in. There is a list of CS 2 third quarter and fourth quarter activities below. Some of those, you haven't submitted. Submit them in the prescribed order. Stop and check your BacKHub gradebook at the prescribed points to see if you already have a 3.0 or better grade. Once you reach 3.0, congratulate yourself, since you are now free to move to CS 3.","title":"Instructions"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/#activity-list","text":"","title":"Activity List"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/#quizzes-and-long-tests-theoreticals","text":"The following will instantly and automatically be graded. You only need to check your BacKHub gradebook to see you grade recorded. The activity list shows you the Tile => activity name 340 - Long Test 1 => Q3 - LT 1 - theoretical (part 1 of 2) 350 - Week 5 => Q3 - quiz - linear search 360 - Programming Project => Q3 - quiz - binary search 370 - Long Test 2 => Q3 - LT2 - theoreticals (part 1 of 2) 410 - Q4 Learning Guides => Q4 - Quiz - LG 7.1 At this point, stop. Check you BacKHub gradebook if you have succeeded in obtaining 3.0 or better already. If not, you may proceed to the next set of missed activities to boost your grades.","title":"Quizzes and Long Tests (theoreticals)"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/#q4-bonus-problems","text":"Correctly answer as many Q4 bonus problems as you wish to increase your score. Some of them are very very easy. You have to follow the instructions exactly though so the AI checker can award you points. Go to the tile 400 - Fourth Quarter - Bonus Problems Open VS Code OR replit.com Solve the programming problem using commandline arguments (NOT cin) Submit to https://codepost.io/ Press the \"view test results\" button See that ALL the Automated Tests passed If any of the Automated Tests failed, check for the details / clues regarding the differences between actual and expected program output You may re-submit any non-perfect submissions before the deadline ends. If you get stuck, you may ask help from your classmates who excel in CS. You can also ask help from me, but understand that I am busy with managing Pisay's Information Systems at this time. Once you've answered all you can, inform your teacher. email: roy@pshs.edu.ph discord: sir_roy#0855 facebook: Roy Canseco I will then schedule sometime to move your grade from CodePost to BacKHub. All you need is to raise you grade to 3.0 or better.","title":"Q4 Bonus Problems"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/#google-assignments","text":"You may answer the following activities Make A Copy of our gdoc documentation template: https://docs.google.com/document/d/1GAGEmy8MeAW_RtAIBNLsitjdhsAFFONwcpyDcIGWwCk/edit?usp=sharing Solve a problems in the section on Programming Problems (Q4 problems weigh more) Fill out the gdoc documentation template with your answers Upload your code and the gdoc documentation template to our Emergency Submission Form Link: https://docs.google.com/forms/d/e/1FAIpQLScu_iuz6P3NVhpZCbvZLTwiB5iAxhCmbOVfJHuzLH9u1qvtPw/viewform Make sure that the gdoc documentation is shared with your teacher: rvlcanseco@pshs.edu.ph See if you can make another copy of the gdoc docu template and answer another problem. If you get stuck, you may ask help from your classmates who excel in CS. You can also ask help from me, but understand that I am busy with managing Pisay's Information Systems at this time. Once you've answered all you can, inform your teacher. email: roy@pshs.edu.ph discord: sir_roy#0855 facebook: Roy Canseco I will then schedule sometime to check your removals submissions. All you need is to raise you grade to 3.0 or better.","title":"Google Assignments"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/#programming-problems","text":"Q4 - Quiz - functions https://docs.google.com/document/d/e/2PACX-1vQ3cYR2cU2RfgGDmZtunWBpikatS-46bQOQi18IFrs_mt3eXZw1Sq0mhZAOGVVz0dIoiNf0Y85QapB_/pub Q4 - LT2 - part 2 - memory https://docs.google.com/document/d/e/2PACX-1vR1K41S1zFnrpiJuHyvGRgEMdcHnkmyuNZ8T3ItLPmT7lX9G2jsmqi9-URMqtG1c4WdOblry4Gi_SdA/pub Q3 - LT1 - stocks https://docs.google.com/document/d/e/2PACX-1vRK6iQe4EzXS5JO1eOF3YNjiNAWmBpRUtVL5D-IPrhYZ6w9V1aVZ5WYLgPstvqS_jh6NSrIxYerwO1V/pub Q3 - LT2 - bubble https://docs.google.com/document/d/e/2PACX-1vQ74e-YUHGwTwqFpJ3DFWFq-eyLqg3d92Z7gIpRXp5--slfMpvvChhvnrXVnfeg8Xv5GH-mj8Lg38Y2/pub Q3 - Project - Mastermind https://docs.google.com/document/d/e/2PACX-1vRASvByY2UQmq-W6B5znQ3XH4SKKwApDiIRI5ToCwVeHxwMH2bHNxjXUmvpIp-t3FR_NHvY5qF2FNNQ/pub","title":"Programming Problems"},{"location":"Q4%20Removals%20Plan%202021-06-18T09.54.33/#teachers-contact-information","text":"For questions or concerns, you may reach me at: email: roy@pshs.edu.ph discord: sir_roy#0855 facebook: Roy Canseco","title":"Teacher's contact information"},{"location":"Q4%20removals%20-%20Notes/","text":"Q4 removals - Notes First off, I am deeply sorry Ma'am Gladys for the anxiety and sadness my late submission of grades caused you. If it's some small comfort, know that the students get their scores via KHub Grad Book for the most part automatically and for a lot of it, in real-time. I provide here some details on how I took care of the grades this school year as well as up-to-date notes on the students of interest you've mentioned. I haven't figured out how to resolve past quarter NG's, that process is something I'll be seeking and asking about. Grading details I employ auto-grading MCQ quizzes, auto-testing for programming submissions, and manual checking for coding projects (alternative assessments). I've also set KHub to compute all their tentative and final grades per quarter so that the student can see every submission he/ she did in past quarters and see how that factored in the computation of his/ her grade. If the student drills down, they see that each Project has wholistic and analytic rubrics, and each coding exercise has comments for every deduction in score. This led to >20% of students getting 1.0 in their final grade. But with the catch-up plans, the ebase grades uploading, and the seeking of unit head approvals for grades, I wasn't able to put up the grades in a timely manner. For that, again, I'm sorry. Students of interest 8- Camia LIM, JAMAICA CEZ L. (CLC) -Q2-Q4 Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 5 2 3 2.5 2.75 5 4 she has emailed me today confirming that she is doing the CS 2 Removals Plan her adviser has emailed that she is reminding Jamaica via messages and calls as of today, her final grade is 4.0 all other grades have been submitted to the google sheet RAMOS, KELVIN ANGEL F. (IRC) - Q2-Q4 All OK. Grade submitted to the google sheet SALUDES, MATTHEW C. (CLC)Q3- Q4 All OK. Grade submitted to the google sheet ALETA, IVAN KRISTOFF A. (Main Campus)-Q2-Q4 Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 2 2.25 2.25 4 3 5 4 has not replied to my email on the CS 2 Removals Plan no new submissions TAMBALQUE, QUENSO A. (Main Campus)-Q2-Q4 Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 4 2.5 3 4 4 5 5 has not replied to my email on the CS 2 Removals Plan no new submissions 8- Ilang-ilang DANGUILAN, ALBERTA KRISTEA C. (CARC) -Q2-Q4 All OK. Grade submitted to the google sheet DOMINGO, NED RAMESES (CARC)- Q2-Q4 All OK. Grade submitted to the google sheet TANG, ALBERT KENNETH B. (CARC)-Q2-Q4 All OK. Grade submitted to the google sheet AGCAOILI, CARL FRANCIS D.(Main Campus) Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 4 5 5 5 5 5 5 has an approved extension has not replied to my email on the CS 2 Removals Plan CHI-YOUNG, DANTE JR. B.(Main Campus) Q2-Q4 Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 2.75 2.75 2.75 5 4 5 5 has an approved extension has not replied to my email on the CS 2 Removals Plan ESCOBIDO, MICHAEL EARL J. (Main Campus) Q2-Q4 Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 5 2.5 3 2.75 2.75 4.0 3.0(after removals) Had just PASSED removals I don't know how to remove/ update his previous NG's I plan to ask Sir Paolo Santos for help","title":"Q4 removals   Notes"},{"location":"Q4%20removals%20-%20Notes/#q4-removals-notes","text":"First off, I am deeply sorry Ma'am Gladys for the anxiety and sadness my late submission of grades caused you. If it's some small comfort, know that the students get their scores via KHub Grad Book for the most part automatically and for a lot of it, in real-time. I provide here some details on how I took care of the grades this school year as well as up-to-date notes on the students of interest you've mentioned. I haven't figured out how to resolve past quarter NG's, that process is something I'll be seeking and asking about.","title":"Q4 removals - Notes"},{"location":"Q4%20removals%20-%20Notes/#grading-details","text":"I employ auto-grading MCQ quizzes, auto-testing for programming submissions, and manual checking for coding projects (alternative assessments). I've also set KHub to compute all their tentative and final grades per quarter so that the student can see every submission he/ she did in past quarters and see how that factored in the computation of his/ her grade. If the student drills down, they see that each Project has wholistic and analytic rubrics, and each coding exercise has comments for every deduction in score. This led to >20% of students getting 1.0 in their final grade. But with the catch-up plans, the ebase grades uploading, and the seeking of unit head approvals for grades, I wasn't able to put up the grades in a timely manner. For that, again, I'm sorry.","title":"Grading details"},{"location":"Q4%20removals%20-%20Notes/#students-of-interest","text":"","title":"Students of interest"},{"location":"Q4%20removals%20-%20Notes/#8-camia","text":"","title":"8- Camia"},{"location":"Q4%20removals%20-%20Notes/#lim-jamaica-cez-l-clc-q2-q4","text":"Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 5 2 3 2.5 2.75 5 4 she has emailed me today confirming that she is doing the CS 2 Removals Plan her adviser has emailed that she is reminding Jamaica via messages and calls as of today, her final grade is 4.0 all other grades have been submitted to the google sheet","title":"LIM, JAMAICA CEZ L. (CLC)  -Q2-Q4"},{"location":"Q4%20removals%20-%20Notes/#ramos-kelvin-angel-f-irc-q2-q4","text":"All OK. Grade submitted to the google sheet","title":"RAMOS, KELVIN ANGEL F. (IRC) - Q2-Q4"},{"location":"Q4%20removals%20-%20Notes/#saludes-matthew-c-clcq3-q4","text":"All OK. Grade submitted to the google sheet","title":"SALUDES, MATTHEW C. (CLC)Q3- Q4"},{"location":"Q4%20removals%20-%20Notes/#aleta-ivan-kristoff-a-main-campus-q2-q4","text":"Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 2 2.25 2.25 4 3 5 4 has not replied to my email on the CS 2 Removals Plan no new submissions","title":"ALETA, IVAN KRISTOFF A. (Main Campus)-Q2-Q4"},{"location":"Q4%20removals%20-%20Notes/#tambalque-quenso-a-main-campus-q2-q4","text":"Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 4 2.5 3 4 4 5 5 has not replied to my email on the CS 2 Removals Plan no new submissions","title":"TAMBALQUE, QUENSO A. (Main Campus)-Q2-Q4"},{"location":"Q4%20removals%20-%20Notes/#8-ilang-ilang","text":"","title":"8- Ilang-ilang"},{"location":"Q4%20removals%20-%20Notes/#danguilan-alberta-kristea-c-carc-q2-q4","text":"All OK. Grade submitted to the google sheet","title":"DANGUILAN, ALBERTA KRISTEA C.  (CARC) -Q2-Q4"},{"location":"Q4%20removals%20-%20Notes/#domingo-ned-rameses-carc-q2-q4","text":"All OK. Grade submitted to the google sheet","title":"DOMINGO, NED RAMESES (CARC)- Q2-Q4"},{"location":"Q4%20removals%20-%20Notes/#tang-albert-kenneth-b-carc-q2-q4","text":"All OK. Grade submitted to the google sheet","title":"TANG, ALBERT KENNETH B. (CARC)-Q2-Q4"},{"location":"Q4%20removals%20-%20Notes/#agcaoili-carl-francis-dmain-campus","text":"Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 4 5 5 5 5 5 5 has an approved extension has not replied to my email on the CS 2 Removals Plan","title":"AGCAOILI, CARL FRANCIS D.(Main Campus)"},{"location":"Q4%20removals%20-%20Notes/#chi-young-dante-jr-bmain-campus-q2-q4","text":"Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 2.75 2.75 2.75 5 4 5 5 has an approved extension has not replied to my email on the CS 2 Removals Plan","title":"CHI-YOUNG, DANTE JR. B.(Main Campus) Q2-Q4"},{"location":"Q4%20removals%20-%20Notes/#escobido-michael-earl-j-main-campus-q2-q4","text":"Q1 - Final Grade Q2 - tentative Q2 - Final Grade Q3 - tentative Q3 - Final Grade Q4 - Tentative CS 2 - FINAL GRADE 5 2.5 3 2.75 2.75 4.0 3.0(after removals) Had just PASSED removals I don't know how to remove/ update his previous NG's I plan to ask Sir Paolo Santos for help","title":"ESCOBIDO, MICHAEL EARL J. (Main Campus) Q2-Q4"},{"location":"Q4bonus%20-%20123%20%28p12289%29/","text":"Q4bonus - 123 (p12289) Your little brother has just learnt to write one, two and three, in English. He has written a lot of those words in a paper, your task is to recognize them. Note that your little brother is only a child, so he may make small mistakes: for each word, there might be at most one wrong letter. The word length is always correct. It is guaranteed that each letter he wrote is in lower-case, and each word he wrote has a unique interpretation. Input Each input contains a single word with all letters in lower-case. The words satisfy the constraints above: at most one letter might be wrong, but the word length is always correct. Output For each test case, print the numerical value of the word. Sample Input / Output Input Output owe 1 too 2 theee 3 Codepost Guide Create a program to solve the problem and rename it to 123.cpp . Upload the file to codepost.io sample compile command: g++ -o 123 123.cpp sample run command: ./123 owe corresponding output: 1 Working Template Code /******************************************************* * * Q4bonus - 123 (p12289) * * print the numerical value of the (almost correct) word * sample compile command: g++ -o 123 123.cpp sample run command: ./123 owe corresponding output: 1 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { string s = input_array[1]; // change the following code to solve the problem cout << s << endl; cout << s.size() << endl; }","title":"Q4bonus   123 (p12289)"},{"location":"Q4bonus%20-%20123%20%28p12289%29/#q4bonus-123-p12289","text":"Your little brother has just learnt to write one, two and three, in English. He has written a lot of those words in a paper, your task is to recognize them. Note that your little brother is only a child, so he may make small mistakes: for each word, there might be at most one wrong letter. The word length is always correct. It is guaranteed that each letter he wrote is in lower-case, and each word he wrote has a unique interpretation.","title":"Q4bonus - 123 (p12289)"},{"location":"Q4bonus%20-%20123%20%28p12289%29/#input","text":"Each input contains a single word with all letters in lower-case. The words satisfy the constraints above: at most one letter might be wrong, but the word length is always correct.","title":"Input"},{"location":"Q4bonus%20-%20123%20%28p12289%29/#output","text":"For each test case, print the numerical value of the word.","title":"Output"},{"location":"Q4bonus%20-%20123%20%28p12289%29/#sample-input-output","text":"Input Output owe 1 too 2 theee 3","title":"Sample Input / Output"},{"location":"Q4bonus%20-%20123%20%28p12289%29/#codepost-guide","text":"Create a program to solve the problem and rename it to 123.cpp . Upload the file to codepost.io sample compile command: g++ -o 123 123.cpp sample run command: ./123 owe corresponding output: 1","title":"Codepost Guide"},{"location":"Q4bonus%20-%20123%20%28p12289%29/#working-template-code","text":"/******************************************************* * * Q4bonus - 123 (p12289) * * print the numerical value of the (almost correct) word * sample compile command: g++ -o 123 123.cpp sample run command: ./123 owe corresponding output: 1 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { string s = input_array[1]; // change the following code to solve the problem cout << s << endl; cout << s.size() << endl; }","title":"Working Template Code"},{"location":"Q4bonus%20-%20Emoogle%20%28p12279%29/","text":"Q4bonus - Emoogle (p12279) We have a very famous and popular fellow in our prob- lemsetters\u2019 panel. He is so famous that his name is immaterial. Some of his admirers have recently given him the nickname \u2019Emoogle\u2019. Let\u2019s stick to that name in our discussion for now. Being such a kind, friendly and generous person as he is, Emoogle is often known to give treats to the other problemsetters. Some times, there is a strange rumor in the air that his treats are mostly due to the fact that, if he is not sparing enough for those treats, \u2019problems\u2019 are likely to be created. But let\u2019s not pay heed to such nonsense! Now, there is another word in the air that this re- markable man is going to get married soon. To observe this special occasion with proper respect, his fellow troublemakers have decided to compile a book named \u201999 reasons why Emoogle should give us a treat\u2019. Every single reason mentioned in this book is denoted by a number. For example, Emoogle should give us a treat because If he does not, problems will be created. :) His giveaway problem has been solved by less than 10 teams in the recent programming contest. He is going to join a world famous goggles manufacturing company soon. He has found a ticket of a soccer world cup game while digging his backyard garden in the morning. He has just got a new Facebook fan club. Having forgotten about a date with his wife-to-be which collided with a Topcoder SRM (Single Round Match), he participated in the SRM. (May God bless his soul!) A programming contest (may be this one?) is being arranged celebrating his marriage. He is getting engaged soon. .................. ... 99. Solely because he is the great and kind and sweet Emoogle. If you have any more ideas about why he should throw a party, we would love to know. Drop us a line at emoogle.party gmail.com. At this point, Dear brother Emoogle might want to remind us about the number of times he has already thrown a party. Hence we introduce the term Emoogle Balance. This is defined as: Emoogle Balance = number of times Emoogle is supposed to give a treat according to the book - number of times he has actually given the treat. In this problem, we want you to find Emoogle Balance. We also wish that Emoogle Balance always keeps a healthy negative value and may dear brother Emoogle have a very happy married life forever. Input Each test case describes a series of events. A test case starts with an integer N (1 \u2264 N \u2264 1000) denoting the number of events in this test case. This integer is followed by N integers, each describing an event. These integers have values between 0 and 99 (inclusive). A value between 1 and 99 means a reason for Emoogle\u2019s giving a treat has occurred while a 0 means he has given a treat. The end of input will be denoted by a case with N = 0. This case should not be processed. Output For each test case, print a line in the format, \u2018Emoogle Balance: Y \u2019, where Y is the Emoogle Balance for this case. Sample Input Sample Output 5 3 4 0 0 1 Emoogle Balance: 1 4 2 0 0 0 Emoogle Balance: -2 7 1 2 3 4 5 0 0 Emoogle Balance: 3 Codepost Guide Create a program to solve the problem and rename it to emoogle.cpp . Upload the file to codepost.io sample compile command: g++ -o emoogle emoogle.cpp sample run command: ./emoogle 5 3 4 0 0 1 corresponding output: Emoogle Balance: 1 Working Template Code /****************************************************** * * Q4bonus - Emoogle (p12279) * * Emoogle Balance = number of times Emoogle is supposed to give a treat according to the book - number of times he has actually given the treat. * sample compile command: g++ -o emoogle emoogle.cpp sample run command: ./emoogle 5 3 4 0 0 1 corresponding output: Emoogle Balance: 1 * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int count = atoi( input_array[1] ); // change the following code to solve the problem vector <int> v; for (int i=0; i< count; i++){ v.push_back( atoi(input_array[i+2])); } for (auto &x : v) { cout << x << \" \" ; } cout << endl; }","title":"Q4bonus   Emoogle (p12279)"},{"location":"Q4bonus%20-%20Emoogle%20%28p12279%29/#q4bonus-emoogle-p12279","text":"We have a very famous and popular fellow in our prob- lemsetters\u2019 panel. He is so famous that his name is immaterial. Some of his admirers have recently given him the nickname \u2019Emoogle\u2019. Let\u2019s stick to that name in our discussion for now. Being such a kind, friendly and generous person as he is, Emoogle is often known to give treats to the other problemsetters. Some times, there is a strange rumor in the air that his treats are mostly due to the fact that, if he is not sparing enough for those treats, \u2019problems\u2019 are likely to be created. But let\u2019s not pay heed to such nonsense! Now, there is another word in the air that this re- markable man is going to get married soon. To observe this special occasion with proper respect, his fellow troublemakers have decided to compile a book named \u201999 reasons why Emoogle should give us a treat\u2019. Every single reason mentioned in this book is denoted by a number. For example, Emoogle should give us a treat because If he does not, problems will be created. :) His giveaway problem has been solved by less than 10 teams in the recent programming contest. He is going to join a world famous goggles manufacturing company soon. He has found a ticket of a soccer world cup game while digging his backyard garden in the morning. He has just got a new Facebook fan club. Having forgotten about a date with his wife-to-be which collided with a Topcoder SRM (Single Round Match), he participated in the SRM. (May God bless his soul!) A programming contest (may be this one?) is being arranged celebrating his marriage. He is getting engaged soon. .................. ... 99. Solely because he is the great and kind and sweet Emoogle. If you have any more ideas about why he should throw a party, we would love to know. Drop us a line at emoogle.party gmail.com. At this point, Dear brother Emoogle might want to remind us about the number of times he has already thrown a party. Hence we introduce the term Emoogle Balance. This is defined as: Emoogle Balance = number of times Emoogle is supposed to give a treat according to the book - number of times he has actually given the treat. In this problem, we want you to find Emoogle Balance. We also wish that Emoogle Balance always keeps a healthy negative value and may dear brother Emoogle have a very happy married life forever.","title":"Q4bonus - Emoogle (p12279)"},{"location":"Q4bonus%20-%20Emoogle%20%28p12279%29/#input","text":"Each test case describes a series of events. A test case starts with an integer N (1 \u2264 N \u2264 1000) denoting the number of events in this test case. This integer is followed by N integers, each describing an event. These integers have values between 0 and 99 (inclusive). A value between 1 and 99 means a reason for Emoogle\u2019s giving a treat has occurred while a 0 means he has given a treat. The end of input will be denoted by a case with N = 0. This case should not be processed.","title":"Input"},{"location":"Q4bonus%20-%20Emoogle%20%28p12279%29/#output","text":"For each test case, print a line in the format, \u2018Emoogle Balance: Y \u2019, where Y is the Emoogle Balance for this case. Sample Input Sample Output 5 3 4 0 0 1 Emoogle Balance: 1 4 2 0 0 0 Emoogle Balance: -2 7 1 2 3 4 5 0 0 Emoogle Balance: 3","title":"Output"},{"location":"Q4bonus%20-%20Emoogle%20%28p12279%29/#codepost-guide","text":"Create a program to solve the problem and rename it to emoogle.cpp . Upload the file to codepost.io sample compile command: g++ -o emoogle emoogle.cpp sample run command: ./emoogle 5 3 4 0 0 1 corresponding output: Emoogle Balance: 1","title":"Codepost Guide"},{"location":"Q4bonus%20-%20Emoogle%20%28p12279%29/#working-template-code","text":"/****************************************************** * * Q4bonus - Emoogle (p12279) * * Emoogle Balance = number of times Emoogle is supposed to give a treat according to the book - number of times he has actually given the treat. * sample compile command: g++ -o emoogle emoogle.cpp sample run command: ./emoogle 5 3 4 0 0 1 corresponding output: Emoogle Balance: 1 * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int count = atoi( input_array[1] ); // change the following code to solve the problem vector <int> v; for (int i=0; i< count; i++){ v.push_back( atoi(input_array[i+2])); } for (auto &x : v) { cout << x << \" \" ; } cout << endl; }","title":"Working Template Code"},{"location":"Q4bonus%20-%20hola%20%28p12250%29/","text":"Q4bonus - hola (p12250) English, Spanish, German, French, Italian and Russian are the 6 most prominent languages in the countries of European Union. Figure on the left shows intensity of English speaking people in different European countries. All of these languages have different words to repre- sent the English word \u201cHELLO\u201d. For example in Spanish the word equivalent to \u201cHELLO\u201d is \u201cHOLA\u201d. In German, French, Italian and Rus- sian language the word that means (or simi- lar to) \u201cHELLO\u201d is \u201cHALLO\u201d, \u201cBONJOUR\u201d, \u201cCIAO\u201d and \u201cZDRAVSTVUJTE\u201d respectively. In this problem your task is pretty simple. You will be given one of the six words mentioned above or any other word and you will have to try and detect the language it is from. Input Each input contains a string S. You can assume that all the letters of the string are uppercase English letters and the maximum length of the string is 14. Output This line contains the serial of output followed by a language name. If the input string is \u2018HELLO\u2019 or \u2018HOLA\u2019 or \u2018HALLO\u2019 or \u2018BONJOUR\u2019 or \u2018CIAO\u2019 or \u2018ZDRAVSTVUJTE\u2019 then you should report the language it belongs to. If the input string is something other than these 6 strings print the string \u2018UNKNOWN\u2019 (without the quotes) instead. All characters in the output strings are uppercase as well. Look at the output for sample input for formatting details. Sample Input/ Output Sample Input Sample Output HELLO ENGLISH HOLA SPANISH HALLO GERMAN BONJOUR FRENCH CIAO ITALIAN ZDRAVSTUJTE RUSSIAN Codepost guide Create a program that solves the problem and rename the file hola.cpp . Upload the file to codepost.io sample compile command: g++ -o hola hola.cpp sample run command: ./hola HELLO corresponding output: ENGLISH Working template code /******************************************************* * * Q4bonus - hola (p12250) * * If the input string is \u2018HELLO\u2019 or \u2018HOLA\u2019 or \u2018HALLO\u2019 or \u2018BONJOUR\u2019 or \u2018CIAO\u2019 or \u2018ZDRAVSTVUJTE\u2019 * then you should report the language it belongs to. * If the input string is something other than these 6 strings print the string \u2018UNKNOWN\u2019 * sample compile command: g++ -o hola hola.cpp sample run command: ./hola HELLO corresponding output: ENGLISH * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { string S = input_array[1]; // change the code below to solve the problem cout << S << endl; }","title":"Q4bonus   hola (p12250)"},{"location":"Q4bonus%20-%20hola%20%28p12250%29/#q4bonus-hola-p12250","text":"English, Spanish, German, French, Italian and Russian are the 6 most prominent languages in the countries of European Union. Figure on the left shows intensity of English speaking people in different European countries. All of these languages have different words to repre- sent the English word \u201cHELLO\u201d. For example in Spanish the word equivalent to \u201cHELLO\u201d is \u201cHOLA\u201d. In German, French, Italian and Rus- sian language the word that means (or simi- lar to) \u201cHELLO\u201d is \u201cHALLO\u201d, \u201cBONJOUR\u201d, \u201cCIAO\u201d and \u201cZDRAVSTVUJTE\u201d respectively. In this problem your task is pretty simple. You will be given one of the six words mentioned above or any other word and you will have to try and detect the language it is from.","title":"Q4bonus - hola (p12250)"},{"location":"Q4bonus%20-%20hola%20%28p12250%29/#input","text":"Each input contains a string S. You can assume that all the letters of the string are uppercase English letters and the maximum length of the string is 14.","title":"Input"},{"location":"Q4bonus%20-%20hola%20%28p12250%29/#output","text":"This line contains the serial of output followed by a language name. If the input string is \u2018HELLO\u2019 or \u2018HOLA\u2019 or \u2018HALLO\u2019 or \u2018BONJOUR\u2019 or \u2018CIAO\u2019 or \u2018ZDRAVSTVUJTE\u2019 then you should report the language it belongs to. If the input string is something other than these 6 strings print the string \u2018UNKNOWN\u2019 (without the quotes) instead. All characters in the output strings are uppercase as well. Look at the output for sample input for formatting details.","title":"Output"},{"location":"Q4bonus%20-%20hola%20%28p12250%29/#sample-input-output","text":"Sample Input Sample Output HELLO ENGLISH HOLA SPANISH HALLO GERMAN BONJOUR FRENCH CIAO ITALIAN ZDRAVSTUJTE RUSSIAN","title":"Sample Input/ Output"},{"location":"Q4bonus%20-%20hola%20%28p12250%29/#codepost-guide","text":"Create a program that solves the problem and rename the file hola.cpp . Upload the file to codepost.io sample compile command: g++ -o hola hola.cpp sample run command: ./hola HELLO corresponding output: ENGLISH","title":"Codepost guide"},{"location":"Q4bonus%20-%20hola%20%28p12250%29/#working-template-code","text":"/******************************************************* * * Q4bonus - hola (p12250) * * If the input string is \u2018HELLO\u2019 or \u2018HOLA\u2019 or \u2018HALLO\u2019 or \u2018BONJOUR\u2019 or \u2018CIAO\u2019 or \u2018ZDRAVSTVUJTE\u2019 * then you should report the language it belongs to. * If the input string is something other than these 6 strings print the string \u2018UNKNOWN\u2019 * sample compile command: g++ -o hola hola.cpp sample run command: ./hola HELLO corresponding output: ENGLISH * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { string S = input_array[1]; // change the code below to solve the problem cout << S << endl; }","title":"Working template code"},{"location":"Q4bonus%20-%20holiday%20%28p12372%29/","text":"Q4bonus - holiday (p12372) Mr. Bean used to have a lot of problems packing his suitcase for holiday. So he is very careful for this coming holiday. He is more serious this time because he is going to meet his fiance and he is also keeping frequent communication with you as a programmer friend to have suggestions. He gets confused when he buys a gift box for his fiance because he can\u2019t decide whether it will fit in his suitcase or not. Sometimes a box doesn\u2019t fit in his suitcase in one orientation and after rotating the box to a different orientation it fits in the suitcase. This type of behavior makes him puzzled. So to make things much simpler he bought another suitcase having same length, width and height, which is 20 inches. This measurement is taken from inside of the box. So a box which has length, width and height of 20 inches will just fit in this suitcase. He also decided to buy only rectangular shaped boxes and keep a measuring tape in his pocket. Whenever he chooses one gift box, which must be rectangular shaped, he quickly measures the length, width and height of the box. But still he can\u2019t decide whether it will fit in his suitcase or not. Now he needs your help. Please write a program for him which calculates whether a rectangular box fits in his suitcase or not provided the length, width and height of the box. Note that, sides of the box must be parallel to the sides of the suitcase. Input Each input line contains three integers L, W and H (1 \u2264 L, W, H \u2264 50) denoting the length, width and height of a rectangular shaped box. Output If the box fits in the suitcase in any orientation having the sides of the box is parallel to the sides of the suitcase, this line will be \u2018good fit\u2019, otherwise it will be \u2018bad fit\u2019. Sample Input / Output Sample Input Sample Output 20 20 20 good fit 1 2 21 bad fit Codepost Guide Create a program to solve the problem and rename it to holiday.cpp . Upload the file to codepost.io sample compile command: g++ -o holiday holiday.cpp sample run command: ./holiday 20 20 20 corresponding output: good fit","title":"Q4bonus   holiday (p12372)"},{"location":"Q4bonus%20-%20holiday%20%28p12372%29/#q4bonus-holiday-p12372","text":"Mr. Bean used to have a lot of problems packing his suitcase for holiday. So he is very careful for this coming holiday. He is more serious this time because he is going to meet his fiance and he is also keeping frequent communication with you as a programmer friend to have suggestions. He gets confused when he buys a gift box for his fiance because he can\u2019t decide whether it will fit in his suitcase or not. Sometimes a box doesn\u2019t fit in his suitcase in one orientation and after rotating the box to a different orientation it fits in the suitcase. This type of behavior makes him puzzled. So to make things much simpler he bought another suitcase having same length, width and height, which is 20 inches. This measurement is taken from inside of the box. So a box which has length, width and height of 20 inches will just fit in this suitcase. He also decided to buy only rectangular shaped boxes and keep a measuring tape in his pocket. Whenever he chooses one gift box, which must be rectangular shaped, he quickly measures the length, width and height of the box. But still he can\u2019t decide whether it will fit in his suitcase or not. Now he needs your help. Please write a program for him which calculates whether a rectangular box fits in his suitcase or not provided the length, width and height of the box. Note that, sides of the box must be parallel to the sides of the suitcase.","title":"Q4bonus - holiday (p12372)"},{"location":"Q4bonus%20-%20holiday%20%28p12372%29/#input","text":"Each input line contains three integers L, W and H (1 \u2264 L, W, H \u2264 50) denoting the length, width and height of a rectangular shaped box.","title":"Input"},{"location":"Q4bonus%20-%20holiday%20%28p12372%29/#output","text":"If the box fits in the suitcase in any orientation having the sides of the box is parallel to the sides of the suitcase, this line will be \u2018good fit\u2019, otherwise it will be \u2018bad fit\u2019.","title":"Output"},{"location":"Q4bonus%20-%20holiday%20%28p12372%29/#sample-input-output","text":"Sample Input Sample Output 20 20 20 good fit 1 2 21 bad fit","title":"Sample Input / Output"},{"location":"Q4bonus%20-%20holiday%20%28p12372%29/#codepost-guide","text":"Create a program to solve the problem and rename it to holiday.cpp . Upload the file to codepost.io sample compile command: g++ -o holiday holiday.cpp sample run command: ./holiday 20 20 20 corresponding output: good fit","title":"Codepost Guide"},{"location":"Q4bonus%20-%20master%20lock%20%28p10550%29/","text":"Q4bonus - master lock (p10550) Now that you\u2019re back to school for another term, you need to remember how to work the combination lock on your locker. A common design is that of the Master Brand, shown at right. The lock has a dial with 40 calibration marks numbered 0 to 39. A combination consists of 3 of these numbers; for example: 15-25-8. To open the lock, the following steps are taken: \u2022 turn the dial clockwise 2 full turns \u2022 stop at the first number of the combination \u2022 turn the dial counter-clockwise 1 full turn \u2022 continue turning counter-clockwise until the 2nd number is reached \u2022 turn the dial clockwise again until the 3rd number is reached \u2022 pull the shank and the lock will open. Given the initial position of the dial and the combination for the lock, how many degrees is the dial rotated in total (clockwise plus counter-clockwise) in opening the lock? Input For each case there is a line of input containing 4 numbers between 0 and 39. The first number is the position of the dial. The next three numbers are the combination. Consecutive numbers in the combination will be distinct. Output For each case, print a line with a single integer: the number of degrees that the dial must be turned to open the lock. Sample Input/ Output Sample Input Sample Output 0 30 0 30 1350 degrees 5 35 5 35 1350 degrees 0 20 0 20 1620 degrees 7 27 7 27 1620 degrees 0 10 0 10 1890 degrees 9 19 9 19 1890 degrees Codepost Guide Create the solution and rename the file to lock.cpp . Upload the file to codepost.io sample compile command: g++ -o lock lock.cpp sample run command: ./lock 0 30 0 30 corresponding output: 1350 degrees Working Template Code /******************************************************* * * Q4bonus - master lock (p10550) * * Given the starting position in a Master (tm) Lock, * and the combination, calculate the total degrees * of clockwise and counter-clockwise rotation needed * to open the lock * sample compile command: g++ -o lock lock.cpp sample run command: ./lock 0 30 0 30 corresponding output: 1350 degrees * * ****************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int arr[4] = { atoi(input_array[1]) , atoi(input_array[2]) , atoi(input_array[3]) , atoi(input_array[4]) }; // change the following to solve the problem cout << arr[0] << \" \" << arr[1] << \" \" << arr[2] << \" \" << arr[3] << \" degrees\" << endl; }","title":"Q4bonus   master lock (p10550)"},{"location":"Q4bonus%20-%20master%20lock%20%28p10550%29/#q4bonus-master-lock-p10550","text":"Now that you\u2019re back to school for another term, you need to remember how to work the combination lock on your locker. A common design is that of the Master Brand, shown at right. The lock has a dial with 40 calibration marks numbered 0 to 39. A combination consists of 3 of these numbers; for example: 15-25-8. To open the lock, the following steps are taken: \u2022 turn the dial clockwise 2 full turns \u2022 stop at the first number of the combination \u2022 turn the dial counter-clockwise 1 full turn \u2022 continue turning counter-clockwise until the 2nd number is reached \u2022 turn the dial clockwise again until the 3rd number is reached \u2022 pull the shank and the lock will open. Given the initial position of the dial and the combination for the lock, how many degrees is the dial rotated in total (clockwise plus counter-clockwise) in opening the lock?","title":"Q4bonus - master lock (p10550)"},{"location":"Q4bonus%20-%20master%20lock%20%28p10550%29/#input","text":"For each case there is a line of input containing 4 numbers between 0 and 39. The first number is the position of the dial. The next three numbers are the combination. Consecutive numbers in the combination will be distinct.","title":"Input"},{"location":"Q4bonus%20-%20master%20lock%20%28p10550%29/#output","text":"For each case, print a line with a single integer: the number of degrees that the dial must be turned to open the lock.","title":"Output"},{"location":"Q4bonus%20-%20master%20lock%20%28p10550%29/#sample-input-output","text":"Sample Input Sample Output 0 30 0 30 1350 degrees 5 35 5 35 1350 degrees 0 20 0 20 1620 degrees 7 27 7 27 1620 degrees 0 10 0 10 1890 degrees 9 19 9 19 1890 degrees","title":"Sample Input/ Output"},{"location":"Q4bonus%20-%20master%20lock%20%28p10550%29/#codepost-guide","text":"Create the solution and rename the file to lock.cpp . Upload the file to codepost.io sample compile command: g++ -o lock lock.cpp sample run command: ./lock 0 30 0 30 corresponding output: 1350 degrees","title":"Codepost Guide"},{"location":"Q4bonus%20-%20master%20lock%20%28p10550%29/#working-template-code","text":"/******************************************************* * * Q4bonus - master lock (p10550) * * Given the starting position in a Master (tm) Lock, * and the combination, calculate the total degrees * of clockwise and counter-clockwise rotation needed * to open the lock * sample compile command: g++ -o lock lock.cpp sample run command: ./lock 0 30 0 30 corresponding output: 1350 degrees * * ****************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int arr[4] = { atoi(input_array[1]) , atoi(input_array[2]) , atoi(input_array[3]) , atoi(input_array[4]) }; // change the following to solve the problem cout << arr[0] << \" \" << arr[1] << \" \" << arr[2] << \" \" << arr[3] << \" degrees\" << endl; }","title":"Working Template Code"},{"location":"Q4bonus%20-%20parking%20%28p11364%29/","text":"Q4bonus - parking (p11364) When shopping on Long Street, Michael usually parks his car at some random location, and then walks to the stores he needs. Can you help Michael choose a place to park which minimises the distance he needs to walk on his shopping round? Long Street is a straight line, where all positions are integer. You pay for parking in a specific slot, which is an integer position on Long Street. Michael does not want to pay for more than one parking though. He is very strong, and does not mind carrying all the bags around. Input The first number gives the number of stores Michael wants to visit, 1 \u2264 n \u2264 20, and the following numbers give their n integer positions on Long Street, 0 \u2264 x i \u2264 99. Output Output for each test case a line with the minimal distance Michael must walk given optimal parking. Sample Input / Output Input Output 4 24 13 89 37 152 6 7 30 41 14 39 42 70 Codepost guide Solve the problem and rename the file into parking.cpp . Upload the file to codepost.io sample compile command: g++ -o parking parking.cpp sample run command: ./parking 4 24 13 89 37 corresponding output: 152 Working code template /******************************************************* * * Q4bonus - parking (p11364) * * Given the optimal parking in a Long Street * what is the minimum walk distance needed to visit * a given number of shops * sample compile command: g++ -o parking parking.cpp sample run command: ./parking 4 24 13 89 37 corresponding output: 152 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int shop_count = atoi( input_array[1] ); // change the code below to solve the problem vector<int> v ; for (int i=0; i<shop_count; i++){ v.push_back( atoi(input_array[i+2] )); } for( auto &x : v ){ cout << x << \" \"; } cout << endl; }","title":"Q4bonus   parking (p11364)"},{"location":"Q4bonus%20-%20parking%20%28p11364%29/#q4bonus-parking-p11364","text":"When shopping on Long Street, Michael usually parks his car at some random location, and then walks to the stores he needs. Can you help Michael choose a place to park which minimises the distance he needs to walk on his shopping round? Long Street is a straight line, where all positions are integer. You pay for parking in a specific slot, which is an integer position on Long Street. Michael does not want to pay for more than one parking though. He is very strong, and does not mind carrying all the bags around.","title":"Q4bonus - parking (p11364)"},{"location":"Q4bonus%20-%20parking%20%28p11364%29/#input","text":"The first number gives the number of stores Michael wants to visit, 1 \u2264 n \u2264 20, and the following numbers give their n integer positions on Long Street, 0 \u2264 x i \u2264 99.","title":"Input"},{"location":"Q4bonus%20-%20parking%20%28p11364%29/#output","text":"Output for each test case a line with the minimal distance Michael must walk given optimal parking.","title":"Output"},{"location":"Q4bonus%20-%20parking%20%28p11364%29/#sample-input-output","text":"Input Output 4 24 13 89 37 152 6 7 30 41 14 39 42 70","title":"Sample Input / Output"},{"location":"Q4bonus%20-%20parking%20%28p11364%29/#codepost-guide","text":"Solve the problem and rename the file into parking.cpp . Upload the file to codepost.io sample compile command: g++ -o parking parking.cpp sample run command: ./parking 4 24 13 89 37 corresponding output: 152","title":"Codepost guide"},{"location":"Q4bonus%20-%20parking%20%28p11364%29/#working-code-template","text":"/******************************************************* * * Q4bonus - parking (p11364) * * Given the optimal parking in a Long Street * what is the minimum walk distance needed to visit * a given number of shops * sample compile command: g++ -o parking parking.cpp sample run command: ./parking 4 24 13 89 37 corresponding output: 152 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int shop_count = atoi( input_array[1] ); // change the code below to solve the problem vector<int> v ; for (int i=0; i<shop_count; i++){ v.push_back( atoi(input_array[i+2] )); } for( auto &x : v ){ cout << x << \" \"; } cout << endl; }","title":"Working code template"},{"location":"Q4bonus%20-%20recession%20%28p111727%29/","text":"Q4bonus - recession (p111727) Company XYZ have been badly hit by recession and is taking a lot of cost cutting measures. Some of these measures include giving up office space, going open source, reducing incentives, cutting on luxuries and issuing pink slips. They have got three (3) employees working in the accounts department and are going to lay-off two (2) of them. After a series of meetings, they have decided to dislodge the person who gets the most salary and the one who gets the least. This is usually the general trend during crisis like this. You will be given the salaries of these 3 employees working in the accounts department. You have to find out the salary of the person who survives. Input Each case consists of a line with 3 distinct positive integers. These 3 integers represent the daily salaries of the three employees in Philippine pesos. All these integers will be in the range [1000, 10000]. Output For each case, output the salary of the person who survives. Sample input Sample output 1000 2000 3000 Php2000 3000 2500 1500 Php2500 1500 1200 1800 Php1500 Codepost Guide Create a program that solves the problem and name it recession.cpp . Upload the file to codepost.io Sample compile command: g++ -o recession recession.cpp Sample run command: ./recession 1500 1200 1800 Corresponding output: Php1500 Working Template Code /******************************************************* * * Q4bonus - recession (p111727) * * Output the middle salary * Sample compile command: g++ -o recession recession.cpp Sample run command: ./recession 1500 1200 1800 Corresponding output: Php1500 * * ****************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int a = atoi( input_array[1]); int b = atoi( input_array[2]); int c = atoi( input_array[3]); // change the following code to solve the problem cout << a << \" \" << b << \" \" << c << endl; }","title":"Q4bonus   recession (p111727)"},{"location":"Q4bonus%20-%20recession%20%28p111727%29/#q4bonus-recession-p111727","text":"Company XYZ have been badly hit by recession and is taking a lot of cost cutting measures. Some of these measures include giving up office space, going open source, reducing incentives, cutting on luxuries and issuing pink slips. They have got three (3) employees working in the accounts department and are going to lay-off two (2) of them. After a series of meetings, they have decided to dislodge the person who gets the most salary and the one who gets the least. This is usually the general trend during crisis like this. You will be given the salaries of these 3 employees working in the accounts department. You have to find out the salary of the person who survives.","title":"Q4bonus - recession (p111727)"},{"location":"Q4bonus%20-%20recession%20%28p111727%29/#input","text":"Each case consists of a line with 3 distinct positive integers. These 3 integers represent the daily salaries of the three employees in Philippine pesos. All these integers will be in the range [1000, 10000].","title":"Input"},{"location":"Q4bonus%20-%20recession%20%28p111727%29/#output","text":"For each case, output the salary of the person who survives. Sample input Sample output 1000 2000 3000 Php2000 3000 2500 1500 Php2500 1500 1200 1800 Php1500","title":"Output"},{"location":"Q4bonus%20-%20recession%20%28p111727%29/#codepost-guide","text":"Create a program that solves the problem and name it recession.cpp . Upload the file to codepost.io Sample compile command: g++ -o recession recession.cpp Sample run command: ./recession 1500 1200 1800 Corresponding output: Php1500","title":"Codepost Guide"},{"location":"Q4bonus%20-%20recession%20%28p111727%29/#working-template-code","text":"/******************************************************* * * Q4bonus - recession (p111727) * * Output the middle salary * Sample compile command: g++ -o recession recession.cpp Sample run command: ./recession 1500 1200 1800 Corresponding output: Php1500 * * ****************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int a = atoi( input_array[1]); int b = atoi( input_array[2]); int c = atoi( input_array[3]); // change the following code to solve the problem cout << a << \" \" << b << \" \" << c << endl; }","title":"Working Template Code"},{"location":"Q4bonus%20-%20setu%20%28p12403%29/","text":"Q4bonus - setu (p12403) Rahaduzzaman Setu, (Roll - 12) of 13th batch, CSE, University of Dhaka is tremendously ill. He has been suffering from Multi Drug Resistant TB for a long time. Now, his left lung is damaged and beyond repair. No medicine is working on his body to ease his pain. It is urgent to operate on his left lung so that the disease doesn\u2019t spread to his right lung. It can either be removed through surgery or transplanted. He comes from a modest family and it is difficult and impossible for them to bare his medical expenses anymore. Because of the money needed (12 million BDT) to transplant, it is his family\u2019s decision to go with the surgery (3 million BDT). We must help them financially by raising money. But we must not be confined with that amount only to do the surgery. We must go for the Transplant. Our target will be to collect as much as possible to help our friend. If anyone wants to contribute now, please send me your contribution or contact me. Please contribute as much as you can to save a life that you saw every week for the first two years of your University life. Please contribute as per your abilities. Our combined effort may save a life. For more information, consult the link below. http://supportsetu.com/ However, in this problem, you have to build a software that can calculate the donations. Initially the total amount of money is 0 and in each time, two types of operations will be there. 1) \u2018donate K\u2019 (100 \u2264 K \u2264 10^5 ), then you have to add K to the account. 2) \u2018report\u2019, report all the money currently in the account. Input The first number of the input will contain T (1 \u2264 T \u2264 100) denoting the number of operations. Then there will be T lines each containing two types of operations as given. You may assume that the input follows the restrictions above. Output For each \u2018report\u2019 operation, print the total amount of money in the account. Codepost Guide Create a program to solve the problem and rename it to setu.cpp . Upload the file to codepost.io sample compile command: g++ -o setu setu.cpp sample run command: ./setu 4 donate 1000 report donate 500 report corresponding output: 1000 1500 Working Code Template /******************************************************* * * Q4bonus - setu (p12403) * \u2018donate K\u2019 (100 \u2264 K \u2264 10^5 ), then you have to add K to the account. \u2018report\u2019, report all the money currently in the account. * sample compile command: g++ -o setu setu.cpp sample run command: ./setu 4 donate 1000 report donate 500 report corresponding output: 1000 1500 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int amount =0; int count = input_count -2 ; // change the code below to solve the problem vector<string> v; for (int i=0; i<count ; i++){ v.push_back( input_array[i+2] ); } for (auto &x : v){ cout << x << \" \" ; } cout << endl;","title":"Q4bonus   setu (p12403)"},{"location":"Q4bonus%20-%20setu%20%28p12403%29/#q4bonus-setu-p12403","text":"Rahaduzzaman Setu, (Roll - 12) of 13th batch, CSE, University of Dhaka is tremendously ill. He has been suffering from Multi Drug Resistant TB for a long time. Now, his left lung is damaged and beyond repair. No medicine is working on his body to ease his pain. It is urgent to operate on his left lung so that the disease doesn\u2019t spread to his right lung. It can either be removed through surgery or transplanted. He comes from a modest family and it is difficult and impossible for them to bare his medical expenses anymore. Because of the money needed (12 million BDT) to transplant, it is his family\u2019s decision to go with the surgery (3 million BDT). We must help them financially by raising money. But we must not be confined with that amount only to do the surgery. We must go for the Transplant. Our target will be to collect as much as possible to help our friend. If anyone wants to contribute now, please send me your contribution or contact me. Please contribute as much as you can to save a life that you saw every week for the first two years of your University life. Please contribute as per your abilities. Our combined effort may save a life. For more information, consult the link below. http://supportsetu.com/ However, in this problem, you have to build a software that can calculate the donations. Initially the total amount of money is 0 and in each time, two types of operations will be there. 1) \u2018donate K\u2019 (100 \u2264 K \u2264 10^5 ), then you have to add K to the account. 2) \u2018report\u2019, report all the money currently in the account.","title":"Q4bonus - setu (p12403)"},{"location":"Q4bonus%20-%20setu%20%28p12403%29/#input","text":"The first number of the input will contain T (1 \u2264 T \u2264 100) denoting the number of operations. Then there will be T lines each containing two types of operations as given. You may assume that the input follows the restrictions above.","title":"Input"},{"location":"Q4bonus%20-%20setu%20%28p12403%29/#output","text":"For each \u2018report\u2019 operation, print the total amount of money in the account.","title":"Output"},{"location":"Q4bonus%20-%20setu%20%28p12403%29/#codepost-guide","text":"Create a program to solve the problem and rename it to setu.cpp . Upload the file to codepost.io sample compile command: g++ -o setu setu.cpp sample run command: ./setu 4 donate 1000 report donate 500 report corresponding output: 1000 1500","title":"Codepost Guide"},{"location":"Q4bonus%20-%20setu%20%28p12403%29/#working-code-template","text":"/******************************************************* * * Q4bonus - setu (p12403) * \u2018donate K\u2019 (100 \u2264 K \u2264 10^5 ), then you have to add K to the account. \u2018report\u2019, report all the money currently in the account. * sample compile command: g++ -o setu setu.cpp sample run command: ./setu 4 donate 1000 report donate 500 report corresponding output: 1000 1500 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int amount =0; int count = input_count -2 ; // change the code below to solve the problem vector<string> v; for (int i=0; i<count ; i++){ v.push_back( input_array[i+2] ); } for (auto &x : v){ cout << x << \" \" ; } cout << endl;","title":"Working Code Template"},{"location":"Q4bonus%20-%20tapmaster%20%28p11547%29/","text":"Q4bonus - tapmaster (p11547) Last month Alice nonchalantly entered her name in a draw for a Tapmaster 4000. Upon checking her mail today, she found a letter that read: \u201cCongratulations, Alice! You have won a Tapmaster 4000. To claim your prize, you must answer the following skill testing question.\u201d Alice\u2019s initial feelings of surprised joy turned quickly to those of dismay. Her lifetime record for skill testing questions is an abysmal 3 right and 42 wrong. Mad Skills, the leading skill testing question development company, was hired to provide skill testing questions for this particular Tapmaster 4000 draw. They decided to create a different skill testing question to each winner so that the winners could not collaborate to answer the question. Can you help Alice win the Tapmaster 4000 by solving the skill testing question? Input The input begins with t (1 \u2264 t \u2264 100), the number of test cases. Each test case contains an integer n (\u22121000 \u2264 n \u2264 1000) on a line by itself. This n should be substituted into the skill testing question below. Output For each test case, output the answer to the following skill testing question on a line by itself: \u201cMultiply n by 567, then divide the result by 9, then add 7492, then multiply by 235, then divide by 47, then subtract 498. What is the digit in the tens column?\u201d Sample Input/ Output Input Output 637 1 -120 3 Codepost guide Create a program to solve the problem and rename it into tapmaster.cppI . Upload the code to codepost.io sample compile command: g++ -o tapmaster tapmaster.cpp sample run command: ./tapmaster 637 corresponding output: 1 Working template code /******************************************************* * * Q4bonus - tapmaster (p11547) * * \u201cMultiply n by 567, then divide the result by 9, then add 7492, then multiply by 235, then divide by 47, then subtract 498. What is the digit in the tens column?\u201d * sample compile command: g++ -o tapmaster tapmaster.cpp sample run command: ./tapmaster 637 corresponding output: 1 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int n = atoi( input_array[1]); // change the code below to solve the problem cout << n << endl; }","title":"Q4bonus   tapmaster (p11547)"},{"location":"Q4bonus%20-%20tapmaster%20%28p11547%29/#q4bonus-tapmaster-p11547","text":"Last month Alice nonchalantly entered her name in a draw for a Tapmaster 4000. Upon checking her mail today, she found a letter that read: \u201cCongratulations, Alice! You have won a Tapmaster 4000. To claim your prize, you must answer the following skill testing question.\u201d Alice\u2019s initial feelings of surprised joy turned quickly to those of dismay. Her lifetime record for skill testing questions is an abysmal 3 right and 42 wrong. Mad Skills, the leading skill testing question development company, was hired to provide skill testing questions for this particular Tapmaster 4000 draw. They decided to create a different skill testing question to each winner so that the winners could not collaborate to answer the question. Can you help Alice win the Tapmaster 4000 by solving the skill testing question?","title":"Q4bonus - tapmaster (p11547)"},{"location":"Q4bonus%20-%20tapmaster%20%28p11547%29/#input","text":"The input begins with t (1 \u2264 t \u2264 100), the number of test cases. Each test case contains an integer n (\u22121000 \u2264 n \u2264 1000) on a line by itself. This n should be substituted into the skill testing question below.","title":"Input"},{"location":"Q4bonus%20-%20tapmaster%20%28p11547%29/#output","text":"For each test case, output the answer to the following skill testing question on a line by itself: \u201cMultiply n by 567, then divide the result by 9, then add 7492, then multiply by 235, then divide by 47, then subtract 498. What is the digit in the tens column?\u201d","title":"Output"},{"location":"Q4bonus%20-%20tapmaster%20%28p11547%29/#sample-input-output","text":"Input Output 637 1 -120 3","title":"Sample Input/ Output"},{"location":"Q4bonus%20-%20tapmaster%20%28p11547%29/#codepost-guide","text":"Create a program to solve the problem and rename it into tapmaster.cppI . Upload the code to codepost.io sample compile command: g++ -o tapmaster tapmaster.cpp sample run command: ./tapmaster 637 corresponding output: 1","title":"Codepost guide"},{"location":"Q4bonus%20-%20tapmaster%20%28p11547%29/#working-template-code","text":"/******************************************************* * * Q4bonus - tapmaster (p11547) * * \u201cMultiply n by 567, then divide the result by 9, then add 7492, then multiply by 235, then divide by 47, then subtract 498. What is the digit in the tens column?\u201d * sample compile command: g++ -o tapmaster tapmaster.cpp sample run command: ./tapmaster 637 corresponding output: 1 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int n = atoi( input_array[1]); // change the code below to solve the problem cout << n << endl; }","title":"Working template code"},{"location":"RPAD%20OED%202021-03-30T18.10.55/","text":"RPAD OED 2021-03-30T18.10.55 To Delete No file chosen rpad oed rpad.oed@pshs.edu.ph Suspended by admin Last sign in: About 7 hours ago Created: Nov 24, 2011 Organizational Unit pshs.edu.ph > PSHS System Mail storage 15.59 GB Drive storage 44.78 GB Shared drives Showing 4 shared drives for rpad Drive Name Committee 26: Bridging Program PSHSS Research SIP Main SIP Output 2018","title":"RPAD OED 2021 03 30T18.10.55"},{"location":"RPAD%20OED%202021-03-30T18.10.55/#rpad-oed-2021-03-30t181055","text":"","title":"RPAD OED 2021-03-30T18.10.55"},{"location":"RPAD%20OED%202021-03-30T18.10.55/#to-delete","text":"No file chosen rpad oed rpad.oed@pshs.edu.ph Suspended by admin Last sign in: About 7 hours ago Created: Nov 24, 2011 Organizational Unit pshs.edu.ph > PSHS System Mail storage 15.59 GB Drive storage 44.78 GB Shared drives Showing 4 shared drives for rpad Drive Name Committee 26: Bridging Program PSHSS Research SIP Main SIP Output 2018","title":"To Delete"},{"location":"Robbin%27s%20Edge/","text":"Robbin's Edge + emotions - emotions grateful overwhelmed wealthy weak hopeful sickly blessed unreliable","title":"Robbin's Edge"},{"location":"Robbin%27s%20Edge/#robbins-edge","text":"+ emotions - emotions grateful overwhelmed wealthy weak hopeful sickly blessed unreliable","title":"Robbin's Edge"},{"location":"Saving%20ArrayLists%20to%20a%20file/","text":"Saving ArrayLists to a file write an ArrayList into a text file java import java.io.FileWriter; ... FileWriter writer = new FileWriter(\"output.txt\"); for(String str: arr) { writer.write(str + System.lineSeparator()); } writer.close(); define your array as: arrayList<String> arr = new ArrayList<String>(); arr is the name of the variable that holds reference to array output.txt will be in current working directory (i.e. directory from which you started your java program)","title":"Saving ArrayLists to a file"},{"location":"Saving%20ArrayLists%20to%20a%20file/#saving-arraylists-to-a-file","text":"write an ArrayList into a text file java import java.io.FileWriter; ... FileWriter writer = new FileWriter(\"output.txt\"); for(String str: arr) { writer.write(str + System.lineSeparator()); } writer.close(); define your array as: arrayList<String> arr = new ArrayList<String>(); arr is the name of the variable that holds reference to array output.txt will be in current working directory (i.e. directory from which you started your java program)","title":"Saving ArrayLists to a file"},{"location":"So%2C%20you%20want%20to%20learn%20AWS%20AKA%2C%20How%20do%20I%20learn%20to%20be%20a%20Cloud%20Engineer%20sysadmin/","text":"So, you want to learn AWS AKA, How do I learn to be a Cloud Engineer sysadmin https://www.reddit.com/r/sysadmin/comments/8inzn5/so_you_want_to_learn_aws_aka_how_do_i_learn_to_be/ So many people struggle with where to get started with AWS and cloud technologies in general. There is popular \"How do I learn to be a Linux admin?\" post that inspired me to write an equivalent for cloud technologies. This post serves as a guide of goals to grow from basic AWS knowledge to understanding and deploying complex architectures in an automated way. Feel free to pick up where you feel relevant based on prior experience. Assumptions: You have basic-to-moderate Linux systems administration skills You are at least familiar with programming/scripting. You don't need to be a whiz but you should have some decent hands-on experience automating and programming. You are willing to dedicate the time to overcome complex issues. You have an AWS Account and a marginal amount of money to spend improving your skills. How to use this guide: This is not a step by step how-to guide. You should take each goal and \"figure it out\". I have hints to guide you in the right direction. Google is your friend. AWS Documentation is your friend. Stack Overflow is your friend. Find out and implement the \"right way\", not the quick way. Ok, maybe do the quick way first then refactor to the right way before moving on. Shut down or de-provision as much as you can between learning sessions. You should be able to do everything in this guide for literally less than $50 using the AWS Free Tier. Rebuilding often will reinforce concepts anyway. Skip ahead and read the Cost Analysis and Automation sections and have them in the back of your mind as you work through the goals. Lastly, just get hands on, no better time to start then NOW. Project Overview This is NOT a guide on how to develop websites on AWS. This uses a website as an excuse to use all the technologies AWS puts at your fingertips. The concepts you will learn going through these exercises apply all over AWS. This guide takes you through a maturity process from the most basic webpage to an extremely cheap scalable web application. The small app you will build does not matter. It can do anything you want, just keep it simple. Need an idea? Here: Fortune-of-the-Day - Display a random fortune each page load, have a box at the bottom and a submit button to add a new fortune to the random fortune list. Account Basics Create an IAM user for your personal use. Set up MFA for your root user, turn off all root user API keys. Set up Billing Alerts for anything over a few dollars. Configure the AWS CLI for your user using API credentials. Checkpoint: You can use the AWS CLI to interrogate information about your AWS account. Web Hosting Basics Deploy a EC2 VM and host a simple static \"Fortune-of-the-Day Coming Soon\" web page. Take a snapshot of your VM, delete the VM, and deploy a new one from the snapshot. Basically disk backup + disk restore. Checkpoint: You can view a simple HTML page served from your EC2 instance. Auto Scaling Create an AMI from that VM and put it in an autoscaling group so one VM always exists. Put a Elastic Load Balancer infront of that VM and load balance between two Availability Zones (one EC2 in each AZ). Checkpoint: You can view a simple HTML page served from both of your EC2 instances. You can turn one off and your website is still accessible. External Data Create a DynamoDB table and experiment with loading and retrieving data manually, then do the same via a script on your local machine. Refactor your static page into your Fortune-of-the-Day website (Node, PHP, Python, whatever) which reads/updates a list of fortunes in the AWS DynamoDB table. (Hint: EC2 Instance Role) Checkpoint: Your HA/AutoScaled website can now load/save data to a database between users and sessions Web Hosting Platform-as-a-Service Retire that simple website and re-deploy it on Elastic Beanstalk. Create a S3 Static Website Bucket, upload some sample static pages/files/images. Add those assets to your Elastic Beanstalk website. Register a domain (or re-use and existing one). Set Route53 as the Nameservers and use Route53 for DNS. Make www.yourdomain.com go to your Elastic Beanstalk. Make static.yourdomain.com serve data from the S3 bucket. Enable SSL for your Static S3 Website. This isn't exactly trivial. (Hint: CloudFront + ACM) Enable SSL for your Elastic Beanstalk Website. Checkpoint: Your HA/AutoScaled website now serves all data over HTTPS. The same as before, except you don't have to manage the servers, web server software, website deployment, or the load balancer. Microservices Refactor your EB website into ONLY providing an API. It should only have a POST/GET to update/retrieve that specific data from DynamoDB. Bonus: Make it a simple REST API. Get rid of www.yourdomain.com and serve this EB as api.yourdomain.com Move most of the UI piece of your EB website into your Static S3 Website and use Javascript/whatever to retrieve the data from your api.yourdomain.com URL on page load. Send data to the EB URL to have it update the DynamoDB. Get rid of static.yourdomain.com and change your S3 bucket to serve from www.yourdomain.com. Checkpoint: Your EB deployment is now only a structured way to retrieve data from your database. All of your UI and application logic is served from the S3 Bucket (via CloudFront). You can support many more users since you're no longer using expensive servers to serve your website's static data. Serverless Write a AWS Lambda function to email you a list of all of the Fortunes in the DynamoDB table every night. Implement Least Privilege security for the Lambda Role. (Hint: Lambda using Python 3, Boto3, Amazon SES, scheduled with CloudWatch) Refactor the above app into a Serverless app. This is where it get's a little more abstract and you'll have to do a lot of research, experimentation on your own. The architecture: Static S3 Website Front-End calls API Gateway which executes a Lambda Function which reads/updates data in the DyanmoDB table. Use your SSL enabled bucket as the primary domain landing page with static content. Create an AWS API Gateway, use it to forward HTTP requests to an AWS Lambda function that queries the same data from DynamoDB as your EB Microservice. Your S3 static content should make Javascript calls to the API Gateway and then update the page with the retrieved data. Once you have the \"Get Fortune\" API Gateway + Lambda working, do the \"New Fortune\" API. Checkpoint: Your API Gateway and S3 Bucket are fronted by CloudFront with SSL. You have no EC2 instances deployed. All work is done by AWS services and billed as consumed. Cost Analysis Explore the AWS pricing models and see how pricing is structured for the services you've used. Answer the following for each of the main architectures you built: Roughly how much would this have costed for a month? How would I scale this architecture and how would my costs change? Architectures Basic Web Hosting: HA EC2 Instances Serving Static Web Page behind ELB Microservices: Elastic Beanstalk SSL Website for only API + S3 Static Website for all static content + DynamoDB Table + Route53 + CloudFront SSL Serverless: Serverless Website using API Gateway + Lambda Functions + DynamoDB + Route53 + CloudFront SSL + S3 Static Website for all static content Automation !!! This is REALLY important !!! These technologies are the most powerful when they're automated. You can make a Development environment in minutes and experiment and throw it away without a thought. This stuff isn't easy, but it's where the really skilled people excel. Automate the deployment of the architectures above. Use whatever tool you want. The popular ones are AWS CloudFormation or Teraform. Store your code in AWS CodeCommit or on GitHub. Yes, you can automate the deployment of ALL of the above with native AWS tools. I suggest when you get each app-related section of the done by hand you go back and automate the provisioning of the infrastructure. For example, automate the provisioning of your EC2 instance. Automate the creation of your S3 Bucket with Static Website Hosting enabled, etc. This is not easy, but it is very rewarding when you see it work. Continuous Delivery As you become more familiar with Automating deployments you should explore and implement a Continuous Delivery pipeline. Develop a CI/CD pipeline to automatically update a dev deployment of your infrastructure when new code is published, and then build a workflow to update the production version if approved. Travis CI is a decent SaaS tool, Jenkins has a huge following too, if you want to stick with AWS-specific technologies you'll be looking at CodePipeline. Miscellaneous / Bonus These didn't fit in nicely anywhere but are important AWS topics you should also explore: IAM: You should really learn how to create complex IAM Policies. You would have had to do basic roles+policies for for the EC2 Instance Role and Lambda Execution Role, but there are many advanced features. Networking: Create a new VPC from scratch with multiple subnets (you'll learn a LOT of networking concepts), once that is working create another VPC and peer them together. Get a VM in each subnet to talk to eachother using only their private IP addresses. KMS: Go back and redo the early EC2 instance goals but enable encryption on the disk volumes. Learn how to encrypt an AMI. Final Thoughts I've been recently recruiting for Cloud Systems Engineers and Cloud Systems Administrators. We've interviewed over a dozen local people with relevant resume experience. Every single person we interviewed would probably struggle starting with the DynamoDB/AutoScaling work. I'm finding there are very few people that HAVE ACTUALLY DONE THIS STUFF. Many people are familiar with the concepts, but when pushed for details they don't have answers or admit to just peripheral knowledge. You learn SO MUCH by doing. If you can't find an excuse or get support to do this as part of your job I would find a small but flashy/impressive personal project that you can build and show off as proof of your skills. Open source it on GitHub, make professional documentation, comment as much as is reasonable, and host a demo of the website. Add links to your LinkedIn, reference it on your resume, work it into interview answers, etc. When in a job interview you'll be able to answer all kinds of real-world questions because you've been-there-done-that with most of AWS' major services. I'm happy to hear any feedback. I'm considering making THIS post my flashy/impressive personal project in the form of a GitHub repo with sample code for each step, architecture diagrams, etc.","title":"So, you want to learn AWS AKA, How do I learn to be a Cloud Engineer sysadmin"},{"location":"So%2C%20you%20want%20to%20learn%20AWS%20AKA%2C%20How%20do%20I%20learn%20to%20be%20a%20Cloud%20Engineer%20sysadmin/#so-you-want-to-learn-aws-aka-how-do-i-learn-to-be-a-cloud-engineer-sysadmin","text":"https://www.reddit.com/r/sysadmin/comments/8inzn5/so_you_want_to_learn_aws_aka_how_do_i_learn_to_be/ So many people struggle with where to get started with AWS and cloud technologies in general. There is popular \"How do I learn to be a Linux admin?\" post that inspired me to write an equivalent for cloud technologies. This post serves as a guide of goals to grow from basic AWS knowledge to understanding and deploying complex architectures in an automated way. Feel free to pick up where you feel relevant based on prior experience. Assumptions: You have basic-to-moderate Linux systems administration skills You are at least familiar with programming/scripting. You don't need to be a whiz but you should have some decent hands-on experience automating and programming. You are willing to dedicate the time to overcome complex issues. You have an AWS Account and a marginal amount of money to spend improving your skills. How to use this guide: This is not a step by step how-to guide. You should take each goal and \"figure it out\". I have hints to guide you in the right direction. Google is your friend. AWS Documentation is your friend. Stack Overflow is your friend. Find out and implement the \"right way\", not the quick way. Ok, maybe do the quick way first then refactor to the right way before moving on. Shut down or de-provision as much as you can between learning sessions. You should be able to do everything in this guide for literally less than $50 using the AWS Free Tier. Rebuilding often will reinforce concepts anyway. Skip ahead and read the Cost Analysis and Automation sections and have them in the back of your mind as you work through the goals. Lastly, just get hands on, no better time to start then NOW. Project Overview This is NOT a guide on how to develop websites on AWS. This uses a website as an excuse to use all the technologies AWS puts at your fingertips. The concepts you will learn going through these exercises apply all over AWS. This guide takes you through a maturity process from the most basic webpage to an extremely cheap scalable web application. The small app you will build does not matter. It can do anything you want, just keep it simple. Need an idea? Here: Fortune-of-the-Day - Display a random fortune each page load, have a box at the bottom and a submit button to add a new fortune to the random fortune list. Account Basics Create an IAM user for your personal use. Set up MFA for your root user, turn off all root user API keys. Set up Billing Alerts for anything over a few dollars. Configure the AWS CLI for your user using API credentials. Checkpoint: You can use the AWS CLI to interrogate information about your AWS account. Web Hosting Basics Deploy a EC2 VM and host a simple static \"Fortune-of-the-Day Coming Soon\" web page. Take a snapshot of your VM, delete the VM, and deploy a new one from the snapshot. Basically disk backup + disk restore. Checkpoint: You can view a simple HTML page served from your EC2 instance. Auto Scaling Create an AMI from that VM and put it in an autoscaling group so one VM always exists. Put a Elastic Load Balancer infront of that VM and load balance between two Availability Zones (one EC2 in each AZ). Checkpoint: You can view a simple HTML page served from both of your EC2 instances. You can turn one off and your website is still accessible. External Data Create a DynamoDB table and experiment with loading and retrieving data manually, then do the same via a script on your local machine. Refactor your static page into your Fortune-of-the-Day website (Node, PHP, Python, whatever) which reads/updates a list of fortunes in the AWS DynamoDB table. (Hint: EC2 Instance Role) Checkpoint: Your HA/AutoScaled website can now load/save data to a database between users and sessions Web Hosting Platform-as-a-Service Retire that simple website and re-deploy it on Elastic Beanstalk. Create a S3 Static Website Bucket, upload some sample static pages/files/images. Add those assets to your Elastic Beanstalk website. Register a domain (or re-use and existing one). Set Route53 as the Nameservers and use Route53 for DNS. Make www.yourdomain.com go to your Elastic Beanstalk. Make static.yourdomain.com serve data from the S3 bucket. Enable SSL for your Static S3 Website. This isn't exactly trivial. (Hint: CloudFront + ACM) Enable SSL for your Elastic Beanstalk Website. Checkpoint: Your HA/AutoScaled website now serves all data over HTTPS. The same as before, except you don't have to manage the servers, web server software, website deployment, or the load balancer. Microservices Refactor your EB website into ONLY providing an API. It should only have a POST/GET to update/retrieve that specific data from DynamoDB. Bonus: Make it a simple REST API. Get rid of www.yourdomain.com and serve this EB as api.yourdomain.com Move most of the UI piece of your EB website into your Static S3 Website and use Javascript/whatever to retrieve the data from your api.yourdomain.com URL on page load. Send data to the EB URL to have it update the DynamoDB. Get rid of static.yourdomain.com and change your S3 bucket to serve from www.yourdomain.com. Checkpoint: Your EB deployment is now only a structured way to retrieve data from your database. All of your UI and application logic is served from the S3 Bucket (via CloudFront). You can support many more users since you're no longer using expensive servers to serve your website's static data. Serverless Write a AWS Lambda function to email you a list of all of the Fortunes in the DynamoDB table every night. Implement Least Privilege security for the Lambda Role. (Hint: Lambda using Python 3, Boto3, Amazon SES, scheduled with CloudWatch) Refactor the above app into a Serverless app. This is where it get's a little more abstract and you'll have to do a lot of research, experimentation on your own. The architecture: Static S3 Website Front-End calls API Gateway which executes a Lambda Function which reads/updates data in the DyanmoDB table. Use your SSL enabled bucket as the primary domain landing page with static content. Create an AWS API Gateway, use it to forward HTTP requests to an AWS Lambda function that queries the same data from DynamoDB as your EB Microservice. Your S3 static content should make Javascript calls to the API Gateway and then update the page with the retrieved data. Once you have the \"Get Fortune\" API Gateway + Lambda working, do the \"New Fortune\" API. Checkpoint: Your API Gateway and S3 Bucket are fronted by CloudFront with SSL. You have no EC2 instances deployed. All work is done by AWS services and billed as consumed. Cost Analysis Explore the AWS pricing models and see how pricing is structured for the services you've used. Answer the following for each of the main architectures you built: Roughly how much would this have costed for a month? How would I scale this architecture and how would my costs change? Architectures Basic Web Hosting: HA EC2 Instances Serving Static Web Page behind ELB Microservices: Elastic Beanstalk SSL Website for only API + S3 Static Website for all static content + DynamoDB Table + Route53 + CloudFront SSL Serverless: Serverless Website using API Gateway + Lambda Functions + DynamoDB + Route53 + CloudFront SSL + S3 Static Website for all static content Automation !!! This is REALLY important !!! These technologies are the most powerful when they're automated. You can make a Development environment in minutes and experiment and throw it away without a thought. This stuff isn't easy, but it's where the really skilled people excel. Automate the deployment of the architectures above. Use whatever tool you want. The popular ones are AWS CloudFormation or Teraform. Store your code in AWS CodeCommit or on GitHub. Yes, you can automate the deployment of ALL of the above with native AWS tools. I suggest when you get each app-related section of the done by hand you go back and automate the provisioning of the infrastructure. For example, automate the provisioning of your EC2 instance. Automate the creation of your S3 Bucket with Static Website Hosting enabled, etc. This is not easy, but it is very rewarding when you see it work. Continuous Delivery As you become more familiar with Automating deployments you should explore and implement a Continuous Delivery pipeline. Develop a CI/CD pipeline to automatically update a dev deployment of your infrastructure when new code is published, and then build a workflow to update the production version if approved. Travis CI is a decent SaaS tool, Jenkins has a huge following too, if you want to stick with AWS-specific technologies you'll be looking at CodePipeline. Miscellaneous / Bonus These didn't fit in nicely anywhere but are important AWS topics you should also explore: IAM: You should really learn how to create complex IAM Policies. You would have had to do basic roles+policies for for the EC2 Instance Role and Lambda Execution Role, but there are many advanced features. Networking: Create a new VPC from scratch with multiple subnets (you'll learn a LOT of networking concepts), once that is working create another VPC and peer them together. Get a VM in each subnet to talk to eachother using only their private IP addresses. KMS: Go back and redo the early EC2 instance goals but enable encryption on the disk volumes. Learn how to encrypt an AMI. Final Thoughts I've been recently recruiting for Cloud Systems Engineers and Cloud Systems Administrators. We've interviewed over a dozen local people with relevant resume experience. Every single person we interviewed would probably struggle starting with the DynamoDB/AutoScaling work. I'm finding there are very few people that HAVE ACTUALLY DONE THIS STUFF. Many people are familiar with the concepts, but when pushed for details they don't have answers or admit to just peripheral knowledge. You learn SO MUCH by doing. If you can't find an excuse or get support to do this as part of your job I would find a small but flashy/impressive personal project that you can build and show off as proof of your skills. Open source it on GitHub, make professional documentation, comment as much as is reasonable, and host a demo of the website. Add links to your LinkedIn, reference it on your resume, work it into interview answers, etc. When in a job interview you'll be able to answer all kinds of real-world questions because you've been-there-done-that with most of AWS' major services. I'm happy to hear any feedback. I'm considering making THIS post my flashy/impressive personal project in the form of a GitHub repo with sample code for each step, architecture diagrams, etc.","title":"So, you want to learn AWS AKA, How do I learn to be a Cloud Engineer sysadmin"},{"location":"Sup-easy%20-%20Nlogonia%20%2811498%29/","text":"Sup-easy - Nlogonia (11498) After centuries of hostilities and skirmishes between the four nations living in the land generally known as Nlogonia, and years of negotiations involving diplomats, politicians and the armed forces of all interested parties, with mediation by UN, NATO, G7 and SBC, it was at last agreed by all the way to end the dispute, dividing the land into four independent territories. It was agreed that one point, called division point, with coordinates established in the negotiations, would define the country division, in the following way. Two lines, both containing the division point, one in the North-South direction and one in the East-West direction, would be drawn on the map, dividing the land into four new countries. Starting from the Western-most, Northern-most quadrant, in clockwise direction, the new countries will be called Northwestern Nlogonia, Northeastern Nlogonia, Southeastern Nlogonia and Southwestern Nlogonia. The UN determined that a page in the Internet should exist so that the inhabitants could check in which of the countries their homes are. You have been hired to help implementing the system. Input The first line of a test case contains two integers N and M representing the coordinates of the division point (\u221210^4 < N, M < 10^4 ). This is followed by two integers X and Y representing the coordinates of a residence (\u221210^4 \u2264 X, Y \u2264 10^4 ). Output For each test case in the input your program must print one line containing: * the word \u2018divisa\u2019 (means border in Portuguese) if the residence is on one of the border lines (North-South or East-West); * \u2018NO\u2019 (means NW in Portuguese) if the residence is in Northwestern Nlogonia; * \u2018NE\u2019 if the residence is in Northeastern Nlogonia; * \u2018SE\u2019 if the residence is in Southeastern Nlogonia; * \u2018SO\u2019 (means SW in Portuguese) if the residence is in Southwestern Nlogonia. Sample Input/ Output sample input corresponding output 2 1 10 10 NE 2 1 -10 1 divisa 2 1 0 33 NO -1000 -1000 -1000 -1000 divisa -1000 -1000 0 0 NE -1000 -1000 -2000 -10000 SO -1000 -1000 -999 -1001 SE Codepoint Guide Create the solution to the problem and rename the file nlogonia.cpp and submit to codepost.io sample compile command: g++ -o nlogonia nlogonia.cpp sample run command: ./nlogonia 2 1 10 10 corresponding output: NE Working Template Code /******************************************************* * * Q4bonus - Nlogonia (11498) * sample compile command: g++ -o nlogonia nlogonia.cpp sample run command: ./nlogonia 2 1 10 10 corresponding output: NE * * ****************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int divisax = atoi( input_array[1] ); int divisay = atoi( input_array[2] ); int x = atoi( input_array[3] ); int y = atoi( input_array[4] ); // change the code after the line to solve the problem cout << \"division point coordinates: \" << divisax << \" \" << divisay << endl; cout << \"country coordinates: \" << x << \" \" << y << endl; } Sir Roy's Solution /******************************************************* * * Q4bonus - Nlogonia (11498) * sample compile command: g++ -o nlogonia nlogonia.cpp sample run command: ./nlogonia 2 1 10 10 corresponding output: NE * * ****************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int divisax = atoi( input_array[1] ); int divisay = atoi( input_array[2] ); int x = atoi( input_array[3] ); int y = atoi( input_array[4] ); // change the code after the line to solve the problem // cout << \"division point coordinates: \" << divisax << \" \" << divisay << endl; // cout << \"country coordinates: \" << x << \" \" << y << endl; if (divisax == x || divisay == y) { cout << \"divisa\" << endl; } else if (x > divisax && y > divisay ){ cout << \"NE\" <<endl; } else if ( x > divisax && y < divisay){ cout << \"SE\" << endl; } else if ( x < divisax && y > divisay) { cout << \"NO\" << endl; } else { cout << \"SO\" << endl; } }","title":"Sup easy   Nlogonia (11498)"},{"location":"Sup-easy%20-%20Nlogonia%20%2811498%29/#sup-easy-nlogonia-11498","text":"After centuries of hostilities and skirmishes between the four nations living in the land generally known as Nlogonia, and years of negotiations involving diplomats, politicians and the armed forces of all interested parties, with mediation by UN, NATO, G7 and SBC, it was at last agreed by all the way to end the dispute, dividing the land into four independent territories. It was agreed that one point, called division point, with coordinates established in the negotiations, would define the country division, in the following way. Two lines, both containing the division point, one in the North-South direction and one in the East-West direction, would be drawn on the map, dividing the land into four new countries. Starting from the Western-most, Northern-most quadrant, in clockwise direction, the new countries will be called Northwestern Nlogonia, Northeastern Nlogonia, Southeastern Nlogonia and Southwestern Nlogonia. The UN determined that a page in the Internet should exist so that the inhabitants could check in which of the countries their homes are. You have been hired to help implementing the system.","title":"Sup-easy - Nlogonia (11498)"},{"location":"Sup-easy%20-%20Nlogonia%20%2811498%29/#input","text":"The first line of a test case contains two integers N and M representing the coordinates of the division point (\u221210^4 < N, M < 10^4 ). This is followed by two integers X and Y representing the coordinates of a residence (\u221210^4 \u2264 X, Y \u2264 10^4 ).","title":"Input"},{"location":"Sup-easy%20-%20Nlogonia%20%2811498%29/#output","text":"For each test case in the input your program must print one line containing: * the word \u2018divisa\u2019 (means border in Portuguese) if the residence is on one of the border lines (North-South or East-West); * \u2018NO\u2019 (means NW in Portuguese) if the residence is in Northwestern Nlogonia; * \u2018NE\u2019 if the residence is in Northeastern Nlogonia; * \u2018SE\u2019 if the residence is in Southeastern Nlogonia; * \u2018SO\u2019 (means SW in Portuguese) if the residence is in Southwestern Nlogonia.","title":"Output"},{"location":"Sup-easy%20-%20Nlogonia%20%2811498%29/#sample-input-output","text":"sample input corresponding output 2 1 10 10 NE 2 1 -10 1 divisa 2 1 0 33 NO -1000 -1000 -1000 -1000 divisa -1000 -1000 0 0 NE -1000 -1000 -2000 -10000 SO -1000 -1000 -999 -1001 SE","title":"Sample Input/ Output"},{"location":"Sup-easy%20-%20Nlogonia%20%2811498%29/#codepoint-guide","text":"Create the solution to the problem and rename the file nlogonia.cpp and submit to codepost.io sample compile command: g++ -o nlogonia nlogonia.cpp sample run command: ./nlogonia 2 1 10 10 corresponding output: NE","title":"Codepoint Guide"},{"location":"Sup-easy%20-%20Nlogonia%20%2811498%29/#working-template-code","text":"/******************************************************* * * Q4bonus - Nlogonia (11498) * sample compile command: g++ -o nlogonia nlogonia.cpp sample run command: ./nlogonia 2 1 10 10 corresponding output: NE * * ****************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int divisax = atoi( input_array[1] ); int divisay = atoi( input_array[2] ); int x = atoi( input_array[3] ); int y = atoi( input_array[4] ); // change the code after the line to solve the problem cout << \"division point coordinates: \" << divisax << \" \" << divisay << endl; cout << \"country coordinates: \" << x << \" \" << y << endl; }","title":"Working Template Code"},{"location":"Sup-easy%20-%20Nlogonia%20%2811498%29/#sir-roys-solution","text":"/******************************************************* * * Q4bonus - Nlogonia (11498) * sample compile command: g++ -o nlogonia nlogonia.cpp sample run command: ./nlogonia 2 1 10 10 corresponding output: NE * * ****************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { int divisax = atoi( input_array[1] ); int divisay = atoi( input_array[2] ); int x = atoi( input_array[3] ); int y = atoi( input_array[4] ); // change the code after the line to solve the problem // cout << \"division point coordinates: \" << divisax << \" \" << divisay << endl; // cout << \"country coordinates: \" << x << \" \" << y << endl; if (divisax == x || divisay == y) { cout << \"divisa\" << endl; } else if (x > divisax && y > divisay ){ cout << \"NE\" <<endl; } else if ( x > divisax && y < divisay){ cout << \"SE\" << endl; } else if ( x < divisax && y > divisay) { cout << \"NO\" << endl; } else { cout << \"SO\" << endl; } }","title":"Sir Roy's Solution"},{"location":"Tasks%20for%20UP%20HRDO/","text":"Tasks for UP HRDO Backup System Options: 1. manual psql dump 2. backup gem 3. octopus gem or rails 6 replication https://github.com/thiagopradi/octopus https://github.com/thiagopradi/octopus_replication_example https://freeletics.engineering/2017/03/06/database-replicas.html https://medium.com/@zek/automated-backups-with-the-ruby-backup-gem-and-amazon-s3-f0f2f986876e http://backup.github.io/backup/v4/getting-started/ https://gorails.com/guides/hourly-production-server-database-and-file-backups https://hostadvice.com/how-to/how-to-backup-postgresql-database-on-ubuntu-18/ Simpler Authentication System","title":"Tasks for UP HRDO"},{"location":"Tasks%20for%20UP%20HRDO/#tasks-for-up-hrdo","text":"","title":"Tasks for UP HRDO"},{"location":"Tasks%20for%20UP%20HRDO/#backup-system","text":"Options: 1. manual psql dump 2. backup gem 3. octopus gem or rails 6 replication https://github.com/thiagopradi/octopus https://github.com/thiagopradi/octopus_replication_example https://freeletics.engineering/2017/03/06/database-replicas.html https://medium.com/@zek/automated-backups-with-the-ruby-backup-gem-and-amazon-s3-f0f2f986876e http://backup.github.io/backup/v4/getting-started/ https://gorails.com/guides/hourly-production-server-database-and-file-backups https://hostadvice.com/how-to/how-to-backup-postgresql-database-on-ubuntu-18/","title":"Backup System"},{"location":"Tasks%20for%20UP%20HRDO/#simpler-authentication-system","text":"","title":"Simpler Authentication System"},{"location":"UP-IC-taxi/","text":"Taxi Plate No. Name Date (2018) Trip Cost (Php) ABF2628 Ricafort Cuaresma July 16 UP to IC 372 UVA723 Albert Buencamino July 16 IC to UP 419 TXN324 Vergil Anastacio July 23 IC to UP 266 WA3197 Tony Nicanor July 23 UP to IC 368 UWM750 Wilbert Austria July 27 UP to IC 252 AAZ2934 Ulyssis Madamba July 27 IC to UP 530 WOG223 Anton Abueva July 31 UP to IC 312 ATA9755 Ogie Galman July 31 IC to UP 386 UWH184 Anthony Talawe August 2 UP to IC 267 UVV120 Wayne Hilario August 2 IC to UP 508 UVX878 Xeno Vivacio August 7 UP to IC 274 UKO457 Boy Sanchez August 7 IC to UP 545 AAM2424 Caloy Oligario August 9 UP to IC 313 UWF318 Amando Marquez August 9 IC to UP 415 TYX651 Fred Yulo August 10 UP to IC 308 UVY153 Tim Yambot August 10 IC to UP 427 UWA908 Vic Yasay August 14 UP to IC 388 ASA6004 Adrian Oblepias August 14 IC to UP 574 UVP397 Aldrin Salonga August 24 UP to IC 313 TXP375 Paulo Ubando August 24 IC to UP 352 AGA9411 Philip Tampalasan August 28 UP to IC 388 UVJ965 Allan Agarin August 28 IC to UP 549 VWH765 Jerome Vieno September 4 UP to IC 291 UVP479 Herbert Villarin September 4 IC to UP 554 ABF8388 Paz Urban September 6 UP to IC 348 UVE184 Bill Festejo September 6 IC to UP 493 ABX5544 Elmo Unciano September 13 UP to IC 259 TYW386 Basti Ambrosio September 13 IC to UP 582 WQL150 Waldo Tulfo September 18 UP to IC 258 AQA7318 Lambert Quijano September 18 IC to UP 523 AEA4339 Albert Quintos September 20 UP to IC 274 UOU754 Eldrich Alunan September 20 IC to UP 409 UVX770 Sid Balderama September 25 UP to IC 364 UMJ173 Oni Onco September 25 IC to UP 397 UWF703 James Magno September 27 UP to IC 364 AAI4204 Fred Guzman September 27 IC to UP 596 UVH312 Arman Ilagan October 2 UP to IC 298 UWC894 Honesto Garcia October 2 IC to UP 414 UWJ505 Wawi Carlos October 18 UP to IC 257 ACD1194 June Oba October 18 IC to UP 570 ABF2628 Corwyn Datu October 25 UP to IC 262 ABT4515 Francisco Bustos October 25 IC to UP 582 TXX129 Ted Abiola October 30 IC to UP 393 UWL851 Zack Tantuling October 30 UP to IC 492 UVV567 Ligaya Ubando November 7 UP to IC 315 UVN625 Van Nazareno November 7 IC to UP 353 UWK169 Nick Vivecencio November 22 IC to UP 332 UWN826 Willy Kwapeng November 22 UP to IC 353 BI6491 Noel Manio November 23 UP to IC 364 UNB569 Basil Nuevas November 23 IC to UP 523 Total Taxi Reimbursement Request : Php19,746.00","title":"UP IC taxi"},{"location":"UP-IC-taxi/#taxi","text":"Plate No. Name Date (2018) Trip Cost (Php) ABF2628 Ricafort Cuaresma July 16 UP to IC 372 UVA723 Albert Buencamino July 16 IC to UP 419 TXN324 Vergil Anastacio July 23 IC to UP 266 WA3197 Tony Nicanor July 23 UP to IC 368 UWM750 Wilbert Austria July 27 UP to IC 252 AAZ2934 Ulyssis Madamba July 27 IC to UP 530 WOG223 Anton Abueva July 31 UP to IC 312 ATA9755 Ogie Galman July 31 IC to UP 386 UWH184 Anthony Talawe August 2 UP to IC 267 UVV120 Wayne Hilario August 2 IC to UP 508 UVX878 Xeno Vivacio August 7 UP to IC 274 UKO457 Boy Sanchez August 7 IC to UP 545 AAM2424 Caloy Oligario August 9 UP to IC 313 UWF318 Amando Marquez August 9 IC to UP 415 TYX651 Fred Yulo August 10 UP to IC 308 UVY153 Tim Yambot August 10 IC to UP 427 UWA908 Vic Yasay August 14 UP to IC 388 ASA6004 Adrian Oblepias August 14 IC to UP 574 UVP397 Aldrin Salonga August 24 UP to IC 313 TXP375 Paulo Ubando August 24 IC to UP 352 AGA9411 Philip Tampalasan August 28 UP to IC 388 UVJ965 Allan Agarin August 28 IC to UP 549 VWH765 Jerome Vieno September 4 UP to IC 291 UVP479 Herbert Villarin September 4 IC to UP 554 ABF8388 Paz Urban September 6 UP to IC 348 UVE184 Bill Festejo September 6 IC to UP 493 ABX5544 Elmo Unciano September 13 UP to IC 259 TYW386 Basti Ambrosio September 13 IC to UP 582 WQL150 Waldo Tulfo September 18 UP to IC 258 AQA7318 Lambert Quijano September 18 IC to UP 523 AEA4339 Albert Quintos September 20 UP to IC 274 UOU754 Eldrich Alunan September 20 IC to UP 409 UVX770 Sid Balderama September 25 UP to IC 364 UMJ173 Oni Onco September 25 IC to UP 397 UWF703 James Magno September 27 UP to IC 364 AAI4204 Fred Guzman September 27 IC to UP 596 UVH312 Arman Ilagan October 2 UP to IC 298 UWC894 Honesto Garcia October 2 IC to UP 414 UWJ505 Wawi Carlos October 18 UP to IC 257 ACD1194 June Oba October 18 IC to UP 570 ABF2628 Corwyn Datu October 25 UP to IC 262 ABT4515 Francisco Bustos October 25 IC to UP 582 TXX129 Ted Abiola October 30 IC to UP 393 UWL851 Zack Tantuling October 30 UP to IC 492 UVV567 Ligaya Ubando November 7 UP to IC 315 UVN625 Van Nazareno November 7 IC to UP 353 UWK169 Nick Vivecencio November 22 IC to UP 332 UWN826 Willy Kwapeng November 22 UP to IC 353 BI6491 Noel Manio November 23 UP to IC 364 UNB569 Basil Nuevas November 23 IC to UP 523 Total Taxi Reimbursement Request : Php19,746.00","title":"Taxi"},{"location":"UP-IC/","text":"People Name email Roy Canseco rlcanseco@up.edu.ph Paulo Santiago paulo64santaigo@gmail.com Anthony Cornell Dacoco amdacoco@up.edu.ph Blaine Corwyn Aboy bdaboy@up.edu.ph Daisyree D. Viscaya daisyreeviscaya@gmail.com Dianne Pauline Urban diannepauline.urban@gmail.com Loren Anne Lacanilao lorenannelacanilao@gmail.com Key Design Decisions Backend language: PHP Framework: laravel HTML / CSS : HTML 5 / Boostrap 4 Database : MySQL Version Control : Gitlab Testing : (to follow) Deployment : AWS Approved Design Documents Collated Screens Collated ERDs Mobile Screens","title":"UP IC"},{"location":"UP-IC/#people","text":"Name email Roy Canseco rlcanseco@up.edu.ph Paulo Santiago paulo64santaigo@gmail.com Anthony Cornell Dacoco amdacoco@up.edu.ph Blaine Corwyn Aboy bdaboy@up.edu.ph Daisyree D. Viscaya daisyreeviscaya@gmail.com Dianne Pauline Urban diannepauline.urban@gmail.com Loren Anne Lacanilao lorenannelacanilao@gmail.com","title":"People"},{"location":"UP-IC/#key-design-decisions","text":"Backend language: PHP Framework: laravel HTML / CSS : HTML 5 / Boostrap 4 Database : MySQL Version Control : Gitlab Testing : (to follow) Deployment : AWS","title":"Key Design Decisions"},{"location":"UP-IC/#approved-design-documents","text":"Collated Screens Collated ERDs Mobile Screens","title":"Approved Design Documents"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/","text":"Ubuntu Linux System Administration Basics Updated Friday, June 25, 2021, by Linode Updated 6/27/21 4:50 PM, by Roy Canseco This guide presents a collection of common issues and useful tips for Linux system administration. Whether you\u2019re new to system administration or have been maintaining systems for some time, we hope this collection of basic Linux commands will help you manage your system from the command line. What is Linux Administration? Linux administration is about setting up disaster recovery, managing new system builds, creating a backup to restore data, Linux hardware management, managing storage, handling file systems, and managing the security of Linux systems. A big part of Linux administration is ensuring that Linux powered systems are stable and secure. What Should a Linux Administrator Should Know? Typically Linux system administrators are expected to handle Linux file systems, manage the root user, have a working knowledge of bash commands, and an ability to manage users. What Are The Duties Of System Administrators In Linux? Commonly, the Linux administration role typically involves: Maintenance of a Linux environment. Troubleshooting and providing support when there\u2019s an issue with Linux servers. Analysis of log files(mainly error logs). Support of LAN and web applications. Creation of operational and project-specific solutions for the organization Ability to proactively figure out ways to enforce strong security practices, and increase scalability of your Linux environment Basic Configuration These tips cover some of the basic steps and issues encountered during the beginning of system configuration. We provide a general Getting Started guide for your convenience if you\u2019re new to Linode and basic Linux system administration. Additionally, you may find our Introduction to Linux Concepts guide useful. Set the Hostname Please follow our instructions for setting your hostname . You can use the following commands to make sure it is set properly: hostname hostname -f The first command should show your short hostname, and the second should show your fully qualified domain name (FQDN). Set the Time Zone When setting the time zone of your server, it may be best to use the time zone of the majority of your users. If you\u2019re not sure which time zone would be best, consider using Universal Coordinated Time or UTC (i.e., Greenwich Mean Time). By default, Linodes are set to UTC. Many operating systems provide built-in, interactive methods for changing time zones: Set the Time Zone in Debian or Ubuntu Issue the following command and answer the questions as prompted on the screen: dpkg-reconfigure tzdata Set the Time Zone Manually on a Linux System Find the appropriate zone file in /usr/share/zoneinfo/ and link that file to /etc/localtime . See the examples below for possibilities: Universal Coordinated Time: ln -sf /usr/share/zoneinfo/UTC /etc/localtime Eastern Standard Time: ln -sf /usr/share/zoneinfo/EST /etc/localtime American Central Time (including Daylight Savings Time): ln -sf /usr/share/zoneinfo/US/Central /etc/localtime American Eastern Time (including Daylight Savings Time): ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime Configure the /etc/hosts File The /etc/hosts file provides a list of IP addresses with corresponding hostnames. This allows you to specify hostnames for an IP address in one place on the local machine, and then have multiple applications connect to external resources via their hostnames. The system of host files precedes DNS , and hosts files are always checked before DNS is queried. As a result, /etc/hosts can be useful for maintaining small \u201cinternal\u201d networks, for development purposes, and for managing clusters. Some applications require that the machine properly identify itself in the /etc/hosts file. As a result, we recommend configuring the /etc/hosts file shortly after deployment. Here is an example file: File: /etc/hosts 1 2 127.0.0.1 localhost.localdomain localhost 103.0.113.12 username.example.com username You can specify a number of hostnames on each line separated by spaces. Every line must begin with one and only one IP address. In the above example, replace 103.0.113.12 with your machine\u2019s IP address. Consider a few additional /etc/hosts entries: File: /etc/hosts 1 2 198.51.100.30 example.com 192.168.1.1 stick.example.com In this example, all requests for the example.com hostname or domain will resolve to the IP address 198.51.100.30 , which bypasses the DNS records for example.com and returns an alternate website. The second entry tells the system to look to 192.168.1.1 for the domain stick.example.com . These kinds of host entries are useful for using \u201cprivate\u201d or \u201cback channel\u201d networks to access other servers in a cluster without needing to send traffic on the public network. Network Diagnostics In this section, we\u2019ll review some basic Linux commands that will help you assess and diagnose network problems. If you suspect connectivity issues, adding the output from the relevant commands to your support ticket can help our staff diagnose your issue. This is particularly helpful in cases where networking issues are intermittent. The ping Command The ping command tests the connection between the local machine and a remote address or machine. The following commands \u201cping\u201d google.com and 216.58.217.110 : ping google.com ping 216.58.217.110 These commands send a small amount of data (an ICMP packet) to the remote host and wait for a response. If the system is able to make a connection, it will report on the \u201cround trip time\u201d for every packet. Here is the sample output of four pings to google.com: PING google.com (216.58.217.110): 56 data bytes 64 bytes from 216.58.217.110: icmp_seq=0 ttl=54 time=14.852 ms 64 bytes from 216.58.217.110: icmp_seq=1 ttl=54 time=16.574 ms 64 bytes from 216.58.217.110: icmp_seq=2 ttl=54 time=16.558 ms 64 bytes from 216.58.217.110: icmp_seq=3 ttl=54 time=18.695 ms 64 bytes from 216.58.217.110: icmp_seq=4 ttl=54 time=25.885 ms The time field specifies in milliseconds the duration of the round trip for an individual packet. When you\u2019ve gathered the amount of information you need, use Control+C to interrupt the process. You\u2019ll be presented with some statistics once the process is stopped. This will resemble: --- google.com ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3007ms rtt min/avg/max/mdev = 33.890/40.175/53.280/7.679 ms There are several important data points to notice: Packet Loss , or the discrepancy between the number of packets sent and the number of packets that return successfully. This number shows the percentage of packets that are dropped. Round Trip Time (rtt) statistics on the final line report information about all the ping responses. For this ping we see that the fastest packet round trip (min) took 33.89 milliseconds. The average round trip (avg) took 40.175 milliseconds. The longest packet (max) took 53.28 milliseconds. A single standard deviation unit (mdev) for these four packets is 7.67 milliseconds. The ping command is useful as an informal diagnostic tool to measure point-to-point network latency, and as a tool to simply ensure you are able to make a connection to a remote server. The traceroute Command The traceroute command expands on the functionality of the ping command. It provides a report on the path that the packets take to get from the local machine to the remote machine. Each step (intermediate server) in the path is called a hop . Route information is useful when troubleshooting a networking issue: if there is packet loss in one of the first few hops the problem is often related to the user\u2019s local area network (LAN) or Internet service provider (ISP). By contrast, if there is packet loss near the end of the route, the problem may be caused by an issue with the server\u2019s connection. Here is an example of output from a traceroute command: traceroute to google.com (74.125.53.100), 30 hops max, 40 byte packets 1 207.192.75.2 (207.192.75.2) 0.414 ms 0.428 ms 0.509 ms 2 vlan804.tbr2.mmu.nac.net (209.123.10.13) 0.287 ms 0.324 ms 0.397 ms 3 0.e1-1.tbr2.tl9.nac.net (209.123.10.78) 1.331 ms 1.402 ms 1.477 ms 4 core1-0-2-0.lga.net.google.com (198.32.160.130) 1.514 ms 1.497 ms 1.519 ms 5 209.85.255.68 (209.85.255.68) 1.702 ms 72.14.238.232 (72.14.238.232) 1.731 ms 21.031 ms 6 209.85.251.233 (209.85.251.233) 26.111 ms 216.239.46.14 (216.239.46.14) 23.582 ms 23.468 ms 7 216.239.43.80 (216.239.43.80) 123.668 ms 209.85.249.19 (209.85.249.19) 47.228 ms 47.250 ms 8 209.85.241.211 (209.85.241.211) 76.733 ms 216.239.43.80 (216.239.43.80) 73.582 ms 73.570 ms 9 209.85.250.144 (209.85.250.144) 86.025 ms 86.151 ms 86.136 ms 10 64.233.174.131 (64.233.174.131) 80.877 ms 216.239.48.34 (216.239.48.34) 76.212 ms 64.233.174.131 (64.233.174.131) 80.884 ms 11 216.239.48.32 (216.239.48.32) 81.267 ms 81.198 ms 81.186 ms 12 216.239.48.137 (216.239.48.137) 77.478 ms pw-in-f100.1e100.net (74.125.53.100) 79.009 ms 216.239.48.137 (216.239.48.137) 77.437 ms Often the hostnames and IP addresses on either side of a failed jump are useful in determining who operates the machine where the routing error occurs. Failed jumps are designated by lines with three asterisks ( * * * ). Adding traceroute output to Linode support tickets is sometimes useful when trying to diagnose network issues. You may also want to forward traceroute information to your Internet Service Provider (ISP) if you suspect that the connectivity issue is with your ISP\u2019s network. Recording traceroute information is particularly useful if you are experiencing an intermittent issue. The mtr Command The mtr command, like the traceroute tool, provides information about the route that internet traffic takes between the local system and a remote host. However, mtr provides additional information about the round trip time for the packet. In a way, you can think of mtr as a combination of traceroute and ping. Here is an example of output from an mtr command: HOST: username.example.com Loss% Snt Last Avg Best Wrst StDev 1. 256.129.75.4 0.0% 10 0.4 0.4 0.3 0.6 0.1 2. vlan804.tbr2.mmu.nac.net 0.0% 10 0.3 0.4 0.3 0.7 0.1 3. 0.e1-1.tbr2.tl9.nac.net 0.0% 10 4.3 4.4 1.3 11.4 4.1 4. core1-0-2-0.lga.net.google.com 0.0% 10 64.9 11.7 1.5 64.9 21.2 5. 209.85.255.68 0.0% 10 1.7 4.5 1.7 29.3 8.7 6. 209.85.251.9 0.0% 10 23.1 35.9 22.6 95.2 27.6 7. 72.14.239.127 0.0% 10 24.2 24.8 23.7 26.1 1.0 8. 209.85.255.190 0.0% 10 27.0 27.3 23.9 37.9 4.2 9. gw-in-f100.1e100.net 0.0% 10 24.1 24.4 24.0 26.5 0.7 Like the ping command, mtr tracks the speed of the connection in real time until you exit the program with CONTROL+C . To have mtr stop automatically and generate a report after ten packets, use the --report flag: mtr --report Be aware that mtr will pause for a few moments while generating output. For more information regarding mtr consider our diagnosing network issues with mtr guide. System Diagnostics If you\u2019re having an issue with your Linode that is neither related to networking nor another application issue, it may help to rule out \u201chardware\u201d and operating system level issues. Use the following tools to better diagnose and resolve these. If you determine that you have a problem with memory usage, refer to our guide on resolving memory usage issues . Use the following tools and approaches to determine the specific cause of your troubles. Check Current Memory Usage To see how much memory your system is currently using: free -m On a Linode 2GB under moderate use, the output should resemble the following: total used free shared buffers cached Mem: 1999 954 1044 105 34 703 -/+ buffers/cache: 216 1782 Swap: 255 0 255 This output takes a bit of careful reading to interpret. Out of a total 1999 megabytes of memory (RAM), the system is using 954 megabytes and has 1044 megabytes free. However , the system also has 703 megabytes of \u201cstale\u201d data buffered and stored in cache. The operating system will \u201cdrop\u201d the caches if it needs the space, but retains the cache if there is no other need for the space. It is normal for a Linux system to leave old data in RAM until the space is needed, so don\u2019t be alarmed if only a small amount of memory is \u201cfree.\u201d In the above example, there are 1782 megabytes of memory that are actually free . This means 1782 megabytes are available to your system when you start an additional process or a running application needs more memory. Monitor I/O Usage with vmstat The vmstat tool provides information about memory, swap utilization, I/O wait, and system activity. It is particularly useful for diagnosing I/O-related issues. If you think you\u2019re having an I/O issue then run the following command: vmstat 1 20 This runs a vmstat every second, twenty times, giving a sample of the current state of the system. The output generated resembles the following: procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu---- r b swpd free buff cache si so bi bo in cs us sy id wa 0 0 4 32652 47888 110824 0 0 0 2 15 15 0 0 100 0 0 0 4 32644 47888 110896 0 0 0 4 106 123 0 0 100 0 0 0 4 32644 47888 110912 0 0 0 0 70 112 0 0 100 0 0 0 4 32644 47888 110912 0 0 0 0 92 121 0 0 100 0 0 0 4 32644 47888 110912 0 0 0 36 97 136 0 0 100 0 0 0 4 32644 47888 110912 0 0 0 0 96 119 0 0 100 0 0 0 4 32892 47888 110912 0 0 0 4 96 125 0 0 100 0 0 0 4 32892 47888 110912 0 0 0 0 70 105 0 0 100 0 0 0 4 32892 47888 110912 0 0 0 0 97 119 0 0 100 0 0 0 4 32892 47888 110912 0 0 0 32 95 135 0 0 100 0 0 0 4 33016 47888 110912 0 0 0 0 75 107 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 24 113 134 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 0 175 244 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 0 92 148 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 0 114 162 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 36 100 157 0 0 100 0 0 0 4 33388 47888 110912 0 0 0 0 116 166 0 0 100 0 0 0 4 33388 47888 110912 0 0 0 0 97 157 0 0 100 0 0 0 4 33388 47888 110912 0 0 0 0 89 144 0 0 100 0 0 0 4 33380 47888 110912 0 0 0 0 181 185 0 0 99 0 The memory and swap columns provide the same kind of information provided by the \u201c free -m \u201d command, albeit in a slightly harder to understand format. The most relevant information produced by this command is the wa column, which is the final column in most implementations. This field displays the amount of time the CPU spends waiting for I/O operations to complete. If this number is consistently and considerably higher than 0, you might consider taking measures to address your IO usage. However, if the vmstat output resembles the above, you can be sure in the knowledge that you\u2019re not experiencing an IO-related issues. If you are experiencing an intermittent issue, you will need to run vmstat when you experience the issue in order to properly diagnose or rule out an I/O issue. vmstat output can sometimes help support diagnose problems. Monitor Processes, Memory, and CPU Usage with htop If you want a more organized, real-time view of the current state of your system, we recommend a tool called htop . This is not installed by default on most systems. To install htop , issue one of the following commands, depending on which distribution you use: apt-get install htop To start the program: htop You can quit at any time by pressing the F10 or Q keys. There are a couple of htop behaviors that may not be initially intuitive. Take note of the following: The memory utilization graph displays used memory, buffered memory, and cached memory. The numbers displayed at the end of this graph reflect the total amount of memory available and the total amount memory on the system as reported by the kernel. The default configuration of htop presents all application threads as independent processes, which may not be clear if you\u2019re not aware of it. You can disable this by selecting the \u201csetup\u201d option with F2 , then \u201cDisplay Options,\u201d and then toggling the \u201cHide userland threads\u201d option. You can toggle a \u201cTree\u201d view with the F5 key that displays the processes in a hierarchy and shows which processes were spawned by other processes in an organized format. This is helpful in diagnosing a problem when you\u2019re having trouble distinguishing among processes. File System Management Web developers and editors often use the FTP protocol to transfer and manage files on a remote system. FTP, however, is very insecure and inefficient for managing the files on a system when you have SSH access. If you\u2019re new to Linux systems administration, consider our \u201c Tools & Reference \u201d section and articles including: installing and using WinSCP , using rsync to synchronize files and using SSH and the terminal . Caution If you are giving other users access to upload files to your server, consider the security implications of all additional access that you grant to third parties. Upload Files to a Remote Server If you\u2019re used to using an FTP client, OpenSSH (which is included and active with all of the Linode distribution images) allows you to use an FTP-like interface over the SSH protocol. Known as \u201cSFTP,\u201d many clients support this protocol, including WinSCP for Windows, Cyberduck for Mac OS X, and Filezilla for Linux, OS X, and Windows desktops. If you are accustomed to FTP, SFTP will be very familiar to you. By default, whatever access a user has to a file system at the command line, that user will also have over SFTP. Consider the implications of file permissions when configuring user access. You can also use Unix utilities including scp and rsync to securely transfer files to your Linode. On a local machine, a command to copy team-info.tar.gz would look like: scp team-info.tar.gz [email protected]:/home/username/backups/ The command, scp , is followed by the path of the file on the local file system to be transferred. Next, the username and hostname of the remote machine follow, separated by an \u201cat\u201d sign ( @ ). Follow the hostname with a colon ( : ) and the path on the remote server to where the file should be uploaded. Using a more generalized example: scp [/path/to/local/file] [remote-username]@[remote-hostname]:[/path/to/remote/file] This command is available by default on OS X and Linux machines. You can use it to copy files to a Linode, as well as between remote servers. If you use SSH keys, you can use the scp command without entering a password for every transfer. The syntax of scp follows the form scp [source] [destination] . You can copy files from a remote host to the local machine by reversing the order of the paths in the above example. Protect Files on a Remote Server Because Linode servers are network accessible and often have a number of distinct users, maintaining the security of files is often an important concern. We recommend you familiarize yourself with our basic security guide . Our guide on access control with user accounts and permissions may provide additional insight. We suggest the following best practices for maintaining security: Only give users the permission to do what they need to. This includes application-specific users. Only run services on public interfaces that you are actively using. One common source of security vulnerabilities is in unused daemons that are left running. This includes database servers, HTTP development servers, and FTP servers. Use SSH connections whenever possible to secure and encrypt the transfer of sensitive information. Symbolic Links Symbolic linking , colloquially \u201csymlinking\u201d, allows you to create an object in your filesystem that points to another object on your filesystem. This is useful when you need to provide users and applications access to specific files and directories without reorganizing your folders. This way you can provide restricted users access to your web-accessible directories without moving your DocumentRoot into their home directories. To create a symbolic link, issue a command in the following format: ln -s /home/username/config-git/etc-hosts /etc/hosts This creates a link of the file etc-hosts at the location of the system\u2019s /etc/hosts file. More generically: ln -s [/path/to/target/file] [/path/to/location/of/sym/link] Note the following features of the link command: The final term, the location of the link, is optional. If you omit the link destination, a link will be created in the current directory with the same name as the file you\u2019re linking to. When specifying the location of the link, ensure that path does not have a final trailing slash. You can create a sym link that targets a directory, but sym links cannot terminate with slashes. You may remove a symbolic link without affecting the target file. You can use relative or absolute paths when creating a link. Manage Files on a Linux System If you\u2019re new to using Linux and manipulating files on the terminal interface we encourage you to consider our guide on using the terminal . This section provides a list of basic commands to manage the contents of your filesystem. To copy files: cp /home/username/todo.txt /home/username/archive/todo.01.txt This copies todo.txt to an archive folder, and adds a number to the file name. If you want to recursively copy all of the files and subdirectories in a directory to another directory, use the -R option. This command looks like: cp -R /home/username/archive/ /srv/backup/username.01/ To move a file or directory: mv /home/username/archive/ /srv/backup/username.02/ You can also use the mv command to rename a file. To delete a file: rm scratch.txt This will delete the scratch.txt file from the current directory. For more information about file system navigation and manipulation, please consider our documentation of file system navigation . Package Management Most Linux systems use package management tools to facilitate the installation and maintenance of all software on your system. For more in-depth coverage of this topic, please reference our package management guide. While these tools provide a number of powerful features, it is easy to look past the benefits of package management. If you install software manually without package management tools, it becomes difficult to keep your system up to date and to manage dependencies. For these reasons, we recommend installing all software through package management tools unless other means are absolutely necessary. The following tips outline a couple of basic package management tasks. Find Packages Installed on Your System Because packages are so easy to install, and often pull in a number of dependencies, it can be easy to lose track of what software is installed on your system. The following commands provide a list of installed packages on your system. For Debian and Ubuntu systems : dpkg -l The following example presents the first few lines of the output of this command on a production Debian Lenny system. ||/ Name Version Description +++-============================-============================-=============================== ii adduser 3.110 add and remove users and groups ii apache2-mpm-itk 2.2.6-02-1+lenny2 multiuser MPM for Apache 2.2 ii apache2-utils 2.2.9-10+lenny4 utility programs for webservers ii apache2.2-common 2.2.9-10+lenny4 Apache HTTP Server common files ii apt 0.7.20.2+lenny1 Advanced front-end for dpkg ii apt-utils 0.7.20.2+lenny1 APT utility programs ii bash 3.2-4 The GNU Bourne Again SHell Because there are often a large number of packages installed on any given system, the output of these commands can be quite large. As a result, it is often useful to use tools like grep and less to make these results more useful. For example: dpkg -l | grep \"python\" This will return a list of all packages with the word \u201cpython\u201d in their name or description. Similarly, you can use less : dpkg -l | less This will return the same list as the plain \u201c dpkg -l ; however, the results will appear in the less pager , which allows you to search and scroll more easily. You can append | grep \"[string]\" to these commands to filter package list results, or | less to display the results in a pager, regardless of distribution. Find Package Names and Information Sometimes the name of a package isn\u2019t intuitive, based on the name of the software. As a result, most package management tools make provide an option to search the package database. These search tools may be helpful if you\u2019re looking for a specific piece of software but don\u2019t know what it\u2019s called. For Debian and Ubuntu systems : apt-cache search [package-name] This will search the local package database for a given term and generate a list with descriptions. An excerpt of the output for apt-cache search python follows: txt2regex - A Regular Expression \"wizard\", all written with bash2 builtins vim-nox - Vi IMproved - enhanced vi editor vim-python - Vi IMproved - enhanced vi editor (transitional package) vtk-examples - C++, Tcl and Python example programs/scripts for VTK zope-plone3 - content management system based on zope and cmf zorp - An advanced protocol analyzing firewall groovy - Agile dynamic language for the Java Virtual Machine python-django - A high-level Python Web framework python-pygresql-dbg - PostgreSQL module for Python (debug extension) python-samba - Python bindings that allow access to various aspects of Samba Note that apt-cache search queries the full records for all of the packages and not simply the titles and the descriptions displayed here, hence the inclusion of vim-nox and groovy which both mention python in their descriptions. To see the full record on a specific package: apt-cache show [package-name] This provides information regarding the maintainer, the dependencies, the size, the homepage of the upstream project, and a description of the software. Since there are often a large number of results for package searches, these commands output a great quantity of text. As a result it is often useful to use tools like grep and less to make these results easier to scroll through. For example: apt-cache search python | grep \"xml\" This will return the subset of the list of packages which matched for the search term \u201cpython\u201d and that mention xml in their name or short description. Similarly: apt-cache search python | less This will return the same list as the plain apt-cache search python but the results will appear in the less pager. This allows you to search and scroll more conveniently. You can append | grep \"[string]\" to any of these commands to filter package search results, or | less to display the results in the less pager, regardless of distribution. Text Manipulation Among Linux and UNIX-like systems, nearly all system configuration information is stored and manipulated in plain text form. These following sections show a list of basic Linux commands and tools to manipulate text files. Search for a String in Files with grep The grep tool allows you to search a stream of text, such as a file or the output of a command, for a term or regex pattern. To use the grep tool, let\u2019s review an example: grep \"^Subject:.*HELP.*\" /home/username/mbox This will search your mail spool for subject lines (i.e. begins with the word \u201cSubject:\"), beginning with any number of characters, containing the word \u201chelp\u201d in upper case, and followed by any number of additional characters. It would then print these results in the terminal. The grep tool provides additional options that, if specified, force the program to output the context for each match (e.g., with -C 2 for two lines of context). With -n , grep outputs the line number of the match. With -H , grep prints the file name for each match, which is useful when you \u201cgrep\u201d a group of files or \u201cgrep\u201d recursively through a file system (using -r ). Use grep --help for more options. To grep a group of files, you can specify the file with a wildcard: grep -i \"morris\" ~/org/*.txt This will find and match against every occurrence of the word \u201cmorris,\u201d while ignoring case (because of the option for -i ). The grep tool will search all files in the ~/org/ directory with a .txt extension. You can use grep to filter the results of another command that sends output to standard out ( stdout ). This is done by \u201cpiping\u201d the output of one command into grep . For instance: ls /home/username/data | grep \"1257\" In this example, we assume that the /home/username/data directory contains a large number of files that have a UNIX time stamp in their file names. The above command will filter the output to only display those tiles that have the four digits \u201c1257\u201d in their file names. In these cases, grep only filters the output of ls and does not look into file contents. For more information regarding grep , refer to our full documentation of the grep command . Search and Replace Across a Group of Files While the grep tool is quite powerful for filtering text on the basis of regular expressions, if you need to edit a file or otherwise manipulate the text, you can use sed . The sed tool, or the Stream EDitor, allows you search for a regex pattern and replace it with another string. sed is extremely powerful, and we recommend that you back up your files and test your sed commands thoroughly before running them. Here is a very simple sed one-liner, intended to illustrate its syntax: sed -i `s/^good/BAD/` morning-star.txt This replaces occurrences of the word \u201cgood\u201d at the beginning of a line (noted by the ^ ) with the string \u201cBAD\u201d in the file morning-star.txt . The option -i tells sed to perform the replacements \u201cin place.\u201d The sed command can make backups of the files it edits if you specify a suffix after the -i option, as in -iBAK . In the above command this option would save the original file as morning-star.txt.BAK before making changes. The general format of a sed statement is: 's/[regex]/[replacement]/' To match literal slashes ( / ), you must escape them with a backslash ( \\ ). As a result, to match a / character you would use \\/ in the sed expression. If you are searching for a string that has multiple slashes, you can replace the slashes which another character. For instance: 's|r/e/g/e/x|regex|' This would strip the slashes from the string r/e/g/e/x so that this string would be regex after running the sed command on the file that contains the string. The following example, from our migrating a server to your Linode document, searches and replaces one IP address with another. In this case 98.76.54.32 is replaced with 12.34.56.78 : sed -i 's/98\\.76\\.54\\.32/12\\.34\\.56\\.78/' In the above example, period characters are escaped as \\. . In regular expressions the full-stop (period) character matches to any character if it is not escaped. For more information about sed refer to our full documentation of text manipulation with sed . Edit Text In many Linode documents, you may be instructed to edit the contents of a file. To do this, you need to use a text editor. Most of the distribution templates that Linode provides come with an implementation of the vi/vim text editor and the nano text editor. These are small, lightweight and powerful text editors that allow you manipulate the text of a file from the terminal environment. There are other options for text editors, notably Emacs and \u201czile.\u201d Feel free to install these programs using your operating system\u2019s package manager. Make sure you search your package database so you can install a version compiled without GUI components (i.e. X11). To open a file, issue a command beginning with the name of the editor you wish to run followed by the name of the file you wish to edit. Here are a number of example commands that open the /etc/hosts file: nano /etc/hosts vi /etc/hosts emacs /etc/hosts zile /etc/hosts When you\u2019ve edited a file, you can save and exit the editor to return to the prompt. This procedure varies between different editors. In Emacs and zile, the key sequence is the same: press control and type x and s to save. This operation is typically notated \u201cC-x C-s\u201d and then \u201cC-x C-c\u201d to close the editor. In nano, press Control-O (notated ^O) and confirm the file name to write the file, and use Control-X to exit from the program. Since vi and vim are modal editors, their operation is a bit more complex. After opening a file in vi, you can enter \u201cinsert\u201d mode by pressing the \u201ci\u201d key; this will let you edit text in the conventional way. To save the file, you must exit into \u201cnormal\u201d mode by pressing the escape key ( Control-[ also sends escape), and then type :wq to write the file and quit the program. This provides only the most basic outline of how to use these text editors, and there are numerous external resources which will provide instructions for more advanced use of this software. Web Servers and HTTP Issues Linodes do not come with a web server installed by default. You must install and configure your web server. This allows you to configure your web server in a way that makes sense for your application or website. Linode Guides & Tutorials contains a number of documents regarding the installation and maintenance of various web servers . This section covers a number of basic web serving tasks and functions, as well as some guidance for users new to the world of web servers. Serve Websites Web servers work by listening on a TCP port, typically port 80 for HTTP and port 443 for HTTPS. When a visitor makes a request for content, the servers respond by delivering the resource requested. Typically, resources are specified with a URL that contains the protocol, http or https ; a colon and two slashes, :// ; hostname or domain, www.example.com or username.example.com ; and the path to a file, /images/avatar.jpg, or index.html . A full URL would resemble http://www.example.com/images/avatar.jpg . In order to provide these resources to users, your Linode needs to be running a web server. There are many different HTTP servers and countless configurations to provide support for various web development frameworks. The three most popular general use web servers are the Apache HTTP server, Lighttpd (\u201cLighty\u201d), and nginx (\u201cEngine X\u201d). Each server has its strengths and weaknesses, and your choice depends largely on your experience and your needs. Once you\u2019ve chosen a web server, you need to decide what (if any) scripting support you need to install. Scripting support allows you to run dynamic content with your web server and program server side scripts in languages such as Python, PHP, Ruby, and Perl. If you need a full web application stack, we encourage you to consider one of our more full-featured LAMP stack guides . If you need support for a specific web development framework, consult our tutorials for installing and using specific web application frameworks . How to Choose a Web Server In most situations, end users are unaware of which web server you use. As a result, choosing a web server is often a personal decision based on the comfort of the administrator and the requirements of the deployment in question. This can be a challenge for the new systems administrator. This section offers some guidance by providing some background and information on the most popular web servers. The Apache HTTP Server is considered by some to be the de facto standard web server. It is the most widely deployed open-source web server, its configuration interface has been stable for many years, and its modular architecture allows it to function in many different types of deployments. Apache forms the foundation of the LAMP stack , and supports the integration of dynamic server-side applications into the web server. By contrast, web servers like Lighttpd and nginx are optimized for efficiently serving static content. If you have a deployment where server resources are limited and are facing a great deal of demand, consider one of these servers. They are functional and stable with minimal system resources. Lighttpd and nginx can be more difficult to configure when integrating dynamic content interpreters. Your choice of web servers is based on your needs. Specific choices depend on factors like the type of content you want to serve, the demand for that content, and your comfort with that software as an administrator. Apache Logs When there is something wrong with Apache , it can be difficult to determine what the cause of the error is from the behavior of the web server. There are a number of common issues with which you might begin your troubleshooting efforts. When more complex issues arise, you may need to review the Apache error logs. By default, error logs are located in the /var/log/apache2/error.log file (on Debian-based distributions). You can track or \u201ctail\u201d this log with the following command: tail -F /var/log/apache2/error.log In the default virtual host configurations suggested in our Apache installation and LAMP guides , we suggest adding a custom log setting: File: Apache Virtual Host Configuration 1 ErrorLog /var/www//html/example.com/logs/error.log CustomLog /var/www/html/example.com/logs/access.log combined Where example.com represents the name of your virtual host and the location of its resources. These directives make Apache create two log files that contain logging information specific to that virtual host. This allows you to easily troubleshoot errors on specific virtual hosts. To track or tail the error log: tail -F /var/www/html/example.com/logs/error.log This will allow you to see new error messages as they appear. Problems can be diagnosed by using specific parts of an error message from an Apache log as a term in web search. Common errors to look for include: Missing files, or errors in file names Permissions errors Configuration errors Dynamic code execution or interpretation errors DNS Servers and Domain Names The Domain Name System , or DNS, is the service that the internet uses to associate the hard to remember and manage IP addresses with more human-usable domain names. This section will address several specific DNS-related tasks. To learn more about DNS, check out our overview of the domain name system . If you are familiar with DNS and just need to figure out how to configure your DNS server, see our guide for the Linode DNS manager . Redirect DNS Queries with CNAMEs CNAME DNS records make it possible to redirect requests for one hostname or domain to another hostname or domain. This is useful in situations where you want to direct requests for one domain to another, but don\u2019t want to set up the web server to handle requests. CNAMEs are only valid when pointing from one domain to another. If you need to redirect a full URL, you will need to set up a web server and configure redirection and/or virtual hosting on the server level. CNAMEs will allow you to redirect subdomains, such as team.example.com , to other subdomains or domains, such as jack.example.org . CNAMEs must point to a valid domain that has a valid A Record, or to another CNAME. Although limited in their capabilities, CNAMEs can be quite useful in some situations. In particular, if you need to change the hostname of a machine, CNAMEs are quite useful. To learn how to set up CNAME records with the Linode Manager , refer to our DNS Manager Guide . Set Up Subdomains When reading domain names , we refer to parts before the main or first-level domain as \u201csubdomains.\u201d For example, in the domain team.example.com , team is a subdomain for the root domain example.com . Follow these steps to create and host a sub-domain : First, create an A Record in the DNS zone for the domain. You can do this using the Linode DNS Manager . You may host the DNS for your domain with any provider you choose. Set up a server to respond to requests sent to this domain. For web servers like Apache , this requires configuring a new virtual host. For XMPP servers you must configure an additional host to receive the requests for this host. For more information, consult the documentation for the specific server you wish to deploy. Once configured, subdomains function almost identically to root domains on your server. If you need to, you can set up HTTP redirection for the new subdomain. SMTP Servers and Email Issues We provide a number of guides that cover email-related topics . In this section, we\u2019ll explain how to choose an email setup that fits your needs and how to configure your Linode to send email. Note About Email at Linode This guide may involve or result in sending email. In an effort to fight spam, Linode restricts outbound connections on ports 25, 465, and 587 on all Linodes for new accounts created after November 5th, 2019. For more information, please see Sending Email on Linode . This guide may involve or result in sending email. In an effort to fight spam, Linode restricts \u2026 Choose an Email Solution There are two major components that are required for email functionality. The most important part is the SMTP server or \u201cMail Transfer Agent.\u201d The MTA, as it is often called, sends mail from one server to another. The second part of an email system is a server that permits users to access and download that mail from the server to their own machine. Typically these servers use a protocol such as POP3 or IMAP to provide remote access to the mailbox. There may also be other components in the email server tool chain. These components may be optional depending on the requirements of your deployment. They include filtering and delivery tools like procmail , anti-virus filters like ClamAV , mailing list managers like MailMan , and spam filters like SpamAssassin . These components function independently of the MTA and remote mailbox server. The most prevalent SMTP servers or MTAs in the UNIX-like world are Postfix , Exim , and Sendmail . Sendmail has the longest history and many system administrators have extensive experience with it. Postfix is robust and modern, and is compatible with many different configurations. Exim is the default MTA in Debian systems, and many consider it to be easier to use for basic tasks. For remote mailbox access, servers like Courier and Dovecot are popular options. If you need an easy-to-install email solution, consider the Citadel groupware server . Citadel provides an integrated \u201cturnkey\u201d solution that includes an SMTP server, remote mailbox access, real time collaboration tools including XMPP, and a shared calendar interface. Along similar lines, we also provide documentation for the installation of the Zimbra groupware server . If, by contrast, you want a more simple and modular email stack, we urge you to consider one of our guides built around the Postfix SMTP server . Finally, it\u2019s possible to outsource email service to a third-party provider, such as Google Workspace or FastMail.fm . These services allows you to send and receive mail from your domain, without hosting email services on your Linode. Send Email From Your Server For simple configurations, you may have no need for a complete email stack like some of those documented in our email guides . However, applications running on that server still need to be able to send mail for notifications and other routine purposes. How Do I Manage Files in Linux? To manage files and directories in Linux you can use wildcard patterns for file manipulation, use commands like gzip , xz , and bzip2 to compress or decompress a file. Commands like copy move and remove can be used to remove files. There are many more commands that can be used, however these are the most common. You can view your current directory by running echo $PWD . To view all items within your current working directory, type ls and press enter. Typing ls will simply output all file names, but if you wish to see more details run the following command: ls -al Output: total 6 drwxr-xr-x 6 linode linode 4096 Nov 30 00:35 . drwxr-xr-x 45 linode linode 4096 Dec 30 00:35 .. drwxr-xr-x 5 linode linode 4096 Nov 30 00:35 20122 drwxr-xr-x 7 linode linode 4096 Nov 30 00:35 20122_db drwxr-xr-x 3 linode linode 4096 Nov 30 00:35 linode_1 -rw-rw-r-- 1 linode linode 93810 Nov 30 00:35 linode.png In the output, the d in drwxr-xr represents a directory and -rw-rw-r-- represents a file since it is not prefaced with d . You can use cp to copy files, mv to move them and rm to delete files. Similarly, you can use mkdir to create directories, and rmdir to remove directories. For efficient Linux administration, you have to be able to handle multiple files recursively. You can use -R option for recursive listing, copying or even deletion. Using Wildcards And Globbing For Better Linux Administration Most other operations we saw in the section above were on a single filesystem, on the entire tree. As complexities in administration grow with your file system, it becomes difficult to use these options. This is where Wildcards and Globbing are extremely helpful. Globbing helps us point to target files using wildcard patterns. Here is how the matching works: * matches any string pattern ? matches any single character [ matches any single character within [ brackets The following example will test a Wildcard to see how you can only filter files that have 3, 5, or between 3-5 characters. In the current directory, we have the following files: ls linode_1 linode_2 linode_3 linode_4 linode_5 Now, if we run the following command: ls linode[3-5] We will get the following output: linode_3 linode_4 linode_5 This page was originally published on Sunday, December 13, 2009.","title":"Ubuntu Linux System Administration Basics"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#ubuntu-linux-system-administration-basics","text":"Updated Friday, June 25, 2021, by Linode Updated 6/27/21 4:50 PM, by Roy Canseco This guide presents a collection of common issues and useful tips for Linux system administration. Whether you\u2019re new to system administration or have been maintaining systems for some time, we hope this collection of basic Linux commands will help you manage your system from the command line.","title":"Ubuntu Linux System Administration Basics"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#what-is-linux-administration","text":"Linux administration is about setting up disaster recovery, managing new system builds, creating a backup to restore data, Linux hardware management, managing storage, handling file systems, and managing the security of Linux systems. A big part of Linux administration is ensuring that Linux powered systems are stable and secure.","title":"What is Linux Administration?"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#what-should-a-linux-administrator-should-know","text":"Typically Linux system administrators are expected to handle Linux file systems, manage the root user, have a working knowledge of bash commands, and an ability to manage users.","title":"What Should a Linux Administrator Should Know?"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#what-are-the-duties-of-system-administrators-in-linux","text":"Commonly, the Linux administration role typically involves: Maintenance of a Linux environment. Troubleshooting and providing support when there\u2019s an issue with Linux servers. Analysis of log files(mainly error logs). Support of LAN and web applications. Creation of operational and project-specific solutions for the organization Ability to proactively figure out ways to enforce strong security practices, and increase scalability of your Linux environment","title":"What Are The Duties Of System Administrators In Linux?"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#basic-configuration","text":"These tips cover some of the basic steps and issues encountered during the beginning of system configuration. We provide a general Getting Started guide for your convenience if you\u2019re new to Linode and basic Linux system administration. Additionally, you may find our Introduction to Linux Concepts guide useful.","title":"Basic Configuration"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#set-the-hostname","text":"Please follow our instructions for setting your hostname . You can use the following commands to make sure it is set properly: hostname hostname -f The first command should show your short hostname, and the second should show your fully qualified domain name (FQDN).","title":"Set the Hostname"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#set-the-time-zone","text":"When setting the time zone of your server, it may be best to use the time zone of the majority of your users. If you\u2019re not sure which time zone would be best, consider using Universal Coordinated Time or UTC (i.e., Greenwich Mean Time). By default, Linodes are set to UTC. Many operating systems provide built-in, interactive methods for changing time zones:","title":"Set the Time Zone"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#set-the-time-zone-in-debian-or-ubuntu","text":"Issue the following command and answer the questions as prompted on the screen: dpkg-reconfigure tzdata","title":"Set the Time Zone in Debian or Ubuntu"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#set-the-time-zone-manually-on-a-linux-system","text":"Find the appropriate zone file in /usr/share/zoneinfo/ and link that file to /etc/localtime . See the examples below for possibilities: Universal Coordinated Time: ln -sf /usr/share/zoneinfo/UTC /etc/localtime Eastern Standard Time: ln -sf /usr/share/zoneinfo/EST /etc/localtime American Central Time (including Daylight Savings Time): ln -sf /usr/share/zoneinfo/US/Central /etc/localtime American Eastern Time (including Daylight Savings Time): ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime","title":"Set the Time Zone Manually on a Linux System"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#configure-the-etchosts-file","text":"The /etc/hosts file provides a list of IP addresses with corresponding hostnames. This allows you to specify hostnames for an IP address in one place on the local machine, and then have multiple applications connect to external resources via their hostnames. The system of host files precedes DNS , and hosts files are always checked before DNS is queried. As a result, /etc/hosts can be useful for maintaining small \u201cinternal\u201d networks, for development purposes, and for managing clusters. Some applications require that the machine properly identify itself in the /etc/hosts file. As a result, we recommend configuring the /etc/hosts file shortly after deployment. Here is an example file: File: /etc/hosts 1 2 127.0.0.1 localhost.localdomain localhost 103.0.113.12 username.example.com username You can specify a number of hostnames on each line separated by spaces. Every line must begin with one and only one IP address. In the above example, replace 103.0.113.12 with your machine\u2019s IP address. Consider a few additional /etc/hosts entries: File: /etc/hosts 1 2 198.51.100.30 example.com 192.168.1.1 stick.example.com In this example, all requests for the example.com hostname or domain will resolve to the IP address 198.51.100.30 , which bypasses the DNS records for example.com and returns an alternate website. The second entry tells the system to look to 192.168.1.1 for the domain stick.example.com . These kinds of host entries are useful for using \u201cprivate\u201d or \u201cback channel\u201d networks to access other servers in a cluster without needing to send traffic on the public network.","title":"Configure the /etc/hosts File"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#network-diagnostics","text":"In this section, we\u2019ll review some basic Linux commands that will help you assess and diagnose network problems. If you suspect connectivity issues, adding the output from the relevant commands to your support ticket can help our staff diagnose your issue. This is particularly helpful in cases where networking issues are intermittent.","title":"Network Diagnostics"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#the-ping-command","text":"The ping command tests the connection between the local machine and a remote address or machine. The following commands \u201cping\u201d google.com and 216.58.217.110 : ping google.com ping 216.58.217.110 These commands send a small amount of data (an ICMP packet) to the remote host and wait for a response. If the system is able to make a connection, it will report on the \u201cround trip time\u201d for every packet. Here is the sample output of four pings to google.com: PING google.com (216.58.217.110): 56 data bytes 64 bytes from 216.58.217.110: icmp_seq=0 ttl=54 time=14.852 ms 64 bytes from 216.58.217.110: icmp_seq=1 ttl=54 time=16.574 ms 64 bytes from 216.58.217.110: icmp_seq=2 ttl=54 time=16.558 ms 64 bytes from 216.58.217.110: icmp_seq=3 ttl=54 time=18.695 ms 64 bytes from 216.58.217.110: icmp_seq=4 ttl=54 time=25.885 ms The time field specifies in milliseconds the duration of the round trip for an individual packet. When you\u2019ve gathered the amount of information you need, use Control+C to interrupt the process. You\u2019ll be presented with some statistics once the process is stopped. This will resemble: --- google.com ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3007ms rtt min/avg/max/mdev = 33.890/40.175/53.280/7.679 ms There are several important data points to notice: Packet Loss , or the discrepancy between the number of packets sent and the number of packets that return successfully. This number shows the percentage of packets that are dropped. Round Trip Time (rtt) statistics on the final line report information about all the ping responses. For this ping we see that the fastest packet round trip (min) took 33.89 milliseconds. The average round trip (avg) took 40.175 milliseconds. The longest packet (max) took 53.28 milliseconds. A single standard deviation unit (mdev) for these four packets is 7.67 milliseconds. The ping command is useful as an informal diagnostic tool to measure point-to-point network latency, and as a tool to simply ensure you are able to make a connection to a remote server.","title":"The ping Command"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#the-traceroute-command","text":"The traceroute command expands on the functionality of the ping command. It provides a report on the path that the packets take to get from the local machine to the remote machine. Each step (intermediate server) in the path is called a hop . Route information is useful when troubleshooting a networking issue: if there is packet loss in one of the first few hops the problem is often related to the user\u2019s local area network (LAN) or Internet service provider (ISP). By contrast, if there is packet loss near the end of the route, the problem may be caused by an issue with the server\u2019s connection. Here is an example of output from a traceroute command: traceroute to google.com (74.125.53.100), 30 hops max, 40 byte packets 1 207.192.75.2 (207.192.75.2) 0.414 ms 0.428 ms 0.509 ms 2 vlan804.tbr2.mmu.nac.net (209.123.10.13) 0.287 ms 0.324 ms 0.397 ms 3 0.e1-1.tbr2.tl9.nac.net (209.123.10.78) 1.331 ms 1.402 ms 1.477 ms 4 core1-0-2-0.lga.net.google.com (198.32.160.130) 1.514 ms 1.497 ms 1.519 ms 5 209.85.255.68 (209.85.255.68) 1.702 ms 72.14.238.232 (72.14.238.232) 1.731 ms 21.031 ms 6 209.85.251.233 (209.85.251.233) 26.111 ms 216.239.46.14 (216.239.46.14) 23.582 ms 23.468 ms 7 216.239.43.80 (216.239.43.80) 123.668 ms 209.85.249.19 (209.85.249.19) 47.228 ms 47.250 ms 8 209.85.241.211 (209.85.241.211) 76.733 ms 216.239.43.80 (216.239.43.80) 73.582 ms 73.570 ms 9 209.85.250.144 (209.85.250.144) 86.025 ms 86.151 ms 86.136 ms 10 64.233.174.131 (64.233.174.131) 80.877 ms 216.239.48.34 (216.239.48.34) 76.212 ms 64.233.174.131 (64.233.174.131) 80.884 ms 11 216.239.48.32 (216.239.48.32) 81.267 ms 81.198 ms 81.186 ms 12 216.239.48.137 (216.239.48.137) 77.478 ms pw-in-f100.1e100.net (74.125.53.100) 79.009 ms 216.239.48.137 (216.239.48.137) 77.437 ms Often the hostnames and IP addresses on either side of a failed jump are useful in determining who operates the machine where the routing error occurs. Failed jumps are designated by lines with three asterisks ( * * * ). Adding traceroute output to Linode support tickets is sometimes useful when trying to diagnose network issues. You may also want to forward traceroute information to your Internet Service Provider (ISP) if you suspect that the connectivity issue is with your ISP\u2019s network. Recording traceroute information is particularly useful if you are experiencing an intermittent issue.","title":"The traceroute Command"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#the-mtr-command","text":"The mtr command, like the traceroute tool, provides information about the route that internet traffic takes between the local system and a remote host. However, mtr provides additional information about the round trip time for the packet. In a way, you can think of mtr as a combination of traceroute and ping. Here is an example of output from an mtr command: HOST: username.example.com Loss% Snt Last Avg Best Wrst StDev 1. 256.129.75.4 0.0% 10 0.4 0.4 0.3 0.6 0.1 2. vlan804.tbr2.mmu.nac.net 0.0% 10 0.3 0.4 0.3 0.7 0.1 3. 0.e1-1.tbr2.tl9.nac.net 0.0% 10 4.3 4.4 1.3 11.4 4.1 4. core1-0-2-0.lga.net.google.com 0.0% 10 64.9 11.7 1.5 64.9 21.2 5. 209.85.255.68 0.0% 10 1.7 4.5 1.7 29.3 8.7 6. 209.85.251.9 0.0% 10 23.1 35.9 22.6 95.2 27.6 7. 72.14.239.127 0.0% 10 24.2 24.8 23.7 26.1 1.0 8. 209.85.255.190 0.0% 10 27.0 27.3 23.9 37.9 4.2 9. gw-in-f100.1e100.net 0.0% 10 24.1 24.4 24.0 26.5 0.7 Like the ping command, mtr tracks the speed of the connection in real time until you exit the program with CONTROL+C . To have mtr stop automatically and generate a report after ten packets, use the --report flag: mtr --report Be aware that mtr will pause for a few moments while generating output. For more information regarding mtr consider our diagnosing network issues with mtr guide.","title":"The mtr Command"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#system-diagnostics","text":"If you\u2019re having an issue with your Linode that is neither related to networking nor another application issue, it may help to rule out \u201chardware\u201d and operating system level issues. Use the following tools to better diagnose and resolve these. If you determine that you have a problem with memory usage, refer to our guide on resolving memory usage issues . Use the following tools and approaches to determine the specific cause of your troubles.","title":"System Diagnostics"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#check-current-memory-usage","text":"To see how much memory your system is currently using: free -m On a Linode 2GB under moderate use, the output should resemble the following: total used free shared buffers cached Mem: 1999 954 1044 105 34 703 -/+ buffers/cache: 216 1782 Swap: 255 0 255 This output takes a bit of careful reading to interpret. Out of a total 1999 megabytes of memory (RAM), the system is using 954 megabytes and has 1044 megabytes free. However , the system also has 703 megabytes of \u201cstale\u201d data buffered and stored in cache. The operating system will \u201cdrop\u201d the caches if it needs the space, but retains the cache if there is no other need for the space. It is normal for a Linux system to leave old data in RAM until the space is needed, so don\u2019t be alarmed if only a small amount of memory is \u201cfree.\u201d In the above example, there are 1782 megabytes of memory that are actually free . This means 1782 megabytes are available to your system when you start an additional process or a running application needs more memory.","title":"Check Current Memory Usage"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#monitor-io-usage-with-vmstat","text":"The vmstat tool provides information about memory, swap utilization, I/O wait, and system activity. It is particularly useful for diagnosing I/O-related issues. If you think you\u2019re having an I/O issue then run the following command: vmstat 1 20 This runs a vmstat every second, twenty times, giving a sample of the current state of the system. The output generated resembles the following: procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu---- r b swpd free buff cache si so bi bo in cs us sy id wa 0 0 4 32652 47888 110824 0 0 0 2 15 15 0 0 100 0 0 0 4 32644 47888 110896 0 0 0 4 106 123 0 0 100 0 0 0 4 32644 47888 110912 0 0 0 0 70 112 0 0 100 0 0 0 4 32644 47888 110912 0 0 0 0 92 121 0 0 100 0 0 0 4 32644 47888 110912 0 0 0 36 97 136 0 0 100 0 0 0 4 32644 47888 110912 0 0 0 0 96 119 0 0 100 0 0 0 4 32892 47888 110912 0 0 0 4 96 125 0 0 100 0 0 0 4 32892 47888 110912 0 0 0 0 70 105 0 0 100 0 0 0 4 32892 47888 110912 0 0 0 0 97 119 0 0 100 0 0 0 4 32892 47888 110912 0 0 0 32 95 135 0 0 100 0 0 0 4 33016 47888 110912 0 0 0 0 75 107 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 24 113 134 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 0 175 244 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 0 92 148 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 0 114 162 0 0 100 0 0 0 4 33512 47888 110912 0 0 0 36 100 157 0 0 100 0 0 0 4 33388 47888 110912 0 0 0 0 116 166 0 0 100 0 0 0 4 33388 47888 110912 0 0 0 0 97 157 0 0 100 0 0 0 4 33388 47888 110912 0 0 0 0 89 144 0 0 100 0 0 0 4 33380 47888 110912 0 0 0 0 181 185 0 0 99 0 The memory and swap columns provide the same kind of information provided by the \u201c free -m \u201d command, albeit in a slightly harder to understand format. The most relevant information produced by this command is the wa column, which is the final column in most implementations. This field displays the amount of time the CPU spends waiting for I/O operations to complete. If this number is consistently and considerably higher than 0, you might consider taking measures to address your IO usage. However, if the vmstat output resembles the above, you can be sure in the knowledge that you\u2019re not experiencing an IO-related issues. If you are experiencing an intermittent issue, you will need to run vmstat when you experience the issue in order to properly diagnose or rule out an I/O issue. vmstat output can sometimes help support diagnose problems.","title":"Monitor I/O Usage with vmstat"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#monitor-processes-memory-and-cpu-usage-with-htop","text":"If you want a more organized, real-time view of the current state of your system, we recommend a tool called htop . This is not installed by default on most systems. To install htop , issue one of the following commands, depending on which distribution you use: apt-get install htop To start the program: htop You can quit at any time by pressing the F10 or Q keys. There are a couple of htop behaviors that may not be initially intuitive. Take note of the following: The memory utilization graph displays used memory, buffered memory, and cached memory. The numbers displayed at the end of this graph reflect the total amount of memory available and the total amount memory on the system as reported by the kernel. The default configuration of htop presents all application threads as independent processes, which may not be clear if you\u2019re not aware of it. You can disable this by selecting the \u201csetup\u201d option with F2 , then \u201cDisplay Options,\u201d and then toggling the \u201cHide userland threads\u201d option. You can toggle a \u201cTree\u201d view with the F5 key that displays the processes in a hierarchy and shows which processes were spawned by other processes in an organized format. This is helpful in diagnosing a problem when you\u2019re having trouble distinguishing among processes.","title":"Monitor Processes, Memory, and CPU Usage with htop"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#file-system-management","text":"Web developers and editors often use the FTP protocol to transfer and manage files on a remote system. FTP, however, is very insecure and inefficient for managing the files on a system when you have SSH access. If you\u2019re new to Linux systems administration, consider our \u201c Tools & Reference \u201d section and articles including: installing and using WinSCP , using rsync to synchronize files and using SSH and the terminal . Caution If you are giving other users access to upload files to your server, consider the security implications of all additional access that you grant to third parties.","title":"File System Management"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#upload-files-to-a-remote-server","text":"If you\u2019re used to using an FTP client, OpenSSH (which is included and active with all of the Linode distribution images) allows you to use an FTP-like interface over the SSH protocol. Known as \u201cSFTP,\u201d many clients support this protocol, including WinSCP for Windows, Cyberduck for Mac OS X, and Filezilla for Linux, OS X, and Windows desktops. If you are accustomed to FTP, SFTP will be very familiar to you. By default, whatever access a user has to a file system at the command line, that user will also have over SFTP. Consider the implications of file permissions when configuring user access. You can also use Unix utilities including scp and rsync to securely transfer files to your Linode. On a local machine, a command to copy team-info.tar.gz would look like: scp team-info.tar.gz [email protected]:/home/username/backups/ The command, scp , is followed by the path of the file on the local file system to be transferred. Next, the username and hostname of the remote machine follow, separated by an \u201cat\u201d sign ( @ ). Follow the hostname with a colon ( : ) and the path on the remote server to where the file should be uploaded. Using a more generalized example: scp [/path/to/local/file] [remote-username]@[remote-hostname]:[/path/to/remote/file] This command is available by default on OS X and Linux machines. You can use it to copy files to a Linode, as well as between remote servers. If you use SSH keys, you can use the scp command without entering a password for every transfer. The syntax of scp follows the form scp [source] [destination] . You can copy files from a remote host to the local machine by reversing the order of the paths in the above example.","title":"Upload Files to a Remote Server"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#protect-files-on-a-remote-server","text":"Because Linode servers are network accessible and often have a number of distinct users, maintaining the security of files is often an important concern. We recommend you familiarize yourself with our basic security guide . Our guide on access control with user accounts and permissions may provide additional insight. We suggest the following best practices for maintaining security: Only give users the permission to do what they need to. This includes application-specific users. Only run services on public interfaces that you are actively using. One common source of security vulnerabilities is in unused daemons that are left running. This includes database servers, HTTP development servers, and FTP servers. Use SSH connections whenever possible to secure and encrypt the transfer of sensitive information.","title":"Protect Files on a Remote Server"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#symbolic-links","text":"Symbolic linking , colloquially \u201csymlinking\u201d, allows you to create an object in your filesystem that points to another object on your filesystem. This is useful when you need to provide users and applications access to specific files and directories without reorganizing your folders. This way you can provide restricted users access to your web-accessible directories without moving your DocumentRoot into their home directories. To create a symbolic link, issue a command in the following format: ln -s /home/username/config-git/etc-hosts /etc/hosts This creates a link of the file etc-hosts at the location of the system\u2019s /etc/hosts file. More generically: ln -s [/path/to/target/file] [/path/to/location/of/sym/link] Note the following features of the link command: The final term, the location of the link, is optional. If you omit the link destination, a link will be created in the current directory with the same name as the file you\u2019re linking to. When specifying the location of the link, ensure that path does not have a final trailing slash. You can create a sym link that targets a directory, but sym links cannot terminate with slashes. You may remove a symbolic link without affecting the target file. You can use relative or absolute paths when creating a link.","title":"Symbolic Links"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#manage-files-on-a-linux-system","text":"If you\u2019re new to using Linux and manipulating files on the terminal interface we encourage you to consider our guide on using the terminal . This section provides a list of basic commands to manage the contents of your filesystem. To copy files: cp /home/username/todo.txt /home/username/archive/todo.01.txt This copies todo.txt to an archive folder, and adds a number to the file name. If you want to recursively copy all of the files and subdirectories in a directory to another directory, use the -R option. This command looks like: cp -R /home/username/archive/ /srv/backup/username.01/ To move a file or directory: mv /home/username/archive/ /srv/backup/username.02/ You can also use the mv command to rename a file. To delete a file: rm scratch.txt This will delete the scratch.txt file from the current directory. For more information about file system navigation and manipulation, please consider our documentation of file system navigation .","title":"Manage Files on a Linux System"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#package-management","text":"Most Linux systems use package management tools to facilitate the installation and maintenance of all software on your system. For more in-depth coverage of this topic, please reference our package management guide. While these tools provide a number of powerful features, it is easy to look past the benefits of package management. If you install software manually without package management tools, it becomes difficult to keep your system up to date and to manage dependencies. For these reasons, we recommend installing all software through package management tools unless other means are absolutely necessary. The following tips outline a couple of basic package management tasks.","title":"Package Management"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#find-packages-installed-on-your-system","text":"Because packages are so easy to install, and often pull in a number of dependencies, it can be easy to lose track of what software is installed on your system. The following commands provide a list of installed packages on your system. For Debian and Ubuntu systems : dpkg -l The following example presents the first few lines of the output of this command on a production Debian Lenny system. ||/ Name Version Description +++-============================-============================-=============================== ii adduser 3.110 add and remove users and groups ii apache2-mpm-itk 2.2.6-02-1+lenny2 multiuser MPM for Apache 2.2 ii apache2-utils 2.2.9-10+lenny4 utility programs for webservers ii apache2.2-common 2.2.9-10+lenny4 Apache HTTP Server common files ii apt 0.7.20.2+lenny1 Advanced front-end for dpkg ii apt-utils 0.7.20.2+lenny1 APT utility programs ii bash 3.2-4 The GNU Bourne Again SHell Because there are often a large number of packages installed on any given system, the output of these commands can be quite large. As a result, it is often useful to use tools like grep and less to make these results more useful. For example: dpkg -l | grep \"python\" This will return a list of all packages with the word \u201cpython\u201d in their name or description. Similarly, you can use less : dpkg -l | less This will return the same list as the plain \u201c dpkg -l ; however, the results will appear in the less pager , which allows you to search and scroll more easily. You can append | grep \"[string]\" to these commands to filter package list results, or | less to display the results in a pager, regardless of distribution.","title":"Find Packages Installed on Your System"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#find-package-names-and-information","text":"Sometimes the name of a package isn\u2019t intuitive, based on the name of the software. As a result, most package management tools make provide an option to search the package database. These search tools may be helpful if you\u2019re looking for a specific piece of software but don\u2019t know what it\u2019s called. For Debian and Ubuntu systems : apt-cache search [package-name] This will search the local package database for a given term and generate a list with descriptions. An excerpt of the output for apt-cache search python follows: txt2regex - A Regular Expression \"wizard\", all written with bash2 builtins vim-nox - Vi IMproved - enhanced vi editor vim-python - Vi IMproved - enhanced vi editor (transitional package) vtk-examples - C++, Tcl and Python example programs/scripts for VTK zope-plone3 - content management system based on zope and cmf zorp - An advanced protocol analyzing firewall groovy - Agile dynamic language for the Java Virtual Machine python-django - A high-level Python Web framework python-pygresql-dbg - PostgreSQL module for Python (debug extension) python-samba - Python bindings that allow access to various aspects of Samba Note that apt-cache search queries the full records for all of the packages and not simply the titles and the descriptions displayed here, hence the inclusion of vim-nox and groovy which both mention python in their descriptions. To see the full record on a specific package: apt-cache show [package-name] This provides information regarding the maintainer, the dependencies, the size, the homepage of the upstream project, and a description of the software. Since there are often a large number of results for package searches, these commands output a great quantity of text. As a result it is often useful to use tools like grep and less to make these results easier to scroll through. For example: apt-cache search python | grep \"xml\" This will return the subset of the list of packages which matched for the search term \u201cpython\u201d and that mention xml in their name or short description. Similarly: apt-cache search python | less This will return the same list as the plain apt-cache search python but the results will appear in the less pager. This allows you to search and scroll more conveniently. You can append | grep \"[string]\" to any of these commands to filter package search results, or | less to display the results in the less pager, regardless of distribution.","title":"Find Package Names and Information"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#text-manipulation","text":"Among Linux and UNIX-like systems, nearly all system configuration information is stored and manipulated in plain text form. These following sections show a list of basic Linux commands and tools to manipulate text files.","title":"Text Manipulation"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#search-for-a-string-in-files-with-grep","text":"The grep tool allows you to search a stream of text, such as a file or the output of a command, for a term or regex pattern. To use the grep tool, let\u2019s review an example: grep \"^Subject:.*HELP.*\" /home/username/mbox This will search your mail spool for subject lines (i.e. begins with the word \u201cSubject:\"), beginning with any number of characters, containing the word \u201chelp\u201d in upper case, and followed by any number of additional characters. It would then print these results in the terminal. The grep tool provides additional options that, if specified, force the program to output the context for each match (e.g., with -C 2 for two lines of context). With -n , grep outputs the line number of the match. With -H , grep prints the file name for each match, which is useful when you \u201cgrep\u201d a group of files or \u201cgrep\u201d recursively through a file system (using -r ). Use grep --help for more options. To grep a group of files, you can specify the file with a wildcard: grep -i \"morris\" ~/org/*.txt This will find and match against every occurrence of the word \u201cmorris,\u201d while ignoring case (because of the option for -i ). The grep tool will search all files in the ~/org/ directory with a .txt extension. You can use grep to filter the results of another command that sends output to standard out ( stdout ). This is done by \u201cpiping\u201d the output of one command into grep . For instance: ls /home/username/data | grep \"1257\" In this example, we assume that the /home/username/data directory contains a large number of files that have a UNIX time stamp in their file names. The above command will filter the output to only display those tiles that have the four digits \u201c1257\u201d in their file names. In these cases, grep only filters the output of ls and does not look into file contents. For more information regarding grep , refer to our full documentation of the grep command .","title":"Search for a String in Files with grep"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#search-and-replace-across-a-group-of-files","text":"While the grep tool is quite powerful for filtering text on the basis of regular expressions, if you need to edit a file or otherwise manipulate the text, you can use sed . The sed tool, or the Stream EDitor, allows you search for a regex pattern and replace it with another string. sed is extremely powerful, and we recommend that you back up your files and test your sed commands thoroughly before running them. Here is a very simple sed one-liner, intended to illustrate its syntax: sed -i `s/^good/BAD/` morning-star.txt This replaces occurrences of the word \u201cgood\u201d at the beginning of a line (noted by the ^ ) with the string \u201cBAD\u201d in the file morning-star.txt . The option -i tells sed to perform the replacements \u201cin place.\u201d The sed command can make backups of the files it edits if you specify a suffix after the -i option, as in -iBAK . In the above command this option would save the original file as morning-star.txt.BAK before making changes. The general format of a sed statement is: 's/[regex]/[replacement]/' To match literal slashes ( / ), you must escape them with a backslash ( \\ ). As a result, to match a / character you would use \\/ in the sed expression. If you are searching for a string that has multiple slashes, you can replace the slashes which another character. For instance: 's|r/e/g/e/x|regex|' This would strip the slashes from the string r/e/g/e/x so that this string would be regex after running the sed command on the file that contains the string. The following example, from our migrating a server to your Linode document, searches and replaces one IP address with another. In this case 98.76.54.32 is replaced with 12.34.56.78 : sed -i 's/98\\.76\\.54\\.32/12\\.34\\.56\\.78/' In the above example, period characters are escaped as \\. . In regular expressions the full-stop (period) character matches to any character if it is not escaped. For more information about sed refer to our full documentation of text manipulation with sed .","title":"Search and Replace Across a Group of Files"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#edit-text","text":"In many Linode documents, you may be instructed to edit the contents of a file. To do this, you need to use a text editor. Most of the distribution templates that Linode provides come with an implementation of the vi/vim text editor and the nano text editor. These are small, lightweight and powerful text editors that allow you manipulate the text of a file from the terminal environment. There are other options for text editors, notably Emacs and \u201czile.\u201d Feel free to install these programs using your operating system\u2019s package manager. Make sure you search your package database so you can install a version compiled without GUI components (i.e. X11). To open a file, issue a command beginning with the name of the editor you wish to run followed by the name of the file you wish to edit. Here are a number of example commands that open the /etc/hosts file: nano /etc/hosts vi /etc/hosts emacs /etc/hosts zile /etc/hosts When you\u2019ve edited a file, you can save and exit the editor to return to the prompt. This procedure varies between different editors. In Emacs and zile, the key sequence is the same: press control and type x and s to save. This operation is typically notated \u201cC-x C-s\u201d and then \u201cC-x C-c\u201d to close the editor. In nano, press Control-O (notated ^O) and confirm the file name to write the file, and use Control-X to exit from the program. Since vi and vim are modal editors, their operation is a bit more complex. After opening a file in vi, you can enter \u201cinsert\u201d mode by pressing the \u201ci\u201d key; this will let you edit text in the conventional way. To save the file, you must exit into \u201cnormal\u201d mode by pressing the escape key ( Control-[ also sends escape), and then type :wq to write the file and quit the program. This provides only the most basic outline of how to use these text editors, and there are numerous external resources which will provide instructions for more advanced use of this software.","title":"Edit Text"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#web-servers-and-http-issues","text":"Linodes do not come with a web server installed by default. You must install and configure your web server. This allows you to configure your web server in a way that makes sense for your application or website. Linode Guides & Tutorials contains a number of documents regarding the installation and maintenance of various web servers . This section covers a number of basic web serving tasks and functions, as well as some guidance for users new to the world of web servers.","title":"Web Servers and HTTP Issues"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#serve-websites","text":"Web servers work by listening on a TCP port, typically port 80 for HTTP and port 443 for HTTPS. When a visitor makes a request for content, the servers respond by delivering the resource requested. Typically, resources are specified with a URL that contains the protocol, http or https ; a colon and two slashes, :// ; hostname or domain, www.example.com or username.example.com ; and the path to a file, /images/avatar.jpg, or index.html . A full URL would resemble http://www.example.com/images/avatar.jpg . In order to provide these resources to users, your Linode needs to be running a web server. There are many different HTTP servers and countless configurations to provide support for various web development frameworks. The three most popular general use web servers are the Apache HTTP server, Lighttpd (\u201cLighty\u201d), and nginx (\u201cEngine X\u201d). Each server has its strengths and weaknesses, and your choice depends largely on your experience and your needs. Once you\u2019ve chosen a web server, you need to decide what (if any) scripting support you need to install. Scripting support allows you to run dynamic content with your web server and program server side scripts in languages such as Python, PHP, Ruby, and Perl. If you need a full web application stack, we encourage you to consider one of our more full-featured LAMP stack guides . If you need support for a specific web development framework, consult our tutorials for installing and using specific web application frameworks .","title":"Serve Websites"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#how-to-choose-a-web-server","text":"In most situations, end users are unaware of which web server you use. As a result, choosing a web server is often a personal decision based on the comfort of the administrator and the requirements of the deployment in question. This can be a challenge for the new systems administrator. This section offers some guidance by providing some background and information on the most popular web servers. The Apache HTTP Server is considered by some to be the de facto standard web server. It is the most widely deployed open-source web server, its configuration interface has been stable for many years, and its modular architecture allows it to function in many different types of deployments. Apache forms the foundation of the LAMP stack , and supports the integration of dynamic server-side applications into the web server. By contrast, web servers like Lighttpd and nginx are optimized for efficiently serving static content. If you have a deployment where server resources are limited and are facing a great deal of demand, consider one of these servers. They are functional and stable with minimal system resources. Lighttpd and nginx can be more difficult to configure when integrating dynamic content interpreters. Your choice of web servers is based on your needs. Specific choices depend on factors like the type of content you want to serve, the demand for that content, and your comfort with that software as an administrator.","title":"How to Choose a Web Server"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#apache-logs","text":"When there is something wrong with Apache , it can be difficult to determine what the cause of the error is from the behavior of the web server. There are a number of common issues with which you might begin your troubleshooting efforts. When more complex issues arise, you may need to review the Apache error logs. By default, error logs are located in the /var/log/apache2/error.log file (on Debian-based distributions). You can track or \u201ctail\u201d this log with the following command: tail -F /var/log/apache2/error.log In the default virtual host configurations suggested in our Apache installation and LAMP guides , we suggest adding a custom log setting: File: Apache Virtual Host Configuration 1 ErrorLog /var/www//html/example.com/logs/error.log CustomLog /var/www/html/example.com/logs/access.log combined Where example.com represents the name of your virtual host and the location of its resources. These directives make Apache create two log files that contain logging information specific to that virtual host. This allows you to easily troubleshoot errors on specific virtual hosts. To track or tail the error log: tail -F /var/www/html/example.com/logs/error.log This will allow you to see new error messages as they appear. Problems can be diagnosed by using specific parts of an error message from an Apache log as a term in web search. Common errors to look for include: Missing files, or errors in file names Permissions errors Configuration errors Dynamic code execution or interpretation errors","title":"Apache Logs"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#dns-servers-and-domain-names","text":"The Domain Name System , or DNS, is the service that the internet uses to associate the hard to remember and manage IP addresses with more human-usable domain names. This section will address several specific DNS-related tasks. To learn more about DNS, check out our overview of the domain name system . If you are familiar with DNS and just need to figure out how to configure your DNS server, see our guide for the Linode DNS manager .","title":"DNS Servers and Domain Names"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#redirect-dns-queries-with-cnames","text":"CNAME DNS records make it possible to redirect requests for one hostname or domain to another hostname or domain. This is useful in situations where you want to direct requests for one domain to another, but don\u2019t want to set up the web server to handle requests. CNAMEs are only valid when pointing from one domain to another. If you need to redirect a full URL, you will need to set up a web server and configure redirection and/or virtual hosting on the server level. CNAMEs will allow you to redirect subdomains, such as team.example.com , to other subdomains or domains, such as jack.example.org . CNAMEs must point to a valid domain that has a valid A Record, or to another CNAME. Although limited in their capabilities, CNAMEs can be quite useful in some situations. In particular, if you need to change the hostname of a machine, CNAMEs are quite useful. To learn how to set up CNAME records with the Linode Manager , refer to our DNS Manager Guide .","title":"Redirect DNS Queries with CNAMEs"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#set-up-subdomains","text":"When reading domain names , we refer to parts before the main or first-level domain as \u201csubdomains.\u201d For example, in the domain team.example.com , team is a subdomain for the root domain example.com . Follow these steps to create and host a sub-domain : First, create an A Record in the DNS zone for the domain. You can do this using the Linode DNS Manager . You may host the DNS for your domain with any provider you choose. Set up a server to respond to requests sent to this domain. For web servers like Apache , this requires configuring a new virtual host. For XMPP servers you must configure an additional host to receive the requests for this host. For more information, consult the documentation for the specific server you wish to deploy. Once configured, subdomains function almost identically to root domains on your server. If you need to, you can set up HTTP redirection for the new subdomain.","title":"Set Up Subdomains"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#smtp-servers-and-email-issues","text":"We provide a number of guides that cover email-related topics . In this section, we\u2019ll explain how to choose an email setup that fits your needs and how to configure your Linode to send email. Note About Email at Linode This guide may involve or result in sending email. In an effort to fight spam, Linode restricts outbound connections on ports 25, 465, and 587 on all Linodes for new accounts created after November 5th, 2019. For more information, please see Sending Email on Linode . This guide may involve or result in sending email. In an effort to fight spam, Linode restricts \u2026","title":"SMTP Servers and Email Issues"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#choose-an-email-solution","text":"There are two major components that are required for email functionality. The most important part is the SMTP server or \u201cMail Transfer Agent.\u201d The MTA, as it is often called, sends mail from one server to another. The second part of an email system is a server that permits users to access and download that mail from the server to their own machine. Typically these servers use a protocol such as POP3 or IMAP to provide remote access to the mailbox. There may also be other components in the email server tool chain. These components may be optional depending on the requirements of your deployment. They include filtering and delivery tools like procmail , anti-virus filters like ClamAV , mailing list managers like MailMan , and spam filters like SpamAssassin . These components function independently of the MTA and remote mailbox server. The most prevalent SMTP servers or MTAs in the UNIX-like world are Postfix , Exim , and Sendmail . Sendmail has the longest history and many system administrators have extensive experience with it. Postfix is robust and modern, and is compatible with many different configurations. Exim is the default MTA in Debian systems, and many consider it to be easier to use for basic tasks. For remote mailbox access, servers like Courier and Dovecot are popular options. If you need an easy-to-install email solution, consider the Citadel groupware server . Citadel provides an integrated \u201cturnkey\u201d solution that includes an SMTP server, remote mailbox access, real time collaboration tools including XMPP, and a shared calendar interface. Along similar lines, we also provide documentation for the installation of the Zimbra groupware server . If, by contrast, you want a more simple and modular email stack, we urge you to consider one of our guides built around the Postfix SMTP server . Finally, it\u2019s possible to outsource email service to a third-party provider, such as Google Workspace or FastMail.fm . These services allows you to send and receive mail from your domain, without hosting email services on your Linode.","title":"Choose an Email Solution"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#send-email-from-your-server","text":"For simple configurations, you may have no need for a complete email stack like some of those documented in our email guides . However, applications running on that server still need to be able to send mail for notifications and other routine purposes.","title":"Send Email From Your Server"},{"location":"Ubuntu%20Linux%20System%20Administration%20Basics/#how-do-i-manage-files-in-linux","text":"To manage files and directories in Linux you can use wildcard patterns for file manipulation, use commands like gzip , xz , and bzip2 to compress or decompress a file. Commands like copy move and remove can be used to remove files. There are many more commands that can be used, however these are the most common. You can view your current directory by running echo $PWD . To view all items within your current working directory, type ls and press enter. Typing ls will simply output all file names, but if you wish to see more details run the following command: ls -al Output: total 6 drwxr-xr-x 6 linode linode 4096 Nov 30 00:35 . drwxr-xr-x 45 linode linode 4096 Dec 30 00:35 .. drwxr-xr-x 5 linode linode 4096 Nov 30 00:35 20122 drwxr-xr-x 7 linode linode 4096 Nov 30 00:35 20122_db drwxr-xr-x 3 linode linode 4096 Nov 30 00:35 linode_1 -rw-rw-r-- 1 linode linode 93810 Nov 30 00:35 linode.png In the output, the d in drwxr-xr represents a directory and -rw-rw-r-- represents a file since it is not prefaced with d . You can use cp to copy files, mv to move them and rm to delete files. Similarly, you can use mkdir to create directories, and rmdir to remove directories. For efficient Linux administration, you have to be able to handle multiple files recursively. You can use -R option for recursive listing, copying or even deletion. Using Wildcards And Globbing For Better Linux Administration Most other operations we saw in the section above were on a single filesystem, on the entire tree. As complexities in administration grow with your file system, it becomes difficult to use these options. This is where Wildcards and Globbing are extremely helpful. Globbing helps us point to target files using wildcard patterns. Here is how the matching works: * matches any string pattern ? matches any single character [ matches any single character within [ brackets The following example will test a Wildcard to see how you can only filter files that have 3, 5, or between 3-5 characters. In the current directory, we have the following files: ls linode_1 linode_2 linode_3 linode_4 linode_5 Now, if we run the following command: ls linode[3-5] We will get the following output: linode_3 linode_4 linode_5 This page was originally published on Sunday, December 13, 2009.","title":"How Do I Manage Files in Linux?"},{"location":"VPN%20Prime/","text":"VPN Prime 2020-11-24T13.49.43 Install necessary packages - yum update -y && yum install -y epel-release && yum install -y openssl openvpn openvpn-auth-ldap Generate CA certificate cd /etc/openvpn/server openssl genrsa -out ca.key 2048 Generating RSA private key, 4096 bit long modulus ..........................................++ e is 65537 (0x10001) openssl req -new -x509 -days 3650 -key ca.key -out ca.crt You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]: PH State or Province Name (full name) []: NCR Locality Name (eg, city) [Default City]: Quezon City Organization Name (eg, company) [Default Company Ltd]: PRIME Organizational Unit Name (eg, section) []: CA Common Name (eg, your name or your server's hostname) []: PRIME CA Email Address []: support@prime.edu.ph Server certificate openssl genrsa -out server.key 2048 Generating RSA private key, 4096 bit long modulus ..........................................++ e is 65537 (0x10001) openssl req -new -key server.key -out server.csr You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]: PH State or Province Name (full name) []: NCR Locality Name (eg, city) [Default City]: Quezon City Organization Name (eg, company) [Default Company Ltd]: PRIME Organizational Unit Name (eg, section) []: Service Common Name (eg, your name or your server's hostname) []: vpn.prime.edu.ph Email Address []: support@prime.edu.ph openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -CAcreateserial -days 365 Signature ok subject=/C=PH/ST=NCR/L=Quezon City/O=PRIME/OU=Service/CN=vpn.prime.edu.ph/emailAddress=support.eee.upd.edu.ph Getting CA Private Key openssl dhparam -out dh2048.pem 2048 Generating DH parameters, 2048 bit long safe prime, generator 2 This is going to take a long time ..........+.............................++*++ openvpn --genkey --secret ta.key Modify permissions chmod 600 /etc/openvpn/server/*.key Verify the content of the VPN server configuration. vim /etc/openvpn/server/server.conf port 1194 proto udp dev tun ca ca.crt cert server.crt key server.key dh dh2048.pem topology subnet server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 1.1.1.1\" push \"dhcp-option DNS 8.8.8.8\" duplicate-cn keepalive 10 120 tls-auth ta.key 0 cipher AES-256-CBC ;max-clients 100 persist-key persist-tun status openvpn-status.log explicit-exit-notify 1 verb 3 plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so /etc/openvpn/auth/ldap.conf ;reneg-sec 0 ;tun-mtu 1468 ;mssfix 1400 Enable IP forwarding. echo \"net.ipv4.ip_forward = 1\" > /etc/sysctl.d/10-ipv4_forward.conf sysctl -p /etc/sysctl.d/10-ipv4_forward.conf Enable IP masquerading for the VPN subnet. - iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE - iptables-save (Optional) Debugging mode. Make sure you are inside the directory where the configuration file is located. Otherwise, substitute the location of the certificate files with an absolute path in your server.conf . cd /etc/openvpn/server openvpn --config server.conf OpenVPN 2.4.9 x86_64-redhat-linux-gnu [Fedora EPEL patched] [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Apr 24 2020 Thu Oct 8 14:55:42 2020 library versions: OpenSSL 1.0.2k-fips 26 Jan 2017, LZO 2.06 Thu Oct 8 14:55:42 2020 Diffie-Hellman initialized with 2048 bit key Thu Oct 8 14:55:42 2020 Outgoing Control Channel Authentication: Using 160 bit message hash 'SHA1' for HMAC authentication Thu Oct 8 14:55:42 2020 Incoming Control Channel Authentication: Using 160 bit message hash 'SHA1' for HMAC authentication Thu Oct 8 14:55:42 2020 TUN/TAP device tun0 opened Thu Oct 8 14:55:42 2020 TUN/TAP TX queue length set to 100 Thu Oct 8 14:55:42 2020 /sbin/ip link set dev tun0 up mtu 1500 Thu Oct 8 14:55:42 2020 /sbin/ip addr add dev tun0 10.8.0.1/24 broadcast 10.8.0.255 Thu Oct 8 14:55:42 2020 Could not determine IPv4/IPv6 protocol. Using AF_INET Thu Oct 8 14:55:42 2020 Socket Buffers: R=[212992->212992] S=[212992->212992] Thu Oct 8 14:55:42 2020 UDPv4 link local (bound): [AF_INET][undef]:1194 Thu Oct 8 14:55:42 2020 UDPv4 link remote: [AF_UNSPEC] Thu Oct 8 14:55:42 2020 MULTI: multi_init called, r=256 v=256 Thu Oct 8 14:55:42 2020 IFCONFIG POOL: base=10.8.0.2 size=252, ipv6=0 Thu Oct 8 14:55:42 2020 IFCONFIG POOL LIST Thu Oct 8 14:55:42 2020 Initialization Sequence Completed LDAP INTEGRATION cd /etc/openvpn/auth sed -i 's/myorg/prime/g' * sed -i 's/desired_bind_password/strong_bind_password/g' * Start and enable the service on boot. systemctl start openvpn-server@server systemctl enable openvpn-server@server CLIENT CONFIGURATION Generate and sign client certificates. cd /etc/openvpn/client openssl genrsa -out test.user.key 2048 Generating RSA private key, 2048 bit long modulus ..........................................++ e is 65537 (0x10001) openssl req -new -key test.user.key -out test.user.csr You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]: PH State or Province Name (full name) []: NCR Locality Name (eg, city) [Default City]: Quezon City Organization Name (eg, company) [Default Company Ltd]: PRIME Organizational Unit Name (eg, section) []: Support Common Name (eg, your name or your server's hostname) []: test.user Email Address []: test.user@prime.edu.ph Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: openssl x509 -req -in test.user.csr -out test.user.crt -CA ../server/ca.crt -CAkey ../server/ca.key -CAcreateserial -days 365 Signature ok subject=/C=PH/ST=NCR/L=Quezon City/O=PRIME/OU=Support/CN=test.user/emailAddress=test.user@prime.edu.ph Getting CA Private Key Create client VPN profile bash generate.sh OR vim test.user.ovpn line 2: replace with your public IP address insert appropriate certificate content client dev tun proto udp remote 103.137.220.X 1194 cipher AES-256-GCM resolv-retry infinite nobind persist-key persist-tun tls-client key-direction 1 redirect-gateway def1 auth-user-pass <ca> *insert content of ca cert* </ca> <tls-auth> *insert content of ta.key </tls-auth> <cert> *insert content of client cert* </cert> <key> *insert content of client key* </key> Upload the VPN profile to the web server for easy transfer. scp test.user.ovpn tid:~/test-user.ovpn Download them to your devices for use with the OpenVPN Connect app. TID Web Repo","title":"VPN Prime"},{"location":"VPN%20Prime/#vpn-prime","text":"2020-11-24T13.49.43 Install necessary packages - yum update -y && yum install -y epel-release && yum install -y openssl openvpn openvpn-auth-ldap Generate CA certificate cd /etc/openvpn/server openssl genrsa -out ca.key 2048 Generating RSA private key, 4096 bit long modulus ..........................................++ e is 65537 (0x10001) openssl req -new -x509 -days 3650 -key ca.key -out ca.crt You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]: PH State or Province Name (full name) []: NCR Locality Name (eg, city) [Default City]: Quezon City Organization Name (eg, company) [Default Company Ltd]: PRIME Organizational Unit Name (eg, section) []: CA Common Name (eg, your name or your server's hostname) []: PRIME CA Email Address []: support@prime.edu.ph Server certificate openssl genrsa -out server.key 2048 Generating RSA private key, 4096 bit long modulus ..........................................++ e is 65537 (0x10001) openssl req -new -key server.key -out server.csr You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]: PH State or Province Name (full name) []: NCR Locality Name (eg, city) [Default City]: Quezon City Organization Name (eg, company) [Default Company Ltd]: PRIME Organizational Unit Name (eg, section) []: Service Common Name (eg, your name or your server's hostname) []: vpn.prime.edu.ph Email Address []: support@prime.edu.ph openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -CAcreateserial -days 365 Signature ok subject=/C=PH/ST=NCR/L=Quezon City/O=PRIME/OU=Service/CN=vpn.prime.edu.ph/emailAddress=support.eee.upd.edu.ph Getting CA Private Key openssl dhparam -out dh2048.pem 2048 Generating DH parameters, 2048 bit long safe prime, generator 2 This is going to take a long time ..........+.............................++*++ openvpn --genkey --secret ta.key Modify permissions chmod 600 /etc/openvpn/server/*.key Verify the content of the VPN server configuration. vim /etc/openvpn/server/server.conf port 1194 proto udp dev tun ca ca.crt cert server.crt key server.key dh dh2048.pem topology subnet server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt push \"redirect-gateway def1 bypass-dhcp\" push \"dhcp-option DNS 1.1.1.1\" push \"dhcp-option DNS 8.8.8.8\" duplicate-cn keepalive 10 120 tls-auth ta.key 0 cipher AES-256-CBC ;max-clients 100 persist-key persist-tun status openvpn-status.log explicit-exit-notify 1 verb 3 plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so /etc/openvpn/auth/ldap.conf ;reneg-sec 0 ;tun-mtu 1468 ;mssfix 1400","title":"VPN Prime"},{"location":"VPN%20Prime/#_1","text":"Enable IP forwarding. echo \"net.ipv4.ip_forward = 1\" > /etc/sysctl.d/10-ipv4_forward.conf sysctl -p /etc/sysctl.d/10-ipv4_forward.conf Enable IP masquerading for the VPN subnet. - iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE - iptables-save","title":""},{"location":"VPN%20Prime/#_2","text":"(Optional) Debugging mode. Make sure you are inside the directory where the configuration file is located. Otherwise, substitute the location of the certificate files with an absolute path in your server.conf . cd /etc/openvpn/server openvpn --config server.conf OpenVPN 2.4.9 x86_64-redhat-linux-gnu [Fedora EPEL patched] [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Apr 24 2020 Thu Oct 8 14:55:42 2020 library versions: OpenSSL 1.0.2k-fips 26 Jan 2017, LZO 2.06 Thu Oct 8 14:55:42 2020 Diffie-Hellman initialized with 2048 bit key Thu Oct 8 14:55:42 2020 Outgoing Control Channel Authentication: Using 160 bit message hash 'SHA1' for HMAC authentication Thu Oct 8 14:55:42 2020 Incoming Control Channel Authentication: Using 160 bit message hash 'SHA1' for HMAC authentication Thu Oct 8 14:55:42 2020 TUN/TAP device tun0 opened Thu Oct 8 14:55:42 2020 TUN/TAP TX queue length set to 100 Thu Oct 8 14:55:42 2020 /sbin/ip link set dev tun0 up mtu 1500 Thu Oct 8 14:55:42 2020 /sbin/ip addr add dev tun0 10.8.0.1/24 broadcast 10.8.0.255 Thu Oct 8 14:55:42 2020 Could not determine IPv4/IPv6 protocol. Using AF_INET Thu Oct 8 14:55:42 2020 Socket Buffers: R=[212992->212992] S=[212992->212992] Thu Oct 8 14:55:42 2020 UDPv4 link local (bound): [AF_INET][undef]:1194 Thu Oct 8 14:55:42 2020 UDPv4 link remote: [AF_UNSPEC] Thu Oct 8 14:55:42 2020 MULTI: multi_init called, r=256 v=256 Thu Oct 8 14:55:42 2020 IFCONFIG POOL: base=10.8.0.2 size=252, ipv6=0 Thu Oct 8 14:55:42 2020 IFCONFIG POOL LIST Thu Oct 8 14:55:42 2020 Initialization Sequence Completed LDAP INTEGRATION cd /etc/openvpn/auth sed -i 's/myorg/prime/g' * sed -i 's/desired_bind_password/strong_bind_password/g' * Start and enable the service on boot. systemctl start openvpn-server@server systemctl enable openvpn-server@server","title":""},{"location":"VPN%20Prime/#_3","text":"CLIENT CONFIGURATION Generate and sign client certificates. cd /etc/openvpn/client openssl genrsa -out test.user.key 2048 Generating RSA private key, 2048 bit long modulus ..........................................++ e is 65537 (0x10001) openssl req -new -key test.user.key -out test.user.csr You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]: PH State or Province Name (full name) []: NCR Locality Name (eg, city) [Default City]: Quezon City Organization Name (eg, company) [Default Company Ltd]: PRIME Organizational Unit Name (eg, section) []: Support Common Name (eg, your name or your server's hostname) []: test.user Email Address []: test.user@prime.edu.ph Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: openssl x509 -req -in test.user.csr -out test.user.crt -CA ../server/ca.crt -CAkey ../server/ca.key -CAcreateserial -days 365 Signature ok subject=/C=PH/ST=NCR/L=Quezon City/O=PRIME/OU=Support/CN=test.user/emailAddress=test.user@prime.edu.ph Getting CA Private Key","title":""},{"location":"VPN%20Prime/#_4","text":"Create client VPN profile bash generate.sh OR vim test.user.ovpn line 2: replace with your public IP address insert appropriate certificate content client dev tun proto udp remote 103.137.220.X 1194 cipher AES-256-GCM resolv-retry infinite nobind persist-key persist-tun tls-client key-direction 1 redirect-gateway def1 auth-user-pass <ca> *insert content of ca cert* </ca> <tls-auth> *insert content of ta.key </tls-auth> <cert> *insert content of client cert* </cert> <key> *insert content of client key* </key>","title":""},{"location":"VPN%20Prime/#_5","text":"Upload the VPN profile to the web server for easy transfer. scp test.user.ovpn tid:~/test-user.ovpn Download them to your devices for use with the OpenVPN Connect app. TID Web Repo","title":""},{"location":"Welcome%20to%20QOwnNotes/","text":"Welcome to QOwnNotes Welcome to your installation of QOwnNotes ! TODO [ ] Be sure to setup your Nextcloud/ownCloud server in the settings dialog . Keep in mind that you still need to install the Nextcloud/ownCloud sync client to synchronize your notes! [ ] Install QOwnNotesAPI to access note versions and trashed notes . Later [ ] Check out the Important-Shortcuts for more productivity. You can click on links with Ctrl + Click (or Cmd + Click on macOS) in the editor to open them. [ ] Visit https://www.qownnotes.org for more information about QOwnNotes . [ ] Use the to explore the Markdown syntax . [ ] Open the Script repository with Alt + Shift + I to add some additional functionality to QOwnNotes [ ] Add the QOwnNotes Web Companion browser extension to a add notes from the selected text, bookmark management and other features Visit the Chrome Web Store or Firefox Add-ons page to install the extension. [ ] Check Spellchecking to setup spellchecking","title":"Welcome to QOwnNotes"},{"location":"Welcome%20to%20QOwnNotes/#welcome-to-qownnotes","text":"Welcome to your installation of QOwnNotes !","title":"Welcome to QOwnNotes"},{"location":"Welcome%20to%20QOwnNotes/#todo","text":"[ ] Be sure to setup your Nextcloud/ownCloud server in the settings dialog . Keep in mind that you still need to install the Nextcloud/ownCloud sync client to synchronize your notes! [ ] Install QOwnNotesAPI to access note versions and trashed notes .","title":"TODO"},{"location":"Welcome%20to%20QOwnNotes/#later","text":"[ ] Check out the Important-Shortcuts for more productivity. You can click on links with Ctrl + Click (or Cmd + Click on macOS) in the editor to open them. [ ] Visit https://www.qownnotes.org for more information about QOwnNotes . [ ] Use the to explore the Markdown syntax . [ ] Open the Script repository with Alt + Shift + I to add some additional functionality to QOwnNotes [ ] Add the QOwnNotes Web Companion browser extension to a add notes from the selected text, bookmark management and other features Visit the Chrome Web Store or Firefox Add-ons page to install the extension. [ ] Check Spellchecking to setup spellchecking","title":"Later"},{"location":"Zip%20Grade%20Online/","text":"Zip Grade Online \"Verified\" submission is only available for ZipGrade account that has defined Student records and have assigned students to Classes. How to use 'Verified' online submission of quizzes by students A student portal is enabled as an account setting on the 'My Account' screen Students are assigned Student Access Codes, which are visible, exportable, and resettable on the 'Students' tab Teachers distribute the individual Student Access Code to each student along with their existing Student ID number The student logs into the Student Portal (https://ZipGrade.com/student/) with their Student ID number and * Student Access Code to view quizzes assigned to them The teacher, on the individual quiz screen on the website, assigns each quiz to each class with options including: Time/Date Window when student may begin quiz Time Limit: How long is the student allowed for this quiz once they begin Multiple Answer Key PDFs: The students are randomly assigned a question PDF from those uploaded by the teacher Show Score and Questions On Submit: On submission, show the student the graded paper CAVEATS: Student and class records are required Because there is a submission limit, if a student accidentally submits an answer sheet they will not be able to re-take a test unless you remove that graded paper.","title":"Zip Grade Online"},{"location":"Zip%20Grade%20Online/#zip-grade-online","text":"\"Verified\" submission is only available for ZipGrade account that has defined Student records and have assigned students to Classes. How to use 'Verified' online submission of quizzes by students A student portal is enabled as an account setting on the 'My Account' screen Students are assigned Student Access Codes, which are visible, exportable, and resettable on the 'Students' tab Teachers distribute the individual Student Access Code to each student along with their existing Student ID number The student logs into the Student Portal (https://ZipGrade.com/student/) with their Student ID number and * Student Access Code to view quizzes assigned to them The teacher, on the individual quiz screen on the website, assigns each quiz to each class with options including: Time/Date Window when student may begin quiz Time Limit: How long is the student allowed for this quiz once they begin Multiple Answer Key PDFs: The students are randomly assigned a question PDF from those uploaded by the teacher Show Score and Questions On Submit: On submission, show the student the graded paper CAVEATS: Student and class records are required Because there is a submission limit, if a student accidentally submits an answer sheet they will not be able to re-take a test unless you remove that graded paper.","title":"Zip Grade Online"},{"location":"configure%20Nginx%20with%20PHP-FPM/","text":"configure Nginx with PHP-FPM Now you need to configure NGINX to proxy client requests to PHP-FPM, which by default is configured to listen on a UNIX socket as defined by the listen parameter in the /etc/php/7.4/fpm/pool.d/www.conf default pool configuration file. $ sudo vim /etc/php/7.4/fpm/pool.d/www.conf In the default server block configuration file (/etc/nginx/sites-available/default), uncomment the location directive for processing PHP requests to look like the one shown in the following screenshot. $ sudo vim /etc/nginx/sites-available/default Then test the NGINX configuration syntax for correctness. If it is OK, restart the Nginx service to apply the new changes. $ sudo nginx -t $ sudo systemctl restart nginx Now test if NGINX can work in conjunction with PHP-FPM to process PHP requests. Create a simple info.php page under the document root directory. $ echo \"<?php phpinfo(); ?>\" | sudo tee /var/www/html/info.php In your browser, navigate using the following address. The PHP configuration page should load showing as shown in the following screenshot. http://SERVER_IP/info.php","title":"configure Nginx with PHP FPM"},{"location":"configure%20Nginx%20with%20PHP-FPM/#configure-nginx-with-php-fpm","text":"Now you need to configure NGINX to proxy client requests to PHP-FPM, which by default is configured to listen on a UNIX socket as defined by the listen parameter in the /etc/php/7.4/fpm/pool.d/www.conf default pool configuration file. $ sudo vim /etc/php/7.4/fpm/pool.d/www.conf In the default server block configuration file (/etc/nginx/sites-available/default), uncomment the location directive for processing PHP requests to look like the one shown in the following screenshot. $ sudo vim /etc/nginx/sites-available/default Then test the NGINX configuration syntax for correctness. If it is OK, restart the Nginx service to apply the new changes. $ sudo nginx -t $ sudo systemctl restart nginx Now test if NGINX can work in conjunction with PHP-FPM to process PHP requests. Create a simple info.php page under the document root directory. $ echo \"<?php phpinfo(); ?>\" | sudo tee /var/www/html/info.php In your browser, navigate using the following address. The PHP configuration page should load showing as shown in the following screenshot. http://SERVER_IP/info.php","title":"configure Nginx with PHP-FPM"},{"location":"easy%20-%20car%20%28p10114%29/","text":"easy - car (p10114) Kara Van and Lee Sabre are lonesome. A few months ago they took out a loan to buy a new car, but now they\u2019re stuck at home on Saturday night without wheels and without money. You see, there was a wreck and the car was totaled. Their insurance paid $10,000, the current value of the car. The only problem is that they owed the bank $15,000, and the bank wanted payment immediately, since there was no longer a car for collateral. In just a few moments, this unfortunate couple not only lost their car, but lost an additional $5,000 in cash too. What Kara and Lee failed to account for was depreciation, the loss in value as the car ages. Each month the buyer\u2019s loan payment reduces the amount owed on the car. However, each month, the car also depreciates as it gets older. Your task is to write a program that calculates the first time, measured in months, that a car buyer owes less money than a car is worth. For this problem, depreciation is specified as a percentage of the previous month\u2019s value. What Kara and Lee failed to account for was depreciation, the loss in value as the car ages. Each month the buyer\u2019s loan payment reduces the amount owed on the car. However, each month, the car also depreciates as it gets older. Your task is to write a program that calculates the first time, measured in months, that a car buyer owes less money than a car is worth. For this problem, depreciation is specified as a percentage of the previous month\u2019s value. Input Input consists of information for several loans. Each loan consists of one line containing the duration in months of the loan, the down payment, the amount of the loan, and the number of depreciation records that follow. All values are nonnegative, with loans being at most 100 months long and car values at most $75,000. Since depreciation is not constant, the varying rates are specified in a series of depreciation records. Each depreciation record consists of one line with a month number and depreciation percentage, which is more than 0 and less than 1. These are in strictly increasing order by month, starting at month 0. Month 0 is the depreciation that applies immediately after driving the car off the lot and is always present in the data. All the other percentages are the amount of depreciation at the end of the corresponding month. Not all months may be listed in the data. If a month is not listed, then the previous depreciation percentage applies. The end of the input is signalled by a negative loan duration- the other three values will be present but indeterminate. For simplicity, we will assume a 0% interest loan, thus the car\u2019s initial value will be the loan amount plus the down payment. It is possible for a car\u2019s value and amount owed to be positive numbers less than $1.00. Do not round values to a whole number of cents ($7,347.635 should not be rounded to $7,347.64). Consider the first example below of borrowing $15,000 for 30 months. As the buyer drives off the lot, he still owes $15,000, but the car has dropped in value by 10% to $13,950. After 4 months, the buyer has made 4 payments, each of $500, and the car has further depreciated 3% in months 1 and 2 and 0.2% in months 3 and 4. At this time, the car is worth $13,073.10528 and the borrower only owes $13,000. Output For each loan, the output is the number of complete months before the borrower owes less than the car is worth. Note that English requires plurals (5 months) on all values other than one (1 month). Sample Input Put the following in an input textfile and rename it car_in.txt . 30 500.0 15000.0 3 0 .10 1 .03 3 .002 12 500.0 9999.99 2 0 .05 2 .1 60 2400.0 30000.0 3 0 .2 1 .05 12 .025 -99 0 17000 1 Sample Output Output the following in the terminal 4 months 1 month 49 months Codepost Guide Create a program to solve the problem and rename it to car.cpp . Upload the file to codepost.io An input textfile named car_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o car car.cpp sample run command: ./car car_in.txt corresponding output: 4 months 1 month 49 months Sir Roy's Solution ``` / * * * * * * * * * * * easy - car (p10114) * * Calculate when (in months) the value of the car surpasses the bank loan * sample compile command: g++ -o car car.cpp sample run command: ./car car_in.txt corresponding output: 4 months 1 month 49 months * * * * * * * * * */ include using namespace std; int months; float downpayment; float loan; int dep_count; vector < pair > v; int dep_month; float dep_percent; ifstream file; void get_input(); void simulate_loan_payment(); int main (int input_count, char* input_array[]) { file.open (input_array[1]); if (!file){ cout << \"no file\" << endl; } else { while(1){ get_input(); if (months < 0){ return 1; } simulate_loan_payment(); } } file.close(); } //////////////////////////////////////////////////////////////////////////////// void get_input(){ file >> months >> downpayment >> loan >> dep_count; if (months < 0){ return ; } v.clear(); for (int i=0; i< dep_count; i++){ file >> dep_month >> dep_percent; v.push_back( make_pair( dep_month, dep_percent)); } // cout << months << endl; // cout << downpayment << endl; // cout << loan << endl; // cout << dep_count << endl; // for( auto &x : v){ // cout << x.first << \" \" << x.second << \" \"; // } // cout << endl; } ///////////////////////////////////////////////////////////////////////////////////// void simulate_loan_payment(){ float loan_val= loan ; float car_val= loan + downpayment; float ammortization = loan/ months; for (int i=0; i<months ; i++){ // figure out the new car value for (int j=0; j< dep_count ;j++ ){ if( v[j].first > i ){ dep_percent = v[j-1].second; // cout << j << endl; break; } if (v[j].first == i){ dep_percent = v[j].second; } } // cout << \"car_val * dep_percent -> \" << car_val << \" * \" << dep_percent <<endl; car_val -= car_val* dep_percent; // cout << \"value of loan: \" << loan_val << endl; // cout << \"value of car: \" << car_val << endl; if (car_val > loan_val) { if (i > 1){ cout << i << \" months \" << endl; break; } else if (i == 1 ){ cout << i << \" month \" << endl; break; } } loan_val -= ammortization; } } ```","title":"Easy   car (p10114)"},{"location":"easy%20-%20car%20%28p10114%29/#easy-car-p10114","text":"Kara Van and Lee Sabre are lonesome. A few months ago they took out a loan to buy a new car, but now they\u2019re stuck at home on Saturday night without wheels and without money. You see, there was a wreck and the car was totaled. Their insurance paid $10,000, the current value of the car. The only problem is that they owed the bank $15,000, and the bank wanted payment immediately, since there was no longer a car for collateral. In just a few moments, this unfortunate couple not only lost their car, but lost an additional $5,000 in cash too. What Kara and Lee failed to account for was depreciation, the loss in value as the car ages. Each month the buyer\u2019s loan payment reduces the amount owed on the car. However, each month, the car also depreciates as it gets older. Your task is to write a program that calculates the first time, measured in months, that a car buyer owes less money than a car is worth. For this problem, depreciation is specified as a percentage of the previous month\u2019s value. What Kara and Lee failed to account for was depreciation, the loss in value as the car ages. Each month the buyer\u2019s loan payment reduces the amount owed on the car. However, each month, the car also depreciates as it gets older. Your task is to write a program that calculates the first time, measured in months, that a car buyer owes less money than a car is worth. For this problem, depreciation is specified as a percentage of the previous month\u2019s value.","title":"easy - car (p10114)"},{"location":"easy%20-%20car%20%28p10114%29/#input","text":"Input consists of information for several loans. Each loan consists of one line containing the duration in months of the loan, the down payment, the amount of the loan, and the number of depreciation records that follow. All values are nonnegative, with loans being at most 100 months long and car values at most $75,000. Since depreciation is not constant, the varying rates are specified in a series of depreciation records. Each depreciation record consists of one line with a month number and depreciation percentage, which is more than 0 and less than 1. These are in strictly increasing order by month, starting at month 0. Month 0 is the depreciation that applies immediately after driving the car off the lot and is always present in the data. All the other percentages are the amount of depreciation at the end of the corresponding month. Not all months may be listed in the data. If a month is not listed, then the previous depreciation percentage applies. The end of the input is signalled by a negative loan duration- the other three values will be present but indeterminate. For simplicity, we will assume a 0% interest loan, thus the car\u2019s initial value will be the loan amount plus the down payment. It is possible for a car\u2019s value and amount owed to be positive numbers less than $1.00. Do not round values to a whole number of cents ($7,347.635 should not be rounded to $7,347.64). Consider the first example below of borrowing $15,000 for 30 months. As the buyer drives off the lot, he still owes $15,000, but the car has dropped in value by 10% to $13,950. After 4 months, the buyer has made 4 payments, each of $500, and the car has further depreciated 3% in months 1 and 2 and 0.2% in months 3 and 4. At this time, the car is worth $13,073.10528 and the borrower only owes $13,000.","title":"Input"},{"location":"easy%20-%20car%20%28p10114%29/#output","text":"For each loan, the output is the number of complete months before the borrower owes less than the car is worth. Note that English requires plurals (5 months) on all values other than one (1 month).","title":"Output"},{"location":"easy%20-%20car%20%28p10114%29/#sample-input","text":"Put the following in an input textfile and rename it car_in.txt . 30 500.0 15000.0 3 0 .10 1 .03 3 .002 12 500.0 9999.99 2 0 .05 2 .1 60 2400.0 30000.0 3 0 .2 1 .05 12 .025 -99 0 17000 1","title":"Sample Input"},{"location":"easy%20-%20car%20%28p10114%29/#sample-output","text":"Output the following in the terminal 4 months 1 month 49 months","title":"Sample Output"},{"location":"easy%20-%20car%20%28p10114%29/#codepost-guide","text":"Create a program to solve the problem and rename it to car.cpp . Upload the file to codepost.io An input textfile named car_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o car car.cpp sample run command: ./car car_in.txt corresponding output: 4 months 1 month 49 months","title":"Codepost Guide"},{"location":"easy%20-%20car%20%28p10114%29/#sir-roys-solution","text":"``` / * * * * * * * * * * * easy - car (p10114) * * Calculate when (in months) the value of the car surpasses the bank loan * sample compile command: g++ -o car car.cpp sample run command: ./car car_in.txt corresponding output: 4 months 1 month 49 months * * * * * * * * * */","title":"Sir Roy's Solution"},{"location":"easy%20-%20car%20%28p10114%29/#include","text":"using namespace std; int months; float downpayment; float loan; int dep_count; vector < pair > v; int dep_month; float dep_percent; ifstream file; void get_input(); void simulate_loan_payment(); int main (int input_count, char* input_array[]) { file.open (input_array[1]); if (!file){ cout << \"no file\" << endl; } else { while(1){ get_input(); if (months < 0){ return 1; } simulate_loan_payment(); } } file.close(); } //////////////////////////////////////////////////////////////////////////////// void get_input(){ file >> months >> downpayment >> loan >> dep_count; if (months < 0){ return ; } v.clear(); for (int i=0; i< dep_count; i++){ file >> dep_month >> dep_percent; v.push_back( make_pair( dep_month, dep_percent)); } // cout << months << endl; // cout << downpayment << endl; // cout << loan << endl; // cout << dep_count << endl; // for( auto &x : v){ // cout << x.first << \" \" << x.second << \" \"; // } // cout << endl; } ///////////////////////////////////////////////////////////////////////////////////// void simulate_loan_payment(){ float loan_val= loan ; float car_val= loan + downpayment; float ammortization = loan/ months; for (int i=0; i<months ; i++){ // figure out the new car value for (int j=0; j< dep_count ;j++ ){ if( v[j].first > i ){ dep_percent = v[j-1].second; // cout << j << endl; break; } if (v[j].first == i){ dep_percent = v[j].second; } } // cout << \"car_val * dep_percent -> \" << car_val << \" * \" << dep_percent <<endl; car_val -= car_val* dep_percent; // cout << \"value of loan: \" << loan_val << endl; // cout << \"value of car: \" << car_val << endl; if (car_val > loan_val) { if (i > 1){ cout << i << \" months \" << endl; break; } else if (i == 1 ){ cout << i << \" month \" << endl; break; } } loan_val -= ammortization; } } ```","title":"include "},{"location":"easy%20-%20excursion%20%28p11559%29/","text":"easy - excursion (p11559) As you didn\u2019t show up to the yearly general meeting of the Nordic Club of Pin Collectors, you were unanimously elected to organize this years excursion to Pin City. You are free to choose from a number of weekends this autumn, and have to find a suitable hotel to stay at, preferably as cheap as possible. You have some constraints: The total cost of the trip must be within budget, of course. All participants must stay at the same hotel, to avoid last years catastrophe, where some members got lost in the city, never being seen again. Input The input file contains several test cases, each of them as described below. The first line of input consists of four integers: 1 \u2264 N \u2264 200, the number of participants, 1 \u2264 B \u2264 500000, the budget, 1 \u2264 H \u2264 18, the number of hotels to consider, and 1 \u2264 W \u2264 13, the number of weeks you can choose between. Then follow two lines for each of the H hotels. The first gives 1 \u2264 p \u2264 10000, the price for one person staying the weekend at the hotel. The second contains W integers, 0 \u2264 a \u2264 1000, giving the number of available beds for each weekend at the hotel. Output For each test case, write to the output the minimum cost of the stay for your group, or \u201cstay home\u201d if nothing can be found within the budget, on a line by itself. Sample Input Put the following in an input textfile and rename it excursion_in.txt . 3 1000 2 3 200 0 2 2 300 27 3 20 5 2000 2 4 300 4 3 0 4 450 7 8 0 13 Sample Output Output the following in the terminal 900 stay home Codepost Guide Create a program to solve the problem and rename it to excursion.cpp . Upload the file to codepost.io An input textfile named excursion_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o excursion excursion.cpp sample run command: ./car excursion_in.txt corresponding output: 900 stay home Working Code Template /******************************************************* * * easy - excursion (p11559) * * determine the best price for the hotel stay * given the input textfile * sample compile command: g++ -o excursion excursion.cpp sample run command: ./excursion excursion_in.txt corresponding output: 900 stay home * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int participants=0; int budget=0; int hotels=0; int bed_count=0; int min_cost = 0; int cost=0; int main (int input_count, char* input_array[]) { ifstream file( input_array[1] ); // loop through the test cases while(!file.eof()){ file >> participants; file >> budget; file >> hotels; file >> bed_count; min_cost = 0; // change the code below to solve the problem. cout << \"Case: \" << participants << \" \" << budget << \" \" << hotels << \" \" << bed_count << endl; // loop through the hotels for (int i=0; i< hotels; i++){ file >> cost; cout << \"hotel: \" << cost << endl; cout << \"beds: \" ; // loop through the bed count for(int j=0; j<bed_count; j++){ int beds; file >> beds; cout << beds << \" \" ; } cout << endl; } } file.close(); } Sir Roy's Solution /******************************************************* * * easy - excursion (p11559) * * determine the best price for the hotel stay * given the input textfile * sample compile command: g++ -o excursion excursion.cpp sample run command: ./excursion excursion_in.txt corresponding output: 900 stay home * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int participants=0; int budget=0; int hotels=0; int bed_count=0; int min_cost = 0; int cost=0; bool over_budget(){ return cost*participants > budget ? true: false; } int main (int input_count, char* input_array[]) { ifstream file(\"excursion_in.txt\"); // loop through the test cases while(!file.eof()){ file >> participants; file >> budget; file >> hotels; file >> bed_count; min_cost = 0; // cout << participants << \" \" << budget << \" \" << hotels << \" \" << bed_count << endl; // loop through the hotels for (int i=0; i< hotels; i++){ file >> cost; // cout << \"hotel: \" << cost << endl; // cout << \"beds: \" ; // loop through the bed count for(int j=0; j<bed_count; j++){ int beds; file >> beds; // cout << beds << \" \" ; if (beds < participants){ // continue; } else{ if (!over_budget()){ if (min_cost == 0 || (participants*cost) < min_cost ) { min_cost = participants * cost; //break; } } } } // cout << endl; } if (min_cost != 0) { cout << min_cost << endl ; } else{ cout << \"stay home\" << endl; } //return 1; } file.close(); }","title":"Easy   excursion (p11559)"},{"location":"easy%20-%20excursion%20%28p11559%29/#easy-excursion-p11559","text":"As you didn\u2019t show up to the yearly general meeting of the Nordic Club of Pin Collectors, you were unanimously elected to organize this years excursion to Pin City. You are free to choose from a number of weekends this autumn, and have to find a suitable hotel to stay at, preferably as cheap as possible. You have some constraints: The total cost of the trip must be within budget, of course. All participants must stay at the same hotel, to avoid last years catastrophe, where some members got lost in the city, never being seen again.","title":"easy - excursion (p11559)"},{"location":"easy%20-%20excursion%20%28p11559%29/#input","text":"The input file contains several test cases, each of them as described below. The first line of input consists of four integers: 1 \u2264 N \u2264 200, the number of participants, 1 \u2264 B \u2264 500000, the budget, 1 \u2264 H \u2264 18, the number of hotels to consider, and 1 \u2264 W \u2264 13, the number of weeks you can choose between. Then follow two lines for each of the H hotels. The first gives 1 \u2264 p \u2264 10000, the price for one person staying the weekend at the hotel. The second contains W integers, 0 \u2264 a \u2264 1000, giving the number of available beds for each weekend at the hotel.","title":"Input"},{"location":"easy%20-%20excursion%20%28p11559%29/#output","text":"For each test case, write to the output the minimum cost of the stay for your group, or \u201cstay home\u201d if nothing can be found within the budget, on a line by itself.","title":"Output"},{"location":"easy%20-%20excursion%20%28p11559%29/#sample-input","text":"Put the following in an input textfile and rename it excursion_in.txt . 3 1000 2 3 200 0 2 2 300 27 3 20 5 2000 2 4 300 4 3 0 4 450 7 8 0 13","title":"Sample Input"},{"location":"easy%20-%20excursion%20%28p11559%29/#sample-output","text":"Output the following in the terminal 900 stay home","title":"Sample Output"},{"location":"easy%20-%20excursion%20%28p11559%29/#codepost-guide","text":"Create a program to solve the problem and rename it to excursion.cpp . Upload the file to codepost.io An input textfile named excursion_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o excursion excursion.cpp sample run command: ./car excursion_in.txt corresponding output: 900 stay home","title":"Codepost Guide"},{"location":"easy%20-%20excursion%20%28p11559%29/#working-code-template","text":"/******************************************************* * * easy - excursion (p11559) * * determine the best price for the hotel stay * given the input textfile * sample compile command: g++ -o excursion excursion.cpp sample run command: ./excursion excursion_in.txt corresponding output: 900 stay home * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int participants=0; int budget=0; int hotels=0; int bed_count=0; int min_cost = 0; int cost=0; int main (int input_count, char* input_array[]) { ifstream file( input_array[1] ); // loop through the test cases while(!file.eof()){ file >> participants; file >> budget; file >> hotels; file >> bed_count; min_cost = 0; // change the code below to solve the problem. cout << \"Case: \" << participants << \" \" << budget << \" \" << hotels << \" \" << bed_count << endl; // loop through the hotels for (int i=0; i< hotels; i++){ file >> cost; cout << \"hotel: \" << cost << endl; cout << \"beds: \" ; // loop through the bed count for(int j=0; j<bed_count; j++){ int beds; file >> beds; cout << beds << \" \" ; } cout << endl; } } file.close(); }","title":"Working Code Template"},{"location":"easy%20-%20excursion%20%28p11559%29/#sir-roys-solution","text":"/******************************************************* * * easy - excursion (p11559) * * determine the best price for the hotel stay * given the input textfile * sample compile command: g++ -o excursion excursion.cpp sample run command: ./excursion excursion_in.txt corresponding output: 900 stay home * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int participants=0; int budget=0; int hotels=0; int bed_count=0; int min_cost = 0; int cost=0; bool over_budget(){ return cost*participants > budget ? true: false; } int main (int input_count, char* input_array[]) { ifstream file(\"excursion_in.txt\"); // loop through the test cases while(!file.eof()){ file >> participants; file >> budget; file >> hotels; file >> bed_count; min_cost = 0; // cout << participants << \" \" << budget << \" \" << hotels << \" \" << bed_count << endl; // loop through the hotels for (int i=0; i< hotels; i++){ file >> cost; // cout << \"hotel: \" << cost << endl; // cout << \"beds: \" ; // loop through the bed count for(int j=0; j<bed_count; j++){ int beds; file >> beds; // cout << beds << \" \" ; if (beds < participants){ // continue; } else{ if (!over_budget()){ if (min_cost == 0 || (participants*cost) < min_cost ) { min_cost = participants * cost; //break; } } } } // cout << endl; } if (min_cost != 0) { cout << min_cost << endl ; } else{ cout << \"stay home\" << endl; } //return 1; } file.close(); }","title":"Sir Roy's Solution"},{"location":"easy%20-%20farm%20%28p10300%29/","text":"easy - farm (p10300) German farmers are given a premium depending on the conditions at their farmyard. Imagine the following simplified regulation: you know the size of each farmer\u2019s farmyard in square meters and the number of animals living at it. We won\u2019t make a difference between different animals, although this is far from reality. Moreover you have information about the degree the farmer uses environment-friendly equipment and practices, expressed in a single integer greater than zero. The amount of money a farmer receives can be calculated from these parameters as follows. First you need the space a single animal occupies at an average. This value (in square meters) is then multiplied by the parameter that stands for the farmer\u2019s environment-friendliness, resulting in the premium a farmer is paid per animal he owns. To compute the final premium of a farmer just multiply this premium per animal with the number of animals the farmer owns. Input The first line of input contains a single positive integer n (< 20), the number of test cases. Each test case starts with a line containing a single integer f (0 < f < 20), the number of farmers in the test case. This line is followed by one line per farmer containing three positive integers each: the size of the farmyard in square meters, the number of animals he owns and the integer value that expresses the farmers environment-friendliness. Input is terminated by end of file. No integer in the input is greater than 100000 or less than 0. Output For each test case output one line containing a single integer that holds the summed burden for Germany\u2019s budget, which will always be a whole number. Do not output any blank lines. Sample Input Put the following in an input textfile and rename it farm_in.txt . 3 5 1 1 1 2 2 2 3 3 3 2 3 4 8 9 2 3 9 1 8 6 12 1 8 1 1 3 10 30 40 9 8 5 100 1000 70 Sample Output Output the following in the terminal 38 86 7445 Codepost Guide Create a program to solve the problem and rename it to farm.cpp . Upload the file to codepost.io An input textfile named farm_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o farm farm.cpp sample run command: ./farm farm_in.txt corresponding output: 38 86 7445 Working Code Template /******************************************************* * * easy - farm (p10300) * * compute the german subsidy to farmers * simplified ( area x environmental-friendliness ) * sample compile command: g++ -o farm farm.cpp sample run command: ./farm farm_in.txt corresponding output: 38 86 7445 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { ifstream file( input_array[1] ); int cases ; file >> cases; for (int i=0; i< cases; i++){ int farms; file >> farms; int total_farm_score = 0; // change the following code to solve the problem cout << farms << endl; } } Sir Roy's Solution /******************************************************* * * easy - farm (p10300) * * compute the german subsidy to farmers * simplified ( area x environmental-friendliness ) * sample compile command: g++ -o farm farm.cpp sample run command: ./farm farm_in.txt corresponding output: 38 86 7445 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { ifstream file( input_array[1] ); int cases ; file >> cases; for (int i=0; i< cases; i++){ int farms; file >> farms; int total_farm_score = 0; for (int j=0; j<farms; j++){ int area; int animals; int environmental_friendliness; file >> area >> animals >> environmental_friendliness; int farm_score = area * environmental_friendliness; total_farm_score += farm_score; } cout << total_farm_score << endl; } }","title":"Easy   farm (p10300)"},{"location":"easy%20-%20farm%20%28p10300%29/#easy-farm-p10300","text":"German farmers are given a premium depending on the conditions at their farmyard. Imagine the following simplified regulation: you know the size of each farmer\u2019s farmyard in square meters and the number of animals living at it. We won\u2019t make a difference between different animals, although this is far from reality. Moreover you have information about the degree the farmer uses environment-friendly equipment and practices, expressed in a single integer greater than zero. The amount of money a farmer receives can be calculated from these parameters as follows. First you need the space a single animal occupies at an average. This value (in square meters) is then multiplied by the parameter that stands for the farmer\u2019s environment-friendliness, resulting in the premium a farmer is paid per animal he owns. To compute the final premium of a farmer just multiply this premium per animal with the number of animals the farmer owns.","title":"easy - farm (p10300)"},{"location":"easy%20-%20farm%20%28p10300%29/#input","text":"The first line of input contains a single positive integer n (< 20), the number of test cases. Each test case starts with a line containing a single integer f (0 < f < 20), the number of farmers in the test case. This line is followed by one line per farmer containing three positive integers each: the size of the farmyard in square meters, the number of animals he owns and the integer value that expresses the farmers environment-friendliness. Input is terminated by end of file. No integer in the input is greater than 100000 or less than 0.","title":"Input"},{"location":"easy%20-%20farm%20%28p10300%29/#output","text":"For each test case output one line containing a single integer that holds the summed burden for Germany\u2019s budget, which will always be a whole number. Do not output any blank lines.","title":"Output"},{"location":"easy%20-%20farm%20%28p10300%29/#sample-input","text":"Put the following in an input textfile and rename it farm_in.txt . 3 5 1 1 1 2 2 2 3 3 3 2 3 4 8 9 2 3 9 1 8 6 12 1 8 1 1 3 10 30 40 9 8 5 100 1000 70","title":"Sample Input"},{"location":"easy%20-%20farm%20%28p10300%29/#sample-output","text":"Output the following in the terminal 38 86 7445","title":"Sample Output"},{"location":"easy%20-%20farm%20%28p10300%29/#codepost-guide","text":"Create a program to solve the problem and rename it to farm.cpp . Upload the file to codepost.io An input textfile named farm_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o farm farm.cpp sample run command: ./farm farm_in.txt corresponding output: 38 86 7445","title":"Codepost Guide"},{"location":"easy%20-%20farm%20%28p10300%29/#working-code-template","text":"/******************************************************* * * easy - farm (p10300) * * compute the german subsidy to farmers * simplified ( area x environmental-friendliness ) * sample compile command: g++ -o farm farm.cpp sample run command: ./farm farm_in.txt corresponding output: 38 86 7445 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { ifstream file( input_array[1] ); int cases ; file >> cases; for (int i=0; i< cases; i++){ int farms; file >> farms; int total_farm_score = 0; // change the following code to solve the problem cout << farms << endl; } }","title":"Working Code Template"},{"location":"easy%20-%20farm%20%28p10300%29/#sir-roys-solution","text":"/******************************************************* * * easy - farm (p10300) * * compute the german subsidy to farmers * simplified ( area x environmental-friendliness ) * sample compile command: g++ -o farm farm.cpp sample run command: ./farm farm_in.txt corresponding output: 38 86 7445 * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { ifstream file( input_array[1] ); int cases ; file >> cases; for (int i=0; i< cases; i++){ int farms; file >> farms; int total_farm_score = 0; for (int j=0; j<farms; j++){ int area; int animals; int environmental_friendliness; file >> area >> animals >> environmental_friendliness; int farm_score = area * environmental_friendliness; total_farm_score += farm_score; } cout << total_farm_score << endl; } }","title":"Sir Roy's Solution"},{"location":"easy%20-%20gn%20%28p11332%29/","text":"easy - gn (p11332) For a positive integer n, let f (n) denote the sum of the digits of n when represented in base 10. It is easy to see that the sequence of numbers n, f (n), f (f (n)), f (f (f (n))), . . . eventually becomes a single digit number that repeats for- ever. Let this single digit be denoted g(n). For example, consider n = 1234567892. Then: f (n) = 1+2+3+4+5+6+7+8+9+2 = 47 f (f (n)) = 4 + 7 = 11 f (f (f (n))) = 1 + 1 = 2 Therefore, g(1234567892) = 2. Input Each line of input contains a single positive integer n at most 2,000,000,000. Output For each such integer, you are to output a single line containing g(n). Sample Input/ Output Input Output 2 2 11 2 47 2 1234567892 2 Codepost Guide Create a program to solve the problem and rename it to gn.cpp . Upload the file to codepost.io sample compile command: g++ -o gn gn.cpp sample run command: ./gn 47 corresponding output: 2 Working Template Code /****************************************************** * * easy - gn (p11332) * * For a positive integer n, let f (n) denote the sum of the digits of n when represented in base 10. It is easy to see that the sequence of numbers n, f (n), f (f (n)), f (f (f (n))), . . . eventually becomes a single digit number that repeats for- ever. Let this single digit be denoted g(n). * sample compile command: g++ -o gn gn.cpp sample run command: ./gn 47 corresponding output: 2 * * ***************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { string n = input_array[1] ; // change the code below to solve the problem cout << n << endl; } Sir Roy's Solution /****************************************************** * * easy - gn (p11332) * * For a positive integer n, let f (n) denote the sum of the digits of n when represented in base 10. It is easy to see that the sequence of numbers n, f (n), f (f (n)), f (f (f (n))), . . . eventually becomes a single digit number that repeats for- ever. Let this single digit be denoted g(n). * sample compile command: g++ -o gn gn.cpp sample run command: ./gn 47 corresponding output: 2 * * ***************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { string n = input_array[1] ; // change the code below to solve the problem while (n.length() > 1){ int sum = 0; for (int i=0; i<n.length(); i++){ sum += (int)n[i] - (int)'0'; } n = to_string(sum); } cout << n << endl; } ****","title":"Easy   gn (p11332)"},{"location":"easy%20-%20gn%20%28p11332%29/#easy-gn-p11332","text":"For a positive integer n, let f (n) denote the sum of the digits of n when represented in base 10. It is easy to see that the sequence of numbers n, f (n), f (f (n)), f (f (f (n))), . . . eventually becomes a single digit number that repeats for- ever. Let this single digit be denoted g(n). For example, consider n = 1234567892. Then: f (n) = 1+2+3+4+5+6+7+8+9+2 = 47 f (f (n)) = 4 + 7 = 11 f (f (f (n))) = 1 + 1 = 2 Therefore, g(1234567892) = 2.","title":"easy - gn (p11332)"},{"location":"easy%20-%20gn%20%28p11332%29/#input","text":"Each line of input contains a single positive integer n at most 2,000,000,000.","title":"Input"},{"location":"easy%20-%20gn%20%28p11332%29/#output","text":"For each such integer, you are to output a single line containing g(n).","title":"Output"},{"location":"easy%20-%20gn%20%28p11332%29/#sample-input-output","text":"Input Output 2 2 11 2 47 2 1234567892 2","title":"Sample Input/ Output"},{"location":"easy%20-%20gn%20%28p11332%29/#codepost-guide","text":"Create a program to solve the problem and rename it to gn.cpp . Upload the file to codepost.io sample compile command: g++ -o gn gn.cpp sample run command: ./gn 47 corresponding output: 2","title":"Codepost Guide"},{"location":"easy%20-%20gn%20%28p11332%29/#working-template-code","text":"/****************************************************** * * easy - gn (p11332) * * For a positive integer n, let f (n) denote the sum of the digits of n when represented in base 10. It is easy to see that the sequence of numbers n, f (n), f (f (n)), f (f (f (n))), . . . eventually becomes a single digit number that repeats for- ever. Let this single digit be denoted g(n). * sample compile command: g++ -o gn gn.cpp sample run command: ./gn 47 corresponding output: 2 * * ***************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { string n = input_array[1] ; // change the code below to solve the problem cout << n << endl; }","title":"Working Template Code"},{"location":"easy%20-%20gn%20%28p11332%29/#sir-roys-solution","text":"/****************************************************** * * easy - gn (p11332) * * For a positive integer n, let f (n) denote the sum of the digits of n when represented in base 10. It is easy to see that the sequence of numbers n, f (n), f (f (n)), f (f (f (n))), . . . eventually becomes a single digit number that repeats for- ever. Let this single digit be denoted g(n). * sample compile command: g++ -o gn gn.cpp sample run command: ./gn 47 corresponding output: 2 * * ***************************************************/ #include <iostream> using namespace std; int main (int input_count, char* input_array[]) { string n = input_array[1] ; // change the code below to solve the problem while (n.length() > 1){ int sum = 0; for (int i=0; i<n.length(); i++){ sum += (int)n[i] - (int)'0'; } n = to_string(sum); } cout << n << endl; } ****","title":"Sir Roy's Solution"},{"location":"easy%20-%20google%20%28p12015%29/","text":"easy - google (p12015) Google is one of the most famous Internet search engines which hosts and develops a number of Internet- based services and products. On its search engine website, an interesting button \u2018I\u2019m feeling lucky\u2019 attracts our eyes. This feature could allow the user skip the search result page and goes directly to the first ranked page. Amazing! It saves a lot of time. The question is, when one types some keywords and presses \u2018I\u2019m feeling lucky\u2019 button, which web page will appear? Google does a lot and comes up with excellent approaches to deal with it. In this simplified problem, let us just consider that Google assigns every web page an integer-valued relevance. The most related page will be chosen. If there is a tie, all the pages with the highest relevance are possible to be chosen. Your task is simple, given 10 web pages and their relevance. Just pick out all the possible candidates which will be served to the user when \u2018I\u2019m feeling lucky\u2019. Input The input contains multiple test cases. The number of test cases T is in the first line of the input file. For each test case, there are 10 lines, describing the web page and the relevance. Each line contains a character string without any blank characters denoting the URL of this web page and an integer V i denoting the relevance of this web page. The length of the URL is between 1 and 100 inclusively. (1 \u2264 V i \u2264 100) Output For each test case, output several lines which are the URLs of the web pages which are possible to be chosen. The order of the URLs is the same as the input. Please look at the sample output for further information of output format. Sample Input Put the following in an input textfile and rename it google_in.txt . 2 www.youtube.com 1 www.google.com 2 www.google.com.hk 3 www.alibaba.com 10 www.taobao.com 5 www.bad.com 10 www.good.com 7 www.fudan.edu.cn 8 www.university.edu.cn 9 acm.university.edu.cn 10 www.youtube.com 1 www.google.com 2 www.google.com.hk 3 www.alibaba.com 11 www.taobao.com 5 www.bad.com 10 www.good.com 7 www.fudan.edu.cn 8 acm.university.edu.cn 9 acm.university.edu.cn 10 Sample Output Output the following in the terminal Case #1: www.alibaba.com www.bad.com acm.university.edu.cn Case #2: www.alibaba.com Codepost Guide Create a program to solve the problem and rename it to google.cpp . Upload the file to codepost.io An input textfile named google_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o google google.cpp sample run command: ./google google_in.txt corresponding output: Case #1: www.alibaba.com www.bad.com acm.university.edu.cn Case #2: www.alibaba.com Working Code Template /*********************************************************************** * * easy - google (p12015) * * find the most relevant websites * sample compile command: g++ -o google google.cpp sample run command: ./google google_in.txt corresponding output: Case #1: www.alibaba.com www.bad.com acm.university.edu.cn Case #2: www.alibaba.com * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem ifstream file (input_array[1]); int cases; file >> cases; vector <pair <int, string> > v; string url; int relevance; // loop per case for (int i=0; i< cases; i++){ v.clear(); for (int j=0; j<10; j++){ file >> url; file >> relevance; v.push_back( make_pair( relevance, url)); } for( auto &x : v){ cout << x.first << \" \"; } cout << endl; } } Sir Roy's Solution /*********************************************************************** * * easy - google (p12015) * * find the most relevant websites * sample compile command: g++ -o google google.cpp sample run command: ./google google_in.txt corresponding output: Case #1: www.alibaba.com www.bad.com acm.university.edu.cn Case #2: www.alibaba.com * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem ifstream file (input_array[1]); int cases; file >> cases; vector <pair <int, string> > v; string url; int relevance; // loop per case for (int i=0; i< cases; i++){ v.clear(); for (int j=0; j<10; j++){ file >> url; file >> relevance; v.push_back( make_pair( relevance, url)); } // for( auto &x : v){ // cout << x.first << \" \"; // } // cout << endl; sort(v.rbegin(), v.rend()); int highest = v[0].first; cout<< \"Case #\" << i+1 << \":\" << endl; for (auto &x : v){ if (x.first == highest){ cout << x.second << endl; } } } }","title":"Easy   google (p12015)"},{"location":"easy%20-%20google%20%28p12015%29/#easy-google-p12015","text":"Google is one of the most famous Internet search engines which hosts and develops a number of Internet- based services and products. On its search engine website, an interesting button \u2018I\u2019m feeling lucky\u2019 attracts our eyes. This feature could allow the user skip the search result page and goes directly to the first ranked page. Amazing! It saves a lot of time. The question is, when one types some keywords and presses \u2018I\u2019m feeling lucky\u2019 button, which web page will appear? Google does a lot and comes up with excellent approaches to deal with it. In this simplified problem, let us just consider that Google assigns every web page an integer-valued relevance. The most related page will be chosen. If there is a tie, all the pages with the highest relevance are possible to be chosen. Your task is simple, given 10 web pages and their relevance. Just pick out all the possible candidates which will be served to the user when \u2018I\u2019m feeling lucky\u2019.","title":"easy - google (p12015)"},{"location":"easy%20-%20google%20%28p12015%29/#input","text":"The input contains multiple test cases. The number of test cases T is in the first line of the input file. For each test case, there are 10 lines, describing the web page and the relevance. Each line contains a character string without any blank characters denoting the URL of this web page and an integer V i denoting the relevance of this web page. The length of the URL is between 1 and 100 inclusively. (1 \u2264 V i \u2264 100)","title":"Input"},{"location":"easy%20-%20google%20%28p12015%29/#output","text":"For each test case, output several lines which are the URLs of the web pages which are possible to be chosen. The order of the URLs is the same as the input. Please look at the sample output for further information of output format.","title":"Output"},{"location":"easy%20-%20google%20%28p12015%29/#sample-input","text":"Put the following in an input textfile and rename it google_in.txt . 2 www.youtube.com 1 www.google.com 2 www.google.com.hk 3 www.alibaba.com 10 www.taobao.com 5 www.bad.com 10 www.good.com 7 www.fudan.edu.cn 8 www.university.edu.cn 9 acm.university.edu.cn 10 www.youtube.com 1 www.google.com 2 www.google.com.hk 3 www.alibaba.com 11 www.taobao.com 5 www.bad.com 10 www.good.com 7 www.fudan.edu.cn 8 acm.university.edu.cn 9 acm.university.edu.cn 10","title":"Sample Input"},{"location":"easy%20-%20google%20%28p12015%29/#sample-output","text":"Output the following in the terminal Case #1: www.alibaba.com www.bad.com acm.university.edu.cn Case #2: www.alibaba.com","title":"Sample Output"},{"location":"easy%20-%20google%20%28p12015%29/#codepost-guide","text":"Create a program to solve the problem and rename it to google.cpp . Upload the file to codepost.io An input textfile named google_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o google google.cpp sample run command: ./google google_in.txt corresponding output: Case #1: www.alibaba.com www.bad.com acm.university.edu.cn Case #2: www.alibaba.com","title":"Codepost Guide"},{"location":"easy%20-%20google%20%28p12015%29/#working-code-template","text":"/*********************************************************************** * * easy - google (p12015) * * find the most relevant websites * sample compile command: g++ -o google google.cpp sample run command: ./google google_in.txt corresponding output: Case #1: www.alibaba.com www.bad.com acm.university.edu.cn Case #2: www.alibaba.com * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem ifstream file (input_array[1]); int cases; file >> cases; vector <pair <int, string> > v; string url; int relevance; // loop per case for (int i=0; i< cases; i++){ v.clear(); for (int j=0; j<10; j++){ file >> url; file >> relevance; v.push_back( make_pair( relevance, url)); } for( auto &x : v){ cout << x.first << \" \"; } cout << endl; } }","title":"Working Code Template"},{"location":"easy%20-%20google%20%28p12015%29/#sir-roys-solution","text":"/*********************************************************************** * * easy - google (p12015) * * find the most relevant websites * sample compile command: g++ -o google google.cpp sample run command: ./google google_in.txt corresponding output: Case #1: www.alibaba.com www.bad.com acm.university.edu.cn Case #2: www.alibaba.com * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem ifstream file (input_array[1]); int cases; file >> cases; vector <pair <int, string> > v; string url; int relevance; // loop per case for (int i=0; i< cases; i++){ v.clear(); for (int j=0; j<10; j++){ file >> url; file >> relevance; v.push_back( make_pair( relevance, url)); } // for( auto &x : v){ // cout << x.first << \" \"; // } // cout << endl; sort(v.rbegin(), v.rend()); int highest = v[0].first; cout<< \"Case #\" << i+1 << \":\" << endl; for (auto &x : v){ if (x.first == highest){ cout << x.second << endl; } } } }","title":"Sir Roy's Solution"},{"location":"easy%20-%20horror_dash%20%28p11799%29/","text":"easy - horror_dash (p11799) It is that time of the year again! Colorful balloons and brightly colored banners spread out over your entire neighborhood for just this one occasion. It is the annual clown\u2019s festival at your local school. For the first time in their lives, students from the school try their hands at being the best clown ever. Some walk on long poles, others try to keep a crowd laughing for the day with stage comedy, while others still try out their first juggling act \u2014 some \u2018master clowns\u2019 even teach these juggling tricks to visitors at the festival. As part of the festival, there is a unique event known as the \u201cHorror Dash\u201d. At this event, N (1 \u2264 N \u2264 100) students dressed in the scariest costumes possible start out in a race to catch a poor clown running on the same track. The clown trips over, loses his mind, and does all sorts of comical acts all while being chased round and round on the track. To keep the event running for as long as possible, the clown must run fast enough not to be caught by any of the scary creatures. However, to keep the audience on the edge of their seats, the clown must not run too fast either. This is where you are to help. Given the speed of every scary creature, you are to find out the minimum speed that the clown must maintain so as not to get caught even if they keep on running forever. Input The first line of input contains a single integer T (T \u2264 50), the number of test cases. This line is followed by T input cases. Each input case is on a single line of space-separated integers. The first of these integers is N , the number of students acting as scary creatures. The rest of the line has N more integers, c 0 , c 1 , . . . , c N-1 , each representing the speed of a creature in meters per second (1 \u2264 c i \u2264 10000 for each i). You can assume that they are always running in the same direction on the track. Output There should be a single line of output for each test case, formatted as \u2018Case c: s\u2019. Here, c represents the serial number of the input case, starting with 1, while s represents the required speed of the clown, in meters per second. Sample Input / Output Input Output 5 9 3 5 2 6 9 m/s 1 2 2 m/s Codepost Guide Create a program to solve the problem and rename it to horror_dash.cpp . Upload the file to codepost.io sample compile command: g++ -o horror_dash horror_dash.cpp sample run command: ./horror_dash 5 9 3 5 2 6 corresponding output: 9 m/s Working Code Template /******************************************************* * * easy - horror_dash (p11799) * * find out the min speed of the runner so he doesn't get caught * sample compile command: g++ -o horror_dash horror_dash.cpp sample run command: ./horror_dash 5 9 3 5 2 6 corresponding output: 9 m/s * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int count = atoi( input_array[1]); // change the code below to solve the problem cout << count << endl; } Sir Roy's Solution /******************************************************* * * easy - horror_dash (p11799) * * find out the min speed of the runner so he doesn't get caught * sample compile command: g++ -o horror_dash horror_dash.cpp sample run command: ./horror_dash 5 9 3 5 2 6 corresponding output: 9 m/s * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int count = atoi( input_array[1]); // change the code below to solve the problem //cout << count << endl; vector <int> v; for (int i=0 ; i< count; i++){ v.push_back( atoi( input_array[i+2])); } cout << *max_element(v.begin(), v.end()) << \" m/s \" << endl; }","title":"Easy   horror dash (p11799)"},{"location":"easy%20-%20horror_dash%20%28p11799%29/#easy-horror_dash-p11799","text":"It is that time of the year again! Colorful balloons and brightly colored banners spread out over your entire neighborhood for just this one occasion. It is the annual clown\u2019s festival at your local school. For the first time in their lives, students from the school try their hands at being the best clown ever. Some walk on long poles, others try to keep a crowd laughing for the day with stage comedy, while others still try out their first juggling act \u2014 some \u2018master clowns\u2019 even teach these juggling tricks to visitors at the festival. As part of the festival, there is a unique event known as the \u201cHorror Dash\u201d. At this event, N (1 \u2264 N \u2264 100) students dressed in the scariest costumes possible start out in a race to catch a poor clown running on the same track. The clown trips over, loses his mind, and does all sorts of comical acts all while being chased round and round on the track. To keep the event running for as long as possible, the clown must run fast enough not to be caught by any of the scary creatures. However, to keep the audience on the edge of their seats, the clown must not run too fast either. This is where you are to help. Given the speed of every scary creature, you are to find out the minimum speed that the clown must maintain so as not to get caught even if they keep on running forever.","title":"easy - horror_dash (p11799)"},{"location":"easy%20-%20horror_dash%20%28p11799%29/#input","text":"The first line of input contains a single integer T (T \u2264 50), the number of test cases. This line is followed by T input cases. Each input case is on a single line of space-separated integers. The first of these integers is N , the number of students acting as scary creatures. The rest of the line has N more integers, c 0 , c 1 , . . . , c N-1 , each representing the speed of a creature in meters per second (1 \u2264 c i \u2264 10000 for each i). You can assume that they are always running in the same direction on the track.","title":"Input"},{"location":"easy%20-%20horror_dash%20%28p11799%29/#output","text":"There should be a single line of output for each test case, formatted as \u2018Case c: s\u2019. Here, c represents the serial number of the input case, starting with 1, while s represents the required speed of the clown, in meters per second.","title":"Output"},{"location":"easy%20-%20horror_dash%20%28p11799%29/#sample-input-output","text":"Input Output 5 9 3 5 2 6 9 m/s 1 2 2 m/s","title":"Sample Input / Output"},{"location":"easy%20-%20horror_dash%20%28p11799%29/#codepost-guide","text":"Create a program to solve the problem and rename it to horror_dash.cpp . Upload the file to codepost.io sample compile command: g++ -o horror_dash horror_dash.cpp sample run command: ./horror_dash 5 9 3 5 2 6 corresponding output: 9 m/s","title":"Codepost Guide"},{"location":"easy%20-%20horror_dash%20%28p11799%29/#working-code-template","text":"/******************************************************* * * easy - horror_dash (p11799) * * find out the min speed of the runner so he doesn't get caught * sample compile command: g++ -o horror_dash horror_dash.cpp sample run command: ./horror_dash 5 9 3 5 2 6 corresponding output: 9 m/s * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int count = atoi( input_array[1]); // change the code below to solve the problem cout << count << endl; }","title":"Working Code Template"},{"location":"easy%20-%20horror_dash%20%28p11799%29/#sir-roys-solution","text":"/******************************************************* * * easy - horror_dash (p11799) * * find out the min speed of the runner so he doesn't get caught * sample compile command: g++ -o horror_dash horror_dash.cpp sample run command: ./horror_dash 5 9 3 5 2 6 corresponding output: 9 m/s * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { int count = atoi( input_array[1]); // change the code below to solve the problem //cout << count << endl; vector <int> v; for (int i=0 ; i< count; i++){ v.push_back( atoi( input_array[i+2])); } cout << *max_element(v.begin(), v.end()) << \" m/s \" << endl; }","title":"Sir Roy's Solution"},{"location":"easy%20-%20lumberjacks%20%28p11942%29/","text":"easy - lumberjacks (p11942) Another tale of lumberjacks?. Let see . . . The lumberjacks are rude, bearded workers, while foremen tend to be bossy and simpleminded. The foremen like to harass the lumberjacks by making them line up in groups of ten, ordered by the length of their beards. The lumberjacks, being of different physical heights, vary their arrangements to confuse the foremen. Therefore, the foremen must actually measure the beards in centimeters to see if everyone is lined up in order. Your task is to write a program to assist the foremen in determining whether or not the lumberjacks are lined up properly, either from shortest to longest beard or from longest to shortest. Input Each input contains ten distinct positive integers less than 100. Output There is a title line, then a description of the beard lengths. See the sample output for capitalization and punctuation. Sample Input / Output Sample Input Sample Output 13 25 39 40 55 62 68 77 88 95 Lumberjacks: Ordered 88 62 77 20 40 10 99 56 45 36 Lumberjacks: Unordered 91 78 61 59 54 49 43 33 26 18 Lumberjacks: Ordered Codepost Guide Create a program to solve the problem and rename it to lumberjacks.cpp . Upload the file to codepost.io sample compile command: g++ -o lumberjacks lumberjacks.cpp sample run command: ./lumberjacks 13 25 39 40 55 62 68 77 88 95 corresponding output: Lumberjacks: Ordered Working Template Code /*********************************************************************** * * easy - lumberjacks (p11942) * * check if the lumberjacks are ordered (asc or desc) or unordered * sample compile command: g++ -o lumberjacks lumberjacks.cpp sample run command: ./lumberjacks 13 25 39 40 55 62 68 77 88 95 corresponding output: Lumberjacks: Ordered * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem. vector <int> v; for (int i=0; i< 10 ; i++){ v.push_back( atoi(input_array[i+1])); } for (auto &x : v){ cout << x << \" \" ; } cout << endl; } Sir Roy's Solution /*********************************************************************** * * easy - lumberjacks (p11942) * * check if the lumberjacks are ordered (asc or desc) or unordered * sample compile command: g++ -o lumberjacks lumberjacks.cpp sample run command: ./lumberjacks 13 25 39 40 55 62 68 77 88 95 corresponding output: Lumberjacks: Ordered * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem. vector <int> v; for (int i=0; i< 10 ; i++){ v.push_back( atoi(input_array[i+1])); } // for (auto &x : v){ // cout << x << \" \" ; // } // cout << endl; vector <int> v2; v2 = v; sort(v.begin(), v.end()); if (v2 == v) { cout << \"Lumberjacks: Ordered\" << endl; return 0; } sort(v.rbegin(), v.rend()); if (v2 == v){ cout << \"Lumberjacks: Ordered\" << endl; return 0; } else { cout << \"Lumberjacks: Unordered\" << endl; return 0; } }","title":"Easy   lumberjacks (p11942)"},{"location":"easy%20-%20lumberjacks%20%28p11942%29/#easy-lumberjacks-p11942","text":"Another tale of lumberjacks?. Let see . . . The lumberjacks are rude, bearded workers, while foremen tend to be bossy and simpleminded. The foremen like to harass the lumberjacks by making them line up in groups of ten, ordered by the length of their beards. The lumberjacks, being of different physical heights, vary their arrangements to confuse the foremen. Therefore, the foremen must actually measure the beards in centimeters to see if everyone is lined up in order. Your task is to write a program to assist the foremen in determining whether or not the lumberjacks are lined up properly, either from shortest to longest beard or from longest to shortest.","title":"easy - lumberjacks (p11942)"},{"location":"easy%20-%20lumberjacks%20%28p11942%29/#input","text":"Each input contains ten distinct positive integers less than 100.","title":"Input"},{"location":"easy%20-%20lumberjacks%20%28p11942%29/#output","text":"There is a title line, then a description of the beard lengths. See the sample output for capitalization and punctuation.","title":"Output"},{"location":"easy%20-%20lumberjacks%20%28p11942%29/#sample-input-output","text":"Sample Input Sample Output 13 25 39 40 55 62 68 77 88 95 Lumberjacks: Ordered 88 62 77 20 40 10 99 56 45 36 Lumberjacks: Unordered 91 78 61 59 54 49 43 33 26 18 Lumberjacks: Ordered","title":"Sample Input / Output"},{"location":"easy%20-%20lumberjacks%20%28p11942%29/#codepost-guide","text":"Create a program to solve the problem and rename it to lumberjacks.cpp . Upload the file to codepost.io sample compile command: g++ -o lumberjacks lumberjacks.cpp sample run command: ./lumberjacks 13 25 39 40 55 62 68 77 88 95 corresponding output: Lumberjacks: Ordered","title":"Codepost Guide"},{"location":"easy%20-%20lumberjacks%20%28p11942%29/#working-template-code","text":"/*********************************************************************** * * easy - lumberjacks (p11942) * * check if the lumberjacks are ordered (asc or desc) or unordered * sample compile command: g++ -o lumberjacks lumberjacks.cpp sample run command: ./lumberjacks 13 25 39 40 55 62 68 77 88 95 corresponding output: Lumberjacks: Ordered * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem. vector <int> v; for (int i=0; i< 10 ; i++){ v.push_back( atoi(input_array[i+1])); } for (auto &x : v){ cout << x << \" \" ; } cout << endl; }","title":"Working Template Code"},{"location":"easy%20-%20lumberjacks%20%28p11942%29/#sir-roys-solution","text":"/*********************************************************************** * * easy - lumberjacks (p11942) * * check if the lumberjacks are ordered (asc or desc) or unordered * sample compile command: g++ -o lumberjacks lumberjacks.cpp sample run command: ./lumberjacks 13 25 39 40 55 62 68 77 88 95 corresponding output: Lumberjacks: Ordered * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem. vector <int> v; for (int i=0; i< 10 ; i++){ v.push_back( atoi(input_array[i+1])); } // for (auto &x : v){ // cout << x << \" \" ; // } // cout << endl; vector <int> v2; v2 = v; sort(v.begin(), v.end()); if (v2 == v) { cout << \"Lumberjacks: Ordered\" << endl; return 0; } sort(v.rbegin(), v.rend()); if (v2 == v){ cout << \"Lumberjacks: Ordered\" << endl; return 0; } else { cout << \"Lumberjacks: Unordered\" << endl; return 0; } }","title":"Sir Roy's Solution"},{"location":"easy%20-%20mario%20%28p11764%29/","text":"easy - mario (p11764) Mario is in the final castle. He now needs to jump over few walls and then enter the Koopa\u2019s Chamber where he has to defeat the monster in order to save the princess. For this problem, we are only concerned with the \u201cjumping over the wall\u201d part. You will be given the heights of N walls from left to right. Mario is currently standing on the first wall. He has to jump to the adjacent walls one after another until he reaches the last one. That means, he will make (N \u2212 1) jumps. A high jump is one where Mario has to jump to a taller wall, and similarly, a low jump is one where Mario has to jump to a shorter wall. Can you find out the total number of high jumps and low jumps Mario has to make? Input Each case starts with an integer N (0 < N < 50) that determines the number of walls. The next numbers give the height of the N walls from left to right. Each height is a positive integer not exceeding 10. Output Print out 2 integers, total high jumps and total low jumps, respectively. Look at the sample for exact format. Sample Input / Output Sample Input Sample Output 8 1 4 2 2 3 5 3 4 high jumps: 4, low jumps: 2 1 9 high jumps: 0, low jumps: 0 5 1 2 3 4 5 high jumps: 4, low jumps: 0 Codepost Guide Create a program to solve the problem and rename it to mario.cpp . Upload the file to codepost.io sample compile command: g++ -o mario mario.cpp sample run command: ./mario 5 1 2 3 4 5 corresponding output: high jumps: 4, low jumps: 0 Working Template Code /*********************************************************************** * * easy - mario (p11764) * * count the number of mario's high jumps and low jumps given the terrain data * sample compile command: g++ -o mario mario.cpp sample run command: ./mario 5 1 2 3 4 5 corresponding output: high jumps: 4, low jumps: 0 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { int count = input_count -2; int high_jumps = 0; int low_jumps = 0; // change the following code to solve the problem cout << \"high jumps: \" << high_jumps <<\", low jumps: \" << low_jumps << endl; } Sir Roy's Solution /*********************************************************************** * * easy - mario (p11764) * * count the number of mario's high jumps and low jumps given the terrain data * sample compile command: g++ -o mario mario.cpp sample run command: ./mario 5 1 2 3 4 5 corresponding output: high jumps: 4, low jumps: 0 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { int count = input_count -2; int high_jumps = 0; int low_jumps = 0; // change the following code to solve the problem for (int i=0; i<count-1; i++){ int h1 = atoi( input_array[i+2]); int h2 = atoi( input_array[i+3]); if (h1 > h2) { low_jumps++; } else if (h1 < h2){ high_jumps++; } } cout << \"high jumps: \" << high_jumps <<\", low jumps: \" << low_jumps << endl; }","title":"Easy   mario (p11764)"},{"location":"easy%20-%20mario%20%28p11764%29/#easy-mario-p11764","text":"Mario is in the final castle. He now needs to jump over few walls and then enter the Koopa\u2019s Chamber where he has to defeat the monster in order to save the princess. For this problem, we are only concerned with the \u201cjumping over the wall\u201d part. You will be given the heights of N walls from left to right. Mario is currently standing on the first wall. He has to jump to the adjacent walls one after another until he reaches the last one. That means, he will make (N \u2212 1) jumps. A high jump is one where Mario has to jump to a taller wall, and similarly, a low jump is one where Mario has to jump to a shorter wall. Can you find out the total number of high jumps and low jumps Mario has to make?","title":"easy - mario (p11764)"},{"location":"easy%20-%20mario%20%28p11764%29/#input","text":"Each case starts with an integer N (0 < N < 50) that determines the number of walls. The next numbers give the height of the N walls from left to right. Each height is a positive integer not exceeding 10.","title":"Input"},{"location":"easy%20-%20mario%20%28p11764%29/#output","text":"Print out 2 integers, total high jumps and total low jumps, respectively. Look at the sample for exact format.","title":"Output"},{"location":"easy%20-%20mario%20%28p11764%29/#sample-input-output","text":"Sample Input Sample Output 8 1 4 2 2 3 5 3 4 high jumps: 4, low jumps: 2 1 9 high jumps: 0, low jumps: 0 5 1 2 3 4 5 high jumps: 4, low jumps: 0","title":"Sample Input / Output"},{"location":"easy%20-%20mario%20%28p11764%29/#codepost-guide","text":"Create a program to solve the problem and rename it to mario.cpp . Upload the file to codepost.io sample compile command: g++ -o mario mario.cpp sample run command: ./mario 5 1 2 3 4 5 corresponding output: high jumps: 4, low jumps: 0","title":"Codepost Guide"},{"location":"easy%20-%20mario%20%28p11764%29/#working-template-code","text":"/*********************************************************************** * * easy - mario (p11764) * * count the number of mario's high jumps and low jumps given the terrain data * sample compile command: g++ -o mario mario.cpp sample run command: ./mario 5 1 2 3 4 5 corresponding output: high jumps: 4, low jumps: 0 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { int count = input_count -2; int high_jumps = 0; int low_jumps = 0; // change the following code to solve the problem cout << \"high jumps: \" << high_jumps <<\", low jumps: \" << low_jumps << endl; }","title":"Working Template Code"},{"location":"easy%20-%20mario%20%28p11764%29/#sir-roys-solution","text":"/*********************************************************************** * * easy - mario (p11764) * * count the number of mario's high jumps and low jumps given the terrain data * sample compile command: g++ -o mario mario.cpp sample run command: ./mario 5 1 2 3 4 5 corresponding output: high jumps: 4, low jumps: 0 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { int count = input_count -2; int high_jumps = 0; int low_jumps = 0; // change the following code to solve the problem for (int i=0; i<count-1; i++){ int h1 = atoi( input_array[i+2]); int h2 = atoi( input_array[i+3]); if (h1 > h2) { low_jumps++; } else if (h1 < h2){ high_jumps++; } } cout << \"high jumps: \" << high_jumps <<\", low jumps: \" << low_jumps << endl; }","title":"Sir Roy's Solution"},{"location":"easy%20-%20mobile%20%28p12157%29/","text":"easy - mobile (p12157) Ampang Communications & Mobile (ACM) provides telecom services for various types of users. Since the people of Ampang are quite talkative, they are always seeking for packages that are best suited for them. To have an edge over their competitors, ACM provides various packages. Two of the most popular packages are: \u2022 Mile \u2022 Juice Mile charges every 30 seconds at a rate of 10 cents. That means if you talk for 29 seconds or less, you will be charged with 10 cents. If you talk for 30 to 59 seconds, you will be charged with 20 cents and so on. Juice charges every 60 seconds at a rate of 15 cents. That means if you tailk for 59 seconds or less, you will be charged with 15 cents. Similarly, if you talk for 60 seconds to 119 seconds, you will be charged with 30 cents and so on. Given a list of call durations, can you determine the package that is cheaper? Input Each case starts with a line containing an integer N (0 < N < 20). The next numbers give a list of N call durations (In second). Each call duration is an integer in the range [1, 2000]. Consecutive integers are separated by a single space character. Output Output the name of the cheaper package followed by the corresponding cost in cents. If both package gives the same total cost, then output both the names (\u2018Mile\u2019 preceding \u2018Juice\u2019) followed by the cost. Look at the output for sample input for details. Illustration Case 1: Mile(30+10=40) & Juice(30+15=45). Case 2: Mile(20+20+20=60) & Juice(15+15+15=45). Case 3: Mile(30+30=60) & Juice(30+30=60). Sample Input / Output Input Output 2 61 10 Mile 40 3 40 40 40 Juice 45 2 60 65 Mile Juice 60 2 29 59 Mile Juice 30 Codepost Guide Create a program to solve the problem and rename it to mobile.cpp . Upload the file to codepost.io sample compile command: g++ -o mobile mobile.cpp sample run command: ./mobile 2 61 10 corresponding output: Mile 40 Working Template Code /*********************************************************************** * * easy - mobile (p12157) * * pick the cheaper mobile plan * sample compile command: g++ -o mobile mobile.cpp sample run command: ./mobile 2 61 10 corresponding output: Mile 40 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int count = atoi( input_array[1]); int mile_cost = 0; int juice_cost = 0; for (int i=0; i<count; i++){ int call = atoi(input_array[i+2]); cout << call << \" \" ; } cout << endl; } Sir Roy's Solution /*********************************************************************** * * easy - mobile (p12157) * * pick the cheaper mobile plan * sample compile command: g++ -o mobile mobile.cpp sample run command: ./mobile 2 61 10 corresponding output: Mile 40 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int count = atoi( input_array[1]); int mile_cost = 0; int juice_cost = 0; for (int i=0; i<count; i++){ int call = atoi(input_array[i+2]); // cout << call << \" \" ; ++call ; // make the computation easier mile_cost += call/ 30 * 10; if (call % 30 != 0){ mile_cost += 10; } juice_cost += call/60 * 15; if (call % 60 != 0 ){ juice_cost += 15; } } if (mile_cost < juice_cost){ cout << \"Mile \" << mile_cost <<endl; } else if (mile_cost > juice_cost){ cout << \"Juice \" << juice_cost << endl; } else{ // case where both have the same cost cout << \"Mile Juice \" << mile_cost << endl; } }","title":"Easy   mobile (p12157)"},{"location":"easy%20-%20mobile%20%28p12157%29/#easy-mobile-p12157","text":"Ampang Communications & Mobile (ACM) provides telecom services for various types of users. Since the people of Ampang are quite talkative, they are always seeking for packages that are best suited for them. To have an edge over their competitors, ACM provides various packages. Two of the most popular packages are: \u2022 Mile \u2022 Juice Mile charges every 30 seconds at a rate of 10 cents. That means if you talk for 29 seconds or less, you will be charged with 10 cents. If you talk for 30 to 59 seconds, you will be charged with 20 cents and so on. Juice charges every 60 seconds at a rate of 15 cents. That means if you tailk for 59 seconds or less, you will be charged with 15 cents. Similarly, if you talk for 60 seconds to 119 seconds, you will be charged with 30 cents and so on. Given a list of call durations, can you determine the package that is cheaper?","title":"easy - mobile (p12157)"},{"location":"easy%20-%20mobile%20%28p12157%29/#input","text":"Each case starts with a line containing an integer N (0 < N < 20). The next numbers give a list of N call durations (In second). Each call duration is an integer in the range [1, 2000]. Consecutive integers are separated by a single space character.","title":"Input"},{"location":"easy%20-%20mobile%20%28p12157%29/#output","text":"Output the name of the cheaper package followed by the corresponding cost in cents. If both package gives the same total cost, then output both the names (\u2018Mile\u2019 preceding \u2018Juice\u2019) followed by the cost. Look at the output for sample input for details.","title":"Output"},{"location":"easy%20-%20mobile%20%28p12157%29/#illustration","text":"Case 1: Mile(30+10=40) & Juice(30+15=45). Case 2: Mile(20+20+20=60) & Juice(15+15+15=45). Case 3: Mile(30+30=60) & Juice(30+30=60).","title":"Illustration"},{"location":"easy%20-%20mobile%20%28p12157%29/#sample-input-output","text":"Input Output 2 61 10 Mile 40 3 40 40 40 Juice 45 2 60 65 Mile Juice 60 2 29 59 Mile Juice 30","title":"Sample Input / Output"},{"location":"easy%20-%20mobile%20%28p12157%29/#codepost-guide","text":"Create a program to solve the problem and rename it to mobile.cpp . Upload the file to codepost.io sample compile command: g++ -o mobile mobile.cpp sample run command: ./mobile 2 61 10 corresponding output: Mile 40","title":"Codepost Guide"},{"location":"easy%20-%20mobile%20%28p12157%29/#working-template-code","text":"/*********************************************************************** * * easy - mobile (p12157) * * pick the cheaper mobile plan * sample compile command: g++ -o mobile mobile.cpp sample run command: ./mobile 2 61 10 corresponding output: Mile 40 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int count = atoi( input_array[1]); int mile_cost = 0; int juice_cost = 0; for (int i=0; i<count; i++){ int call = atoi(input_array[i+2]); cout << call << \" \" ; } cout << endl; }","title":"Working Template Code"},{"location":"easy%20-%20mobile%20%28p12157%29/#sir-roys-solution","text":"/*********************************************************************** * * easy - mobile (p12157) * * pick the cheaper mobile plan * sample compile command: g++ -o mobile mobile.cpp sample run command: ./mobile 2 61 10 corresponding output: Mile 40 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int count = atoi( input_array[1]); int mile_cost = 0; int juice_cost = 0; for (int i=0; i<count; i++){ int call = atoi(input_array[i+2]); // cout << call << \" \" ; ++call ; // make the computation easier mile_cost += call/ 30 * 10; if (call % 30 != 0){ mile_cost += 10; } juice_cost += call/60 * 15; if (call % 60 != 0 ){ juice_cost += 15; } } if (mile_cost < juice_cost){ cout << \"Mile \" << mile_cost <<endl; } else if (mile_cost > juice_cost){ cout << \"Juice \" << juice_cost << endl; } else{ // case where both have the same cost cout << \"Mile Juice \" << mile_cost << endl; } }","title":"Sir Roy's Solution"},{"location":"easy%20-%20remote%20%28p12468%29/","text":"easy - remote (p12468) I\u2019m a big fan of watching TV. However, I don\u2019t like to watch a single channel; I\u2019m constantly zapping between different channels. My dog tried to eat my remote controller and unfortunately he partially destroyed it. The numeric buttons I used to press to quickly change channels are not working anymore. Now, I only have available two buttons to change channels: one to go up to the next channel (the \u25b3 button) and one to go down to the previous channel (the \u25bd button). This is very annoying because if I\u2019m watching channel 3 and want to change to channel 9 I have to press the \u25b3 button 6 times! My TV has 100 channels conveniently numbered 0 through 99. They are cyclic, in the sense that if I\u2019m on channel 99 and press \u25b3 I\u2019ll go to channel 0. Similarly, if I\u2019m on channel 0 and press \u25bd I\u2019ll change to channel 99. I would like a program that, given the channel I\u2019m currently watching and the channel I would like to change to, tells me the minimum number of button presses I need to reach that channel. Input Each test case is described by two integers a and b in a single line. a is the channel I\u2019m currently watching and b is the channel I would like to go to (0 \u2264 a, b \u2264 99). Output For each test case, output a single integer on a single line \u2014 the minimum number of button presses needed to reach the new channel (Remember, the only two buttons I have available are \u25b3 and \u25bd). Sample Input / Output Input Output 3 9 6 0 99 1 12 27 15 Codepost Guide Create a program to solve the problem and rename it to remote.cpp . Upload the file to codepost.io sample compile command: g++ -o remote remote.cpp sample run command: ./remote 3 9 corresponding output: 6 Working Template Code /*********************************************************************** * * easy - remote (p12468) * sample compile command: g++ -o remote remote.cpp sample run command: ./remote 3 9 corresponding output: 6 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int ch1 = atoi( input_array[1]); int ch2 = atoi( input_array[2]); cout << min(diff1, diff2) << endl; } Sir Roy's Solution /*********************************************************************** * * easy - remote (p12468) * sample compile command: g++ -o remote remote.cpp sample run command: ./remote 3 9 corresponding output: 6 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int ch1 = atoi( input_array[1]); int ch2 = atoi( input_array[2]); // cout << ch1 << \" \" << ch2 << endl; //make ch2 be the larger channel int temp; if (ch1 > ch2){ temp = ch1; ch1 = ch2; ch2 = temp; } int diff1 = ch2 - ch1; int diff2 = 99-ch2 + ch1-0 + 1; cout << min(diff1, diff2) << endl; }","title":"Easy   remote (p12468)"},{"location":"easy%20-%20remote%20%28p12468%29/#easy-remote-p12468","text":"I\u2019m a big fan of watching TV. However, I don\u2019t like to watch a single channel; I\u2019m constantly zapping between different channels. My dog tried to eat my remote controller and unfortunately he partially destroyed it. The numeric buttons I used to press to quickly change channels are not working anymore. Now, I only have available two buttons to change channels: one to go up to the next channel (the \u25b3 button) and one to go down to the previous channel (the \u25bd button). This is very annoying because if I\u2019m watching channel 3 and want to change to channel 9 I have to press the \u25b3 button 6 times! My TV has 100 channels conveniently numbered 0 through 99. They are cyclic, in the sense that if I\u2019m on channel 99 and press \u25b3 I\u2019ll go to channel 0. Similarly, if I\u2019m on channel 0 and press \u25bd I\u2019ll change to channel 99. I would like a program that, given the channel I\u2019m currently watching and the channel I would like to change to, tells me the minimum number of button presses I need to reach that channel.","title":"easy - remote (p12468)"},{"location":"easy%20-%20remote%20%28p12468%29/#input","text":"Each test case is described by two integers a and b in a single line. a is the channel I\u2019m currently watching and b is the channel I would like to go to (0 \u2264 a, b \u2264 99).","title":"Input"},{"location":"easy%20-%20remote%20%28p12468%29/#output","text":"For each test case, output a single integer on a single line \u2014 the minimum number of button presses needed to reach the new channel (Remember, the only two buttons I have available are \u25b3 and \u25bd).","title":"Output"},{"location":"easy%20-%20remote%20%28p12468%29/#sample-input-output","text":"Input Output 3 9 6 0 99 1 12 27 15","title":"Sample Input / Output"},{"location":"easy%20-%20remote%20%28p12468%29/#codepost-guide","text":"Create a program to solve the problem and rename it to remote.cpp . Upload the file to codepost.io sample compile command: g++ -o remote remote.cpp sample run command: ./remote 3 9 corresponding output: 6","title":"Codepost Guide"},{"location":"easy%20-%20remote%20%28p12468%29/#working-template-code","text":"/*********************************************************************** * * easy - remote (p12468) * sample compile command: g++ -o remote remote.cpp sample run command: ./remote 3 9 corresponding output: 6 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int ch1 = atoi( input_array[1]); int ch2 = atoi( input_array[2]); cout << min(diff1, diff2) << endl; }","title":"Working Template Code"},{"location":"easy%20-%20remote%20%28p12468%29/#sir-roys-solution","text":"/*********************************************************************** * * easy - remote (p12468) * sample compile command: g++ -o remote remote.cpp sample run command: ./remote 3 9 corresponding output: 6 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int ch1 = atoi( input_array[1]); int ch2 = atoi( input_array[2]); // cout << ch1 << \" \" << ch2 << endl; //make ch2 be the larger channel int temp; if (ch1 > ch2){ temp = ch1; ch1 = ch2; ch2 = temp; } int diff1 = ch2 - ch1; int diff2 = 99-ch2 + ch1-0 + 1; cout << min(diff1, diff2) << endl; }","title":"Sir Roy's Solution"},{"location":"easy%20-%20results%20%28p621%29/","text":"easy - results (p621) At a certain laboratory results of secret research are thoroughly encrypted. A result of a single experiment is stored as an information of its completion: \u2018positive result\u2019, \u2018negative result\u2019, \u2018experiment failed\u2019 or \u2018experiment not completed\u2019 The encrypted result constitutes a string of digits S, which may take one of the following forms: result encryption positive result S= 1 or S = 4 or S = 78 negative result S= S35 experiment failed S= 9S4 experiment not completed S= 190S (A sample result S35 means that if we add digits 35 from the right hand side to a digit sequence then we shall get the digit sequence corresponding to a failed experiment) You are to write a program which decrypts given sequences of digits. Input A integer n stating the number of encrypted results and then consecutive n lines, each containing a sequence of digits given as ASCII strings. Output For each analysed sequence of digits the following lines should be sent to output (in separate lines): result output positive result + negative result - failed experiment * not completed experiment ? In case the analysed string does not determine the experiment result, a first match from the above list should be outputted. Sample Input/ Output input output 78 + 7835 - 19078 ? 944 * Codepost Guide Create a program to solve the problem and rename it to results.cpp . Upload the file to codepost.io sample compile command: g++ -o results results.cpp sample run command: ./results 78 corresponding output: + Working Template Code /******************************************************* * * easy - results (p621) * * * INPUTS: positive result S= 1 or S = 4 or S = 78 negative result S= S35 experiment failed S= 9S4 experiment not completed S= 190S * * * OUTPUTS: positive result + negative result - failed experiment * not completed experiment ? * * sample compile command: g++ -o results results.cpp sample run command: ./results 78 corresponding output: + * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { string S = input_array[1]; // change the following code to solve the problem int n = S.length(); if (S == \"1\" || S== \"4\" || S==\"78\"){ cout << \"+\" << endl; } } Sir Roy's Solution Code /******************************************************* * * easy - results (p621) * * * INPUTS: positive result S= 1 or S = 4 or S = 78 negative result S= S35 experiment failed S= 9S4 experiment not completed S= 190S * * * OUTPUTS: positive result + negative result - failed experiment * not completed experiment ? * * sample compile command: g++ -o results results.cpp sample run command: ./results 78 corresponding output: + * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { string S = input_array[1]; // change the following code to solve the problem int n = S.length(); if (S == \"1\" || S== \"4\" || S==\"78\"){ cout << \"+\" << endl; } else if ( S[n-2] == '3' && S[n-1]== '5'){ cout << \"-\" << endl; } else if ( S[0]=='1' && S[1]=='9' && S[2]=='0'){ cout << \"?\" << endl; } else if ( S[0] == '9' && S[n-1] == '4'){ cout << \"*\" << endl; } }","title":"Easy   results (p621)"},{"location":"easy%20-%20results%20%28p621%29/#easy-results-p621","text":"At a certain laboratory results of secret research are thoroughly encrypted. A result of a single experiment is stored as an information of its completion: \u2018positive result\u2019, \u2018negative result\u2019, \u2018experiment failed\u2019 or \u2018experiment not completed\u2019 The encrypted result constitutes a string of digits S, which may take one of the following forms: result encryption positive result S= 1 or S = 4 or S = 78 negative result S= S35 experiment failed S= 9S4 experiment not completed S= 190S (A sample result S35 means that if we add digits 35 from the right hand side to a digit sequence then we shall get the digit sequence corresponding to a failed experiment) You are to write a program which decrypts given sequences of digits.","title":"easy - results (p621)"},{"location":"easy%20-%20results%20%28p621%29/#input","text":"A integer n stating the number of encrypted results and then consecutive n lines, each containing a sequence of digits given as ASCII strings.","title":"Input"},{"location":"easy%20-%20results%20%28p621%29/#output","text":"For each analysed sequence of digits the following lines should be sent to output (in separate lines): result output positive result + negative result - failed experiment * not completed experiment ? In case the analysed string does not determine the experiment result, a first match from the above list should be outputted.","title":"Output"},{"location":"easy%20-%20results%20%28p621%29/#sample-input-output","text":"input output 78 + 7835 - 19078 ? 944 *","title":"Sample Input/ Output"},{"location":"easy%20-%20results%20%28p621%29/#codepost-guide","text":"Create a program to solve the problem and rename it to results.cpp . Upload the file to codepost.io sample compile command: g++ -o results results.cpp sample run command: ./results 78 corresponding output: +","title":"Codepost Guide"},{"location":"easy%20-%20results%20%28p621%29/#working-template-code","text":"/******************************************************* * * easy - results (p621) * * * INPUTS: positive result S= 1 or S = 4 or S = 78 negative result S= S35 experiment failed S= 9S4 experiment not completed S= 190S * * * OUTPUTS: positive result + negative result - failed experiment * not completed experiment ? * * sample compile command: g++ -o results results.cpp sample run command: ./results 78 corresponding output: + * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { string S = input_array[1]; // change the following code to solve the problem int n = S.length(); if (S == \"1\" || S== \"4\" || S==\"78\"){ cout << \"+\" << endl; } }","title":"Working Template Code"},{"location":"easy%20-%20results%20%28p621%29/#sir-roys-solution-code","text":"/******************************************************* * * easy - results (p621) * * * INPUTS: positive result S= 1 or S = 4 or S = 78 negative result S= S35 experiment failed S= 9S4 experiment not completed S= 190S * * * OUTPUTS: positive result + negative result - failed experiment * not completed experiment ? * * sample compile command: g++ -o results results.cpp sample run command: ./results 78 corresponding output: + * * ****************************************************/ #include <bits/stdc++.h> using namespace std; int main (int input_count, char* input_array[]) { string S = input_array[1]; // change the following code to solve the problem int n = S.length(); if (S == \"1\" || S== \"4\" || S==\"78\"){ cout << \"+\" << endl; } else if ( S[n-2] == '3' && S[n-1]== '5'){ cout << \"-\" << endl; } else if ( S[0]=='1' && S[1]=='9' && S[2]=='0'){ cout << \"?\" << endl; } else if ( S[0] == '9' && S[n-1] == '4'){ cout << \"*\" << endl; } }","title":"Sir Roy's Solution Code"},{"location":"easy%20-%20robot%20%28p12503%29/","text":"easy - robot (p12503) You have a robot standing on the origin of x axis. The robot will be given some instructions. Your task is to predict its position after executing all the instructions. LEFT: move one unit left (decrease p by 1, where p is the position of the robot before moving) RIGHT: move one unit right (increase p by 1) SAME AS i: perform the same action as in the i-th instruction. It is guaranteed that i is a positive integer not greater than the number of instructions before this. Input The first line contains the number of test cases T (T \u2264 100). Each test case begins with an integer n (1 \u2264 n \u2264 100), the number of instructions. Each of the following n lines contains an instruction. Output For each test case, print the final position of the robot. Note that after processing each test case, the robot should be reset to the origin. Sample Input Put the following in an input textfile and rename it robot_in.txt . 2 3 LEFT RIGHT SAME AS 2 5 LEFT SAME AS 1 SAME AS 2 SAME AS 1 SAME AS 4 Sample Output Output the following in the terminal 1 -5 Codepost Guide Create a program to solve the problem and rename it to robot.cpp . Upload the file to codepost.io An input textfile named robot_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o robot robot.cpp sample run command: ./robot robot_in.txt corresponding output: 1 -5 Working Code Template /*********************************************************************** * * easy - robot (p12503) * * predict robot's position after executing all the instructions * sample compile command: g++ -o robot robot.cpp sample run command: ./robot robot_in.txt corresponding output: 1 -5 * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem ifstream file (input_array[1]); int cases; file >> cases; cout << cases << endl; file.close(); } Sir Roy's Solution /*********************************************************************** * * easy - robot (p12503) * * predict robot's position after executing all the instructions * sample compile command: g++ -o robot robot.cpp sample run command: ./robot robot_in.txt corresponding output: 1 -5 * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem ifstream file (input_array[1]); int cases; file >> cases; for (int i=0; i< cases; i++){ int instructions; file >> instructions;Output the song, formatted as above. vector <int> v; int position=0; for (int j=0; j< instructions; j++){ string instruction; file >> instruction; // cout << instruction << \" \" ; if (instruction == \"LEFT\"){ position -= 1; v.push_back(-1); // cout << position << endl; } else if (instruction == \"RIGHT\"){ position += 1; v.push_back(1); // cout << position << endl; } else if (instruction == \"SAME\"){ string temp; file >> temp; // get AS int repeat; file >> repeat; position += v[repeat -1]; v.push_back( v[repeat -1] ) ; // cout << position << \" \" << repeat << endl; } } cout << position << endl; // for (auto &x : v) { // cout << x << \" \" ; // } // cout << endl; } file.close(); }","title":"Easy   robot (p12503)"},{"location":"easy%20-%20robot%20%28p12503%29/#easy-robot-p12503","text":"You have a robot standing on the origin of x axis. The robot will be given some instructions. Your task is to predict its position after executing all the instructions. LEFT: move one unit left (decrease p by 1, where p is the position of the robot before moving) RIGHT: move one unit right (increase p by 1) SAME AS i: perform the same action as in the i-th instruction. It is guaranteed that i is a positive integer not greater than the number of instructions before this.","title":"easy - robot (p12503)"},{"location":"easy%20-%20robot%20%28p12503%29/#input","text":"The first line contains the number of test cases T (T \u2264 100). Each test case begins with an integer n (1 \u2264 n \u2264 100), the number of instructions. Each of the following n lines contains an instruction.","title":"Input"},{"location":"easy%20-%20robot%20%28p12503%29/#output","text":"For each test case, print the final position of the robot. Note that after processing each test case, the robot should be reset to the origin.","title":"Output"},{"location":"easy%20-%20robot%20%28p12503%29/#sample-input","text":"Put the following in an input textfile and rename it robot_in.txt . 2 3 LEFT RIGHT SAME AS 2 5 LEFT SAME AS 1 SAME AS 2 SAME AS 1 SAME AS 4","title":"Sample Input"},{"location":"easy%20-%20robot%20%28p12503%29/#sample-output","text":"Output the following in the terminal 1 -5","title":"Sample Output"},{"location":"easy%20-%20robot%20%28p12503%29/#codepost-guide","text":"Create a program to solve the problem and rename it to robot.cpp . Upload the file to codepost.io An input textfile named robot_in.txt shall be used by codepost to auto check your submission. sample compile command: g++ -o robot robot.cpp sample run command: ./robot robot_in.txt corresponding output: 1 -5","title":"Codepost Guide"},{"location":"easy%20-%20robot%20%28p12503%29/#working-code-template","text":"/*********************************************************************** * * easy - robot (p12503) * * predict robot's position after executing all the instructions * sample compile command: g++ -o robot robot.cpp sample run command: ./robot robot_in.txt corresponding output: 1 -5 * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem ifstream file (input_array[1]); int cases; file >> cases; cout << cases << endl; file.close(); }","title":"Working Code Template"},{"location":"easy%20-%20robot%20%28p12503%29/#sir-roys-solution","text":"/*********************************************************************** * * easy - robot (p12503) * * predict robot's position after executing all the instructions * sample compile command: g++ -o robot robot.cpp sample run command: ./robot robot_in.txt corresponding output: 1 -5 * ***********************************************************************/ #include <bits/stdc++.h> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem ifstream file (input_array[1]); int cases; file >> cases; for (int i=0; i< cases; i++){ int instructions; file >> instructions;Output the song, formatted as above. vector <int> v; int position=0; for (int j=0; j< instructions; j++){ string instruction; file >> instruction; // cout << instruction << \" \" ; if (instruction == \"LEFT\"){ position -= 1; v.push_back(-1); // cout << position << endl; } else if (instruction == \"RIGHT\"){ position += 1; v.push_back(1); // cout << position << endl; } else if (instruction == \"SAME\"){ string temp; file >> temp; // get AS int repeat; file >> repeat; position += v[repeat -1]; v.push_back( v[repeat -1] ) ; // cout << position << \" \" << repeat << endl; } } cout << position << endl; // for (auto &x : v) { // cout << x << \" \" ; // } // cout << endl; } file.close(); }","title":"Sir Roy's Solution"},{"location":"easy%20-%20rujia%20%28p12554%29/","text":"easy - rujia (p12554) There are n people (excluding myself) in my 30th birthday party. They sing the traditional \u201chappy birthday\u201d song: Happy birthday to you! Happy birthday to you! Happy birthday to Rujia! Happy birthday to you!!! Since I love music, I want to hear something more interesting, not that everyone sings together. Ah yes, I want one person to sing one word! For example, there are three people: Mom, Dad, Girlfriend, I\u2019d like them to sing like this: Mom: Happy Dad: birthday Girlfriend: to Mom: you Dad: Happy Girlfriend: birthday Mom: to Dad: you Girlfriend: Happy Mom: birthday Dad: to Girlfriend: Rujia Mom: Happy Dad: birthday Girlfriend: to Mom: you Very nice, right? What if there are more than 16 people? That\u2019s easy: repeat the song until everyone has sung at least once :) Please, don\u2019t stop in the middle of the song. Input The input contains a single integer n (1 \u2264 n \u2264 100). Then each of the next n strings contains a capitalized name (i.e. one upper-case letter followed by zero or more lowercase letters). Each name contains at most 100 characters and do not have whitespace characters inside. Output Output the song, formatted as above. Codepost Guide Create a program to solve the problem and rename it to rujia.cpp . Upload the file to codepost.io sample compile command: g++ -o rujia rujia.cpp sample run command: ./rujia 3 Mom Dad Girlfriend corresponding output: Mom: Happy Dad: birthday Girlfriend: to Mom: you Dad: Happy Girlfriend: birthday Mom: to Dad: you Girlfriend: Happy Mom: birthday Dad: to Girlfriend: Rujia Mom: Happy Dad: birthday Girlfriend: to Mom: you Working Template Code /*********************************************************************** * * easy - rujia (p12554) * * Sing happy birthday for Rujia the way he likes it * sample compile command: g++ -o rujia rujia.cpp sample run command: ./rujia 3 Mom Dad Girlfriend corresponding output: Mom: Happy Dad: birthday Girlfriend: to Mom: you Dad: Happy Girlfriend: birthday Mom: to Dad: you Girlfriend: Happy Mom: birthday Dad: to Girlfriend: Rujia Mom: Happy Dad: birthday Girlfriend: to Mom: you * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int count = atoi( input_array[1]); string arr[count]; for (int i=0; i< count; i++){ arr[i] = input_array[i+2]; cout << arr[i] << \" \" ; } cout << endl; } Sir Roy's Solution /*********************************************************************** * * easy - rujia (p12554) * * Sing happy birthday for Rujia the way he likes it * sample compile command: g++ -o rujia rujia.cpp sample run command: ./rujia 3 Mom Dad Girlfriend corresponding output: Mom: Happy Dad: birthday Girlfriend: to Mom: you Dad: Happy Girlfriend: birthday Mom: to Dad: you Girlfriend: Happy Mom: birthday Dad: to Girlfriend: Rujia Mom: Happy Dad: birthday Girlfriend: to Mom: you * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int count = atoi( input_array[1]); string arr[count]; for (int i=0; i< count; i++){ arr[i] = input_array[i+2]; // cout << arr[i] << \" \" ; } // cout << endl; int songs; if (count % 16 != 0 ){ songs = (count / 16) + 1; } else{ songs = (count / 16) ; } // cout << songs << endl; string lyrics[16] = {\"Happy\", \"birthday\", \"to\", \"you\", \"Happy\", \"birthday\", \"to\", \"you\", \"Happy\", \"birthday\", \"to\", \"Rujia\", \"Happy\", \"birthday\", \"to\", \"you\"}; int j,k = 0; for (int i=0; i < songs*16 ; i++ ){ cout << arr[j]<< \": \" << lyrics[k] << endl; j++; k++; if (j == count ){ j = 0; } if (k == 16 ) { k=0; } } }","title":"Easy   rujia (p12554)"},{"location":"easy%20-%20rujia%20%28p12554%29/#easy-rujia-p12554","text":"There are n people (excluding myself) in my 30th birthday party. They sing the traditional \u201chappy birthday\u201d song: Happy birthday to you! Happy birthday to you! Happy birthday to Rujia! Happy birthday to you!!! Since I love music, I want to hear something more interesting, not that everyone sings together. Ah yes, I want one person to sing one word! For example, there are three people: Mom, Dad, Girlfriend, I\u2019d like them to sing like this: Mom: Happy Dad: birthday Girlfriend: to Mom: you Dad: Happy Girlfriend: birthday Mom: to Dad: you Girlfriend: Happy Mom: birthday Dad: to Girlfriend: Rujia Mom: Happy Dad: birthday Girlfriend: to Mom: you Very nice, right? What if there are more than 16 people? That\u2019s easy: repeat the song until everyone has sung at least once :) Please, don\u2019t stop in the middle of the song.","title":"easy - rujia (p12554)"},{"location":"easy%20-%20rujia%20%28p12554%29/#input","text":"The input contains a single integer n (1 \u2264 n \u2264 100). Then each of the next n strings contains a capitalized name (i.e. one upper-case letter followed by zero or more lowercase letters). Each name contains at most 100 characters and do not have whitespace characters inside.","title":"Input"},{"location":"easy%20-%20rujia%20%28p12554%29/#output","text":"Output the song, formatted as above.","title":"Output"},{"location":"easy%20-%20rujia%20%28p12554%29/#codepost-guide","text":"Create a program to solve the problem and rename it to rujia.cpp . Upload the file to codepost.io sample compile command: g++ -o rujia rujia.cpp sample run command: ./rujia 3 Mom Dad Girlfriend corresponding output: Mom: Happy Dad: birthday Girlfriend: to Mom: you Dad: Happy Girlfriend: birthday Mom: to Dad: you Girlfriend: Happy Mom: birthday Dad: to Girlfriend: Rujia Mom: Happy Dad: birthday Girlfriend: to Mom: you","title":"Codepost Guide"},{"location":"easy%20-%20rujia%20%28p12554%29/#working-template-code","text":"/*********************************************************************** * * easy - rujia (p12554) * * Sing happy birthday for Rujia the way he likes it * sample compile command: g++ -o rujia rujia.cpp sample run command: ./rujia 3 Mom Dad Girlfriend corresponding output: Mom: Happy Dad: birthday Girlfriend: to Mom: you Dad: Happy Girlfriend: birthday Mom: to Dad: you Girlfriend: Happy Mom: birthday Dad: to Girlfriend: Rujia Mom: Happy Dad: birthday Girlfriend: to Mom: you * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int count = atoi( input_array[1]); string arr[count]; for (int i=0; i< count; i++){ arr[i] = input_array[i+2]; cout << arr[i] << \" \" ; } cout << endl; }","title":"Working Template Code"},{"location":"easy%20-%20rujia%20%28p12554%29/#sir-roys-solution","text":"/*********************************************************************** * * easy - rujia (p12554) * * Sing happy birthday for Rujia the way he likes it * sample compile command: g++ -o rujia rujia.cpp sample run command: ./rujia 3 Mom Dad Girlfriend corresponding output: Mom: Happy Dad: birthday Girlfriend: to Mom: you Dad: Happy Girlfriend: birthday Mom: to Dad: you Girlfriend: Happy Mom: birthday Dad: to Girlfriend: Rujia Mom: Happy Dad: birthday Girlfriend: to Mom: you * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int count = atoi( input_array[1]); string arr[count]; for (int i=0; i< count; i++){ arr[i] = input_array[i+2]; // cout << arr[i] << \" \" ; } // cout << endl; int songs; if (count % 16 != 0 ){ songs = (count / 16) + 1; } else{ songs = (count / 16) ; } // cout << songs << endl; string lyrics[16] = {\"Happy\", \"birthday\", \"to\", \"you\", \"Happy\", \"birthday\", \"to\", \"you\", \"Happy\", \"birthday\", \"to\", \"Rujia\", \"Happy\", \"birthday\", \"to\", \"you\"}; int j,k = 0; for (int i=0; i < songs*16 ; i++ ){ cout << arr[j]<< \": \" << lyrics[k] << endl; j++; k++; if (j == count ){ j = 0; } if (k == 16 ) { k=0; } } }","title":"Sir Roy's Solution"},{"location":"goodls%20-%20gdrive%20file%20download/","text":"goodls - gdrive file download Install using https://github.com/tanaikech/goodls consider: Retrieve API key File with several URLs If you have a file including URLs, you can input the URL data using standard input and pipe as follows. If wrong URL is included, the URL is skipped. $ cat sample.txt | goodls or $ goodls < sample.txt sample.txt https://docs.google.com/spreadsheets/d/#####/edit?usp=sharing https://docs.google.com/document/d/#####/edit?usp=sharing https://docs.google.com/presentation/d/#####/edit?usp=sharing For file must be a publicly shared file $ goodls -u https://docs.google.com/spreadsheets/d/#####/edit?usp=sharing -key [APIkey] -i -i :: information only For folder must be a publicly shared folder $ goodls -u https://drive.google.com/drive/folders/#####?usp=sharing -key [APIkey] -i -i :: information only","title":"Goodls   gdrive file download"},{"location":"goodls%20-%20gdrive%20file%20download/#goodls-gdrive-file-download","text":"Install using https://github.com/tanaikech/goodls consider: Retrieve API key","title":"goodls - gdrive file download"},{"location":"goodls%20-%20gdrive%20file%20download/#file-with-several-urls","text":"If you have a file including URLs, you can input the URL data using standard input and pipe as follows. If wrong URL is included, the URL is skipped. $ cat sample.txt | goodls or $ goodls < sample.txt sample.txt https://docs.google.com/spreadsheets/d/#####/edit?usp=sharing https://docs.google.com/document/d/#####/edit?usp=sharing https://docs.google.com/presentation/d/#####/edit?usp=sharing","title":"File with several URLs"},{"location":"goodls%20-%20gdrive%20file%20download/#for-file","text":"must be a publicly shared file $ goodls -u https://docs.google.com/spreadsheets/d/#####/edit?usp=sharing -key [APIkey] -i -i :: information only","title":"For file"},{"location":"goodls%20-%20gdrive%20file%20download/#for-folder","text":"must be a publicly shared folder $ goodls -u https://drive.google.com/drive/folders/#####?usp=sharing -key [APIkey] -i -i :: information only","title":"For folder"},{"location":"grading%20plan%202021-04-05T11.43.55/","text":"grading plan 2021-04-05T11.43.55 check all manual checkables in KHub (learning logs, google assignments, group projects) put in the quarter participation bonus put in the quarter project bonus check all the codepost submissions download and import the codepost grades into KHub check the emergency submission bin and adjust KHub grades export the KHub grades announce that students check their khub grade books mail merge grades to the students","title":"grading plan 2021 04 05T11.43.55"},{"location":"grading%20plan%202021-04-05T11.43.55/#grading-plan-2021-04-05t114355","text":"check all manual checkables in KHub (learning logs, google assignments, group projects) put in the quarter participation bonus put in the quarter project bonus check all the codepost submissions download and import the codepost grades into KHub check the emergency submission bin and adjust KHub grades export the KHub grades announce that students check their khub grade books mail merge grades to the students","title":"grading plan 2021-04-05T11.43.55"},{"location":"medium%20-%20bending%20%28p11507%29/","text":"medium - bending (p11507) Bender is a robot built by Mom\u2019s Friendly Robot Company at its plant in Tijuana, Mexico in 2996. He is a Bending-Unit 22, serial number 2716057 and chassis number 1729. He was created for the task of bending metal wires. Bender needs to bend a wire of length L (L \u2265 2 an integer). The wire is represented in the Bender\u2019s brain (a MOS Technology 6502 microprocessor) as a line stucked in the origin of a tridimensional cartesian coordinate system, and extended along the x positive axis (+x), so that the fixed extreme of the wire is in the coordinate (0, 0, 0) and the free extreme of the wire is in the coordinate (L, 0, 0). Bender bends the wire at specific points, starting at the point (L \u2212 1, 0, 0) and ending at the point (1, 0, 0). For each i from L \u2212 1 to 1, Bender can take one of the following decisions: Not to bend the wire at point (i, 0, 0). To bend the wire at point (i, 0, 0) an angle of \u03c0/ 2 to be parallel to the axis +y, -y, +z or -z. For example, if L = 3 and Bender bends the wire at (2, 0, 0) on the +y axis direction, and at (1, 0, 0) on the -y axis direction, the result would be: Given a sequence of bends, you must determine what direction is pointed by the last segment of the wire (+x in the example). You can suppose that the wire can intercept itself, after all it is the future! Input The first input of each test case gives an integer L (2 \u2264 L \u2264 100000) indicating the length of the wire. The following inputs of the test case contains the L \u2212 1 decisions taken by Bender at each point, separated by spaces. The j-th decision in the list (for each 1 \u2264 j \u2264 L \u2212 1) corresponds to the decision taken at the point (L \u2212 j, 0, 0), and must be one of the following: \u2018No\u2019 if the wire isn\u2019t bended at point (L \u2212 j, 0, 0). \u2018+y\u2019 if the wire is bended at point (L \u2212 j, 0, 0) on the +y axis. \u2018-y\u2019 if the wire is bended at point (L \u2212 j, 0, 0) on the -y axis. \u2018+z\u2019 if the wire is bended at point (L \u2212 j, 0, 0) on the +z axis. \u2018-z\u2019 if the wire is bended at point (L \u2212 j, 0, 0) on the -z axis. Sample Input/ Output Input Output 3 +z -z +x 3 +z +y +z 2 +z +z 4 +z +y +z -x 5 No +z No No +z","title":"Medium   bending (p11507)"},{"location":"medium%20-%20bending%20%28p11507%29/#medium-bending-p11507","text":"Bender is a robot built by Mom\u2019s Friendly Robot Company at its plant in Tijuana, Mexico in 2996. He is a Bending-Unit 22, serial number 2716057 and chassis number 1729. He was created for the task of bending metal wires. Bender needs to bend a wire of length L (L \u2265 2 an integer). The wire is represented in the Bender\u2019s brain (a MOS Technology 6502 microprocessor) as a line stucked in the origin of a tridimensional cartesian coordinate system, and extended along the x positive axis (+x), so that the fixed extreme of the wire is in the coordinate (0, 0, 0) and the free extreme of the wire is in the coordinate (L, 0, 0). Bender bends the wire at specific points, starting at the point (L \u2212 1, 0, 0) and ending at the point (1, 0, 0). For each i from L \u2212 1 to 1, Bender can take one of the following decisions: Not to bend the wire at point (i, 0, 0). To bend the wire at point (i, 0, 0) an angle of \u03c0/ 2 to be parallel to the axis +y, -y, +z or -z. For example, if L = 3 and Bender bends the wire at (2, 0, 0) on the +y axis direction, and at (1, 0, 0) on the -y axis direction, the result would be: Given a sequence of bends, you must determine what direction is pointed by the last segment of the wire (+x in the example). You can suppose that the wire can intercept itself, after all it is the future!","title":"medium - bending (p11507)"},{"location":"medium%20-%20bending%20%28p11507%29/#input","text":"The first input of each test case gives an integer L (2 \u2264 L \u2264 100000) indicating the length of the wire. The following inputs of the test case contains the L \u2212 1 decisions taken by Bender at each point, separated by spaces. The j-th decision in the list (for each 1 \u2264 j \u2264 L \u2212 1) corresponds to the decision taken at the point (L \u2212 j, 0, 0), and must be one of the following: \u2018No\u2019 if the wire isn\u2019t bended at point (L \u2212 j, 0, 0). \u2018+y\u2019 if the wire is bended at point (L \u2212 j, 0, 0) on the +y axis. \u2018-y\u2019 if the wire is bended at point (L \u2212 j, 0, 0) on the -y axis. \u2018+z\u2019 if the wire is bended at point (L \u2212 j, 0, 0) on the +z axis. \u2018-z\u2019 if the wire is bended at point (L \u2212 j, 0, 0) on the -z axis.","title":"Input"},{"location":"medium%20-%20bending%20%28p11507%29/#sample-input-output","text":"Input Output 3 +z -z +x 3 +z +y +z 2 +z +z 4 +z +y +z -x 5 No +z No No +z","title":"Sample Input/ Output"},{"location":"medium%20-%20snail%20%28p573%29/","text":"medium - snail (p573) A snail is at the bottom of a 6-foot well and wants to climb to the top. The snail can climb 3 feet while the sun is up, but slides down 1 foot at night while sleeping. The snail has a fatigue factor of 10%, which means that on each successive day the snail climbs 10% \u00d7 3 = 0.3 feet less than it did the previous day. (The distance lost to fatigue is always 10% of the first day\u2019s climbing distance.) On what day does the snail leave the well, i.e. , what is the first day during which the snail\u2019s height exceeds 6 feet? (A day consists of a period of sunlight followed by a period of darkness.) As you can see from the following table, the snail leaves the well during the third day. Day Initial Height Distance Climbed Height After Climbing Height After Sliding 1 0' 3' 3' 2' 2 2' 2.7' 4.7' 3.7' 3 3.7' 2.4' 6.1' -- Your job is to solve this problem in general. Depending on the parameters of the problem, the snail will eventually either leave the well or slide back to the bottom of the well. (In other words, the snail\u2019s height will exceed the height of the well or become negative.) You must find out which happens first and on what day. Input The input file contains one or more test cases, each on a line by itself. Each line contains four integers H, U , D, and F , separated by a single space. If H = 0 it signals the end of the input; otherwise, all four numbers will be between 1 and 100, inclusive. H is the height of the well in feet, U is the distance in feet that the snail can climb during the day, D is the distance in feet that the snail slides down during the night, and F is the fatigue factor expressed as a percentage. The snail never climbs a negative distance. If the fatigue factor drops the snail\u2019s climbing distance below zero, the snail does not climb at all that day. Regardless of how far the snail climbed, it always slides D feet at night. Output For each test case, output a line indicating whether the snail succeeded (left the well) or failed (slid back to the bottom) and on what day. Format the output exactly as shown in the example. Sample Input / Output Sample Input Sample Output 6 3 1 10 success on day 3 10 2 1 50 failure on day 4 50 5 3 14 failure on day 7 50 6 4 1 failure on day 68 50 6 3 1 success on day 20 1 1 1 1 failure on day 2 Codepost Guide Create a program to solve the problem and rename it to snail.cpp . Upload the file to codepost.io sample compile command: g++ -o snail snail.cpp sample run command: ./snail 6 3 1 10 corresponding output: success on day 3 Working Template Code /*********************************************************************** * * medium - snail (p573) * * Compute when the snail succeeds/ fails to leave the well * sample compile command: g++ -o snail snail.cpp sample run command: ./snail 6 3 1 10 corresponding output: success on day 3 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int H = atoi(input_array[1]); int U = atoi(input_array[2]); int D = atoi(input_array[3]); int F = atoi(input_array[4]); cout << H << \" \" << U << \" \" << D <<\" \" << F << endl; } Sir Roy's Solution /*********************************************************************** * * medium - snail (p573) * * Compute when the snail succeeds/ fails to leave the well * sample compile command: g++ -o snail snail.cpp sample run command: ./snail 6 3 1 10 corresponding output: success on day 3 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int H = atoi(input_array[1]); int U = atoi(input_array[2]); int D = atoi(input_array[3]); int F = atoi(input_array[4]); // cout << H << \" \" << U << \" \" << D <<\" \" << F << endl; int day = 1; float init_height =0; float dist_climbed = U; float height_after_climb = init_height + dist_climbed; if (height_after_climb > H) { cout << \"success on day \" << day << endl; return 1; } float height_after_slide = height_after_climb - D; if (height_after_slide < 0) { cout << \"failure on day \" << day << endl; } // cout << day << \" \" << init_height << \" \" << dist_climbed <<\" \" << height_after_climb << \" \" << height_after_slide<< endl; while (height_after_climb <= H && height_after_slide >= 0 ){ day++; init_height = height_after_slide; dist_climbed = dist_climbed - (U * (float)F/100); height_after_climb = init_height + dist_climbed; if (height_after_climb > H) { cout << \"success on day \" << day << endl; return 1; } height_after_slide = height_after_climb - D; if (height_after_slide < 0) { cout << \"failure on day \" << day << endl; } // cout << day << \" \" << init_height << \" \" << dist_climbed <<\" \" << height_after_climb << \" \" << height_after_slide<< endl; } }","title":"Medium   snail (p573)"},{"location":"medium%20-%20snail%20%28p573%29/#medium-snail-p573","text":"A snail is at the bottom of a 6-foot well and wants to climb to the top. The snail can climb 3 feet while the sun is up, but slides down 1 foot at night while sleeping. The snail has a fatigue factor of 10%, which means that on each successive day the snail climbs 10% \u00d7 3 = 0.3 feet less than it did the previous day. (The distance lost to fatigue is always 10% of the first day\u2019s climbing distance.) On what day does the snail leave the well, i.e. , what is the first day during which the snail\u2019s height exceeds 6 feet? (A day consists of a period of sunlight followed by a period of darkness.) As you can see from the following table, the snail leaves the well during the third day. Day Initial Height Distance Climbed Height After Climbing Height After Sliding 1 0' 3' 3' 2' 2 2' 2.7' 4.7' 3.7' 3 3.7' 2.4' 6.1' -- Your job is to solve this problem in general. Depending on the parameters of the problem, the snail will eventually either leave the well or slide back to the bottom of the well. (In other words, the snail\u2019s height will exceed the height of the well or become negative.) You must find out which happens first and on what day.","title":"medium - snail (p573)"},{"location":"medium%20-%20snail%20%28p573%29/#input","text":"The input file contains one or more test cases, each on a line by itself. Each line contains four integers H, U , D, and F , separated by a single space. If H = 0 it signals the end of the input; otherwise, all four numbers will be between 1 and 100, inclusive. H is the height of the well in feet, U is the distance in feet that the snail can climb during the day, D is the distance in feet that the snail slides down during the night, and F is the fatigue factor expressed as a percentage. The snail never climbs a negative distance. If the fatigue factor drops the snail\u2019s climbing distance below zero, the snail does not climb at all that day. Regardless of how far the snail climbed, it always slides D feet at night.","title":"Input"},{"location":"medium%20-%20snail%20%28p573%29/#output","text":"For each test case, output a line indicating whether the snail succeeded (left the well) or failed (slid back to the bottom) and on what day. Format the output exactly as shown in the example.","title":"Output"},{"location":"medium%20-%20snail%20%28p573%29/#sample-input-output","text":"Sample Input Sample Output 6 3 1 10 success on day 3 10 2 1 50 failure on day 4 50 5 3 14 failure on day 7 50 6 4 1 failure on day 68 50 6 3 1 success on day 20 1 1 1 1 failure on day 2","title":"Sample Input / Output"},{"location":"medium%20-%20snail%20%28p573%29/#codepost-guide","text":"Create a program to solve the problem and rename it to snail.cpp . Upload the file to codepost.io sample compile command: g++ -o snail snail.cpp sample run command: ./snail 6 3 1 10 corresponding output: success on day 3","title":"Codepost Guide"},{"location":"medium%20-%20snail%20%28p573%29/#working-template-code","text":"/*********************************************************************** * * medium - snail (p573) * * Compute when the snail succeeds/ fails to leave the well * sample compile command: g++ -o snail snail.cpp sample run command: ./snail 6 3 1 10 corresponding output: success on day 3 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int H = atoi(input_array[1]); int U = atoi(input_array[2]); int D = atoi(input_array[3]); int F = atoi(input_array[4]); cout << H << \" \" << U << \" \" << D <<\" \" << F << endl; }","title":"Working Template Code"},{"location":"medium%20-%20snail%20%28p573%29/#sir-roys-solution","text":"/*********************************************************************** * * medium - snail (p573) * * Compute when the snail succeeds/ fails to leave the well * sample compile command: g++ -o snail snail.cpp sample run command: ./snail 6 3 1 10 corresponding output: success on day 3 * ***********************************************************************/ #include <iostream> using namespace std; int main(int input_count, char* input_array[]) { // change the following code to solve the problem int H = atoi(input_array[1]); int U = atoi(input_array[2]); int D = atoi(input_array[3]); int F = atoi(input_array[4]); // cout << H << \" \" << U << \" \" << D <<\" \" << F << endl; int day = 1; float init_height =0; float dist_climbed = U; float height_after_climb = init_height + dist_climbed; if (height_after_climb > H) { cout << \"success on day \" << day << endl; return 1; } float height_after_slide = height_after_climb - D; if (height_after_slide < 0) { cout << \"failure on day \" << day << endl; } // cout << day << \" \" << init_height << \" \" << dist_climbed <<\" \" << height_after_climb << \" \" << height_after_slide<< endl; while (height_after_climb <= H && height_after_slide >= 0 ){ day++; init_height = height_after_slide; dist_climbed = dist_climbed - (U * (float)F/100); height_after_climb = init_height + dist_climbed; if (height_after_climb > H) { cout << \"success on day \" << day << endl; return 1; } height_after_slide = height_after_climb - D; if (height_after_slide < 0) { cout << \"failure on day \" << day << endl; } // cout << day << \" \" << init_height << \" \" << dist_climbed <<\" \" << height_after_climb << \" \" << height_after_slide<< endl; } }","title":"Sir Roy's Solution"},{"location":"moodle/","text":"moodle","title":"Moodle"},{"location":"moodle/#moodle","text":"","title":"moodle"},{"location":"moosh%20-%20Moodle%20Shell/","text":"moosh - Moodle Shell sudo apt-add-repository 'deb http://ppa.launchpad.net/zabuch/ppa/ubuntu trusty main' sudo apt update --allow-unauthenticated sudo apt-get update --allow-insecure-repositories sudo apt-get install moosh sudo apt update --no-allow-unauthenticated sudo apt-get update --no-allow-insecure-repositories download backup files $ curl -o FILENAME URL sudo -u www-data watch moosh top Let's try running a bulk course restore script from ~ * get the list of courses * get the course IDs of the 5 test courses in miscellaneous * get a full backup of the test courses into /var/www/moodle_tmp * get the category ID of miscellaneous * try a moosh restore on 1 test course * try a moosh create for 1 mbz backup * try to restore the backup to the created course * make a create-restore script List only empty courses from category 1 moosh course-list -c 1 -e yes Backup course id=3 and save it as /tmp/mybackup.mbz: moosh course-backup -f /tmp/mybackup.mbz 3 Backup course id=3, including logs and grade histories: moosh course-backup --fullbackup 3 Backup course id=3 without any user data (excludes users, logs, grade historyies, role assignments, comments, and filters): moosh course-backup --template 3 List all categories: moosh category-list List all categories with name \"test\" OR \"foobar\": moosh category-list test foobar Create 10 new courses using bash/zim expansion: moosh course-create newcourse{1..10} delete courses id 2,3 and 4: moosh course-delete 2 3 4","title":"moosh   Moodle Shell"},{"location":"moosh%20-%20Moodle%20Shell/#moosh-moodle-shell","text":"sudo apt-add-repository 'deb http://ppa.launchpad.net/zabuch/ppa/ubuntu trusty main' sudo apt update --allow-unauthenticated sudo apt-get update --allow-insecure-repositories sudo apt-get install moosh sudo apt update --no-allow-unauthenticated sudo apt-get update --no-allow-insecure-repositories download backup files $ curl -o FILENAME URL sudo -u www-data watch moosh top Let's try running a bulk course restore script from ~ * get the list of courses * get the course IDs of the 5 test courses in miscellaneous * get a full backup of the test courses into /var/www/moodle_tmp * get the category ID of miscellaneous * try a moosh restore on 1 test course * try a moosh create for 1 mbz backup * try to restore the backup to the created course * make a create-restore script List only empty courses from category 1 moosh course-list -c 1 -e yes Backup course id=3 and save it as /tmp/mybackup.mbz: moosh course-backup -f /tmp/mybackup.mbz 3 Backup course id=3, including logs and grade histories: moosh course-backup --fullbackup 3 Backup course id=3 without any user data (excludes users, logs, grade historyies, role assignments, comments, and filters): moosh course-backup --template 3 List all categories: moosh category-list List all categories with name \"test\" OR \"foobar\": moosh category-list test foobar Create 10 new courses using bash/zim expansion: moosh course-create newcourse{1..10} delete courses id 2,3 and 4: moosh course-delete 2 3 4","title":"moosh - Moodle Shell"},{"location":"nginx/","text":"nginx sudo apt install nginx Confirm that it's running: $ sudo systemctl status nginx $ sudo systemctl is-enabled nginx Check your IP Address: $ ip addr show go to http://","title":"Nginx"},{"location":"nginx/#nginx","text":"sudo apt install nginx Confirm that it's running: $ sudo systemctl status nginx $ sudo systemctl is-enabled nginx Check your IP Address: $ ip addr show go to http://","title":"nginx"},{"location":"overthewire%20-%20bandit/","text":"overthewire - bandit prior: https://www.redhat.com/sysadmin/managing-files-linux-terminal https://overthewire.org/wargames/bandit/bandit1.html Host: bandit.labs.overthewire.org Port: 2220 ssh -p 2220 bandit4@bandit.labs.overthewire.org boJ9jbbUNNfktd78OOpsqOltutMc3MY1 CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9 UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK pIwrPrtPN36QITSp3EQaw936yaFoFgAB koReBOKuIDDepwhWk7jZC0RTdopnAYKh DXjZPULLxYr17uwoI01bNLQbtFemEgo7","title":"Overthewire   bandit"},{"location":"overthewire%20-%20bandit/#overthewire-bandit","text":"prior: https://www.redhat.com/sysadmin/managing-files-linux-terminal https://overthewire.org/wargames/bandit/bandit1.html Host: bandit.labs.overthewire.org Port: 2220 ssh -p 2220 bandit4@bandit.labs.overthewire.org boJ9jbbUNNfktd78OOpsqOltutMc3MY1 CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9 UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK pIwrPrtPN36QITSp3EQaw936yaFoFgAB koReBOKuIDDepwhWk7jZC0RTdopnAYKh DXjZPULLxYr17uwoI01bNLQbtFemEgo7","title":"overthewire - bandit"},{"location":"pcari-site-proposal/","text":"PCARI Project Website Roy Canseco with Romeo Ramos Jr. and James Karl Qui\u00f1o December 2018 PCARI Website Project Purpose We propose to create a blog-styled technical project website for the purpose of sharing research results and data with the general public according to the guidelines of PCARI. Plan Use Wordpress as the content management system (CMS). Host the site in Wordpress.com using a subdomain of the client's choosing. Duties To setup the project website locally To seed the website with initial project content To host the project website on the cloud To train users in using, updating and managing the website Deliverables source code for the project website SQL export of the website database Web access to the host server account Website administration account List of plugins and software versions Sample pages","title":"Pcari site proposal"},{"location":"pcari-site-proposal/#pcari-website-project","text":"","title":"PCARI Website Project"},{"location":"pcari-site-proposal/#purpose","text":"We propose to create a blog-styled technical project website for the purpose of sharing research results and data with the general public according to the guidelines of PCARI.","title":"Purpose"},{"location":"pcari-site-proposal/#plan","text":"Use Wordpress as the content management system (CMS). Host the site in Wordpress.com using a subdomain of the client's choosing.","title":"Plan"},{"location":"pcari-site-proposal/#duties","text":"To setup the project website locally To seed the website with initial project content To host the project website on the cloud To train users in using, updating and managing the website","title":"Duties"},{"location":"pcari-site-proposal/#deliverables","text":"source code for the project website SQL export of the website database Web access to the host server account Website administration account List of plugins and software versions","title":"Deliverables"},{"location":"pcari-site-proposal/#sample-pages","text":"","title":"Sample pages"},{"location":"postgresql/","text":"postgresql postgresql 11 installing postgresql 11 Step 1: Update system and install dependencies Step 2: Add PostgreSQL 11 APT repository wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - RELEASE=$(lsb_release -cs) echo \"deb http://apt.postgresql.org/pub/repos/apt/ ${RELEASE}\"-pgdg main | sudo tee /etc/apt/sources.list.d/pgdg.list $ cat /etc/apt/sources.list.d/pgdg.list deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main Step 3: Install PostgreSQL 11 on Ubuntu 20.04/18.04/16.04 sudo apt update sudo apt-cache search postgresql-11 sudo apt -y install postgresql-11 sudo apt install postgresql-client-11 sudo systemctl start postgresql.service sudo systemctl enable postgresql.service sudo systemctl status postgresql.service Step 4: Allow access to PostgreSQL from remote hosts By default, access to PostgreSQL database server is only from localhost. $ sudo ss -tunelp | grep 5432 tcp LISTEN 0 128 127.0.0.1:5432 0.0.0.0:* users:((\"postgres\",pid=15785,fd=3)) uid:111 ino:42331 sk:6 <-> sudo vim /etc/postgresql/11/main/postgresql.conf Add below line under CONNECTIONS AND AUTHENTICATION section. You can also specify server IP Address. Or you can skip this. It might be more secure to skip it anyway. :) listen_addresses = '*' or listen_addresses = '192.168.17.12' setup postgresql reference reference sudo -i -u postgres psql -i :: interactive (simulate login) -u :: user CREATE ROLE sir_roy WITH SUPERUSER CREATEDB CREATEROLE LOGIN ENCRYPTED PASSWORD 'sir_roy_password'; CREATE DATABSE sir_roy WITH OWNER sir_roy; \\du SHOW hba_file; \\q choose a suitablystrongpassword. do some tcp socket process testing: ss -plnt ss -plt -l :: listen -p :: process -t :: tcp -n :: number ports postgres=# CREATE USER moodle_user WITH PASSWORD 'yourpassword'; postgres=# CREATE DATABASE moodle_db WITH OWNER moodle_user; postgres=# \\l $ cd /etc/postgresql/11/main/ $ sudo cp pg_hba.conf.bak $ sudo vim pg_hba.conf In the client authentication file, you'll find the following line (starting with a '#' sign), which tells you the order to add each piece of data. To grant permission for Moodle to connect to a PostgreSQL server on the same machine, just add the following line, changing the DATABASE and USER columns to your actual database name and the username you set up above. The METHOD field should say \"password\" - don't put your actual password here. # TYPE DATABASE USER CIDR-ADDRESS METHOD host moodle_db moodle_user 127.0.0.1/32 password If your database lives on a separate server from your Moodle installation, you can change the IP address above to match. In this case, it is recommended to not use 'password' in the method field unless the connection between the two servers is secure, as 'password' sends the password in plain text. In these circumstances, you should consider changing METHOD to 'md5' instead. sudo systemctl restart postgresql.service another setup for postgresql su - su - postgres createdb test psql test =# create user username password ' password '; -- To change a password: =# alter role username password ' password '; =# create database databasename with encoding 'utf8'; =# grant all privileges on database databasename to username; =# \\l =# \\c databasename =# \\q $ sudo vim /etc/postgresql/11/main/pg_hba.conf host all all 0.0.0.0 0.0.0.0 md5 be SURE to cover this security issue with iptables ! /etc/init.d/postgresql reload or /usr/lib/postgresql/bin/pg_ctl reload psql -h server -d databasename -U username pgloader pgloader is a data loading tool for PostgreSQL, using the COPY command. $ sudo apt-get install pgloader For example, for a full migration from SQLite: $ createdb newdb $ pgloader ./test/sqlite/sqlite.db postgresql:///newdb Or for a full migration from MySQL, $ createdb pagila $ pgloader mysql://user:password@localhost/sakila postgresql:///pagila Another option: sudo -u www-data /usr/bin/php /path/to/moodle/admin/tool/dbtransfer/cli/migrate.php --help sudo -u www-data /usr/bin/php /path/to/moodle/admin/tool/dbtransfer/cli/migrate.php --dbtype='pgsql' --dbhost='x.x.x.x' --dbname='moodleDbName' --dbuser='moodleUser' --dbpass='***' --dbport=5432 --prefix='mdl_' --dbsocket='/var/run/postgresql' reference","title":"Postgresql"},{"location":"postgresql/#postgresql","text":"","title":"postgresql"},{"location":"postgresql/#postgresql-11","text":"","title":"postgresql 11"},{"location":"postgresql/#installing-postgresql-11","text":"Step 1: Update system and install dependencies Step 2: Add PostgreSQL 11 APT repository wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - RELEASE=$(lsb_release -cs) echo \"deb http://apt.postgresql.org/pub/repos/apt/ ${RELEASE}\"-pgdg main | sudo tee /etc/apt/sources.list.d/pgdg.list $ cat /etc/apt/sources.list.d/pgdg.list deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main Step 3: Install PostgreSQL 11 on Ubuntu 20.04/18.04/16.04 sudo apt update sudo apt-cache search postgresql-11 sudo apt -y install postgresql-11 sudo apt install postgresql-client-11 sudo systemctl start postgresql.service sudo systemctl enable postgresql.service sudo systemctl status postgresql.service Step 4: Allow access to PostgreSQL from remote hosts By default, access to PostgreSQL database server is only from localhost. $ sudo ss -tunelp | grep 5432 tcp LISTEN 0 128 127.0.0.1:5432 0.0.0.0:* users:((\"postgres\",pid=15785,fd=3)) uid:111 ino:42331 sk:6 <-> sudo vim /etc/postgresql/11/main/postgresql.conf Add below line under CONNECTIONS AND AUTHENTICATION section. You can also specify server IP Address. Or you can skip this. It might be more secure to skip it anyway. :) listen_addresses = '*' or listen_addresses = '192.168.17.12'","title":"installing postgresql 11"},{"location":"postgresql/#setup-postgresql","text":"reference reference sudo -i -u postgres psql -i :: interactive (simulate login) -u :: user CREATE ROLE sir_roy WITH SUPERUSER CREATEDB CREATEROLE LOGIN ENCRYPTED PASSWORD 'sir_roy_password'; CREATE DATABSE sir_roy WITH OWNER sir_roy; \\du SHOW hba_file; \\q choose a suitablystrongpassword. do some tcp socket process testing: ss -plnt ss -plt -l :: listen -p :: process -t :: tcp -n :: number ports postgres=# CREATE USER moodle_user WITH PASSWORD 'yourpassword'; postgres=# CREATE DATABASE moodle_db WITH OWNER moodle_user; postgres=# \\l $ cd /etc/postgresql/11/main/ $ sudo cp pg_hba.conf.bak $ sudo vim pg_hba.conf In the client authentication file, you'll find the following line (starting with a '#' sign), which tells you the order to add each piece of data. To grant permission for Moodle to connect to a PostgreSQL server on the same machine, just add the following line, changing the DATABASE and USER columns to your actual database name and the username you set up above. The METHOD field should say \"password\" - don't put your actual password here. # TYPE DATABASE USER CIDR-ADDRESS METHOD host moodle_db moodle_user 127.0.0.1/32 password If your database lives on a separate server from your Moodle installation, you can change the IP address above to match. In this case, it is recommended to not use 'password' in the method field unless the connection between the two servers is secure, as 'password' sends the password in plain text. In these circumstances, you should consider changing METHOD to 'md5' instead. sudo systemctl restart postgresql.service","title":"setup postgresql"},{"location":"postgresql/#another-setup-for-postgresql","text":"su - su - postgres createdb test psql test =# create user username password ' password '; -- To change a password: =# alter role username password ' password '; =# create database databasename with encoding 'utf8'; =# grant all privileges on database databasename to username; =# \\l =# \\c databasename =# \\q $ sudo vim /etc/postgresql/11/main/pg_hba.conf host all all 0.0.0.0 0.0.0.0 md5 be SURE to cover this security issue with iptables ! /etc/init.d/postgresql reload or /usr/lib/postgresql/bin/pg_ctl reload psql -h server -d databasename -U username","title":"another setup for postgresql"},{"location":"postgresql/#pgloader","text":"pgloader is a data loading tool for PostgreSQL, using the COPY command. $ sudo apt-get install pgloader For example, for a full migration from SQLite: $ createdb newdb $ pgloader ./test/sqlite/sqlite.db postgresql:///newdb Or for a full migration from MySQL, $ createdb pagila $ pgloader mysql://user:password@localhost/sakila postgresql:///pagila Another option: sudo -u www-data /usr/bin/php /path/to/moodle/admin/tool/dbtransfer/cli/migrate.php --help sudo -u www-data /usr/bin/php /path/to/moodle/admin/tool/dbtransfer/cli/migrate.php --dbtype='pgsql' --dbhost='x.x.x.x' --dbname='moodleDbName' --dbuser='moodleUser' --dbpass='***' --dbport=5432 --prefix='mdl_' --dbsocket='/var/run/postgresql' reference","title":"pgloader"},{"location":"rsync/","text":"rsync rsync -av -e ssh SOURCE/ USERNAME@NEW_SERVER.COM:/PATH/TO/DESTINATION/ -a :: archive mode (preserve file permissions) -v :: verbose -e ssh :: use ssh -z :: compress --progress :: show progress --del :: deletes extra files so both folders are the same Reasons to Consider rsync Over cp or SCP Creates incremental data backups. Copies from source to destination only the data which is different between the two locations. Each file is checksummed on transfer using MD5. rsync\u2019s --del option deletes files located at the destination which are no longer at the source. rsync can resume failed transfers (as long as they were started with rsync). rsync can be run as a daemon. rsync can compress data with the -z option, so no need to pipe to an archiving utility. Special uses Excluding/ ignoring files rsync -avz --exclude={'*.txt','dir3','dir4'} sourcedir/ destinationdir/ ### Pull multiple files with rsync rsync -avz calomel@somemachine:/remote_machine/{file1,file2,file3} /local/disk/ ### Rsync when remote files or directories contain spaces rsync -av calomel@somemachine:'/I\\ Hate\\ Spaces/some\\ File.avi' /current_dir/","title":"Rsync"},{"location":"rsync/#rsync","text":"rsync -av -e ssh SOURCE/ USERNAME@NEW_SERVER.COM:/PATH/TO/DESTINATION/ -a :: archive mode (preserve file permissions) -v :: verbose -e ssh :: use ssh -z :: compress --progress :: show progress --del :: deletes extra files so both folders are the same","title":"rsync"},{"location":"rsync/#reasons-to-consider-rsync-over-cp-or-scp","text":"Creates incremental data backups. Copies from source to destination only the data which is different between the two locations. Each file is checksummed on transfer using MD5. rsync\u2019s --del option deletes files located at the destination which are no longer at the source. rsync can resume failed transfers (as long as they were started with rsync). rsync can be run as a daemon. rsync can compress data with the -z option, so no need to pipe to an archiving utility.","title":"Reasons to Consider rsync Over cp or SCP"},{"location":"rsync/#special-uses","text":"","title":"Special uses"},{"location":"rsync/#excluding-ignoring-files","text":"rsync -avz --exclude={'*.txt','dir3','dir4'} sourcedir/ destinationdir/ ### Pull multiple files with rsync rsync -avz calomel@somemachine:/remote_machine/{file1,file2,file3} /local/disk/ ### Rsync when remote files or directories contain spaces rsync -av calomel@somemachine:'/I\\ Hate\\ Spaces/some\\ File.avi' /current_dir/","title":"Excluding/ ignoring files"},{"location":"sample_readme/","text":"Palindrome Detector rlcanseco_palindrome is a sample Ruby gem created in Lean Enough Ruby to be Dangerous Michael Hartl. Installation To install `rlcanseco_palindrome , add this line to your application's Gemfile: gem 'rlcanseco_palindrome' And then install as follows: $ bundle install Or install it directly using gem : $ gem install rlcanseco_palindrome Usage rlcanseco_parlindrome adds a palindrom? method to the String class, and can be used as follows: $ irb >> require 'mhartl_palindrome' >> \"honey badger\".palindrome? => false >> \"deified\".palindrome? => true >> \"Able was I, ere I saw Elba.\".palindrome? => true >> phrase = \"Madam, I'm Adam.\" >> phrase.palindrome? => true License The gem is available as open source under the terms of the MIT License .","title":"Palindrome Detector"},{"location":"sample_readme/#palindrome-detector","text":"rlcanseco_palindrome is a sample Ruby gem created in Lean Enough Ruby to be Dangerous Michael Hartl.","title":"Palindrome Detector"},{"location":"sample_readme/#installation","text":"To install `rlcanseco_palindrome , add this line to your application's Gemfile: gem 'rlcanseco_palindrome' And then install as follows: $ bundle install Or install it directly using gem : $ gem install rlcanseco_palindrome","title":"Installation"},{"location":"sample_readme/#usage","text":"rlcanseco_parlindrome adds a palindrom? method to the String class, and can be used as follows: $ irb >> require 'mhartl_palindrome' >> \"honey badger\".palindrome? => false >> \"deified\".palindrome? => true >> \"Able was I, ere I saw Elba.\".palindrome? => true >> phrase = \"Madam, I'm Adam.\" >> phrase.palindrome? => true","title":"Usage"},{"location":"sample_readme/#license","text":"The gem is available as open source under the terms of the MIT License .","title":"License"},{"location":"sed/","text":"sed #sed -e 's/oldserver.com/newserver.com/g' oldmysqldump.sql > newmysqldump.sql -e :: script #sed -i.bak -e 's/oldserver.com/newserver.com/g' mysqldump.sql -i.bak :: save the file changes in-place, but backup file first","title":"Sed"},{"location":"sed/#sed","text":"#sed -e 's/oldserver.com/newserver.com/g' oldmysqldump.sql > newmysqldump.sql -e :: script #sed -i.bak -e 's/oldserver.com/newserver.com/g' mysqldump.sql -i.bak :: save the file changes in-place, but backup file first","title":"sed"},{"location":"tar/","text":"tar This is how you make a \"zip\" file as a SysAd. tar cvfz file.tar folder_to_zip Extracting a gzip tar Archive *.tar.gz using option -xvzf : This command extracts files from tar archived file.tar.gz files $ tar -xvzf file.tar.gz -C folder_to_put_in Syntax: tar [options] [archive-file] [file or directory to be archived] Options: -c : Creates Archive -x : Extract the archive -f : creates archive with given filename -t : displays or lists files in archived file -u : archives and adds to an existing archive file -v : Displays Verbose Information -A : Concatenates the archive files -z : zip, tells tar command that creates tar file using gzip -j : filter archive tar file using tbzip -W : Verify a archive file -r : update or add file or directory in already existed .tar file","title":"Tar"},{"location":"tar/#tar","text":"This is how you make a \"zip\" file as a SysAd. tar cvfz file.tar folder_to_zip Extracting a gzip tar Archive *.tar.gz using option -xvzf : This command extracts files from tar archived file.tar.gz files $ tar -xvzf file.tar.gz -C folder_to_put_in Syntax: tar [options] [archive-file] [file or directory to be archived] Options: -c : Creates Archive -x : Extract the archive -f : creates archive with given filename -t : displays or lists files in archived file -u : archives and adds to an existing archive file -v : Displays Verbose Information -A : Concatenates the archive files -z : zip, tells tar command that creates tar file using gzip -j : filter archive tar file using tbzip -W : Verify a archive file -r : update or add file or directory in already existed .tar file","title":"tar"},{"location":"slides/","text":"Create Slide Presentations This document talks about making simple slide presentations Use Slidy This is quick and easy and only has pandoc as a dependency $ pandoc -t slidy -s habits.md -o habits.html Use Reveal.js wget https://github.com/hakimel/reveal.js/archive/master.tar.gz tar -xzvf master.tar.gz mv reveal.js-master reveal.js To provide local reveal assets to the slide deck, add a flag like -V revealjs-url=./reveal.js to your pandoc call. You can skip the above step by referencing the reveal.js URL when calling pandoc later. To do that, add the -V revealjs-url=https://revealjs.com option in your pandoc call. Note: in this case, you will require Internet access to show your slides, and that they will not be standalone. Now, create a file called myslides.md with your content. It may optionally include a YAML front matter for title, author, and date: --- author: John Doe title: Demo Slide date: June 21, 2017 --- # Foo ```python print(\"hello world\") ``` # Bar * test * test Use this command to produce your slideshow: pandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://revealjs.com You can use -V theme=$theme to set your theme as $theme , with the following options: beige black blood league moon night serif simple sky solarized white You can use -V transistion=$transition to set your theme as $transition , with the following options: cube","title":"Create Slide Presentations"},{"location":"slides/#create-slide-presentations","text":"This document talks about making simple slide presentations","title":"Create Slide Presentations"},{"location":"slides/#use-slidy","text":"This is quick and easy and only has pandoc as a dependency $ pandoc -t slidy -s habits.md -o habits.html","title":"Use Slidy"},{"location":"slides/#use-revealjs","text":"wget https://github.com/hakimel/reveal.js/archive/master.tar.gz tar -xzvf master.tar.gz mv reveal.js-master reveal.js To provide local reveal assets to the slide deck, add a flag like -V revealjs-url=./reveal.js to your pandoc call. You can skip the above step by referencing the reveal.js URL when calling pandoc later. To do that, add the -V revealjs-url=https://revealjs.com option in your pandoc call. Note: in this case, you will require Internet access to show your slides, and that they will not be standalone. Now, create a file called myslides.md with your content. It may optionally include a YAML front matter for title, author, and date: --- author: John Doe title: Demo Slide date: June 21, 2017 --- # Foo ```python print(\"hello world\") ``` # Bar * test * test Use this command to produce your slideshow: pandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://revealjs.com You can use -V theme=$theme to set your theme as $theme , with the following options: beige black blood league moon night serif simple sky solarized white You can use -V transistion=$transition to set your theme as $transition , with the following options: cube","title":"Use Reveal.js"},{"location":"slides/2019-01-CoopTV/","text":"CoopTV Android Beta-Testing Report General Findings The Developer is delivering within specifications The ACDI-content team has been timely in providing sample video material The Video on Demand service came out within expectations The performance of the Linear Video or TV function is poor and generally unacceptable Good Points The CoopTV Team is powerfully setup and is poised to execute well on management direction The Developer has shown adequate skill for the delivery of in-contract requirements Points for Improvement/ Compensation The average present Internet speed is inadequate for prolonged TV use. The ordinary 1-2 second delay every so often messes the timing of the TV . Proposed Solution : Video Pre-Caching The initial content (~25 videos) would need some (~25 videos) more for a good Video Service Launch Team Proposed Solution : Ask CDA and Coop Federations for seed content. Have ACDI as the official CoopTV Content Storage Partner , so that Coops can go straight and send videos their videos to be aired in CoopTV. Projections Learnings The current project is on-track to provide an acceptable Video on Demand experience but a poor TV experience at the moment. CoopTV , as an organization has talented and passionate individuals, but will find it very hard to manage video collection, monitoring and storage in the foreseeable time. Recommendations Alternatives for ACDI ACDI simply continues => ACDI Video-on-Demand App ACDI solves the LinearTV problem only => ACDI-TV ACDI solves the Content Management problem only => Coop Video-on-Demand App ACDI solves the LinearTV problem and the Content Management problem => CoopTV lives as envisioned Thank you for listening","title":"CoopTV Assessment"},{"location":"slides/2019-01-CoopTV/#cooptv-android-beta-testing-report","text":"","title":"CoopTV Android Beta-Testing Report"},{"location":"slides/2019-01-CoopTV/#general-findings","text":"The Developer is delivering within specifications The ACDI-content team has been timely in providing sample video material The Video on Demand service came out within expectations The performance of the Linear Video or TV function is poor and generally unacceptable","title":"General Findings"},{"location":"slides/2019-01-CoopTV/#good-points","text":"The CoopTV Team is powerfully setup and is poised to execute well on management direction The Developer has shown adequate skill for the delivery of in-contract requirements","title":"Good Points"},{"location":"slides/2019-01-CoopTV/#points-for-improvement-compensation","text":"The average present Internet speed is inadequate for prolonged TV use. The ordinary 1-2 second delay every so often messes the timing of the TV . Proposed Solution : Video Pre-Caching The initial content (~25 videos) would need some (~25 videos) more for a good Video Service Launch Team Proposed Solution : Ask CDA and Coop Federations for seed content. Have ACDI as the official CoopTV Content Storage Partner , so that Coops can go straight and send videos their videos to be aired in CoopTV.","title":"Points for Improvement/ Compensation"},{"location":"slides/2019-01-CoopTV/#projections","text":"","title":"Projections"},{"location":"slides/2019-01-CoopTV/#learnings","text":"The current project is on-track to provide an acceptable Video on Demand experience but a poor TV experience at the moment. CoopTV , as an organization has talented and passionate individuals, but will find it very hard to manage video collection, monitoring and storage in the foreseeable time.","title":"Learnings"},{"location":"slides/2019-01-CoopTV/#recommendations","text":"","title":"Recommendations"},{"location":"slides/2019-01-CoopTV/#alternatives-for-acdi","text":"ACDI simply continues => ACDI Video-on-Demand App ACDI solves the LinearTV problem only => ACDI-TV ACDI solves the Content Management problem only => Coop Video-on-Demand App ACDI solves the LinearTV problem and the Content Management problem => CoopTV lives as envisioned","title":"Alternatives for ACDI"},{"location":"slides/2019-01-CoopTV/#thank-you-for-listening","text":"","title":"Thank you for listening"},{"location":"slides/myslides/","text":"Email marketing ^1 Advantages and Disadvantages Pros Cons reach both mobile and pc spam filter blocks effective for info dissemination cheap Quick start Have a sign-up form in your website, collect emails and pilot test an email marketing campaign. Gmail and Yahoo gives ~500 free emails per day per account You can pay monthly : ^3 Or you can pay per use: ^3 If you pay, you get to easily track: ^6 Collecting Emails Have multiple subscribe CTA's (i.e. Calls to Action) Exchange something for their emails coupons convenience appeals rewards Disclose your Social Strength (e.g. number of people served, accounts, years up) Sustaining interest Have great content Encourage signing up and forwarding to friends Limit ads to around 10% Great headings (eg \"KATTSI is happy to announce a Destination...\" , \"This is perfect for...\" , \"Book now and you get ...\" , \"For a limited time only, save ....\") Invite past clients first and offer them a discount Offer early bird and regular pricing Send greeting cards Organizing the Mailing List Put everything on an Excel sheet Remove bad/ bouncing emails (~22.5% emails are deactivated yearly) Have Email Service Validation (so you're not marked as a spammer) Protect your brand by having an Opt-in Policy (6-month last touch expiry) Have Opt-out/ Unsubscribe links ^4 Email content Have subjects that are 6-10 words - source Connect with the client Segment by location (L V S) Segment by age (single, family, seniors) Interests (weekend warriors , corporate leave) Add photo/ logo to the email signature Have social media icons in the signature ^2 be CAN-SPAM compliant CAN-SPAM stands for Controlling the Assault of Non-Solicited Pornography and Marketing Act of 2003) Steps: Be Who You Say You Are Don't Lie (in the Subject Line) Tell recipients where you are (mailing address) Tell people how to Opt-Out (universal unsubscribe rule) Honor Opt-Out requests promptly (< 10 days) Monitor what others are doing on your behalf ^5 Do Spam testing Mailing Check Is Not Spam Mail-Tester Popular Email Blacklisting websites Barracuda Reputation Block List MXToolBox Invaluement MultiRBL Spamcop Spamhaus SURBL If you are blacklisted, follow the instructions to fix the problems and remove your IP address from the list Email Validators Prevention is better than cure, so here are services that check if the emails in your list are still active, so that you don't get accused of spamming. ^3 Tools we can practice on MS Excel Google Website Optimizer (free) Open Refine (formerly Google Refine)","title":"Demo Slide"},{"location":"slides/myslides/#email-marketing","text":"^1","title":"Email marketing"},{"location":"slides/myslides/#advantages-and-disadvantages","text":"Pros Cons reach both mobile and pc spam filter blocks effective for info dissemination cheap","title":"Advantages and Disadvantages"},{"location":"slides/myslides/#quick-start","text":"Have a sign-up form in your website, collect emails and pilot test an email marketing campaign. Gmail and Yahoo gives ~500 free emails per day per account You can pay monthly : ^3 Or you can pay per use: ^3 If you pay, you get to easily track: ^6","title":"Quick start"},{"location":"slides/myslides/#collecting-emails","text":"Have multiple subscribe CTA's (i.e. Calls to Action) Exchange something for their emails coupons convenience appeals rewards Disclose your Social Strength (e.g. number of people served, accounts, years up)","title":"Collecting Emails"},{"location":"slides/myslides/#sustaining-interest","text":"Have great content Encourage signing up and forwarding to friends Limit ads to around 10% Great headings (eg \"KATTSI is happy to announce a Destination...\" , \"This is perfect for...\" , \"Book now and you get ...\" , \"For a limited time only, save ....\") Invite past clients first and offer them a discount Offer early bird and regular pricing Send greeting cards","title":"Sustaining interest"},{"location":"slides/myslides/#organizing-the-mailing-list","text":"Put everything on an Excel sheet Remove bad/ bouncing emails (~22.5% emails are deactivated yearly) Have Email Service Validation (so you're not marked as a spammer) Protect your brand by having an Opt-in Policy (6-month last touch expiry) Have Opt-out/ Unsubscribe links ^4","title":"Organizing the Mailing List"},{"location":"slides/myslides/#email-content","text":"Have subjects that are 6-10 words - source Connect with the client Segment by location (L V S) Segment by age (single, family, seniors) Interests (weekend warriors , corporate leave) Add photo/ logo to the email signature Have social media icons in the signature ^2","title":"Email content"},{"location":"slides/myslides/#be-can-spam-compliant","text":"CAN-SPAM stands for Controlling the Assault of Non-Solicited Pornography and Marketing Act of 2003) Steps: Be Who You Say You Are Don't Lie (in the Subject Line) Tell recipients where you are (mailing address) Tell people how to Opt-Out (universal unsubscribe rule) Honor Opt-Out requests promptly (< 10 days) Monitor what others are doing on your behalf ^5","title":"be CAN-SPAM compliant"},{"location":"slides/myslides/#do-spam-testing","text":"Mailing Check Is Not Spam Mail-Tester","title":"Do Spam testing"},{"location":"slides/myslides/#popular-email-blacklisting-websites","text":"Barracuda Reputation Block List MXToolBox Invaluement MultiRBL Spamcop Spamhaus SURBL If you are blacklisted, follow the instructions to fix the problems and remove your IP address from the list","title":"Popular Email Blacklisting websites"},{"location":"slides/myslides/#email-validators","text":"Prevention is better than cure, so here are services that check if the emails in your list are still active, so that you don't get accused of spamming. ^3","title":"Email Validators"},{"location":"slides/myslides/#tools-we-can-practice-on","text":"MS Excel Google Website Optimizer (free) Open Refine (formerly Google Refine)","title":"Tools we can practice on"},{"location":"up-ic-screens/test/","text":"","title":"Test"}]}